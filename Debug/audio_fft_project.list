
audio_fft_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a160  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001d618  0800a2f0  0800a2f0  0000b2f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08027908  08027908  00029460  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08027908  08027908  00028908  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08027910  08027910  00029460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08027910  08027910  00028910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08027914  08027914  00028914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000460  20000000  08027918  00029000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00029460  2**0
                  CONTENTS
 10 .bss          00004e9c  20000460  20000460  00029460  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200052fc  200052fc  00029460  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00029460  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022c71  00000000  00000000  00029490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004b6d  00000000  00000000  0004c101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001880  00000000  00000000  00050c70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000124e  00000000  00000000  000524f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c2c  00000000  00000000  0005373e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b248  00000000  00000000  0005836a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000daee9  00000000  00000000  000735b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000137  00000000  00000000  0014e49b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000069ac  00000000  00000000  0014e5d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  00154f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    00000607  00000000  00000000  00154feb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 00000060  00000000  00000000  001555f2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a2d8 	.word	0x0800a2d8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	0800a2d8 	.word	0x0800a2d8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001e4:	f000 b988 	b.w	80004f8 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	468e      	mov	lr, r1
 8000208:	4604      	mov	r4, r0
 800020a:	4688      	mov	r8, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14a      	bne.n	80002a6 <__udivmoddi4+0xa6>
 8000210:	428a      	cmp	r2, r1
 8000212:	4617      	mov	r7, r2
 8000214:	d962      	bls.n	80002dc <__udivmoddi4+0xdc>
 8000216:	fab2 f682 	clz	r6, r2
 800021a:	b14e      	cbz	r6, 8000230 <__udivmoddi4+0x30>
 800021c:	f1c6 0320 	rsb	r3, r6, #32
 8000220:	fa01 f806 	lsl.w	r8, r1, r6
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	40b7      	lsls	r7, r6
 800022a:	ea43 0808 	orr.w	r8, r3, r8
 800022e:	40b4      	lsls	r4, r6
 8000230:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000234:	fa1f fc87 	uxth.w	ip, r7
 8000238:	fbb8 f1fe 	udiv	r1, r8, lr
 800023c:	0c23      	lsrs	r3, r4, #16
 800023e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000242:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000246:	fb01 f20c 	mul.w	r2, r1, ip
 800024a:	429a      	cmp	r2, r3
 800024c:	d909      	bls.n	8000262 <__udivmoddi4+0x62>
 800024e:	18fb      	adds	r3, r7, r3
 8000250:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000254:	f080 80ea 	bcs.w	800042c <__udivmoddi4+0x22c>
 8000258:	429a      	cmp	r2, r3
 800025a:	f240 80e7 	bls.w	800042c <__udivmoddi4+0x22c>
 800025e:	3902      	subs	r1, #2
 8000260:	443b      	add	r3, r7
 8000262:	1a9a      	subs	r2, r3, r2
 8000264:	b2a3      	uxth	r3, r4
 8000266:	fbb2 f0fe 	udiv	r0, r2, lr
 800026a:	fb0e 2210 	mls	r2, lr, r0, r2
 800026e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000272:	fb00 fc0c 	mul.w	ip, r0, ip
 8000276:	459c      	cmp	ip, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x8e>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000280:	f080 80d6 	bcs.w	8000430 <__udivmoddi4+0x230>
 8000284:	459c      	cmp	ip, r3
 8000286:	f240 80d3 	bls.w	8000430 <__udivmoddi4+0x230>
 800028a:	443b      	add	r3, r7
 800028c:	3802      	subs	r0, #2
 800028e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000292:	eba3 030c 	sub.w	r3, r3, ip
 8000296:	2100      	movs	r1, #0
 8000298:	b11d      	cbz	r5, 80002a2 <__udivmoddi4+0xa2>
 800029a:	40f3      	lsrs	r3, r6
 800029c:	2200      	movs	r2, #0
 800029e:	e9c5 3200 	strd	r3, r2, [r5]
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d905      	bls.n	80002b6 <__udivmoddi4+0xb6>
 80002aa:	b10d      	cbz	r5, 80002b0 <__udivmoddi4+0xb0>
 80002ac:	e9c5 0100 	strd	r0, r1, [r5]
 80002b0:	2100      	movs	r1, #0
 80002b2:	4608      	mov	r0, r1
 80002b4:	e7f5      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002b6:	fab3 f183 	clz	r1, r3
 80002ba:	2900      	cmp	r1, #0
 80002bc:	d146      	bne.n	800034c <__udivmoddi4+0x14c>
 80002be:	4573      	cmp	r3, lr
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xc8>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 8105 	bhi.w	80004d2 <__udivmoddi4+0x2d2>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4690      	mov	r8, r2
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d0e5      	beq.n	80002a2 <__udivmoddi4+0xa2>
 80002d6:	e9c5 4800 	strd	r4, r8, [r5]
 80002da:	e7e2      	b.n	80002a2 <__udivmoddi4+0xa2>
 80002dc:	2a00      	cmp	r2, #0
 80002de:	f000 8090 	beq.w	8000402 <__udivmoddi4+0x202>
 80002e2:	fab2 f682 	clz	r6, r2
 80002e6:	2e00      	cmp	r6, #0
 80002e8:	f040 80a4 	bne.w	8000434 <__udivmoddi4+0x234>
 80002ec:	1a8a      	subs	r2, r1, r2
 80002ee:	0c03      	lsrs	r3, r0, #16
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	b280      	uxth	r0, r0
 80002f6:	b2bc      	uxth	r4, r7
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb2 fcfe 	udiv	ip, r2, lr
 80002fe:	fb0e 221c 	mls	r2, lr, ip, r2
 8000302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000306:	fb04 f20c 	mul.w	r2, r4, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d907      	bls.n	800031e <__udivmoddi4+0x11e>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000314:	d202      	bcs.n	800031c <__udivmoddi4+0x11c>
 8000316:	429a      	cmp	r2, r3
 8000318:	f200 80e0 	bhi.w	80004dc <__udivmoddi4+0x2dc>
 800031c:	46c4      	mov	ip, r8
 800031e:	1a9b      	subs	r3, r3, r2
 8000320:	fbb3 f2fe 	udiv	r2, r3, lr
 8000324:	fb0e 3312 	mls	r3, lr, r2, r3
 8000328:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800032c:	fb02 f404 	mul.w	r4, r2, r4
 8000330:	429c      	cmp	r4, r3
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x144>
 8000334:	18fb      	adds	r3, r7, r3
 8000336:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x142>
 800033c:	429c      	cmp	r4, r3
 800033e:	f200 80ca 	bhi.w	80004d6 <__udivmoddi4+0x2d6>
 8000342:	4602      	mov	r2, r0
 8000344:	1b1b      	subs	r3, r3, r4
 8000346:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0x98>
 800034c:	f1c1 0620 	rsb	r6, r1, #32
 8000350:	408b      	lsls	r3, r1
 8000352:	fa22 f706 	lsr.w	r7, r2, r6
 8000356:	431f      	orrs	r7, r3
 8000358:	fa0e f401 	lsl.w	r4, lr, r1
 800035c:	fa20 f306 	lsr.w	r3, r0, r6
 8000360:	fa2e fe06 	lsr.w	lr, lr, r6
 8000364:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000368:	4323      	orrs	r3, r4
 800036a:	fa00 f801 	lsl.w	r8, r0, r1
 800036e:	fa1f fc87 	uxth.w	ip, r7
 8000372:	fbbe f0f9 	udiv	r0, lr, r9
 8000376:	0c1c      	lsrs	r4, r3, #16
 8000378:	fb09 ee10 	mls	lr, r9, r0, lr
 800037c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000380:	fb00 fe0c 	mul.w	lr, r0, ip
 8000384:	45a6      	cmp	lr, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x1a0>
 800038c:	193c      	adds	r4, r7, r4
 800038e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000392:	f080 809c 	bcs.w	80004ce <__udivmoddi4+0x2ce>
 8000396:	45a6      	cmp	lr, r4
 8000398:	f240 8099 	bls.w	80004ce <__udivmoddi4+0x2ce>
 800039c:	3802      	subs	r0, #2
 800039e:	443c      	add	r4, r7
 80003a0:	eba4 040e 	sub.w	r4, r4, lr
 80003a4:	fa1f fe83 	uxth.w	lr, r3
 80003a8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003ac:	fb09 4413 	mls	r4, r9, r3, r4
 80003b0:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003b4:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b8:	45a4      	cmp	ip, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x1ce>
 80003bc:	193c      	adds	r4, r7, r4
 80003be:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003c2:	f080 8082 	bcs.w	80004ca <__udivmoddi4+0x2ca>
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d97f      	bls.n	80004ca <__udivmoddi4+0x2ca>
 80003ca:	3b02      	subs	r3, #2
 80003cc:	443c      	add	r4, r7
 80003ce:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	fba0 ec02 	umull	lr, ip, r0, r2
 80003da:	4564      	cmp	r4, ip
 80003dc:	4673      	mov	r3, lr
 80003de:	46e1      	mov	r9, ip
 80003e0:	d362      	bcc.n	80004a8 <__udivmoddi4+0x2a8>
 80003e2:	d05f      	beq.n	80004a4 <__udivmoddi4+0x2a4>
 80003e4:	b15d      	cbz	r5, 80003fe <__udivmoddi4+0x1fe>
 80003e6:	ebb8 0203 	subs.w	r2, r8, r3
 80003ea:	eb64 0409 	sbc.w	r4, r4, r9
 80003ee:	fa04 f606 	lsl.w	r6, r4, r6
 80003f2:	fa22 f301 	lsr.w	r3, r2, r1
 80003f6:	431e      	orrs	r6, r3
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	e9c5 6400 	strd	r6, r4, [r5]
 80003fe:	2100      	movs	r1, #0
 8000400:	e74f      	b.n	80002a2 <__udivmoddi4+0xa2>
 8000402:	fbb1 fcf2 	udiv	ip, r1, r2
 8000406:	0c01      	lsrs	r1, r0, #16
 8000408:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 800040c:	b280      	uxth	r0, r0
 800040e:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000412:	463b      	mov	r3, r7
 8000414:	4638      	mov	r0, r7
 8000416:	463c      	mov	r4, r7
 8000418:	46b8      	mov	r8, r7
 800041a:	46be      	mov	lr, r7
 800041c:	2620      	movs	r6, #32
 800041e:	fbb1 f1f7 	udiv	r1, r1, r7
 8000422:	eba2 0208 	sub.w	r2, r2, r8
 8000426:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800042a:	e766      	b.n	80002fa <__udivmoddi4+0xfa>
 800042c:	4601      	mov	r1, r0
 800042e:	e718      	b.n	8000262 <__udivmoddi4+0x62>
 8000430:	4610      	mov	r0, r2
 8000432:	e72c      	b.n	800028e <__udivmoddi4+0x8e>
 8000434:	f1c6 0220 	rsb	r2, r6, #32
 8000438:	fa2e f302 	lsr.w	r3, lr, r2
 800043c:	40b7      	lsls	r7, r6
 800043e:	40b1      	lsls	r1, r6
 8000440:	fa20 f202 	lsr.w	r2, r0, r2
 8000444:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000448:	430a      	orrs	r2, r1
 800044a:	fbb3 f8fe 	udiv	r8, r3, lr
 800044e:	b2bc      	uxth	r4, r7
 8000450:	fb0e 3318 	mls	r3, lr, r8, r3
 8000454:	0c11      	lsrs	r1, r2, #16
 8000456:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045a:	fb08 f904 	mul.w	r9, r8, r4
 800045e:	40b0      	lsls	r0, r6
 8000460:	4589      	cmp	r9, r1
 8000462:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000466:	b280      	uxth	r0, r0
 8000468:	d93e      	bls.n	80004e8 <__udivmoddi4+0x2e8>
 800046a:	1879      	adds	r1, r7, r1
 800046c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000470:	d201      	bcs.n	8000476 <__udivmoddi4+0x276>
 8000472:	4589      	cmp	r9, r1
 8000474:	d81f      	bhi.n	80004b6 <__udivmoddi4+0x2b6>
 8000476:	eba1 0109 	sub.w	r1, r1, r9
 800047a:	fbb1 f9fe 	udiv	r9, r1, lr
 800047e:	fb09 f804 	mul.w	r8, r9, r4
 8000482:	fb0e 1119 	mls	r1, lr, r9, r1
 8000486:	b292      	uxth	r2, r2
 8000488:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800048c:	4542      	cmp	r2, r8
 800048e:	d229      	bcs.n	80004e4 <__udivmoddi4+0x2e4>
 8000490:	18ba      	adds	r2, r7, r2
 8000492:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000496:	d2c4      	bcs.n	8000422 <__udivmoddi4+0x222>
 8000498:	4542      	cmp	r2, r8
 800049a:	d2c2      	bcs.n	8000422 <__udivmoddi4+0x222>
 800049c:	f1a9 0102 	sub.w	r1, r9, #2
 80004a0:	443a      	add	r2, r7
 80004a2:	e7be      	b.n	8000422 <__udivmoddi4+0x222>
 80004a4:	45f0      	cmp	r8, lr
 80004a6:	d29d      	bcs.n	80003e4 <__udivmoddi4+0x1e4>
 80004a8:	ebbe 0302 	subs.w	r3, lr, r2
 80004ac:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004b0:	3801      	subs	r0, #1
 80004b2:	46e1      	mov	r9, ip
 80004b4:	e796      	b.n	80003e4 <__udivmoddi4+0x1e4>
 80004b6:	eba7 0909 	sub.w	r9, r7, r9
 80004ba:	4449      	add	r1, r9
 80004bc:	f1a8 0c02 	sub.w	ip, r8, #2
 80004c0:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c4:	fb09 f804 	mul.w	r8, r9, r4
 80004c8:	e7db      	b.n	8000482 <__udivmoddi4+0x282>
 80004ca:	4673      	mov	r3, lr
 80004cc:	e77f      	b.n	80003ce <__udivmoddi4+0x1ce>
 80004ce:	4650      	mov	r0, sl
 80004d0:	e766      	b.n	80003a0 <__udivmoddi4+0x1a0>
 80004d2:	4608      	mov	r0, r1
 80004d4:	e6fd      	b.n	80002d2 <__udivmoddi4+0xd2>
 80004d6:	443b      	add	r3, r7
 80004d8:	3a02      	subs	r2, #2
 80004da:	e733      	b.n	8000344 <__udivmoddi4+0x144>
 80004dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004e0:	443b      	add	r3, r7
 80004e2:	e71c      	b.n	800031e <__udivmoddi4+0x11e>
 80004e4:	4649      	mov	r1, r9
 80004e6:	e79c      	b.n	8000422 <__udivmoddi4+0x222>
 80004e8:	eba1 0109 	sub.w	r1, r1, r9
 80004ec:	46c4      	mov	ip, r8
 80004ee:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f2:	fb09 f804 	mul.w	r8, r9, r4
 80004f6:	e7c4      	b.n	8000482 <__udivmoddi4+0x282>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2120      	movs	r1, #32
 8000504:	4802      	ldr	r0, [pc, #8]	@ (8000510 <ILI9341_Select+0x14>)
 8000506:	f001 fe05 	bl	8002114 <HAL_GPIO_WritePin>
}
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40020800 	.word	0x40020800

08000514 <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2120      	movs	r1, #32
 800051c:	4802      	ldr	r0, [pc, #8]	@ (8000528 <ILI9341_Unselect+0x14>)
 800051e:	f001 fdf9 	bl	8002114 <HAL_GPIO_WritePin>
}
 8000522:	bf00      	nop
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40020800 	.word	0x40020800

0800052c <ILI9341_Reset>:

static void ILI9341_Reset() {
 800052c:	b580      	push	{r7, lr}
 800052e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2110      	movs	r1, #16
 8000534:	4806      	ldr	r0, [pc, #24]	@ (8000550 <ILI9341_Reset+0x24>)
 8000536:	f001 fded 	bl	8002114 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 800053a:	2005      	movs	r0, #5
 800053c:	f000 ffbc 	bl	80014b8 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000540:	2201      	movs	r2, #1
 8000542:	2110      	movs	r1, #16
 8000544:	4802      	ldr	r0, [pc, #8]	@ (8000550 <ILI9341_Reset+0x24>)
 8000546:	f001 fde5 	bl	8002114 <HAL_GPIO_WritePin>
}
 800054a:	bf00      	nop
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	40020800 	.word	0x40020800

08000554 <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b082      	sub	sp, #8
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2101      	movs	r1, #1
 8000562:	4807      	ldr	r0, [pc, #28]	@ (8000580 <ILI9341_WriteCommand+0x2c>)
 8000564:	f001 fdd6 	bl	8002114 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000568:	1df9      	adds	r1, r7, #7
 800056a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800056e:	2201      	movs	r2, #1
 8000570:	4804      	ldr	r0, [pc, #16]	@ (8000584 <ILI9341_WriteCommand+0x30>)
 8000572:	f003 fa0c 	bl	800398e <HAL_SPI_Transmit>
}
 8000576:	bf00      	nop
 8000578:	3708      	adds	r7, #8
 800057a:	46bd      	mov	sp, r7
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020400 	.word	0x40020400
 8000584:	2000052c 	.word	0x2000052c

08000588 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000588:	b580      	push	{r7, lr}
 800058a:	b084      	sub	sp, #16
 800058c:	af00      	add	r7, sp, #0
 800058e:	6078      	str	r0, [r7, #4]
 8000590:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000592:	2201      	movs	r2, #1
 8000594:	2101      	movs	r1, #1
 8000596:	4811      	ldr	r0, [pc, #68]	@ (80005dc <ILI9341_WriteData+0x54>)
 8000598:	f001 fdbc 	bl	8002114 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 800059c:	e015      	b.n	80005ca <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80005a4:	bf28      	it	cs
 80005a6:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80005aa:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 80005ac:	89fa      	ldrh	r2, [r7, #14]
 80005ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005b2:	6879      	ldr	r1, [r7, #4]
 80005b4:	480a      	ldr	r0, [pc, #40]	@ (80005e0 <ILI9341_WriteData+0x58>)
 80005b6:	f003 f9ea 	bl	800398e <HAL_SPI_Transmit>
        buff += chunk_size;
 80005ba:	89fb      	ldrh	r3, [r7, #14]
 80005bc:	687a      	ldr	r2, [r7, #4]
 80005be:	4413      	add	r3, r2
 80005c0:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 80005c2:	89fb      	ldrh	r3, [r7, #14]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 80005ca:	683b      	ldr	r3, [r7, #0]
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d1e6      	bne.n	800059e <ILI9341_WriteData+0x16>
    }
}
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	3710      	adds	r7, #16
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
 80005da:	bf00      	nop
 80005dc:	40020400 	.word	0x40020400
 80005e0:	2000052c 	.word	0x2000052c

080005e4 <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4604      	mov	r4, r0
 80005ec:	4608      	mov	r0, r1
 80005ee:	4611      	mov	r1, r2
 80005f0:	461a      	mov	r2, r3
 80005f2:	4623      	mov	r3, r4
 80005f4:	80fb      	strh	r3, [r7, #6]
 80005f6:	4603      	mov	r3, r0
 80005f8:	80bb      	strh	r3, [r7, #4]
 80005fa:	460b      	mov	r3, r1
 80005fc:	807b      	strh	r3, [r7, #2]
 80005fe:	4613      	mov	r3, r2
 8000600:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000602:	202a      	movs	r0, #42	@ 0x2a
 8000604:	f7ff ffa6 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	0a1b      	lsrs	r3, r3, #8
 800060c:	b29b      	uxth	r3, r3
 800060e:	b2db      	uxtb	r3, r3
 8000610:	733b      	strb	r3, [r7, #12]
 8000612:	88fb      	ldrh	r3, [r7, #6]
 8000614:	b2db      	uxtb	r3, r3
 8000616:	737b      	strb	r3, [r7, #13]
 8000618:	887b      	ldrh	r3, [r7, #2]
 800061a:	0a1b      	lsrs	r3, r3, #8
 800061c:	b29b      	uxth	r3, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	73bb      	strb	r3, [r7, #14]
 8000622:	887b      	ldrh	r3, [r7, #2]
 8000624:	b2db      	uxtb	r3, r3
 8000626:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2104      	movs	r1, #4
 800062e:	4618      	mov	r0, r3
 8000630:	f7ff ffaa 	bl	8000588 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000634:	202b      	movs	r0, #43	@ 0x2b
 8000636:	f7ff ff8d 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 800063a:	88bb      	ldrh	r3, [r7, #4]
 800063c:	0a1b      	lsrs	r3, r3, #8
 800063e:	b29b      	uxth	r3, r3
 8000640:	b2db      	uxtb	r3, r3
 8000642:	723b      	strb	r3, [r7, #8]
 8000644:	88bb      	ldrh	r3, [r7, #4]
 8000646:	b2db      	uxtb	r3, r3
 8000648:	727b      	strb	r3, [r7, #9]
 800064a:	883b      	ldrh	r3, [r7, #0]
 800064c:	0a1b      	lsrs	r3, r3, #8
 800064e:	b29b      	uxth	r3, r3
 8000650:	b2db      	uxtb	r3, r3
 8000652:	72bb      	strb	r3, [r7, #10]
 8000654:	883b      	ldrh	r3, [r7, #0]
 8000656:	b2db      	uxtb	r3, r3
 8000658:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 800065a:	f107 0308 	add.w	r3, r7, #8
 800065e:	2104      	movs	r1, #4
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff ff91 	bl	8000588 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000666:	202c      	movs	r0, #44	@ 0x2c
 8000668:	f7ff ff74 	bl	8000554 <ILI9341_WriteCommand>
}
 800066c:	bf00      	nop
 800066e:	3714      	adds	r7, #20
 8000670:	46bd      	mov	sp, r7
 8000672:	bd90      	pop	{r4, r7, pc}

08000674 <ILI9341_Init>:

void ILI9341_Init() {
 8000674:	b590      	push	{r4, r7, lr}
 8000676:	b09b      	sub	sp, #108	@ 0x6c
 8000678:	af00      	add	r7, sp, #0
    ILI9341_Select();
 800067a:	f7ff ff3f 	bl	80004fc <ILI9341_Select>
    ILI9341_Reset();
 800067e:	f7ff ff55 	bl	800052c <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff ff66 	bl	8000554 <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000688:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800068c:	f000 ff14 	bl	80014b8 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000690:	20cb      	movs	r0, #203	@ 0xcb
 8000692:	f7ff ff5f 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000696:	4a87      	ldr	r2, [pc, #540]	@ (80008b4 <ILI9341_Init+0x240>)
 8000698:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800069c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80006a0:	6018      	str	r0, [r3, #0]
 80006a2:	3304      	adds	r3, #4
 80006a4:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006a6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80006aa:	2105      	movs	r1, #5
 80006ac:	4618      	mov	r0, r3
 80006ae:	f7ff ff6b 	bl	8000588 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 80006b2:	20cf      	movs	r0, #207	@ 0xcf
 80006b4:	f7ff ff4e 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 80006b8:	4a7f      	ldr	r2, [pc, #508]	@ (80008b8 <ILI9341_Init+0x244>)
 80006ba:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006be:	6812      	ldr	r2, [r2, #0]
 80006c0:	4611      	mov	r1, r2
 80006c2:	8019      	strh	r1, [r3, #0]
 80006c4:	3302      	adds	r3, #2
 80006c6:	0c12      	lsrs	r2, r2, #16
 80006c8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006ca:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80006ce:	2103      	movs	r1, #3
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff ff59 	bl	8000588 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80006d6:	20e8      	movs	r0, #232	@ 0xe8
 80006d8:	f7ff ff3c 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80006dc:	4a77      	ldr	r2, [pc, #476]	@ (80008bc <ILI9341_Init+0x248>)
 80006de:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006e2:	6812      	ldr	r2, [r2, #0]
 80006e4:	4611      	mov	r1, r2
 80006e6:	8019      	strh	r1, [r3, #0]
 80006e8:	3302      	adds	r3, #2
 80006ea:	0c12      	lsrs	r2, r2, #16
 80006ec:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80006ee:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80006f2:	2103      	movs	r1, #3
 80006f4:	4618      	mov	r0, r3
 80006f6:	f7ff ff47 	bl	8000588 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80006fa:	20ea      	movs	r0, #234	@ 0xea
 80006fc:	f7ff ff2a 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000700:	2300      	movs	r3, #0
 8000702:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000706:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800070a:	2102      	movs	r1, #2
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff3b 	bl	8000588 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000712:	20ed      	movs	r0, #237	@ 0xed
 8000714:	f7ff ff1e 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000718:	4b69      	ldr	r3, [pc, #420]	@ (80008c0 <ILI9341_Init+0x24c>)
 800071a:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 800071c:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000720:	2104      	movs	r1, #4
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ff30 	bl	8000588 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000728:	20f7      	movs	r0, #247	@ 0xf7
 800072a:	f7ff ff13 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 800072e:	2320      	movs	r3, #32
 8000730:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000734:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000738:	2101      	movs	r1, #1
 800073a:	4618      	mov	r0, r3
 800073c:	f7ff ff24 	bl	8000588 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000740:	20c0      	movs	r0, #192	@ 0xc0
 8000742:	f7ff ff07 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000746:	2323      	movs	r3, #35	@ 0x23
 8000748:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 800074c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000750:	2101      	movs	r1, #1
 8000752:	4618      	mov	r0, r3
 8000754:	f7ff ff18 	bl	8000588 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000758:	20c1      	movs	r0, #193	@ 0xc1
 800075a:	f7ff fefb 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 800075e:	2310      	movs	r3, #16
 8000760:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000764:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000768:	2101      	movs	r1, #1
 800076a:	4618      	mov	r0, r3
 800076c:	f7ff ff0c 	bl	8000588 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000770:	20c5      	movs	r0, #197	@ 0xc5
 8000772:	f7ff feef 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000776:	f642 033e 	movw	r3, #10302	@ 0x283e
 800077a:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 800077e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000782:	2102      	movs	r1, #2
 8000784:	4618      	mov	r0, r3
 8000786:	f7ff feff 	bl	8000588 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 800078a:	20c7      	movs	r0, #199	@ 0xc7
 800078c:	f7ff fee2 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000790:	2386      	movs	r3, #134	@ 0x86
 8000792:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000796:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 800079a:	2101      	movs	r1, #1
 800079c:	4618      	mov	r0, r3
 800079e:	f7ff fef3 	bl	8000588 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 80007a2:	2036      	movs	r0, #54	@ 0x36
 80007a4:	f7ff fed6 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 80007a8:	2348      	movs	r3, #72	@ 0x48
 80007aa:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 80007ae:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80007b2:	2101      	movs	r1, #1
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff fee7 	bl	8000588 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 80007ba:	203a      	movs	r0, #58	@ 0x3a
 80007bc:	f7ff feca 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 80007c0:	2355      	movs	r3, #85	@ 0x55
 80007c2:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 80007c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80007ca:	2101      	movs	r1, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f7ff fedb 	bl	8000588 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80007d2:	20b1      	movs	r0, #177	@ 0xb1
 80007d4:	f7ff febe 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80007d8:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80007dc:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80007de:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80007e2:	2102      	movs	r1, #2
 80007e4:	4618      	mov	r0, r3
 80007e6:	f7ff fecf 	bl	8000588 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80007ea:	20b6      	movs	r0, #182	@ 0xb6
 80007ec:	f7ff feb2 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80007f0:	4a34      	ldr	r2, [pc, #208]	@ (80008c4 <ILI9341_Init+0x250>)
 80007f2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80007f6:	6812      	ldr	r2, [r2, #0]
 80007f8:	4611      	mov	r1, r2
 80007fa:	8019      	strh	r1, [r3, #0]
 80007fc:	3302      	adds	r3, #2
 80007fe:	0c12      	lsrs	r2, r2, #16
 8000800:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000802:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000806:	2103      	movs	r1, #3
 8000808:	4618      	mov	r0, r3
 800080a:	f7ff febd 	bl	8000588 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 800080e:	20f2      	movs	r0, #242	@ 0xf2
 8000810:	f7ff fea0 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000814:	2300      	movs	r3, #0
 8000816:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 800081a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800081e:	2101      	movs	r1, #1
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff feb1 	bl	8000588 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000826:	2026      	movs	r0, #38	@ 0x26
 8000828:	f7ff fe94 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 800082c:	2301      	movs	r3, #1
 800082e:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8000832:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000836:	2101      	movs	r1, #1
 8000838:	4618      	mov	r0, r3
 800083a:	f7ff fea5 	bl	8000588 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 800083e:	20e0      	movs	r0, #224	@ 0xe0
 8000840:	f7ff fe88 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000844:	4b20      	ldr	r3, [pc, #128]	@ (80008c8 <ILI9341_Init+0x254>)
 8000846:	f107 0414 	add.w	r4, r7, #20
 800084a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800084c:	c407      	stmia	r4!, {r0, r1, r2}
 800084e:	8023      	strh	r3, [r4, #0]
 8000850:	3402      	adds	r4, #2
 8000852:	0c1b      	lsrs	r3, r3, #16
 8000854:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	210f      	movs	r1, #15
 800085c:	4618      	mov	r0, r3
 800085e:	f7ff fe93 	bl	8000588 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8000862:	20e1      	movs	r0, #225	@ 0xe1
 8000864:	f7ff fe76 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000868:	4b18      	ldr	r3, [pc, #96]	@ (80008cc <ILI9341_Init+0x258>)
 800086a:	1d3c      	adds	r4, r7, #4
 800086c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800086e:	c407      	stmia	r4!, {r0, r1, r2}
 8000870:	8023      	strh	r3, [r4, #0]
 8000872:	3402      	adds	r4, #2
 8000874:	0c1b      	lsrs	r3, r3, #16
 8000876:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000878:	1d3b      	adds	r3, r7, #4
 800087a:	210f      	movs	r1, #15
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe83 	bl	8000588 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8000882:	2011      	movs	r0, #17
 8000884:	f7ff fe66 	bl	8000554 <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000888:	2078      	movs	r0, #120	@ 0x78
 800088a:	f000 fe15 	bl	80014b8 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 800088e:	2029      	movs	r0, #41	@ 0x29
 8000890:	f7ff fe60 	bl	8000554 <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000894:	2036      	movs	r0, #54	@ 0x36
 8000896:	f7ff fe5d 	bl	8000554 <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 800089a:	2328      	movs	r3, #40	@ 0x28
 800089c:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 800089e:	463b      	mov	r3, r7
 80008a0:	2101      	movs	r1, #1
 80008a2:	4618      	mov	r0, r3
 80008a4:	f7ff fe70 	bl	8000588 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 80008a8:	f7ff fe34 	bl	8000514 <ILI9341_Unselect>
}
 80008ac:	bf00      	nop
 80008ae:	376c      	adds	r7, #108	@ 0x6c
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd90      	pop	{r4, r7, pc}
 80008b4:	0800a2f0 	.word	0x0800a2f0
 80008b8:	0800a2f8 	.word	0x0800a2f8
 80008bc:	0800a2fc 	.word	0x0800a2fc
 80008c0:	81120364 	.word	0x81120364
 80008c4:	0800a300 	.word	0x0800a300
 80008c8:	0800a304 	.word	0x0800a304
 80008cc:	0800a314 	.word	0x0800a314

080008d0 <ILI9341_FillRectangle>:
    }

    ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80008d0:	b590      	push	{r4, r7, lr}
 80008d2:	b085      	sub	sp, #20
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4604      	mov	r4, r0
 80008d8:	4608      	mov	r0, r1
 80008da:	4611      	mov	r1, r2
 80008dc:	461a      	mov	r2, r3
 80008de:	4623      	mov	r3, r4
 80008e0:	80fb      	strh	r3, [r7, #6]
 80008e2:	4603      	mov	r3, r0
 80008e4:	80bb      	strh	r3, [r7, #4]
 80008e6:	460b      	mov	r3, r1
 80008e8:	807b      	strh	r3, [r7, #2]
 80008ea:	4613      	mov	r3, r2
 80008ec:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80008ee:	88fb      	ldrh	r3, [r7, #6]
 80008f0:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80008f4:	d252      	bcs.n	800099c <ILI9341_FillRectangle+0xcc>
 80008f6:	88bb      	ldrh	r3, [r7, #4]
 80008f8:	2bef      	cmp	r3, #239	@ 0xef
 80008fa:	d84f      	bhi.n	800099c <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80008fc:	88fa      	ldrh	r2, [r7, #6]
 80008fe:	887b      	ldrh	r3, [r7, #2]
 8000900:	4413      	add	r3, r2
 8000902:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000906:	dd03      	ble.n	8000910 <ILI9341_FillRectangle+0x40>
 8000908:	88fb      	ldrh	r3, [r7, #6]
 800090a:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 800090e:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000910:	88ba      	ldrh	r2, [r7, #4]
 8000912:	883b      	ldrh	r3, [r7, #0]
 8000914:	4413      	add	r3, r2
 8000916:	2bf0      	cmp	r3, #240	@ 0xf0
 8000918:	dd03      	ble.n	8000922 <ILI9341_FillRectangle+0x52>
 800091a:	88bb      	ldrh	r3, [r7, #4]
 800091c:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000920:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000922:	f7ff fdeb 	bl	80004fc <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000926:	88fa      	ldrh	r2, [r7, #6]
 8000928:	887b      	ldrh	r3, [r7, #2]
 800092a:	4413      	add	r3, r2
 800092c:	b29b      	uxth	r3, r3
 800092e:	3b01      	subs	r3, #1
 8000930:	b29c      	uxth	r4, r3
 8000932:	88ba      	ldrh	r2, [r7, #4]
 8000934:	883b      	ldrh	r3, [r7, #0]
 8000936:	4413      	add	r3, r2
 8000938:	b29b      	uxth	r3, r3
 800093a:	3b01      	subs	r3, #1
 800093c:	b29b      	uxth	r3, r3
 800093e:	88b9      	ldrh	r1, [r7, #4]
 8000940:	88f8      	ldrh	r0, [r7, #6]
 8000942:	4622      	mov	r2, r4
 8000944:	f7ff fe4e 	bl	80005e4 <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000948:	8c3b      	ldrh	r3, [r7, #32]
 800094a:	0a1b      	lsrs	r3, r3, #8
 800094c:	b29b      	uxth	r3, r3
 800094e:	b2db      	uxtb	r3, r3
 8000950:	733b      	strb	r3, [r7, #12]
 8000952:	8c3b      	ldrh	r3, [r7, #32]
 8000954:	b2db      	uxtb	r3, r3
 8000956:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000958:	2201      	movs	r2, #1
 800095a:	2101      	movs	r1, #1
 800095c:	4811      	ldr	r0, [pc, #68]	@ (80009a4 <ILI9341_FillRectangle+0xd4>)
 800095e:	f001 fbd9 	bl	8002114 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000962:	883b      	ldrh	r3, [r7, #0]
 8000964:	80bb      	strh	r3, [r7, #4]
 8000966:	e013      	b.n	8000990 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000968:	887b      	ldrh	r3, [r7, #2]
 800096a:	80fb      	strh	r3, [r7, #6]
 800096c:	e00a      	b.n	8000984 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 800096e:	f107 010c 	add.w	r1, r7, #12
 8000972:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000976:	2202      	movs	r2, #2
 8000978:	480b      	ldr	r0, [pc, #44]	@ (80009a8 <ILI9341_FillRectangle+0xd8>)
 800097a:	f003 f808 	bl	800398e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	3b01      	subs	r3, #1
 8000982:	80fb      	strh	r3, [r7, #6]
 8000984:	88fb      	ldrh	r3, [r7, #6]
 8000986:	2b00      	cmp	r3, #0
 8000988:	d1f1      	bne.n	800096e <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 800098a:	88bb      	ldrh	r3, [r7, #4]
 800098c:	3b01      	subs	r3, #1
 800098e:	80bb      	strh	r3, [r7, #4]
 8000990:	88bb      	ldrh	r3, [r7, #4]
 8000992:	2b00      	cmp	r3, #0
 8000994:	d1e8      	bne.n	8000968 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8000996:	f7ff fdbd 	bl	8000514 <ILI9341_Unselect>
 800099a:	e000      	b.n	800099e <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 800099c:	bf00      	nop
}
 800099e:	3714      	adds	r7, #20
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd90      	pop	{r4, r7, pc}
 80009a4:	40020400 	.word	0x40020400
 80009a8:	2000052c 	.word	0x2000052c

080009ac <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b084      	sub	sp, #16
 80009b0:	af02      	add	r7, sp, #8
 80009b2:	4603      	mov	r3, r0
 80009b4:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80009b6:	88fb      	ldrh	r3, [r7, #6]
 80009b8:	9300      	str	r3, [sp, #0]
 80009ba:	23f0      	movs	r3, #240	@ 0xf0
 80009bc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80009c0:	2100      	movs	r1, #0
 80009c2:	2000      	movs	r0, #0
 80009c4:	f7ff ff84 	bl	80008d0 <ILI9341_FillRectangle>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80009d4:	f000 fd2e 	bl	8001434 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80009d8:	f000 f870 	bl	8000abc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80009dc:	f000 f978 	bl	8000cd0 <MX_GPIO_Init>
	MX_DMA_Init();
 80009e0:	f000 f956 	bl	8000c90 <MX_DMA_Init>
	MX_CRC_Init();
 80009e4:	f000 f8d4 	bl	8000b90 <MX_CRC_Init>
	MX_I2S2_Init();
 80009e8:	f000 f8ee 	bl	8000bc8 <MX_I2S2_Init>
	MX_PDM2PCM_Init();
 80009ec:	f006 ff44 	bl	8007878 <MX_PDM2PCM_Init>
	MX_SPI1_Init();
 80009f0:	f000 f918 	bl	8000c24 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* Display driver initialize */
	ILI9341_Init();
 80009f4:	f7ff fe3e 	bl	8000674 <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80009f8:	2000      	movs	r0, #0
 80009fa:	f7ff ffd7 	bl	80009ac <ILI9341_FillScreen>
	#ifdef TEST
	ILI9341_DrawImage(0, 0, 240, 240, (uint16_t*) test_img_240x240);
	#endif

	/* DMA initialize */
	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*) rx_buff, RX_BUFFER_SIZE);
 80009fe:	2280      	movs	r2, #128	@ 0x80
 8000a00:	491c      	ldr	r1, [pc, #112]	@ (8000a74 <main+0xa4>)
 8000a02:	481d      	ldr	r0, [pc, #116]	@ (8000a78 <main+0xa8>)
 8000a04:	f001 fce0 	bl	80023c8 <HAL_I2S_Receive_DMA>

	/* FFT initialize */
	arm_rfft_fast_init_f32(&fft_audio_instance, FFT_LENGTH);
 8000a08:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a0c:	481b      	ldr	r0, [pc, #108]	@ (8000a7c <main+0xac>)
 8000a0e:	f008 fef5 	bl	80097fc <arm_rfft_fast_init_f32>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000a12:	f003 fcbd 	bl	8004390 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of PCM_Mutex */
	PCM_MutexHandle = osMutexNew(&PCM_Mutex_attributes);
 8000a16:	481a      	ldr	r0, [pc, #104]	@ (8000a80 <main+0xb0>)
 8000a18:	f003 fe97 	bl	800474a <osMutexNew>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	4a19      	ldr	r2, [pc, #100]	@ (8000a84 <main+0xb4>)
 8000a20:	6013      	str	r3, [r2, #0]

	/* creation of FFT_MagMutex */
	FFT_MagMutexHandle = osMutexNew(&FFT_MagMutex_attributes);
 8000a22:	4819      	ldr	r0, [pc, #100]	@ (8000a88 <main+0xb8>)
 8000a24:	f003 fe91 	bl	800474a <osMutexNew>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4a18      	ldr	r2, [pc, #96]	@ (8000a8c <main+0xbc>)
 8000a2c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of AudioCapture */
	AudioCaptureHandle = osThreadNew(AudioCaptureTask, NULL,
 8000a2e:	4a18      	ldr	r2, [pc, #96]	@ (8000a90 <main+0xc0>)
 8000a30:	2100      	movs	r1, #0
 8000a32:	4818      	ldr	r0, [pc, #96]	@ (8000a94 <main+0xc4>)
 8000a34:	f003 fcf6 	bl	8004424 <osThreadNew>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	4a17      	ldr	r2, [pc, #92]	@ (8000a98 <main+0xc8>)
 8000a3c:	6013      	str	r3, [r2, #0]
			&AudioCapture_attributes);

	/* creation of FFTProcessing */
	FFTProcessingHandle = osThreadNew(FFTProcessingTask, NULL,
 8000a3e:	4a17      	ldr	r2, [pc, #92]	@ (8000a9c <main+0xcc>)
 8000a40:	2100      	movs	r1, #0
 8000a42:	4817      	ldr	r0, [pc, #92]	@ (8000aa0 <main+0xd0>)
 8000a44:	f003 fcee 	bl	8004424 <osThreadNew>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a16      	ldr	r2, [pc, #88]	@ (8000aa4 <main+0xd4>)
 8000a4c:	6013      	str	r3, [r2, #0]
			&FFTProcessing_attributes);

	/* creation of DisplayOutput */
	DisplayOutputHandle = osThreadNew(DisplayOutputTask, NULL,
 8000a4e:	4a16      	ldr	r2, [pc, #88]	@ (8000aa8 <main+0xd8>)
 8000a50:	2100      	movs	r1, #0
 8000a52:	4816      	ldr	r0, [pc, #88]	@ (8000aac <main+0xdc>)
 8000a54:	f003 fce6 	bl	8004424 <osThreadNew>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <main+0xe0>)
 8000a5c:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of AudioReady */
	AudioReadyHandle = osEventFlagsNew(&AudioReady_attributes);
 8000a5e:	4815      	ldr	r0, [pc, #84]	@ (8000ab4 <main+0xe4>)
 8000a60:	f003 fd8d 	bl	800457e <osEventFlagsNew>
 8000a64:	4603      	mov	r3, r0
 8000a66:	4a14      	ldr	r2, [pc, #80]	@ (8000ab8 <main+0xe8>)
 8000a68:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000a6a:	f003 fcb5 	bl	80043d8 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000a6e:	bf00      	nop
 8000a70:	e7fd      	b.n	8000a6e <main+0x9e>
 8000a72:	bf00      	nop
 8000a74:	2000059c 	.word	0x2000059c
 8000a78:	20000484 	.word	0x20000484
 8000a7c:	2000069c 	.word	0x2000069c
 8000a80:	0800a400 	.word	0x0800a400
 8000a84:	20000590 	.word	0x20000590
 8000a88:	0800a410 	.word	0x0800a410
 8000a8c:	20000594 	.word	0x20000594
 8000a90:	0800a394 	.word	0x0800a394
 8000a94:	08000f11 	.word	0x08000f11
 8000a98:	20000584 	.word	0x20000584
 8000a9c:	0800a3b8 	.word	0x0800a3b8
 8000aa0:	08000f7d 	.word	0x08000f7d
 8000aa4:	20000588 	.word	0x20000588
 8000aa8:	0800a3dc 	.word	0x0800a3dc
 8000aac:	08000f8d 	.word	0x08000f8d
 8000ab0:	2000058c 	.word	0x2000058c
 8000ab4:	0800a420 	.word	0x0800a420
 8000ab8:	20000598 	.word	0x20000598

08000abc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b094      	sub	sp, #80	@ 0x50
 8000ac0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000ac2:	f107 0320 	add.w	r3, r7, #32
 8000ac6:	2230      	movs	r2, #48	@ 0x30
 8000ac8:	2100      	movs	r1, #0
 8000aca:	4618      	mov	r0, r3
 8000acc:	f008 ff22 	bl	8009914 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000ad0:	f107 030c 	add.w	r3, r7, #12
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	601a      	str	r2, [r3, #0]
 8000ad8:	605a      	str	r2, [r3, #4]
 8000ada:	609a      	str	r2, [r3, #8]
 8000adc:	60da      	str	r2, [r3, #12]
 8000ade:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	4b28      	ldr	r3, [pc, #160]	@ (8000b88 <SystemClock_Config+0xcc>)
 8000ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae8:	4a27      	ldr	r2, [pc, #156]	@ (8000b88 <SystemClock_Config+0xcc>)
 8000aea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aee:	6413      	str	r3, [r2, #64]	@ 0x40
 8000af0:	4b25      	ldr	r3, [pc, #148]	@ (8000b88 <SystemClock_Config+0xcc>)
 8000af2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000af8:	60bb      	str	r3, [r7, #8]
 8000afa:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000afc:	2300      	movs	r3, #0
 8000afe:	607b      	str	r3, [r7, #4]
 8000b00:	4b22      	ldr	r3, [pc, #136]	@ (8000b8c <SystemClock_Config+0xd0>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	4a21      	ldr	r2, [pc, #132]	@ (8000b8c <SystemClock_Config+0xd0>)
 8000b06:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b0a:	6013      	str	r3, [r2, #0]
 8000b0c:	4b1f      	ldr	r3, [pc, #124]	@ (8000b8c <SystemClock_Config+0xd0>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b14:	607b      	str	r3, [r7, #4]
 8000b16:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000b20:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b22:	2302      	movs	r3, #2
 8000b24:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b26:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b2c:	2308      	movs	r3, #8
 8000b2e:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8000b30:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000b34:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b36:	2302      	movs	r3, #2
 8000b38:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b3a:	2307      	movs	r3, #7
 8000b3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b3e:	f107 0320 	add.w	r3, r7, #32
 8000b42:	4618      	mov	r0, r3
 8000b44:	f002 f8a2 	bl	8002c8c <HAL_RCC_OscConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <SystemClock_Config+0x96>
		Error_Handler();
 8000b4e:	f000 fa37 	bl	8000fc0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b52:	230f      	movs	r3, #15
 8000b54:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b56:	2302      	movs	r3, #2
 8000b58:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000b5e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000b62:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b68:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 8000b6a:	f107 030c 	add.w	r3, r7, #12
 8000b6e:	2105      	movs	r1, #5
 8000b70:	4618      	mov	r0, r3
 8000b72:	f002 fb03 	bl	800317c <HAL_RCC_ClockConfig>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <SystemClock_Config+0xc4>
		Error_Handler();
 8000b7c:	f000 fa20 	bl	8000fc0 <Error_Handler>
	}
}
 8000b80:	bf00      	nop
 8000b82:	3750      	adds	r7, #80	@ 0x50
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40007000 	.word	0x40007000

08000b90 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000b94:	4b0a      	ldr	r3, [pc, #40]	@ (8000bc0 <MX_CRC_Init+0x30>)
 8000b96:	4a0b      	ldr	r2, [pc, #44]	@ (8000bc4 <MX_CRC_Init+0x34>)
 8000b98:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 8000b9a:	4809      	ldr	r0, [pc, #36]	@ (8000bc0 <MX_CRC_Init+0x30>)
 8000b9c:	f000 fd92 	bl	80016c4 <HAL_CRC_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_CRC_Init+0x1a>
		Error_Handler();
 8000ba6:	f000 fa0b 	bl	8000fc0 <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8000baa:	4b05      	ldr	r3, [pc, #20]	@ (8000bc0 <MX_CRC_Init+0x30>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	689a      	ldr	r2, [r3, #8]
 8000bb0:	4b03      	ldr	r3, [pc, #12]	@ (8000bc0 <MX_CRC_Init+0x30>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f042 0201 	orr.w	r2, r2, #1
 8000bb8:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	2000047c 	.word	0x2000047c
 8000bc4:	40023000 	.word	0x40023000

08000bc8 <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 8000bcc:	4b13      	ldr	r3, [pc, #76]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000bce:	4a14      	ldr	r2, [pc, #80]	@ (8000c20 <MX_I2S2_Init+0x58>)
 8000bd0:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8000bd2:	4b12      	ldr	r3, [pc, #72]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000bd4:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000bd8:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000bda:	4b10      	ldr	r3, [pc, #64]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000be0:	4b0e      	ldr	r3, [pc, #56]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000be6:	4b0d      	ldr	r3, [pc, #52]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8000bec:	4b0b      	ldr	r3, [pc, #44]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000bee:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8000bf2:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000bf4:	4b09      	ldr	r3, [pc, #36]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000bfa:	4b08      	ldr	r3, [pc, #32]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 8000c06:	4805      	ldr	r0, [pc, #20]	@ (8000c1c <MX_I2S2_Init+0x54>)
 8000c08:	f001 fa9e 	bl	8002148 <HAL_I2S_Init>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <MX_I2S2_Init+0x4e>
		Error_Handler();
 8000c12:	f000 f9d5 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	20000484 	.word	0x20000484
 8000c20:	40003800 	.word	0x40003800

08000c24 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000c28:	4b17      	ldr	r3, [pc, #92]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c2a:	4a18      	ldr	r2, [pc, #96]	@ (8000c8c <MX_SPI1_Init+0x68>)
 8000c2c:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c2e:	4b16      	ldr	r3, [pc, #88]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c30:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c34:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c36:	4b14      	ldr	r3, [pc, #80]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c3c:	4b12      	ldr	r3, [pc, #72]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c42:	4b11      	ldr	r3, [pc, #68]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c48:	4b0f      	ldr	r3, [pc, #60]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c50:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c54:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c56:	4b0c      	ldr	r3, [pc, #48]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c58:	2210      	movs	r2, #16
 8000c5a:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c62:	4b09      	ldr	r3, [pc, #36]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c68:	4b07      	ldr	r3, [pc, #28]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000c6e:	4b06      	ldr	r3, [pc, #24]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c70:	220a      	movs	r2, #10
 8000c72:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8000c74:	4804      	ldr	r0, [pc, #16]	@ (8000c88 <MX_SPI1_Init+0x64>)
 8000c76:	f002 fe01 	bl	800387c <HAL_SPI_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_SPI1_Init+0x60>
		Error_Handler();
 8000c80:	f000 f99e 	bl	8000fc0 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	bd80      	pop	{r7, pc}
 8000c88:	2000052c 	.word	0x2000052c
 8000c8c:	40013000 	.word	0x40013000

08000c90 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b082      	sub	sp, #8
 8000c94:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	607b      	str	r3, [r7, #4]
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000ccc <MX_DMA_Init+0x3c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8000ccc <MX_DMA_Init+0x3c>)
 8000ca0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ca4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ca6:	4b09      	ldr	r3, [pc, #36]	@ (8000ccc <MX_DMA_Init+0x3c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000caa:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2105      	movs	r1, #5
 8000cb6:	200e      	movs	r0, #14
 8000cb8:	f000 fcda 	bl	8001670 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000cbc:	200e      	movs	r0, #14
 8000cbe:	f000 fcf3 	bl	80016a8 <HAL_NVIC_EnableIRQ>

}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	40023800 	.word	0x40023800

08000cd0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b08a      	sub	sp, #40	@ 0x28
 8000cd4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	2200      	movs	r2, #0
 8000cdc:	601a      	str	r2, [r3, #0]
 8000cde:	605a      	str	r2, [r3, #4]
 8000ce0:	609a      	str	r2, [r3, #8]
 8000ce2:	60da      	str	r2, [r3, #12]
 8000ce4:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	4b4e      	ldr	r3, [pc, #312]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cee:	4a4d      	ldr	r2, [pc, #308]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000cf0:	f043 0304 	orr.w	r3, r3, #4
 8000cf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cf6:	4b4b      	ldr	r3, [pc, #300]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	f003 0304 	and.w	r3, r3, #4
 8000cfe:	613b      	str	r3, [r7, #16]
 8000d00:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000d02:	2300      	movs	r3, #0
 8000d04:	60fb      	str	r3, [r7, #12]
 8000d06:	4b47      	ldr	r3, [pc, #284]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d0a:	4a46      	ldr	r2, [pc, #280]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d10:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d12:	4b44      	ldr	r3, [pc, #272]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d1a:	60fb      	str	r3, [r7, #12]
 8000d1c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d1e:	2300      	movs	r3, #0
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	4b40      	ldr	r3, [pc, #256]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d26:	4a3f      	ldr	r2, [pc, #252]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d28:	f043 0301 	orr.w	r3, r3, #1
 8000d2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	f003 0301 	and.w	r3, r3, #1
 8000d36:	60bb      	str	r3, [r7, #8]
 8000d38:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	4b39      	ldr	r3, [pc, #228]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d42:	4a38      	ldr	r2, [pc, #224]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d44:	f043 0302 	orr.w	r3, r3, #2
 8000d48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d4a:	4b36      	ldr	r3, [pc, #216]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	f003 0302 	and.w	r3, r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
 8000d54:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	603b      	str	r3, [r7, #0]
 8000d5a:	4b32      	ldr	r3, [pc, #200]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5e:	4a31      	ldr	r2, [pc, #196]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d60:	f043 0308 	orr.w	r3, r3, #8
 8000d64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d66:	4b2f      	ldr	r3, [pc, #188]	@ (8000e24 <MX_GPIO_Init+0x154>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	f003 0308 	and.w	r3, r3, #8
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SPI1_RES_Pin | SPI1_CS_Pin, GPIO_PIN_RESET);
 8000d72:	2200      	movs	r2, #0
 8000d74:	2130      	movs	r1, #48	@ 0x30
 8000d76:	482c      	ldr	r0, [pc, #176]	@ (8000e28 <MX_GPIO_Init+0x158>)
 8000d78:	f001 f9cc 	bl	8002114 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, GPIO_PIN_RESET);
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	2101      	movs	r1, #1
 8000d80:	482a      	ldr	r0, [pc, #168]	@ (8000e2c <MX_GPIO_Init+0x15c>)
 8000d82:	f001 f9c7 	bl	8002114 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 8000d86:	2200      	movs	r2, #0
 8000d88:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8000d8c:	4828      	ldr	r0, [pc, #160]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000d8e:	f001 f9c1 	bl	8002114 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000d92:	2301      	movs	r3, #1
 8000d94:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d96:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d9a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000da0:	f107 0314 	add.w	r3, r7, #20
 8000da4:	4619      	mov	r1, r3
 8000da6:	4823      	ldr	r0, [pc, #140]	@ (8000e34 <MX_GPIO_Init+0x164>)
 8000da8:	f001 f818 	bl	8001ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_RES_Pin SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_RES_Pin | SPI1_CS_Pin;
 8000dac:	2330      	movs	r3, #48	@ 0x30
 8000dae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db0:	2301      	movs	r3, #1
 8000db2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db4:	2300      	movs	r3, #0
 8000db6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db8:	2300      	movs	r3, #0
 8000dba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dbc:	f107 0314 	add.w	r3, r7, #20
 8000dc0:	4619      	mov	r1, r3
 8000dc2:	4819      	ldr	r0, [pc, #100]	@ (8000e28 <MX_GPIO_Init+0x158>)
 8000dc4:	f001 f80a 	bl	8001ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_DC_Pin */
	GPIO_InitStruct.Pin = SPI1_DC_Pin;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dcc:	2301      	movs	r3, #1
 8000dce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 8000dd8:	f107 0314 	add.w	r3, r7, #20
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4813      	ldr	r0, [pc, #76]	@ (8000e2c <MX_GPIO_Init+0x15c>)
 8000de0:	f000 fffc 	bl	8001ddc <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8000de4:	2304      	movs	r3, #4
 8000de6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	480d      	ldr	r0, [pc, #52]	@ (8000e2c <MX_GPIO_Init+0x15c>)
 8000df8:	f000 fff0 	bl	8001ddc <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 8000dfc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e00:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e02:	2301      	movs	r3, #1
 8000e04:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e06:	2300      	movs	r3, #0
 8000e08:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e0e:	f107 0314 	add.w	r3, r7, #20
 8000e12:	4619      	mov	r1, r3
 8000e14:	4806      	ldr	r0, [pc, #24]	@ (8000e30 <MX_GPIO_Init+0x160>)
 8000e16:	f000 ffe1 	bl	8001ddc <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e1a:	bf00      	nop
 8000e1c:	3728      	adds	r7, #40	@ 0x28
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40020800 	.word	0x40020800
 8000e2c:	40020400 	.word	0x40020400
 8000e30:	40020c00 	.word	0x40020c00
 8000e34:	40020000 	.word	0x40020000

08000e38 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	/* Only when the interrupt is triggered by I2S connected to the microphone */
	if (hi2s->Instance == SPI2) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a06      	ldr	r2, [pc, #24]	@ (8000e60 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d105      	bne.n	8000e56 <HAL_I2S_RxHalfCpltCallback+0x1e>
		osEventFlagsSet(AudioReadyHandle, AUDIO_FLAG_HALF);
 8000e4a:	4b06      	ldr	r3, [pc, #24]	@ (8000e64 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2101      	movs	r1, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f003 fbd3 	bl	80045fc <osEventFlagsSet>
	}
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40003800 	.word	0x40003800
 8000e64:	20000598 	.word	0x20000598

08000e68 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	/* Only when the interrupt is triggered by I2S connected to the microphone */
	if (hi2s->Instance == SPI2) {
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a06      	ldr	r2, [pc, #24]	@ (8000e90 <HAL_I2S_RxCpltCallback+0x28>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d105      	bne.n	8000e86 <HAL_I2S_RxCpltCallback+0x1e>
		osEventFlagsSet(AudioReadyHandle, AUDIO_FLAG_FULL);
 8000e7a:	4b06      	ldr	r3, [pc, #24]	@ (8000e94 <HAL_I2S_RxCpltCallback+0x2c>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 fbbb 	bl	80045fc <osEventFlagsSet>
	}
}
 8000e86:	bf00      	nop
 8000e88:	3708      	adds	r7, #8
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40003800 	.word	0x40003800
 8000e94:	20000598 	.word	0x20000598

08000e98 <pdm_to_pcm>:

void pdm_to_pcm(uint16_t *rx_buff, uint16_t *dec_buff,
		Buffer_offset buffer_offset) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b086      	sub	sp, #24
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	60f8      	str	r0, [r7, #12]
 8000ea0:	60b9      	str	r1, [r7, #8]
 8000ea2:	4613      	mov	r3, r2
 8000ea4:	71fb      	strb	r3, [r7, #7]
	static uint16_t rx_swap_buff[RX_BUFFER_SIZE / 2] = { 0 };

	/* PDM swap endianness */
	for (uint32_t i = 0; i < RX_BUFFER_SIZE / 2; i++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	617b      	str	r3, [r7, #20]
 8000eaa:	e021      	b.n	8000ef0 <pdm_to_pcm+0x58>
		rx_swap_buff[i] = SWAP_UINT16(
 8000eac:	79fb      	ldrb	r3, [r7, #7]
 8000eae:	019b      	lsls	r3, r3, #6
 8000eb0:	461a      	mov	r2, r3
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	68fa      	ldr	r2, [r7, #12]
 8000eba:	4413      	add	r3, r2
 8000ebc:	881b      	ldrh	r3, [r3, #0]
 8000ebe:	b21b      	sxth	r3, r3
 8000ec0:	021b      	lsls	r3, r3, #8
 8000ec2:	b21a      	sxth	r2, r3
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	019b      	lsls	r3, r3, #6
 8000ec8:	4619      	mov	r1, r3
 8000eca:	697b      	ldr	r3, [r7, #20]
 8000ecc:	440b      	add	r3, r1
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	68f9      	ldr	r1, [r7, #12]
 8000ed2:	440b      	add	r3, r1
 8000ed4:	881b      	ldrh	r3, [r3, #0]
 8000ed6:	0a1b      	lsrs	r3, r3, #8
 8000ed8:	b29b      	uxth	r3, r3
 8000eda:	b21b      	sxth	r3, r3
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b21b      	sxth	r3, r3
 8000ee0:	b299      	uxth	r1, r3
 8000ee2:	4a09      	ldr	r2, [pc, #36]	@ (8000f08 <pdm_to_pcm+0x70>)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (uint32_t i = 0; i < RX_BUFFER_SIZE / 2; i++) {
 8000eea:	697b      	ldr	r3, [r7, #20]
 8000eec:	3301      	adds	r3, #1
 8000eee:	617b      	str	r3, [r7, #20]
 8000ef0:	697b      	ldr	r3, [r7, #20]
 8000ef2:	2b3f      	cmp	r3, #63	@ 0x3f
 8000ef4:	d9da      	bls.n	8000eac <pdm_to_pcm+0x14>
				rx_buff[i + (RX_BUFFER_SIZE / 2) * buffer_offset]);
	}

	/* PDM to PCM filter */
	PDM_Filter(rx_swap_buff, dec_buff, &PDM1_filter_handler);
 8000ef6:	4a05      	ldr	r2, [pc, #20]	@ (8000f0c <pdm_to_pcm+0x74>)
 8000ef8:	68b9      	ldr	r1, [r7, #8]
 8000efa:	4803      	ldr	r0, [pc, #12]	@ (8000f08 <pdm_to_pcm+0x70>)
 8000efc:	f008 fbcc 	bl	8009698 <PDM_Filter>
}
 8000f00:	bf00      	nop
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	200006b4 	.word	0x200006b4
 8000f0c:	20005168 	.word	0x20005168

08000f10 <AudioCaptureTask>:
 * @brief  Function implementing the AudioCapture thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_AudioCaptureTask */
void AudioCaptureTask(void *argument) {
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b08c      	sub	sp, #48	@ 0x30
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint16_t dec_buff[DEC_BUFFER_SIZE] = { 0 }; /* Audio buffer after decimation */
 8000f18:	f107 0308 	add.w	r3, r7, #8
 8000f1c:	2220      	movs	r2, #32
 8000f1e:	2100      	movs	r1, #0
 8000f20:	4618      	mov	r0, r3
 8000f22:	f008 fcf7 	bl	8009914 <memset>
	Buffer_offset buffer_offset = BUFFER_OFFSET_NONE;
 8000f26:	2300      	movs	r3, #0
 8000f28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	/* Infinite loop */
	for (;;) {
		uint32_t flags = osEventFlagsWait(AudioReadyHandle,
 8000f2c:	4b11      	ldr	r3, [pc, #68]	@ (8000f74 <AudioCaptureTask+0x64>)
 8000f2e:	6818      	ldr	r0, [r3, #0]
 8000f30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f34:	2200      	movs	r2, #0
 8000f36:	2103      	movs	r1, #3
 8000f38:	f003 fba2 	bl	8004680 <osEventFlagsWait>
 8000f3c:	62b8      	str	r0, [r7, #40]	@ 0x28
		AUDIO_FLAG_HALF | AUDIO_FLAG_FULL,
		osFlagsWaitAny, osWaitForever);

		if (flags & AUDIO_FLAG_HALF) {
 8000f3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f40:	f003 0301 	and.w	r3, r3, #1
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d003      	beq.n	8000f50 <AudioCaptureTask+0x40>
			buffer_offset = BUFFER_OFFSET_HALF;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8000f4e:	e007      	b.n	8000f60 <AudioCaptureTask+0x50>
		} else if (flags & AUDIO_FLAG_FULL) {
 8000f50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f52:	f003 0302 	and.w	r3, r3, #2
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d002      	beq.n	8000f60 <AudioCaptureTask+0x50>
			buffer_offset = BUFFER_OFFSET_NONE;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}

		pdm_to_pcm(rx_buff, dec_buff, buffer_offset);
 8000f60:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4803      	ldr	r0, [pc, #12]	@ (8000f78 <AudioCaptureTask+0x68>)
 8000f6c:	f7ff ff94 	bl	8000e98 <pdm_to_pcm>
	for (;;) {
 8000f70:	e7dc      	b.n	8000f2c <AudioCaptureTask+0x1c>
 8000f72:	bf00      	nop
 8000f74:	20000598 	.word	0x20000598
 8000f78:	2000059c 	.word	0x2000059c

08000f7c <FFTProcessingTask>:
 * @brief Function implementing the FFTProcessing thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FFTProcessingTask */
void FFTProcessingTask(void *argument) {
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FFTProcessingTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000f84:	2001      	movs	r0, #1
 8000f86:	f003 fadf 	bl	8004548 <osDelay>
 8000f8a:	e7fb      	b.n	8000f84 <FFTProcessingTask+0x8>

08000f8c <DisplayOutputTask>:
 * @brief Function implementing the DisplayOutput thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DisplayOutputTask */
void DisplayOutputTask(void *argument) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DisplayOutputTask */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8000f94:	2001      	movs	r0, #1
 8000f96:	f003 fad7 	bl	8004548 <osDelay>
 8000f9a:	e7fb      	b.n	8000f94 <DisplayOutputTask+0x8>

08000f9c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a04      	ldr	r2, [pc, #16]	@ (8000fbc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d101      	bne.n	8000fb2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000fae:	f000 fa63 	bl	8001478 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	3708      	adds	r7, #8
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40000c00 	.word	0x40000c00

08000fc0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fc4:	b672      	cpsid	i
}
 8000fc6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <Error_Handler+0x8>

08000fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	607b      	str	r3, [r7, #4]
 8000fd6:	4b12      	ldr	r3, [pc, #72]	@ (8001020 <HAL_MspInit+0x54>)
 8000fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fda:	4a11      	ldr	r2, [pc, #68]	@ (8001020 <HAL_MspInit+0x54>)
 8000fdc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fe2:	4b0f      	ldr	r3, [pc, #60]	@ (8001020 <HAL_MspInit+0x54>)
 8000fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	603b      	str	r3, [r7, #0]
 8000ff2:	4b0b      	ldr	r3, [pc, #44]	@ (8001020 <HAL_MspInit+0x54>)
 8000ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	@ (8001020 <HAL_MspInit+0x54>)
 8000ff8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ffc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ffe:	4b08      	ldr	r3, [pc, #32]	@ (8001020 <HAL_MspInit+0x54>)
 8001000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001002:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001006:	603b      	str	r3, [r7, #0]
 8001008:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800100a:	2200      	movs	r2, #0
 800100c:	210f      	movs	r1, #15
 800100e:	f06f 0001 	mvn.w	r0, #1
 8001012:	f000 fb2d 	bl	8001670 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40023800 	.word	0x40023800

08001024 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001024:	b480      	push	{r7}
 8001026:	b085      	sub	sp, #20
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a0b      	ldr	r2, [pc, #44]	@ (8001060 <HAL_CRC_MspInit+0x3c>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d10d      	bne.n	8001052 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b0a      	ldr	r3, [pc, #40]	@ (8001064 <HAL_CRC_MspInit+0x40>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a09      	ldr	r2, [pc, #36]	@ (8001064 <HAL_CRC_MspInit+0x40>)
 8001040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b07      	ldr	r3, [pc, #28]	@ (8001064 <HAL_CRC_MspInit+0x40>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023000 	.word	0x40023000
 8001064:	40023800 	.word	0x40023800

08001068 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	@ 0x38
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001070:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001074:	2200      	movs	r2, #0
 8001076:	601a      	str	r2, [r3, #0]
 8001078:	605a      	str	r2, [r3, #4]
 800107a:	609a      	str	r2, [r3, #8]
 800107c:	60da      	str	r2, [r3, #12]
 800107e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	2200      	movs	r2, #0
 8001086:	601a      	str	r2, [r3, #0]
 8001088:	605a      	str	r2, [r3, #4]
 800108a:	609a      	str	r2, [r3, #8]
 800108c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	4a4a      	ldr	r2, [pc, #296]	@ (80011bc <HAL_I2S_MspInit+0x154>)
 8001094:	4293      	cmp	r3, r2
 8001096:	f040 808c 	bne.w	80011b2 <HAL_I2S_MspInit+0x14a>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800109a:	2301      	movs	r3, #1
 800109c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800109e:	23c0      	movs	r3, #192	@ 0xc0
 80010a0:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80010a2:	2306      	movs	r3, #6
 80010a4:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010a6:	f107 0314 	add.w	r3, r7, #20
 80010aa:	4618      	mov	r0, r3
 80010ac:	f002 faa4 	bl	80035f8 <HAL_RCCEx_PeriphCLKConfig>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80010b6:	f7ff ff83 	bl	8000fc0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ba:	2300      	movs	r3, #0
 80010bc:	613b      	str	r3, [r7, #16]
 80010be:	4b40      	ldr	r3, [pc, #256]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010c2:	4a3f      	ldr	r2, [pc, #252]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010c8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ca:	4b3d      	ldr	r3, [pc, #244]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010d2:	613b      	str	r3, [r7, #16]
 80010d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
 80010da:	4b39      	ldr	r3, [pc, #228]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010de:	4a38      	ldr	r2, [pc, #224]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010e0:	f043 0304 	orr.w	r3, r3, #4
 80010e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010e6:	4b36      	ldr	r3, [pc, #216]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	60fb      	str	r3, [r7, #12]
 80010f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b32      	ldr	r3, [pc, #200]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a31      	ldr	r2, [pc, #196]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 80010fc:	f043 0302 	orr.w	r3, r3, #2
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b2f      	ldr	r3, [pc, #188]	@ (80011c0 <HAL_I2S_MspInit+0x158>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0302 	and.w	r3, r3, #2
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800110e:	2308      	movs	r3, #8
 8001110:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001112:	2302      	movs	r3, #2
 8001114:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001116:	2300      	movs	r3, #0
 8001118:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111a:	2303      	movs	r3, #3
 800111c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800111e:	2305      	movs	r3, #5
 8001120:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001122:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001126:	4619      	mov	r1, r3
 8001128:	4826      	ldr	r0, [pc, #152]	@ (80011c4 <HAL_I2S_MspInit+0x15c>)
 800112a:	f000 fe57 	bl	8001ddc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|WS_Pin;
 800112e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001132:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001134:	2302      	movs	r3, #2
 8001136:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001138:	2300      	movs	r3, #0
 800113a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113c:	2303      	movs	r3, #3
 800113e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001140:	2305      	movs	r3, #5
 8001142:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001144:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001148:	4619      	mov	r1, r3
 800114a:	481f      	ldr	r0, [pc, #124]	@ (80011c8 <HAL_I2S_MspInit+0x160>)
 800114c:	f000 fe46 	bl	8001ddc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001150:	4b1e      	ldr	r3, [pc, #120]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 8001152:	4a1f      	ldr	r2, [pc, #124]	@ (80011d0 <HAL_I2S_MspInit+0x168>)
 8001154:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001156:	4b1d      	ldr	r3, [pc, #116]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 8001158:	2200      	movs	r2, #0
 800115a:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800115c:	4b1b      	ldr	r3, [pc, #108]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b1a      	ldr	r3, [pc, #104]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b18      	ldr	r3, [pc, #96]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 800116a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800116e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001170:	4b16      	ldr	r3, [pc, #88]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 8001172:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001176:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001178:	4b14      	ldr	r3, [pc, #80]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 800117a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800117e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001180:	4b12      	ldr	r3, [pc, #72]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 8001182:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001186:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001188:	4b10      	ldr	r3, [pc, #64]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 800118a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800118e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001190:	4b0e      	ldr	r3, [pc, #56]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 8001192:	2200      	movs	r2, #0
 8001194:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001196:	480d      	ldr	r0, [pc, #52]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 8001198:	f000 fab0 	bl	80016fc <HAL_DMA_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 80011a2:	f7ff ff0d 	bl	8000fc0 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a08      	ldr	r2, [pc, #32]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 80011aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80011ac:	4a07      	ldr	r2, [pc, #28]	@ (80011cc <HAL_I2S_MspInit+0x164>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80011b2:	bf00      	nop
 80011b4:	3738      	adds	r7, #56	@ 0x38
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40003800 	.word	0x40003800
 80011c0:	40023800 	.word	0x40023800
 80011c4:	40020800 	.word	0x40020800
 80011c8:	40020400 	.word	0x40020400
 80011cc:	200004cc 	.word	0x200004cc
 80011d0:	40026058 	.word	0x40026058

080011d4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b08a      	sub	sp, #40	@ 0x28
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011dc:	f107 0314 	add.w	r3, r7, #20
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]
 80011e4:	605a      	str	r2, [r3, #4]
 80011e6:	609a      	str	r2, [r3, #8]
 80011e8:	60da      	str	r2, [r3, #12]
 80011ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a19      	ldr	r2, [pc, #100]	@ (8001258 <HAL_SPI_MspInit+0x84>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d12b      	bne.n	800124e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	613b      	str	r3, [r7, #16]
 80011fa:	4b18      	ldr	r3, [pc, #96]	@ (800125c <HAL_SPI_MspInit+0x88>)
 80011fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011fe:	4a17      	ldr	r2, [pc, #92]	@ (800125c <HAL_SPI_MspInit+0x88>)
 8001200:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001204:	6453      	str	r3, [r2, #68]	@ 0x44
 8001206:	4b15      	ldr	r3, [pc, #84]	@ (800125c <HAL_SPI_MspInit+0x88>)
 8001208:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800120a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800120e:	613b      	str	r3, [r7, #16]
 8001210:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001212:	2300      	movs	r3, #0
 8001214:	60fb      	str	r3, [r7, #12]
 8001216:	4b11      	ldr	r3, [pc, #68]	@ (800125c <HAL_SPI_MspInit+0x88>)
 8001218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121a:	4a10      	ldr	r2, [pc, #64]	@ (800125c <HAL_SPI_MspInit+0x88>)
 800121c:	f043 0301 	orr.w	r3, r3, #1
 8001220:	6313      	str	r3, [r2, #48]	@ 0x30
 8001222:	4b0e      	ldr	r3, [pc, #56]	@ (800125c <HAL_SPI_MspInit+0x88>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	f003 0301 	and.w	r3, r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800122e:	23a0      	movs	r3, #160	@ 0xa0
 8001230:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800123a:	2303      	movs	r3, #3
 800123c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800123e:	2305      	movs	r3, #5
 8001240:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0314 	add.w	r3, r7, #20
 8001246:	4619      	mov	r1, r3
 8001248:	4805      	ldr	r0, [pc, #20]	@ (8001260 <HAL_SPI_MspInit+0x8c>)
 800124a:	f000 fdc7 	bl	8001ddc <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800124e:	bf00      	nop
 8001250:	3728      	adds	r7, #40	@ 0x28
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40013000 	.word	0x40013000
 800125c:	40023800 	.word	0x40023800
 8001260:	40020000 	.word	0x40020000

08001264 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08e      	sub	sp, #56	@ 0x38
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001274:	2300      	movs	r3, #0
 8001276:	60fb      	str	r3, [r7, #12]
 8001278:	4b33      	ldr	r3, [pc, #204]	@ (8001348 <HAL_InitTick+0xe4>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	4a32      	ldr	r2, [pc, #200]	@ (8001348 <HAL_InitTick+0xe4>)
 800127e:	f043 0308 	orr.w	r3, r3, #8
 8001282:	6413      	str	r3, [r2, #64]	@ 0x40
 8001284:	4b30      	ldr	r3, [pc, #192]	@ (8001348 <HAL_InitTick+0xe4>)
 8001286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001288:	f003 0308 	and.w	r3, r3, #8
 800128c:	60fb      	str	r3, [r7, #12]
 800128e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001290:	f107 0210 	add.w	r2, r7, #16
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	4611      	mov	r1, r2
 800129a:	4618      	mov	r0, r3
 800129c:	f002 f97a 	bl	8003594 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80012a0:	6a3b      	ldr	r3, [r7, #32]
 80012a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d103      	bne.n	80012b2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012aa:	f002 f95f 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 80012ae:	6378      	str	r0, [r7, #52]	@ 0x34
 80012b0:	e004      	b.n	80012bc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80012b2:	f002 f95b 	bl	800356c <HAL_RCC_GetPCLK1Freq>
 80012b6:	4603      	mov	r3, r0
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012be:	4a23      	ldr	r2, [pc, #140]	@ (800134c <HAL_InitTick+0xe8>)
 80012c0:	fba2 2303 	umull	r2, r3, r2, r3
 80012c4:	0c9b      	lsrs	r3, r3, #18
 80012c6:	3b01      	subs	r3, #1
 80012c8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80012ca:	4b21      	ldr	r3, [pc, #132]	@ (8001350 <HAL_InitTick+0xec>)
 80012cc:	4a21      	ldr	r2, [pc, #132]	@ (8001354 <HAL_InitTick+0xf0>)
 80012ce:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80012d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001350 <HAL_InitTick+0xec>)
 80012d2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80012d6:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80012d8:	4a1d      	ldr	r2, [pc, #116]	@ (8001350 <HAL_InitTick+0xec>)
 80012da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80012dc:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80012de:	4b1c      	ldr	r3, [pc, #112]	@ (8001350 <HAL_InitTick+0xec>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e4:	4b1a      	ldr	r3, [pc, #104]	@ (8001350 <HAL_InitTick+0xec>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012ea:	4b19      	ldr	r3, [pc, #100]	@ (8001350 <HAL_InitTick+0xec>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80012f0:	4817      	ldr	r0, [pc, #92]	@ (8001350 <HAL_InitTick+0xec>)
 80012f2:	f002 fd6d 	bl	8003dd0 <HAL_TIM_Base_Init>
 80012f6:	4603      	mov	r3, r0
 80012f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80012fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001300:	2b00      	cmp	r3, #0
 8001302:	d11b      	bne.n	800133c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001304:	4812      	ldr	r0, [pc, #72]	@ (8001350 <HAL_InitTick+0xec>)
 8001306:	f002 fdbd 	bl	8003e84 <HAL_TIM_Base_Start_IT>
 800130a:	4603      	mov	r3, r0
 800130c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001310:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001314:	2b00      	cmp	r3, #0
 8001316:	d111      	bne.n	800133c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001318:	2032      	movs	r0, #50	@ 0x32
 800131a:	f000 f9c5 	bl	80016a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d808      	bhi.n	8001336 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2032      	movs	r0, #50	@ 0x32
 800132a:	f000 f9a1 	bl	8001670 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800132e:	4a0a      	ldr	r2, [pc, #40]	@ (8001358 <HAL_InitTick+0xf4>)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	e002      	b.n	800133c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800133c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001340:	4618      	mov	r0, r3
 8001342:	3738      	adds	r7, #56	@ 0x38
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40023800 	.word	0x40023800
 800134c:	431bde83 	.word	0x431bde83
 8001350:	20000734 	.word	0x20000734
 8001354:	40000c00 	.word	0x40000c00
 8001358:	20000004 	.word	0x20000004

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001360:	bf00      	nop
 8001362:	e7fd      	b.n	8001360 <NMI_Handler+0x4>

08001364 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001368:	bf00      	nop
 800136a:	e7fd      	b.n	8001368 <HardFault_Handler+0x4>

0800136c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800136c:	b480      	push	{r7}
 800136e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001370:	bf00      	nop
 8001372:	e7fd      	b.n	8001370 <MemManage_Handler+0x4>

08001374 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001378:	bf00      	nop
 800137a:	e7fd      	b.n	8001378 <BusFault_Handler+0x4>

0800137c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001380:	bf00      	nop
 8001382:	e7fd      	b.n	8001380 <UsageFault_Handler+0x4>

08001384 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001384:	b480      	push	{r7}
 8001386:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001388:	bf00      	nop
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
	...

08001394 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001398:	4802      	ldr	r0, [pc, #8]	@ (80013a4 <DMA1_Stream3_IRQHandler+0x10>)
 800139a:	f000 fab5 	bl	8001908 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 800139e:	bf00      	nop
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	200004cc 	.word	0x200004cc

080013a8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80013ac:	4802      	ldr	r0, [pc, #8]	@ (80013b8 <TIM5_IRQHandler+0x10>)
 80013ae:	f002 fdd9 	bl	8003f64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000734 	.word	0x20000734

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	@ (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	@ (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80013e0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001418 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80013e4:	f7ff ffea 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013e8:	480c      	ldr	r0, [pc, #48]	@ (800141c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80013ea:	490d      	ldr	r1, [pc, #52]	@ (8001420 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80013ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001424 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013f0:	e002      	b.n	80013f8 <LoopCopyDataInit>

080013f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013f6:	3304      	adds	r3, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013fc:	d3f9      	bcc.n	80013f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001428 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001400:	4c0a      	ldr	r4, [pc, #40]	@ (800142c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001402:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001404:	e001      	b.n	800140a <LoopFillZerobss>

08001406 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001406:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001408:	3204      	adds	r2, #4

0800140a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800140a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800140c:	d3fb      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800140e:	f008 faed 	bl	80099ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001412:	f7ff fadd 	bl	80009d0 <main>
  bx  lr    
 8001416:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001418:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800141c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001420:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 8001424:	08027918 	.word	0x08027918
  ldr r2, =_sbss
 8001428:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 800142c:	200052fc 	.word	0x200052fc

08001430 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001430:	e7fe      	b.n	8001430 <ADC_IRQHandler>
	...

08001434 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001438:	4b0e      	ldr	r3, [pc, #56]	@ (8001474 <HAL_Init+0x40>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a0d      	ldr	r2, [pc, #52]	@ (8001474 <HAL_Init+0x40>)
 800143e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001442:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001444:	4b0b      	ldr	r3, [pc, #44]	@ (8001474 <HAL_Init+0x40>)
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a0a      	ldr	r2, [pc, #40]	@ (8001474 <HAL_Init+0x40>)
 800144a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800144e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001450:	4b08      	ldr	r3, [pc, #32]	@ (8001474 <HAL_Init+0x40>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a07      	ldr	r2, [pc, #28]	@ (8001474 <HAL_Init+0x40>)
 8001456:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800145a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800145c:	2003      	movs	r0, #3
 800145e:	f000 f8fc 	bl	800165a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001462:	200f      	movs	r0, #15
 8001464:	f7ff fefe 	bl	8001264 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001468:	f7ff fdb0 	bl	8000fcc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800146c:	2300      	movs	r3, #0
}
 800146e:	4618      	mov	r0, r3
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00

08001478 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001478:	b480      	push	{r7}
 800147a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800147c:	4b06      	ldr	r3, [pc, #24]	@ (8001498 <HAL_IncTick+0x20>)
 800147e:	781b      	ldrb	r3, [r3, #0]
 8001480:	461a      	mov	r2, r3
 8001482:	4b06      	ldr	r3, [pc, #24]	@ (800149c <HAL_IncTick+0x24>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4413      	add	r3, r2
 8001488:	4a04      	ldr	r2, [pc, #16]	@ (800149c <HAL_IncTick+0x24>)
 800148a:	6013      	str	r3, [r2, #0]
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	20000008 	.word	0x20000008
 800149c:	2000077c 	.word	0x2000077c

080014a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
  return uwTick;
 80014a4:	4b03      	ldr	r3, [pc, #12]	@ (80014b4 <HAL_GetTick+0x14>)
 80014a6:	681b      	ldr	r3, [r3, #0]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr
 80014b2:	bf00      	nop
 80014b4:	2000077c 	.word	0x2000077c

080014b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014c0:	f7ff ffee 	bl	80014a0 <HAL_GetTick>
 80014c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80014d0:	d005      	beq.n	80014de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_Delay+0x44>)
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	461a      	mov	r2, r3
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	4413      	add	r3, r2
 80014dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014de:	bf00      	nop
 80014e0:	f7ff ffde 	bl	80014a0 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68bb      	ldr	r3, [r7, #8]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	68fa      	ldr	r2, [r7, #12]
 80014ec:	429a      	cmp	r2, r3
 80014ee:	d8f7      	bhi.n	80014e0 <HAL_Delay+0x28>
  {
  }
}
 80014f0:	bf00      	nop
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000008 	.word	0x20000008

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	@ (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	@ (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	@ (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	@ (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	@ (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	@ 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	@ 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr

0800165a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800165a:	b580      	push	{r7, lr}
 800165c:	b082      	sub	sp, #8
 800165e:	af00      	add	r7, sp, #0
 8001660:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001662:	6878      	ldr	r0, [r7, #4]
 8001664:	f7ff ff4c 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 8001668:	bf00      	nop
 800166a:	3708      	adds	r7, #8
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001670:	b580      	push	{r7, lr}
 8001672:	b086      	sub	sp, #24
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	60b9      	str	r1, [r7, #8]
 800167a:	607a      	str	r2, [r7, #4]
 800167c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001682:	f7ff ff61 	bl	8001548 <__NVIC_GetPriorityGrouping>
 8001686:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	68b9      	ldr	r1, [r7, #8]
 800168c:	6978      	ldr	r0, [r7, #20]
 800168e:	f7ff ffb1 	bl	80015f4 <NVIC_EncodePriority>
 8001692:	4602      	mov	r2, r0
 8001694:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001698:	4611      	mov	r1, r2
 800169a:	4618      	mov	r0, r3
 800169c:	f7ff ff80 	bl	80015a0 <__NVIC_SetPriority>
}
 80016a0:	bf00      	nop
 80016a2:	3718      	adds	r7, #24
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b082      	sub	sp, #8
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f7ff ff54 	bl	8001564 <__NVIC_EnableIRQ>
}
 80016bc:	bf00      	nop
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b082      	sub	sp, #8
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d101      	bne.n	80016d6 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00e      	b.n	80016f4 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	795b      	ldrb	r3, [r3, #5]
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d105      	bne.n	80016ec <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f7ff fc9c 	bl	8001024 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2201      	movs	r2, #1
 80016f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80016f2:	2300      	movs	r3, #0
}
 80016f4:	4618      	mov	r0, r3
 80016f6:	3708      	adds	r7, #8
 80016f8:	46bd      	mov	sp, r7
 80016fa:	bd80      	pop	{r7, pc}

080016fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b086      	sub	sp, #24
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001704:	2300      	movs	r3, #0
 8001706:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001708:	f7ff feca 	bl	80014a0 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d101      	bne.n	8001718 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001714:	2301      	movs	r3, #1
 8001716:	e099      	b.n	800184c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2202      	movs	r2, #2
 800171c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681a      	ldr	r2, [r3, #0]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f022 0201 	bic.w	r2, r2, #1
 8001736:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001738:	e00f      	b.n	800175a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800173a:	f7ff feb1 	bl	80014a0 <HAL_GetTick>
 800173e:	4602      	mov	r2, r0
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	2b05      	cmp	r3, #5
 8001746:	d908      	bls.n	800175a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	2220      	movs	r2, #32
 800174c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2203      	movs	r2, #3
 8001752:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e078      	b.n	800184c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1e8      	bne.n	800173a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001770:	697a      	ldr	r2, [r7, #20]
 8001772:	4b38      	ldr	r3, [pc, #224]	@ (8001854 <HAL_DMA_Init+0x158>)
 8001774:	4013      	ands	r3, r2
 8001776:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	685a      	ldr	r2, [r3, #4]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	689b      	ldr	r3, [r3, #8]
 8001780:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001786:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001792:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	699b      	ldr	r3, [r3, #24]
 8001798:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800179e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a1b      	ldr	r3, [r3, #32]
 80017a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80017a6:	697a      	ldr	r2, [r7, #20]
 80017a8:	4313      	orrs	r3, r2
 80017aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017b0:	2b04      	cmp	r3, #4
 80017b2:	d107      	bne.n	80017c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017bc:	4313      	orrs	r3, r2
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	4313      	orrs	r3, r2
 80017c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	697a      	ldr	r2, [r7, #20]
 80017ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	695b      	ldr	r3, [r3, #20]
 80017d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	f023 0307 	bic.w	r3, r3, #7
 80017da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017e0:	697a      	ldr	r2, [r7, #20]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80017ea:	2b04      	cmp	r3, #4
 80017ec:	d117      	bne.n	800181e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	4313      	orrs	r3, r2
 80017f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00e      	beq.n	800181e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	f000 fa6f 	bl	8001ce4 <DMA_CheckFifoParam>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d008      	beq.n	800181e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2240      	movs	r2, #64	@ 0x40
 8001810:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	2201      	movs	r2, #1
 8001816:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800181a:	2301      	movs	r3, #1
 800181c:	e016      	b.n	800184c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	697a      	ldr	r2, [r7, #20]
 8001824:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001826:	6878      	ldr	r0, [r7, #4]
 8001828:	f000 fa26 	bl	8001c78 <DMA_CalcBaseAndBitshift>
 800182c:	4603      	mov	r3, r0
 800182e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001834:	223f      	movs	r2, #63	@ 0x3f
 8001836:	409a      	lsls	r2, r3
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2200      	movs	r2, #0
 8001840:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2201      	movs	r2, #1
 8001846:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	f010803f 	.word	0xf010803f

08001858 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b086      	sub	sp, #24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
 8001864:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800186e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001876:	2b01      	cmp	r3, #1
 8001878:	d101      	bne.n	800187e <HAL_DMA_Start_IT+0x26>
 800187a:	2302      	movs	r3, #2
 800187c:	e040      	b.n	8001900 <HAL_DMA_Start_IT+0xa8>
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2201      	movs	r2, #1
 8001882:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800188c:	b2db      	uxtb	r3, r3
 800188e:	2b01      	cmp	r3, #1
 8001890:	d12f      	bne.n	80018f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2202      	movs	r2, #2
 8001896:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	2200      	movs	r2, #0
 800189e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	68b9      	ldr	r1, [r7, #8]
 80018a6:	68f8      	ldr	r0, [r7, #12]
 80018a8:	f000 f9b8 	bl	8001c1c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018b0:	223f      	movs	r2, #63	@ 0x3f
 80018b2:	409a      	lsls	r2, r3
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f042 0216 	orr.w	r2, r2, #22
 80018c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d007      	beq.n	80018e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	681a      	ldr	r2, [r3, #0]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f042 0208 	orr.w	r2, r2, #8
 80018de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681a      	ldr	r2, [r3, #0]
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f042 0201 	orr.w	r2, r2, #1
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	e005      	b.n	80018fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80018fa:	2302      	movs	r3, #2
 80018fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80018fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b086      	sub	sp, #24
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001910:	2300      	movs	r3, #0
 8001912:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001914:	4b8e      	ldr	r3, [pc, #568]	@ (8001b50 <HAL_DMA_IRQHandler+0x248>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a8e      	ldr	r2, [pc, #568]	@ (8001b54 <HAL_DMA_IRQHandler+0x24c>)
 800191a:	fba2 2303 	umull	r2, r3, r2, r3
 800191e:	0a9b      	lsrs	r3, r3, #10
 8001920:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001926:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001928:	693b      	ldr	r3, [r7, #16]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001932:	2208      	movs	r2, #8
 8001934:	409a      	lsls	r2, r3
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01a      	beq.n	8001974 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f003 0304 	and.w	r3, r3, #4
 8001948:	2b00      	cmp	r3, #0
 800194a:	d013      	beq.n	8001974 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0204 	bic.w	r2, r2, #4
 800195a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001960:	2208      	movs	r2, #8
 8001962:	409a      	lsls	r2, r3
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800196c:	f043 0201 	orr.w	r2, r3, #1
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001978:	2201      	movs	r2, #1
 800197a:	409a      	lsls	r2, r3
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	4013      	ands	r3, r2
 8001980:	2b00      	cmp	r3, #0
 8001982:	d012      	beq.n	80019aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	695b      	ldr	r3, [r3, #20]
 800198a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800198e:	2b00      	cmp	r3, #0
 8001990:	d00b      	beq.n	80019aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001996:	2201      	movs	r2, #1
 8001998:	409a      	lsls	r2, r3
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019a2:	f043 0202 	orr.w	r2, r3, #2
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019ae:	2204      	movs	r2, #4
 80019b0:	409a      	lsls	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	4013      	ands	r3, r2
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d012      	beq.n	80019e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f003 0302 	and.w	r3, r3, #2
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d00b      	beq.n	80019e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019cc:	2204      	movs	r2, #4
 80019ce:	409a      	lsls	r2, r3
 80019d0:	693b      	ldr	r3, [r7, #16]
 80019d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019d8:	f043 0204 	orr.w	r2, r3, #4
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80019e4:	2210      	movs	r2, #16
 80019e6:	409a      	lsls	r2, r3
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	4013      	ands	r3, r2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d043      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0308 	and.w	r3, r3, #8
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d03c      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a02:	2210      	movs	r2, #16
 8001a04:	409a      	lsls	r2, r3
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d018      	beq.n	8001a4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d108      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d024      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	4798      	blx	r3
 8001a36:	e01f      	b.n	8001a78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d01b      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	4798      	blx	r3
 8001a48:	e016      	b.n	8001a78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d107      	bne.n	8001a68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	681a      	ldr	r2, [r3, #0]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f022 0208 	bic.w	r2, r2, #8
 8001a66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a7c:	2220      	movs	r2, #32
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	4013      	ands	r3, r2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 808f 	beq.w	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0310 	and.w	r3, r3, #16
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8087 	beq.w	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a9e:	2220      	movs	r2, #32
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b05      	cmp	r3, #5
 8001ab0:	d136      	bne.n	8001b20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 0216 	bic.w	r2, r2, #22
 8001ac0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	695a      	ldr	r2, [r3, #20]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ad0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d103      	bne.n	8001ae2 <HAL_DMA_IRQHandler+0x1da>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d007      	beq.n	8001af2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f022 0208 	bic.w	r2, r2, #8
 8001af0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001af6:	223f      	movs	r2, #63	@ 0x3f
 8001af8:	409a      	lsls	r2, r3
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d07e      	beq.n	8001c14 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	4798      	blx	r3
        }
        return;
 8001b1e:	e079      	b.n	8001c14 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d01d      	beq.n	8001b6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d10d      	bne.n	8001b58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d031      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b48:	6878      	ldr	r0, [r7, #4]
 8001b4a:	4798      	blx	r3
 8001b4c:	e02c      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
 8001b4e:	bf00      	nop
 8001b50:	20000000 	.word	0x20000000
 8001b54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d023      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e01e      	b.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10f      	bne.n	8001b98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f022 0210 	bic.w	r2, r2, #16
 8001b86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2200      	movs	r2, #0
 8001b94:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d003      	beq.n	8001ba8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ba4:	6878      	ldr	r0, [r7, #4]
 8001ba6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d032      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d022      	beq.n	8001c02 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2205      	movs	r2, #5
 8001bc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	681a      	ldr	r2, [r3, #0]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f022 0201 	bic.w	r2, r2, #1
 8001bd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bd4:	68bb      	ldr	r3, [r7, #8]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	697a      	ldr	r2, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d307      	bcc.n	8001bf0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f2      	bne.n	8001bd4 <HAL_DMA_IRQHandler+0x2cc>
 8001bee:	e000      	b.n	8001bf2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bf0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d005      	beq.n	8001c16 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	4798      	blx	r3
 8001c12:	e000      	b.n	8001c16 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c14:	bf00      	nop
    }
  }
}
 8001c16:	3718      	adds	r7, #24
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b085      	sub	sp, #20
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001c38:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b40      	cmp	r3, #64	@ 0x40
 8001c48:	d108      	bne.n	8001c5c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	68ba      	ldr	r2, [r7, #8]
 8001c58:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c5a:	e007      	b.n	8001c6c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68ba      	ldr	r2, [r7, #8]
 8001c62:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	60da      	str	r2, [r3, #12]
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b085      	sub	sp, #20
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	3b10      	subs	r3, #16
 8001c88:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <DMA_CalcBaseAndBitshift+0x64>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	091b      	lsrs	r3, r3, #4
 8001c90:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c92:	4a13      	ldr	r2, [pc, #76]	@ (8001ce0 <DMA_CalcBaseAndBitshift+0x68>)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	4413      	add	r3, r2
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d909      	bls.n	8001cba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cae:	f023 0303 	bic.w	r3, r3, #3
 8001cb2:	1d1a      	adds	r2, r3, #4
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	659a      	str	r2, [r3, #88]	@ 0x58
 8001cb8:	e007      	b.n	8001cca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001cc2:	f023 0303 	bic.w	r3, r3, #3
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	aaaaaaab 	.word	0xaaaaaaab
 8001ce0:	0800a448 	.word	0x0800a448

08001ce4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b085      	sub	sp, #20
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cec:	2300      	movs	r3, #0
 8001cee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cf4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	699b      	ldr	r3, [r3, #24]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11f      	bne.n	8001d3e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cfe:	68bb      	ldr	r3, [r7, #8]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d856      	bhi.n	8001db2 <DMA_CheckFifoParam+0xce>
 8001d04:	a201      	add	r2, pc, #4	@ (adr r2, 8001d0c <DMA_CheckFifoParam+0x28>)
 8001d06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d0a:	bf00      	nop
 8001d0c:	08001d1d 	.word	0x08001d1d
 8001d10:	08001d2f 	.word	0x08001d2f
 8001d14:	08001d1d 	.word	0x08001d1d
 8001d18:	08001db3 	.word	0x08001db3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d046      	beq.n	8001db6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d28:	2301      	movs	r3, #1
 8001d2a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d2c:	e043      	b.n	8001db6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d32:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d36:	d140      	bne.n	8001dba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d3c:	e03d      	b.n	8001dba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001d46:	d121      	bne.n	8001d8c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b03      	cmp	r3, #3
 8001d4c:	d837      	bhi.n	8001dbe <DMA_CheckFifoParam+0xda>
 8001d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d54 <DMA_CheckFifoParam+0x70>)
 8001d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d54:	08001d65 	.word	0x08001d65
 8001d58:	08001d6b 	.word	0x08001d6b
 8001d5c:	08001d65 	.word	0x08001d65
 8001d60:	08001d7d 	.word	0x08001d7d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	73fb      	strb	r3, [r7, #15]
      break;
 8001d68:	e030      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d6e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d025      	beq.n	8001dc2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d7a:	e022      	b.n	8001dc2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d80:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001d84:	d11f      	bne.n	8001dc6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d8a:	e01c      	b.n	8001dc6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b02      	cmp	r3, #2
 8001d90:	d903      	bls.n	8001d9a <DMA_CheckFifoParam+0xb6>
 8001d92:	68bb      	ldr	r3, [r7, #8]
 8001d94:	2b03      	cmp	r3, #3
 8001d96:	d003      	beq.n	8001da0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d98:	e018      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d9e:	e015      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001da4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d00e      	beq.n	8001dca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	73fb      	strb	r3, [r7, #15]
      break;
 8001db0:	e00b      	b.n	8001dca <DMA_CheckFifoParam+0xe6>
      break;
 8001db2:	bf00      	nop
 8001db4:	e00a      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001db6:	bf00      	nop
 8001db8:	e008      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e006      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e004      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e002      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;   
 8001dc6:	bf00      	nop
 8001dc8:	e000      	b.n	8001dcc <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
    }
  } 
  
  return status; 
 8001dcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dce:	4618      	mov	r0, r3
 8001dd0:	3714      	adds	r7, #20
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd8:	4770      	bx	lr
 8001dda:	bf00      	nop

08001ddc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b089      	sub	sp, #36	@ 0x24
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001df2:	2300      	movs	r3, #0
 8001df4:	61fb      	str	r3, [r7, #28]
 8001df6:	e16b      	b.n	80020d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001df8:	2201      	movs	r2, #1
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001e00:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	429a      	cmp	r2, r3
 8001e12:	f040 815a 	bne.w	80020ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f003 0303 	and.w	r3, r3, #3
 8001e1e:	2b01      	cmp	r3, #1
 8001e20:	d005      	beq.n	8001e2e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001e2a:	2b02      	cmp	r3, #2
 8001e2c:	d130      	bne.n	8001e90 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001e34:	69fb      	ldr	r3, [r7, #28]
 8001e36:	005b      	lsls	r3, r3, #1
 8001e38:	2203      	movs	r2, #3
 8001e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	005b      	lsls	r3, r3, #1
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69ba      	ldr	r2, [r7, #24]
 8001e5c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e64:	2201      	movs	r2, #1
 8001e66:	69fb      	ldr	r3, [r7, #28]
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	091b      	lsrs	r3, r3, #4
 8001e7a:	f003 0201 	and.w	r2, r3, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	69ba      	ldr	r2, [r7, #24]
 8001e8e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f003 0303 	and.w	r3, r3, #3
 8001e98:	2b03      	cmp	r3, #3
 8001e9a:	d017      	beq.n	8001ecc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ea2:	69fb      	ldr	r3, [r7, #28]
 8001ea4:	005b      	lsls	r3, r3, #1
 8001ea6:	2203      	movs	r2, #3
 8001ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8001eac:	43db      	mvns	r3, r3
 8001eae:	69ba      	ldr	r2, [r7, #24]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	689a      	ldr	r2, [r3, #8]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec0:	69ba      	ldr	r2, [r7, #24]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	685b      	ldr	r3, [r3, #4]
 8001ed0:	f003 0303 	and.w	r3, r3, #3
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d123      	bne.n	8001f20 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	08da      	lsrs	r2, r3, #3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3208      	adds	r2, #8
 8001ee0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	f003 0307 	and.w	r3, r3, #7
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	220f      	movs	r2, #15
 8001ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	f003 0307 	and.w	r3, r3, #7
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	fa02 f303 	lsl.w	r3, r2, r3
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f12:	69fb      	ldr	r3, [r7, #28]
 8001f14:	08da      	lsrs	r2, r3, #3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	3208      	adds	r2, #8
 8001f1a:	69b9      	ldr	r1, [r7, #24]
 8001f1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f003 0203 	and.w	r2, r3, #3
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	fa02 f303 	lsl.w	r3, r2, r3
 8001f48:	69ba      	ldr	r2, [r7, #24]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69ba      	ldr	r2, [r7, #24]
 8001f52:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	f000 80b4 	beq.w	80020ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	60fb      	str	r3, [r7, #12]
 8001f66:	4b60      	ldr	r3, [pc, #384]	@ (80020e8 <HAL_GPIO_Init+0x30c>)
 8001f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f6a:	4a5f      	ldr	r2, [pc, #380]	@ (80020e8 <HAL_GPIO_Init+0x30c>)
 8001f6c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f70:	6453      	str	r3, [r2, #68]	@ 0x44
 8001f72:	4b5d      	ldr	r3, [pc, #372]	@ (80020e8 <HAL_GPIO_Init+0x30c>)
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f7e:	4a5b      	ldr	r2, [pc, #364]	@ (80020ec <HAL_GPIO_Init+0x310>)
 8001f80:	69fb      	ldr	r3, [r7, #28]
 8001f82:	089b      	lsrs	r3, r3, #2
 8001f84:	3302      	adds	r3, #2
 8001f86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	f003 0303 	and.w	r3, r3, #3
 8001f92:	009b      	lsls	r3, r3, #2
 8001f94:	220f      	movs	r2, #15
 8001f96:	fa02 f303 	lsl.w	r3, r2, r3
 8001f9a:	43db      	mvns	r3, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	4a52      	ldr	r2, [pc, #328]	@ (80020f0 <HAL_GPIO_Init+0x314>)
 8001fa6:	4293      	cmp	r3, r2
 8001fa8:	d02b      	beq.n	8002002 <HAL_GPIO_Init+0x226>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a51      	ldr	r2, [pc, #324]	@ (80020f4 <HAL_GPIO_Init+0x318>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d025      	beq.n	8001ffe <HAL_GPIO_Init+0x222>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a50      	ldr	r2, [pc, #320]	@ (80020f8 <HAL_GPIO_Init+0x31c>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d01f      	beq.n	8001ffa <HAL_GPIO_Init+0x21e>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a4f      	ldr	r2, [pc, #316]	@ (80020fc <HAL_GPIO_Init+0x320>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d019      	beq.n	8001ff6 <HAL_GPIO_Init+0x21a>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a4e      	ldr	r2, [pc, #312]	@ (8002100 <HAL_GPIO_Init+0x324>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_GPIO_Init+0x216>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a4d      	ldr	r2, [pc, #308]	@ (8002104 <HAL_GPIO_Init+0x328>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d00d      	beq.n	8001fee <HAL_GPIO_Init+0x212>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a4c      	ldr	r2, [pc, #304]	@ (8002108 <HAL_GPIO_Init+0x32c>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d007      	beq.n	8001fea <HAL_GPIO_Init+0x20e>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a4b      	ldr	r2, [pc, #300]	@ (800210c <HAL_GPIO_Init+0x330>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d101      	bne.n	8001fe6 <HAL_GPIO_Init+0x20a>
 8001fe2:	2307      	movs	r3, #7
 8001fe4:	e00e      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	e00c      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8001fea:	2306      	movs	r3, #6
 8001fec:	e00a      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8001fee:	2305      	movs	r3, #5
 8001ff0:	e008      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8001ff2:	2304      	movs	r3, #4
 8001ff4:	e006      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e004      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8001ffa:	2302      	movs	r3, #2
 8001ffc:	e002      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8001ffe:	2301      	movs	r3, #1
 8002000:	e000      	b.n	8002004 <HAL_GPIO_Init+0x228>
 8002002:	2300      	movs	r3, #0
 8002004:	69fa      	ldr	r2, [r7, #28]
 8002006:	f002 0203 	and.w	r2, r2, #3
 800200a:	0092      	lsls	r2, r2, #2
 800200c:	4093      	lsls	r3, r2
 800200e:	69ba      	ldr	r2, [r7, #24]
 8002010:	4313      	orrs	r3, r2
 8002012:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002014:	4935      	ldr	r1, [pc, #212]	@ (80020ec <HAL_GPIO_Init+0x310>)
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	089b      	lsrs	r3, r3, #2
 800201a:	3302      	adds	r3, #2
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002022:	4b3b      	ldr	r3, [pc, #236]	@ (8002110 <HAL_GPIO_Init+0x334>)
 8002024:	689b      	ldr	r3, [r3, #8]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	43db      	mvns	r3, r3
 800202c:	69ba      	ldr	r2, [r7, #24]
 800202e:	4013      	ands	r3, r2
 8002030:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d003      	beq.n	8002046 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800203e:	69ba      	ldr	r2, [r7, #24]
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	4313      	orrs	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002046:	4a32      	ldr	r2, [pc, #200]	@ (8002110 <HAL_GPIO_Init+0x334>)
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800204c:	4b30      	ldr	r3, [pc, #192]	@ (8002110 <HAL_GPIO_Init+0x334>)
 800204e:	68db      	ldr	r3, [r3, #12]
 8002050:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	43db      	mvns	r3, r3
 8002056:	69ba      	ldr	r2, [r7, #24]
 8002058:	4013      	ands	r3, r2
 800205a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002064:	2b00      	cmp	r3, #0
 8002066:	d003      	beq.n	8002070 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002068:	69ba      	ldr	r2, [r7, #24]
 800206a:	693b      	ldr	r3, [r7, #16]
 800206c:	4313      	orrs	r3, r2
 800206e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002070:	4a27      	ldr	r2, [pc, #156]	@ (8002110 <HAL_GPIO_Init+0x334>)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002076:	4b26      	ldr	r3, [pc, #152]	@ (8002110 <HAL_GPIO_Init+0x334>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	43db      	mvns	r3, r3
 8002080:	69ba      	ldr	r2, [r7, #24]
 8002082:	4013      	ands	r3, r2
 8002084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d003      	beq.n	800209a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002092:	69ba      	ldr	r2, [r7, #24]
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	4313      	orrs	r3, r2
 8002098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800209a:	4a1d      	ldr	r2, [pc, #116]	@ (8002110 <HAL_GPIO_Init+0x334>)
 800209c:	69bb      	ldr	r3, [r7, #24]
 800209e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020a0:	4b1b      	ldr	r3, [pc, #108]	@ (8002110 <HAL_GPIO_Init+0x334>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	43db      	mvns	r3, r3
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4013      	ands	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d003      	beq.n	80020c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80020bc:	69ba      	ldr	r2, [r7, #24]
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	4313      	orrs	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c4:	4a12      	ldr	r2, [pc, #72]	@ (8002110 <HAL_GPIO_Init+0x334>)
 80020c6:	69bb      	ldr	r3, [r7, #24]
 80020c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ca:	69fb      	ldr	r3, [r7, #28]
 80020cc:	3301      	adds	r3, #1
 80020ce:	61fb      	str	r3, [r7, #28]
 80020d0:	69fb      	ldr	r3, [r7, #28]
 80020d2:	2b0f      	cmp	r3, #15
 80020d4:	f67f ae90 	bls.w	8001df8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80020d8:	bf00      	nop
 80020da:	bf00      	nop
 80020dc:	3724      	adds	r7, #36	@ 0x24
 80020de:	46bd      	mov	sp, r7
 80020e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e4:	4770      	bx	lr
 80020e6:	bf00      	nop
 80020e8:	40023800 	.word	0x40023800
 80020ec:	40013800 	.word	0x40013800
 80020f0:	40020000 	.word	0x40020000
 80020f4:	40020400 	.word	0x40020400
 80020f8:	40020800 	.word	0x40020800
 80020fc:	40020c00 	.word	0x40020c00
 8002100:	40021000 	.word	0x40021000
 8002104:	40021400 	.word	0x40021400
 8002108:	40021800 	.word	0x40021800
 800210c:	40021c00 	.word	0x40021c00
 8002110:	40013c00 	.word	0x40013c00

08002114 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	460b      	mov	r3, r1
 800211e:	807b      	strh	r3, [r7, #2]
 8002120:	4613      	mov	r3, r2
 8002122:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002124:	787b      	ldrb	r3, [r7, #1]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d003      	beq.n	8002132 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800212a:	887a      	ldrh	r2, [r7, #2]
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002130:	e003      	b.n	800213a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002132:	887b      	ldrh	r3, [r7, #2]
 8002134:	041a      	lsls	r2, r3, #16
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	619a      	str	r2, [r3, #24]
}
 800213a:	bf00      	nop
 800213c:	370c      	adds	r7, #12
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002156:	2301      	movs	r3, #1
 8002158:	e128      	b.n	80023ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002160:	b2db      	uxtb	r3, r3
 8002162:	2b00      	cmp	r3, #0
 8002164:	d109      	bne.n	800217a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2200      	movs	r2, #0
 800216a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a90      	ldr	r2, [pc, #576]	@ (80023b4 <HAL_I2S_Init+0x26c>)
 8002172:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f7fe ff77 	bl	8001068 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	2202      	movs	r2, #2
 800217e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6812      	ldr	r2, [r2, #0]
 800218c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002190:	f023 030f 	bic.w	r3, r3, #15
 8002194:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	2202      	movs	r2, #2
 800219c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	695b      	ldr	r3, [r3, #20]
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	d060      	beq.n	8002268 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d102      	bne.n	80021b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80021ae:	2310      	movs	r3, #16
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e001      	b.n	80021b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80021b4:	2320      	movs	r3, #32
 80021b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	689b      	ldr	r3, [r3, #8]
 80021bc:	2b20      	cmp	r3, #32
 80021be:	d802      	bhi.n	80021c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80021c0:	697b      	ldr	r3, [r7, #20]
 80021c2:	005b      	lsls	r3, r3, #1
 80021c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80021c6:	2001      	movs	r0, #1
 80021c8:	f001 faf8 	bl	80037bc <HAL_RCCEx_GetPeriphCLKFreq>
 80021cc:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80021d6:	d125      	bne.n	8002224 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d010      	beq.n	8002202 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	005b      	lsls	r3, r3, #1
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	695b      	ldr	r3, [r3, #20]
 80021f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80021fc:	3305      	adds	r3, #5
 80021fe:	613b      	str	r3, [r7, #16]
 8002200:	e01f      	b.n	8002242 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	fbb2 f2f3 	udiv	r2, r2, r3
 800220c:	4613      	mov	r3, r2
 800220e:	009b      	lsls	r3, r3, #2
 8002210:	4413      	add	r3, r2
 8002212:	005b      	lsls	r3, r3, #1
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	fbb2 f3f3 	udiv	r3, r2, r3
 800221e:	3305      	adds	r3, #5
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	e00e      	b.n	8002242 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002224:	68fa      	ldr	r2, [r7, #12]
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	fbb2 f2f3 	udiv	r2, r2, r3
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	005b      	lsls	r3, r3, #1
 8002234:	461a      	mov	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	fbb2 f3f3 	udiv	r3, r2, r3
 800223e:	3305      	adds	r3, #5
 8002240:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4a5c      	ldr	r2, [pc, #368]	@ (80023b8 <HAL_I2S_Init+0x270>)
 8002246:	fba2 2303 	umull	r2, r3, r2, r3
 800224a:	08db      	lsrs	r3, r3, #3
 800224c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	f003 0301 	and.w	r3, r3, #1
 8002254:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	085b      	lsrs	r3, r3, #1
 800225e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	021b      	lsls	r3, r3, #8
 8002264:	61bb      	str	r3, [r7, #24]
 8002266:	e003      	b.n	8002270 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002268:	2302      	movs	r3, #2
 800226a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800226c:	2300      	movs	r3, #0
 800226e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	2b01      	cmp	r3, #1
 8002274:	d902      	bls.n	800227c <HAL_I2S_Init+0x134>
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	2bff      	cmp	r3, #255	@ 0xff
 800227a:	d907      	bls.n	800228c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002280:	f043 0210 	orr.w	r2, r3, #16
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002288:	2301      	movs	r3, #1
 800228a:	e08f      	b.n	80023ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	691a      	ldr	r2, [r3, #16]
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	ea42 0103 	orr.w	r1, r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	69fa      	ldr	r2, [r7, #28]
 800229c:	430a      	orrs	r2, r1
 800229e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	69db      	ldr	r3, [r3, #28]
 80022a6:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80022aa:	f023 030f 	bic.w	r3, r3, #15
 80022ae:	687a      	ldr	r2, [r7, #4]
 80022b0:	6851      	ldr	r1, [r2, #4]
 80022b2:	687a      	ldr	r2, [r7, #4]
 80022b4:	6892      	ldr	r2, [r2, #8]
 80022b6:	4311      	orrs	r1, r2
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	68d2      	ldr	r2, [r2, #12]
 80022bc:	4311      	orrs	r1, r2
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	6992      	ldr	r2, [r2, #24]
 80022c2:	430a      	orrs	r2, r1
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d161      	bne.n	800239c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	4a38      	ldr	r2, [pc, #224]	@ (80023bc <HAL_I2S_Init+0x274>)
 80022dc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4a37      	ldr	r2, [pc, #220]	@ (80023c0 <HAL_I2S_Init+0x278>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d101      	bne.n	80022ec <HAL_I2S_Init+0x1a4>
 80022e8:	4b36      	ldr	r3, [pc, #216]	@ (80023c4 <HAL_I2S_Init+0x27c>)
 80022ea:	e001      	b.n	80022f0 <HAL_I2S_Init+0x1a8>
 80022ec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80022f0:	69db      	ldr	r3, [r3, #28]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	6812      	ldr	r2, [r2, #0]
 80022f6:	4932      	ldr	r1, [pc, #200]	@ (80023c0 <HAL_I2S_Init+0x278>)
 80022f8:	428a      	cmp	r2, r1
 80022fa:	d101      	bne.n	8002300 <HAL_I2S_Init+0x1b8>
 80022fc:	4a31      	ldr	r2, [pc, #196]	@ (80023c4 <HAL_I2S_Init+0x27c>)
 80022fe:	e001      	b.n	8002304 <HAL_I2S_Init+0x1bc>
 8002300:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002304:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002308:	f023 030f 	bic.w	r3, r3, #15
 800230c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4a2b      	ldr	r2, [pc, #172]	@ (80023c0 <HAL_I2S_Init+0x278>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d101      	bne.n	800231c <HAL_I2S_Init+0x1d4>
 8002318:	4b2a      	ldr	r3, [pc, #168]	@ (80023c4 <HAL_I2S_Init+0x27c>)
 800231a:	e001      	b.n	8002320 <HAL_I2S_Init+0x1d8>
 800231c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002320:	2202      	movs	r2, #2
 8002322:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a25      	ldr	r2, [pc, #148]	@ (80023c0 <HAL_I2S_Init+0x278>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d101      	bne.n	8002332 <HAL_I2S_Init+0x1ea>
 800232e:	4b25      	ldr	r3, [pc, #148]	@ (80023c4 <HAL_I2S_Init+0x27c>)
 8002330:	e001      	b.n	8002336 <HAL_I2S_Init+0x1ee>
 8002332:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002342:	d003      	beq.n	800234c <HAL_I2S_Init+0x204>
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d103      	bne.n	8002354 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800234c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002350:	613b      	str	r3, [r7, #16]
 8002352:	e001      	b.n	8002358 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002354:	2300      	movs	r3, #0
 8002356:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002362:	4313      	orrs	r3, r2
 8002364:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800236c:	4313      	orrs	r3, r2
 800236e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	699b      	ldr	r3, [r3, #24]
 8002374:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002376:	4313      	orrs	r3, r2
 8002378:	b29a      	uxth	r2, r3
 800237a:	897b      	ldrh	r3, [r7, #10]
 800237c:	4313      	orrs	r3, r2
 800237e:	b29b      	uxth	r3, r3
 8002380:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002384:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a0d      	ldr	r2, [pc, #52]	@ (80023c0 <HAL_I2S_Init+0x278>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d101      	bne.n	8002394 <HAL_I2S_Init+0x24c>
 8002390:	4b0c      	ldr	r3, [pc, #48]	@ (80023c4 <HAL_I2S_Init+0x27c>)
 8002392:	e001      	b.n	8002398 <HAL_I2S_Init+0x250>
 8002394:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002398:	897a      	ldrh	r2, [r7, #10]
 800239a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2200      	movs	r2, #0
 80023a0:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3720      	adds	r7, #32
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	080026c5 	.word	0x080026c5
 80023b8:	cccccccd 	.word	0xcccccccd
 80023bc:	080027d9 	.word	0x080027d9
 80023c0:	40003800 	.word	0x40003800
 80023c4:	40003400 	.word	0x40003400

080023c8 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	4613      	mov	r3, r2
 80023d4:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d002      	beq.n	80023e2 <HAL_I2S_Receive_DMA+0x1a>
 80023dc:	88fb      	ldrh	r3, [r7, #6]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e09d      	b.n	8002522 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023ec:	b2db      	uxtb	r3, r3
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d001      	beq.n	80023f6 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 80023f2:	2302      	movs	r3, #2
 80023f4:	e095      	b.n	8002522 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_I2S_Receive_DMA+0x3e>
 8002402:	2302      	movs	r3, #2
 8002404:	e08d      	b.n	8002522 <HAL_I2S_Receive_DMA+0x15a>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2201      	movs	r2, #1
 800240a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	2204      	movs	r2, #4
 8002412:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	69db      	ldr	r3, [r3, #28]
 8002428:	f003 0307 	and.w	r3, r3, #7
 800242c:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	2b03      	cmp	r3, #3
 8002432:	d002      	beq.n	800243a <HAL_I2S_Receive_DMA+0x72>
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	2b05      	cmp	r3, #5
 8002438:	d10a      	bne.n	8002450 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 800243a:	88fb      	ldrh	r3, [r7, #6]
 800243c:	005b      	lsls	r3, r3, #1
 800243e:	b29a      	uxth	r2, r3
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002444:	88fb      	ldrh	r3, [r7, #6]
 8002446:	005b      	lsls	r3, r3, #1
 8002448:	b29a      	uxth	r2, r3
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	865a      	strh	r2, [r3, #50]	@ 0x32
 800244e:	e005      	b.n	800245c <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	88fa      	ldrh	r2, [r7, #6]
 8002454:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	88fa      	ldrh	r2, [r7, #6]
 800245a:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002460:	4a32      	ldr	r2, [pc, #200]	@ (800252c <HAL_I2S_Receive_DMA+0x164>)
 8002462:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002468:	4a31      	ldr	r2, [pc, #196]	@ (8002530 <HAL_I2S_Receive_DMA+0x168>)
 800246a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002470:	4a30      	ldr	r2, [pc, #192]	@ (8002534 <HAL_I2S_Receive_DMA+0x16c>)
 8002472:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800247e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002482:	d10a      	bne.n	800249a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002484:	2300      	movs	r3, #0
 8002486:	613b      	str	r3, [r7, #16]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	613b      	str	r3, [r7, #16]
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	613b      	str	r3, [r7, #16]
 8002498:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	330c      	adds	r3, #12
 80024a4:	4619      	mov	r1, r3
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024aa:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 80024b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 80024b2:	f7ff f9d1 	bl	8001858 <HAL_DMA_Start_IT>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d00f      	beq.n	80024dc <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024c0:	f043 0208 	orr.w	r2, r3, #8
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	2201      	movs	r2, #1
 80024cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	2200      	movs	r2, #0
 80024d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 80024d8:	2301      	movs	r3, #1
 80024da:	e022      	b.n	8002522 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	f003 0301 	and.w	r3, r3, #1
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d107      	bne.n	8002502 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f042 0201 	orr.w	r2, r2, #1
 8002500:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800250c:	2b00      	cmp	r3, #0
 800250e:	d107      	bne.n	8002520 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	69da      	ldr	r2, [r3, #28]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800251e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002520:	2300      	movs	r3, #0
}
 8002522:	4618      	mov	r0, r3
 8002524:	3718      	adds	r7, #24
 8002526:	46bd      	mov	sp, r7
 8002528:	bd80      	pop	{r7, pc}
 800252a:	bf00      	nop
 800252c:	080025a3 	.word	0x080025a3
 8002530:	08002561 	.word	0x08002561
 8002534:	080025bf 	.word	0x080025bf

08002538 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002540:	bf00      	nop
 8002542:	370c      	adds	r7, #12
 8002544:	46bd      	mov	sp, r7
 8002546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254a:	4770      	bx	lr

0800254c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69db      	ldr	r3, [r3, #28]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d10e      	bne.n	8002594 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	685a      	ldr	r2, [r3, #4]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f022 0201 	bic.w	r2, r2, #1
 8002584:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2200      	movs	r2, #0
 800258a:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	2201      	movs	r2, #1
 8002590:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002594:	68f8      	ldr	r0, [r7, #12]
 8002596:	f7fe fc67 	bl	8000e68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800259a:	bf00      	nop
 800259c:	3710      	adds	r7, #16
 800259e:	46bd      	mov	sp, r7
 80025a0:	bd80      	pop	{r7, pc}

080025a2 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80025a2:	b580      	push	{r7, lr}
 80025a4:	b084      	sub	sp, #16
 80025a6:	af00      	add	r7, sp, #0
 80025a8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ae:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f7fe fc41 	bl	8000e38 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80025b6:	bf00      	nop
 80025b8:	3710      	adds	r7, #16
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025ca:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	685a      	ldr	r2, [r3, #4]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0203 	bic.w	r2, r2, #3
 80025da:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	2200      	movs	r2, #0
 80025e0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2200      	movs	r2, #0
 80025e6:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f4:	f043 0208 	orr.w	r2, r3, #8
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff ffa5 	bl	800254c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002602:	bf00      	nop
 8002604:	3710      	adds	r7, #16
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}

0800260a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800260a:	b580      	push	{r7, lr}
 800260c:	b082      	sub	sp, #8
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002616:	881a      	ldrh	r2, [r3, #0]
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002622:	1c9a      	adds	r2, r3, #2
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800262c:	b29b      	uxth	r3, r3
 800262e:	3b01      	subs	r3, #1
 8002630:	b29a      	uxth	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800263a:	b29b      	uxth	r3, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	d10e      	bne.n	800265e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	685a      	ldr	r2, [r3, #4]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800264e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f7ff ff6d 	bl	8002538 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002666:	b580      	push	{r7, lr}
 8002668:	b082      	sub	sp, #8
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002678:	b292      	uxth	r2, r2
 800267a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002680:	1c9a      	adds	r2, r3, #2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800268a:	b29b      	uxth	r3, r3
 800268c:	3b01      	subs	r3, #1
 800268e:	b29a      	uxth	r2, r3
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002698:	b29b      	uxth	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d10e      	bne.n	80026bc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80026ac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2201      	movs	r2, #1
 80026b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f7fe fbd6 	bl	8000e68 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}

080026c4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	2b04      	cmp	r3, #4
 80026de:	d13a      	bne.n	8002756 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	f003 0301 	and.w	r3, r3, #1
 80026e6:	2b01      	cmp	r3, #1
 80026e8:	d109      	bne.n	80026fe <I2S_IRQHandler+0x3a>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026f4:	2b40      	cmp	r3, #64	@ 0x40
 80026f6:	d102      	bne.n	80026fe <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f7ff ffb4 	bl	8002666 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002704:	2b40      	cmp	r3, #64	@ 0x40
 8002706:	d126      	bne.n	8002756 <I2S_IRQHandler+0x92>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	f003 0320 	and.w	r3, r3, #32
 8002712:	2b20      	cmp	r3, #32
 8002714:	d11f      	bne.n	8002756 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	685a      	ldr	r2, [r3, #4]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002724:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002726:	2300      	movs	r3, #0
 8002728:	613b      	str	r3, [r7, #16]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002748:	f043 0202 	orr.w	r2, r3, #2
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002750:	6878      	ldr	r0, [r7, #4]
 8002752:	f7ff fefb 	bl	800254c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b03      	cmp	r3, #3
 8002760:	d136      	bne.n	80027d0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	f003 0302 	and.w	r3, r3, #2
 8002768:	2b02      	cmp	r3, #2
 800276a:	d109      	bne.n	8002780 <I2S_IRQHandler+0xbc>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002776:	2b80      	cmp	r3, #128	@ 0x80
 8002778:	d102      	bne.n	8002780 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800277a:	6878      	ldr	r0, [r7, #4]
 800277c:	f7ff ff45 	bl	800260a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d122      	bne.n	80027d0 <I2S_IRQHandler+0x10c>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d11b      	bne.n	80027d0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	685a      	ldr	r2, [r3, #4]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80027a6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80027a8:	2300      	movs	r3, #0
 80027aa:	60fb      	str	r3, [r7, #12]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	60fb      	str	r3, [r7, #12]
 80027b4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027c2:	f043 0204 	orr.w	r2, r3, #4
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f7ff febe 	bl	800254c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80027d0:	bf00      	nop
 80027d2:	3718      	adds	r7, #24
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b088      	sub	sp, #32
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a92      	ldr	r2, [pc, #584]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d101      	bne.n	80027f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80027f2:	4b92      	ldr	r3, [pc, #584]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80027f4:	e001      	b.n	80027fa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80027f6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80027fa:	689b      	ldr	r3, [r3, #8]
 80027fc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a8b      	ldr	r2, [pc, #556]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002810:	4b8a      	ldr	r3, [pc, #552]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002812:	e001      	b.n	8002818 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002814:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002818:	685b      	ldr	r3, [r3, #4]
 800281a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002824:	d004      	beq.n	8002830 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	f040 8099 	bne.w	8002962 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	f003 0302 	and.w	r3, r3, #2
 8002836:	2b02      	cmp	r3, #2
 8002838:	d107      	bne.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002840:	2b00      	cmp	r3, #0
 8002842:	d002      	beq.n	800284a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f925 	bl	8002a94 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b01      	cmp	r3, #1
 8002852:	d107      	bne.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d002      	beq.n	8002864 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800285e:	6878      	ldr	r0, [r7, #4]
 8002860:	f000 f9c8 	bl	8002bf4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002864:	69bb      	ldr	r3, [r7, #24]
 8002866:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800286a:	2b40      	cmp	r3, #64	@ 0x40
 800286c:	d13a      	bne.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f003 0320 	and.w	r3, r3, #32
 8002874:	2b00      	cmp	r3, #0
 8002876:	d035      	beq.n	80028e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a6e      	ldr	r2, [pc, #440]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002882:	4b6e      	ldr	r3, [pc, #440]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002884:	e001      	b.n	800288a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002886:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800288a:	685a      	ldr	r2, [r3, #4]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4969      	ldr	r1, [pc, #420]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002892:	428b      	cmp	r3, r1
 8002894:	d101      	bne.n	800289a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002896:	4b69      	ldr	r3, [pc, #420]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002898:	e001      	b.n	800289e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800289a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800289e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80028a2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	685a      	ldr	r2, [r3, #4]
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80028b2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	60fb      	str	r3, [r7, #12]
 80028c8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d6:	f043 0202 	orr.w	r2, r3, #2
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f7ff fe34 	bl	800254c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0308 	and.w	r3, r3, #8
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	f040 80c3 	bne.w	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	f003 0320 	and.w	r3, r3, #32
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f000 80bd 	beq.w	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800290a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a49      	ldr	r2, [pc, #292]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d101      	bne.n	800291a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002916:	4b49      	ldr	r3, [pc, #292]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002918:	e001      	b.n	800291e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800291a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4944      	ldr	r1, [pc, #272]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002926:	428b      	cmp	r3, r1
 8002928:	d101      	bne.n	800292e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800292a:	4b44      	ldr	r3, [pc, #272]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800292c:	e001      	b.n	8002932 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800292e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002932:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002936:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002938:	2300      	movs	r3, #0
 800293a:	60bb      	str	r3, [r7, #8]
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	60bb      	str	r3, [r7, #8]
 8002944:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2201      	movs	r2, #1
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff fdf6 	bl	800254c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002960:	e089      	b.n	8002a76 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002962:	69bb      	ldr	r3, [r7, #24]
 8002964:	f003 0302 	and.w	r3, r3, #2
 8002968:	2b02      	cmp	r3, #2
 800296a:	d107      	bne.n	800297c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002972:	2b00      	cmp	r3, #0
 8002974:	d002      	beq.n	800297c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 f8be 	bl	8002af8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800297c:	69fb      	ldr	r3, [r7, #28]
 800297e:	f003 0301 	and.w	r3, r3, #1
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800298c:	2b00      	cmp	r3, #0
 800298e:	d002      	beq.n	8002996 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f000 f8fd 	bl	8002b90 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299c:	2b40      	cmp	r3, #64	@ 0x40
 800299e:	d12f      	bne.n	8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d02a      	beq.n	8002a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	685a      	ldr	r2, [r3, #4]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80029b8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d101      	bne.n	80029c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80029c4:	4b1d      	ldr	r3, [pc, #116]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029c6:	e001      	b.n	80029cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80029c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4919      	ldr	r1, [pc, #100]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80029d4:	428b      	cmp	r3, r1
 80029d6:	d101      	bne.n	80029dc <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80029d8:	4b18      	ldr	r3, [pc, #96]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80029da:	e001      	b.n	80029e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80029dc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80029e0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80029e4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	2201      	movs	r2, #1
 80029ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f2:	f043 0202 	orr.w	r2, r3, #2
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7ff fda6 	bl	800254c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b08      	cmp	r3, #8
 8002a08:	d136      	bne.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f003 0320 	and.w	r3, r3, #32
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d031      	beq.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	4a07      	ldr	r2, [pc, #28]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a1a:	4293      	cmp	r3, r2
 8002a1c:	d101      	bne.n	8002a22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002a1e:	4b07      	ldr	r3, [pc, #28]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a20:	e001      	b.n	8002a26 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002a22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4902      	ldr	r1, [pc, #8]	@ (8002a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002a2e:	428b      	cmp	r3, r1
 8002a30:	d106      	bne.n	8002a40 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002a32:	4b02      	ldr	r3, [pc, #8]	@ (8002a3c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002a34:	e006      	b.n	8002a44 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002a36:	bf00      	nop
 8002a38:	40003800 	.word	0x40003800
 8002a3c:	40003400 	.word	0x40003400
 8002a40:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002a44:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002a48:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	685a      	ldr	r2, [r3, #4]
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002a58:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f7ff fd6c 	bl	800254c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002a74:	e000      	b.n	8002a78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002a76:	bf00      	nop
}
 8002a78:	bf00      	nop
 8002a7a:	3720      	adds	r7, #32
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002a88:	bf00      	nop
 8002a8a:	370c      	adds	r7, #12
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002aa0:	1c99      	adds	r1, r3, #2
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6251      	str	r1, [r2, #36]	@ 0x24
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	3b01      	subs	r3, #1
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ac0:	b29b      	uxth	r3, r3
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d113      	bne.n	8002aee <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	685a      	ldr	r2, [r3, #4]
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002ad4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	f7ff ffc9 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002aee:	bf00      	nop
 8002af0:	3708      	adds	r7, #8
 8002af2:	46bd      	mov	sp, r7
 8002af4:	bd80      	pop	{r7, pc}
	...

08002af8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b04:	1c99      	adds	r1, r3, #2
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	6251      	str	r1, [r2, #36]	@ 0x24
 8002b0a:	8819      	ldrh	r1, [r3, #0]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a1d      	ldr	r2, [pc, #116]	@ (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d101      	bne.n	8002b1a <I2SEx_TxISR_I2SExt+0x22>
 8002b16:	4b1d      	ldr	r3, [pc, #116]	@ (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b18:	e001      	b.n	8002b1e <I2SEx_TxISR_I2SExt+0x26>
 8002b1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b1e:	460a      	mov	r2, r1
 8002b20:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	3b01      	subs	r3, #1
 8002b2a:	b29a      	uxth	r2, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b34:	b29b      	uxth	r3, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d121      	bne.n	8002b7e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a12      	ldr	r2, [pc, #72]	@ (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d101      	bne.n	8002b48 <I2SEx_TxISR_I2SExt+0x50>
 8002b44:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b46:	e001      	b.n	8002b4c <I2SEx_TxISR_I2SExt+0x54>
 8002b48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b4c:	685a      	ldr	r2, [r3, #4]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	490d      	ldr	r1, [pc, #52]	@ (8002b88 <I2SEx_TxISR_I2SExt+0x90>)
 8002b54:	428b      	cmp	r3, r1
 8002b56:	d101      	bne.n	8002b5c <I2SEx_TxISR_I2SExt+0x64>
 8002b58:	4b0c      	ldr	r3, [pc, #48]	@ (8002b8c <I2SEx_TxISR_I2SExt+0x94>)
 8002b5a:	e001      	b.n	8002b60 <I2SEx_TxISR_I2SExt+0x68>
 8002b5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002b64:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002b6a:	b29b      	uxth	r3, r3
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d106      	bne.n	8002b7e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002b78:	6878      	ldr	r0, [r7, #4]
 8002b7a:	f7ff ff81 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002b7e:	bf00      	nop
 8002b80:	3708      	adds	r7, #8
 8002b82:	46bd      	mov	sp, r7
 8002b84:	bd80      	pop	{r7, pc}
 8002b86:	bf00      	nop
 8002b88:	40003800 	.word	0x40003800
 8002b8c:	40003400 	.word	0x40003400

08002b90 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b082      	sub	sp, #8
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68d8      	ldr	r0, [r3, #12]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ba2:	1c99      	adds	r1, r3, #2
 8002ba4:	687a      	ldr	r2, [r7, #4]
 8002ba6:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002ba8:	b282      	uxth	r2, r0
 8002baa:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29a      	uxth	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d113      	bne.n	8002bec <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	685a      	ldr	r2, [r3, #4]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002bd2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d106      	bne.n	8002bec <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	2201      	movs	r2, #1
 8002be2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f7ff ff4a 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002bec:	bf00      	nop
 8002bee:	3708      	adds	r7, #8
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}

08002bf4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a20      	ldr	r2, [pc, #128]	@ (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d101      	bne.n	8002c0a <I2SEx_RxISR_I2SExt+0x16>
 8002c06:	4b20      	ldr	r3, [pc, #128]	@ (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c08:	e001      	b.n	8002c0e <I2SEx_RxISR_I2SExt+0x1a>
 8002c0a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c0e:	68d8      	ldr	r0, [r3, #12]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	1c99      	adds	r1, r3, #2
 8002c16:	687a      	ldr	r2, [r7, #4]
 8002c18:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8002c1a:	b282      	uxth	r2, r0
 8002c1c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d121      	bne.n	8002c7a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a12      	ldr	r2, [pc, #72]	@ (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d101      	bne.n	8002c44 <I2SEx_RxISR_I2SExt+0x50>
 8002c40:	4b11      	ldr	r3, [pc, #68]	@ (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c42:	e001      	b.n	8002c48 <I2SEx_RxISR_I2SExt+0x54>
 8002c44:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	490d      	ldr	r1, [pc, #52]	@ (8002c84 <I2SEx_RxISR_I2SExt+0x90>)
 8002c50:	428b      	cmp	r3, r1
 8002c52:	d101      	bne.n	8002c58 <I2SEx_RxISR_I2SExt+0x64>
 8002c54:	4b0c      	ldr	r3, [pc, #48]	@ (8002c88 <I2SEx_RxISR_I2SExt+0x94>)
 8002c56:	e001      	b.n	8002c5c <I2SEx_RxISR_I2SExt+0x68>
 8002c58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002c60:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c66:	b29b      	uxth	r3, r3
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d106      	bne.n	8002c7a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff ff03 	bl	8002a80 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
 8002c82:	bf00      	nop
 8002c84:	40003800 	.word	0x40003800
 8002c88:	40003400 	.word	0x40003400

08002c8c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b086      	sub	sp, #24
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d101      	bne.n	8002c9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c9a:	2301      	movs	r3, #1
 8002c9c:	e267      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d075      	beq.n	8002d96 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002caa:	4b88      	ldr	r3, [pc, #544]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f003 030c 	and.w	r3, r3, #12
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d00c      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb6:	4b85      	ldr	r3, [pc, #532]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d112      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cc2:	4b82      	ldr	r3, [pc, #520]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cca:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002cce:	d10b      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	4b7e      	ldr	r3, [pc, #504]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d05b      	beq.n	8002d94 <HAL_RCC_OscConfig+0x108>
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d157      	bne.n	8002d94 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e242      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cf0:	d106      	bne.n	8002d00 <HAL_RCC_OscConfig+0x74>
 8002cf2:	4b76      	ldr	r3, [pc, #472]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4a75      	ldr	r2, [pc, #468]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002cf8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cfc:	6013      	str	r3, [r2, #0]
 8002cfe:	e01d      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002d08:	d10c      	bne.n	8002d24 <HAL_RCC_OscConfig+0x98>
 8002d0a:	4b70      	ldr	r3, [pc, #448]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a6f      	ldr	r2, [pc, #444]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	4b6d      	ldr	r3, [pc, #436]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a6c      	ldr	r2, [pc, #432]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d20:	6013      	str	r3, [r2, #0]
 8002d22:	e00b      	b.n	8002d3c <HAL_RCC_OscConfig+0xb0>
 8002d24:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a68      	ldr	r2, [pc, #416]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d2e:	6013      	str	r3, [r2, #0]
 8002d30:	4b66      	ldr	r3, [pc, #408]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a65      	ldr	r2, [pc, #404]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002d3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d013      	beq.n	8002d6c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d44:	f7fe fbac 	bl	80014a0 <HAL_GetTick>
 8002d48:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d4a:	e008      	b.n	8002d5e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d4c:	f7fe fba8 	bl	80014a0 <HAL_GetTick>
 8002d50:	4602      	mov	r2, r0
 8002d52:	693b      	ldr	r3, [r7, #16]
 8002d54:	1ad3      	subs	r3, r2, r3
 8002d56:	2b64      	cmp	r3, #100	@ 0x64
 8002d58:	d901      	bls.n	8002d5e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d5a:	2303      	movs	r3, #3
 8002d5c:	e207      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5e:	4b5b      	ldr	r3, [pc, #364]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d0f0      	beq.n	8002d4c <HAL_RCC_OscConfig+0xc0>
 8002d6a:	e014      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d6c:	f7fe fb98 	bl	80014a0 <HAL_GetTick>
 8002d70:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d72:	e008      	b.n	8002d86 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d74:	f7fe fb94 	bl	80014a0 <HAL_GetTick>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	2b64      	cmp	r3, #100	@ 0x64
 8002d80:	d901      	bls.n	8002d86 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e1f3      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d86:	4b51      	ldr	r3, [pc, #324]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d1f0      	bne.n	8002d74 <HAL_RCC_OscConfig+0xe8>
 8002d92:	e000      	b.n	8002d96 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d063      	beq.n	8002e6a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002da2:	4b4a      	ldr	r3, [pc, #296]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d00b      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dae:	4b47      	ldr	r3, [pc, #284]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d11c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dba:	4b44      	ldr	r3, [pc, #272]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d116      	bne.n	8002df4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc6:	4b41      	ldr	r3, [pc, #260]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0302 	and.w	r3, r3, #2
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d005      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d001      	beq.n	8002dde <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e1c7      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dde:	4b3b      	ldr	r3, [pc, #236]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	691b      	ldr	r3, [r3, #16]
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4937      	ldr	r1, [pc, #220]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002df2:	e03a      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d020      	beq.n	8002e3e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002dfc:	4b34      	ldr	r3, [pc, #208]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002dfe:	2201      	movs	r2, #1
 8002e00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e02:	f7fe fb4d 	bl	80014a0 <HAL_GetTick>
 8002e06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e08:	e008      	b.n	8002e1c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e0a:	f7fe fb49 	bl	80014a0 <HAL_GetTick>
 8002e0e:	4602      	mov	r2, r0
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	1ad3      	subs	r3, r2, r3
 8002e14:	2b02      	cmp	r3, #2
 8002e16:	d901      	bls.n	8002e1c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e18:	2303      	movs	r3, #3
 8002e1a:	e1a8      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e1c:	4b2b      	ldr	r3, [pc, #172]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d0f0      	beq.n	8002e0a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e28:	4b28      	ldr	r3, [pc, #160]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	691b      	ldr	r3, [r3, #16]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4925      	ldr	r1, [pc, #148]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	600b      	str	r3, [r1, #0]
 8002e3c:	e015      	b.n	8002e6a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3e:	4b24      	ldr	r3, [pc, #144]	@ (8002ed0 <HAL_RCC_OscConfig+0x244>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fe fb2c 	bl	80014a0 <HAL_GetTick>
 8002e48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e4c:	f7fe fb28 	bl	80014a0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e187      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 0308 	and.w	r3, r3, #8
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d036      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	695b      	ldr	r3, [r3, #20]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d016      	beq.n	8002eac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7e:	4b15      	ldr	r3, [pc, #84]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fb0c 	bl	80014a0 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e8c:	f7fe fb08 	bl	80014a0 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e167      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8002ecc <HAL_RCC_OscConfig+0x240>)
 8002ea0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ea2:	f003 0302 	and.w	r3, r3, #2
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0x200>
 8002eaa:	e01b      	b.n	8002ee4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002eac:	4b09      	ldr	r3, [pc, #36]	@ (8002ed4 <HAL_RCC_OscConfig+0x248>)
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eb2:	f7fe faf5 	bl	80014a0 <HAL_GetTick>
 8002eb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb8:	e00e      	b.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eba:	f7fe faf1 	bl	80014a0 <HAL_GetTick>
 8002ebe:	4602      	mov	r2, r0
 8002ec0:	693b      	ldr	r3, [r7, #16]
 8002ec2:	1ad3      	subs	r3, r2, r3
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d907      	bls.n	8002ed8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e150      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 8002ecc:	40023800 	.word	0x40023800
 8002ed0:	42470000 	.word	0x42470000
 8002ed4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed8:	4b88      	ldr	r3, [pc, #544]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002eda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d1ea      	bne.n	8002eba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f003 0304 	and.w	r3, r3, #4
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	f000 8097 	beq.w	8003020 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef6:	4b81      	ldr	r3, [pc, #516]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10f      	bne.n	8002f22 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]
 8002f06:	4b7d      	ldr	r3, [pc, #500]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0a:	4a7c      	ldr	r2, [pc, #496]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f0c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f10:	6413      	str	r3, [r2, #64]	@ 0x40
 8002f12:	4b7a      	ldr	r3, [pc, #488]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f22:	4b77      	ldr	r3, [pc, #476]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d118      	bne.n	8002f60 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2e:	4b74      	ldr	r3, [pc, #464]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a73      	ldr	r2, [pc, #460]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f3a:	f7fe fab1 	bl	80014a0 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f42:	f7fe faad 	bl	80014a0 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e10c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f54:	4b6a      	ldr	r3, [pc, #424]	@ (8003100 <HAL_RCC_OscConfig+0x474>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d106      	bne.n	8002f76 <HAL_RCC_OscConfig+0x2ea>
 8002f68:	4b64      	ldr	r3, [pc, #400]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f6c:	4a63      	ldr	r2, [pc, #396]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f6e:	f043 0301 	orr.w	r3, r3, #1
 8002f72:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f74:	e01c      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	689b      	ldr	r3, [r3, #8]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d10c      	bne.n	8002f98 <HAL_RCC_OscConfig+0x30c>
 8002f7e:	4b5f      	ldr	r3, [pc, #380]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f82:	4a5e      	ldr	r2, [pc, #376]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f84:	f043 0304 	orr.w	r3, r3, #4
 8002f88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f8a:	4b5c      	ldr	r3, [pc, #368]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCC_OscConfig+0x324>
 8002f98:	4b58      	ldr	r3, [pc, #352]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f9c:	4a57      	ldr	r2, [pc, #348]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002f9e:	f023 0301 	bic.w	r3, r3, #1
 8002fa2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002fa4:	4b55      	ldr	r3, [pc, #340]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fa8:	4a54      	ldr	r2, [pc, #336]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002faa:	f023 0304 	bic.w	r3, r3, #4
 8002fae:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d015      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb8:	f7fe fa72 	bl	80014a0 <HAL_GetTick>
 8002fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fbe:	e00a      	b.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fc0:	f7fe fa6e 	bl	80014a0 <HAL_GetTick>
 8002fc4:	4602      	mov	r2, r0
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	1ad3      	subs	r3, r2, r3
 8002fca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e0cb      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd6:	4b49      	ldr	r3, [pc, #292]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fda:	f003 0302 	and.w	r3, r3, #2
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0ee      	beq.n	8002fc0 <HAL_RCC_OscConfig+0x334>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe4:	f7fe fa5c 	bl	80014a0 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fea:	e00a      	b.n	8003002 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fec:	f7fe fa58 	bl	80014a0 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e0b5      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003002:	4b3e      	ldr	r3, [pc, #248]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003004:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d1ee      	bne.n	8002fec <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800300e:	7dfb      	ldrb	r3, [r7, #23]
 8003010:	2b01      	cmp	r3, #1
 8003012:	d105      	bne.n	8003020 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003014:	4b39      	ldr	r3, [pc, #228]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003018:	4a38      	ldr	r2, [pc, #224]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 800301a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800301e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	699b      	ldr	r3, [r3, #24]
 8003024:	2b00      	cmp	r3, #0
 8003026:	f000 80a1 	beq.w	800316c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800302a:	4b34      	ldr	r3, [pc, #208]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 030c 	and.w	r3, r3, #12
 8003032:	2b08      	cmp	r3, #8
 8003034:	d05c      	beq.n	80030f0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	2b02      	cmp	r3, #2
 800303c:	d141      	bne.n	80030c2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303e:	4b31      	ldr	r3, [pc, #196]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003040:	2200      	movs	r2, #0
 8003042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003044:	f7fe fa2c 	bl	80014a0 <HAL_GetTick>
 8003048:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800304a:	e008      	b.n	800305e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800304c:	f7fe fa28 	bl	80014a0 <HAL_GetTick>
 8003050:	4602      	mov	r2, r0
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	2b02      	cmp	r3, #2
 8003058:	d901      	bls.n	800305e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800305a:	2303      	movs	r3, #3
 800305c:	e087      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305e:	4b27      	ldr	r3, [pc, #156]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003066:	2b00      	cmp	r3, #0
 8003068:	d1f0      	bne.n	800304c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	69da      	ldr	r2, [r3, #28]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	431a      	orrs	r2, r3
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003078:	019b      	lsls	r3, r3, #6
 800307a:	431a      	orrs	r2, r3
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003080:	085b      	lsrs	r3, r3, #1
 8003082:	3b01      	subs	r3, #1
 8003084:	041b      	lsls	r3, r3, #16
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800308c:	061b      	lsls	r3, r3, #24
 800308e:	491b      	ldr	r1, [pc, #108]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 8003090:	4313      	orrs	r3, r2
 8003092:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003094:	4b1b      	ldr	r3, [pc, #108]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 8003096:	2201      	movs	r2, #1
 8003098:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800309a:	f7fe fa01 	bl	80014a0 <HAL_GetTick>
 800309e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030a0:	e008      	b.n	80030b4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030a2:	f7fe f9fd 	bl	80014a0 <HAL_GetTick>
 80030a6:	4602      	mov	r2, r0
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1ad3      	subs	r3, r2, r3
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d901      	bls.n	80030b4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e05c      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b4:	4b11      	ldr	r3, [pc, #68]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d0f0      	beq.n	80030a2 <HAL_RCC_OscConfig+0x416>
 80030c0:	e054      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030c2:	4b10      	ldr	r3, [pc, #64]	@ (8003104 <HAL_RCC_OscConfig+0x478>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c8:	f7fe f9ea 	bl	80014a0 <HAL_GetTick>
 80030cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ce:	e008      	b.n	80030e2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030d0:	f7fe f9e6 	bl	80014a0 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	2b02      	cmp	r3, #2
 80030dc:	d901      	bls.n	80030e2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030de:	2303      	movs	r3, #3
 80030e0:	e045      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030e2:	4b06      	ldr	r3, [pc, #24]	@ (80030fc <HAL_RCC_OscConfig+0x470>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d1f0      	bne.n	80030d0 <HAL_RCC_OscConfig+0x444>
 80030ee:	e03d      	b.n	800316c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d107      	bne.n	8003108 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f8:	2301      	movs	r3, #1
 80030fa:	e038      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
 80030fc:	40023800 	.word	0x40023800
 8003100:	40007000 	.word	0x40007000
 8003104:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003108:	4b1b      	ldr	r3, [pc, #108]	@ (8003178 <HAL_RCC_OscConfig+0x4ec>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	2b01      	cmp	r3, #1
 8003114:	d028      	beq.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d121      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312e:	429a      	cmp	r2, r3
 8003130:	d11a      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003132:	68fa      	ldr	r2, [r7, #12]
 8003134:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003138:	4013      	ands	r3, r2
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800313e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003140:	4293      	cmp	r3, r2
 8003142:	d111      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800314e:	085b      	lsrs	r3, r3, #1
 8003150:	3b01      	subs	r3, #1
 8003152:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003162:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003164:	429a      	cmp	r2, r3
 8003166:	d001      	beq.n	800316c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003168:	2301      	movs	r3, #1
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3718      	adds	r7, #24
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}
 8003176:	bf00      	nop
 8003178:	40023800 	.word	0x40023800

0800317c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b084      	sub	sp, #16
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d101      	bne.n	8003190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e0cc      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003190:	4b68      	ldr	r3, [pc, #416]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f003 0307 	and.w	r3, r3, #7
 8003198:	683a      	ldr	r2, [r7, #0]
 800319a:	429a      	cmp	r2, r3
 800319c:	d90c      	bls.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319e:	4b65      	ldr	r3, [pc, #404]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a0:	683a      	ldr	r2, [r7, #0]
 80031a2:	b2d2      	uxtb	r2, r2
 80031a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a6:	4b63      	ldr	r3, [pc, #396]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0307 	and.w	r3, r3, #7
 80031ae:	683a      	ldr	r2, [r7, #0]
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d001      	beq.n	80031b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b4:	2301      	movs	r3, #1
 80031b6:	e0b8      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0302 	and.w	r3, r3, #2
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d020      	beq.n	8003206 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0304 	and.w	r3, r3, #4
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031d0:	4b59      	ldr	r3, [pc, #356]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	689b      	ldr	r3, [r3, #8]
 80031d4:	4a58      	ldr	r2, [pc, #352]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031d6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80031da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 0308 	and.w	r3, r3, #8
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d005      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e8:	4b53      	ldr	r3, [pc, #332]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	689b      	ldr	r3, [r3, #8]
 80031ec:	4a52      	ldr	r2, [pc, #328]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031ee:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f4:	4b50      	ldr	r3, [pc, #320]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	494d      	ldr	r1, [pc, #308]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003202:	4313      	orrs	r3, r2
 8003204:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	d044      	beq.n	800329c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d107      	bne.n	800322a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800321a:	4b47      	ldr	r3, [pc, #284]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003222:	2b00      	cmp	r3, #0
 8003224:	d119      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003226:	2301      	movs	r3, #1
 8003228:	e07f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	2b02      	cmp	r3, #2
 8003230:	d003      	beq.n	800323a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003236:	2b03      	cmp	r3, #3
 8003238:	d107      	bne.n	800324a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800323a:	4b3f      	ldr	r3, [pc, #252]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d109      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e06f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800324a:	4b3b      	ldr	r3, [pc, #236]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f003 0302 	and.w	r3, r3, #2
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003256:	2301      	movs	r3, #1
 8003258:	e067      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800325a:	4b37      	ldr	r3, [pc, #220]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800325c:	689b      	ldr	r3, [r3, #8]
 800325e:	f023 0203 	bic.w	r2, r3, #3
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4934      	ldr	r1, [pc, #208]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 8003268:	4313      	orrs	r3, r2
 800326a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800326c:	f7fe f918 	bl	80014a0 <HAL_GetTick>
 8003270:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003272:	e00a      	b.n	800328a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003274:	f7fe f914 	bl	80014a0 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003282:	4293      	cmp	r3, r2
 8003284:	d901      	bls.n	800328a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e04f      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800328a:	4b2b      	ldr	r3, [pc, #172]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f003 020c 	and.w	r2, r3, #12
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	429a      	cmp	r2, r3
 800329a:	d1eb      	bne.n	8003274 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800329c:	4b25      	ldr	r3, [pc, #148]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0307 	and.w	r3, r3, #7
 80032a4:	683a      	ldr	r2, [r7, #0]
 80032a6:	429a      	cmp	r2, r3
 80032a8:	d20c      	bcs.n	80032c4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032aa:	4b22      	ldr	r3, [pc, #136]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032ac:	683a      	ldr	r2, [r7, #0]
 80032ae:	b2d2      	uxtb	r2, r2
 80032b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032b2:	4b20      	ldr	r3, [pc, #128]	@ (8003334 <HAL_RCC_ClockConfig+0x1b8>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	683a      	ldr	r2, [r7, #0]
 80032bc:	429a      	cmp	r2, r3
 80032be:	d001      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e032      	b.n	800332a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 0304 	and.w	r3, r3, #4
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d008      	beq.n	80032e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032d0:	4b19      	ldr	r3, [pc, #100]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	68db      	ldr	r3, [r3, #12]
 80032dc:	4916      	ldr	r1, [pc, #88]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0308 	and.w	r3, r3, #8
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d009      	beq.n	8003302 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ee:	4b12      	ldr	r3, [pc, #72]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	691b      	ldr	r3, [r3, #16]
 80032fa:	00db      	lsls	r3, r3, #3
 80032fc:	490e      	ldr	r1, [pc, #56]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 80032fe:	4313      	orrs	r3, r2
 8003300:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003302:	f000 f821 	bl	8003348 <HAL_RCC_GetSysClockFreq>
 8003306:	4602      	mov	r2, r0
 8003308:	4b0b      	ldr	r3, [pc, #44]	@ (8003338 <HAL_RCC_ClockConfig+0x1bc>)
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	091b      	lsrs	r3, r3, #4
 800330e:	f003 030f 	and.w	r3, r3, #15
 8003312:	490a      	ldr	r1, [pc, #40]	@ (800333c <HAL_RCC_ClockConfig+0x1c0>)
 8003314:	5ccb      	ldrb	r3, [r1, r3]
 8003316:	fa22 f303 	lsr.w	r3, r2, r3
 800331a:	4a09      	ldr	r2, [pc, #36]	@ (8003340 <HAL_RCC_ClockConfig+0x1c4>)
 800331c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800331e:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <HAL_RCC_ClockConfig+0x1c8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd ff9e 	bl	8001264 <HAL_InitTick>

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
 8003332:	bf00      	nop
 8003334:	40023c00 	.word	0x40023c00
 8003338:	40023800 	.word	0x40023800
 800333c:	0800a430 	.word	0x0800a430
 8003340:	20000000 	.word	0x20000000
 8003344:	20000004 	.word	0x20000004

08003348 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800334c:	b094      	sub	sp, #80	@ 0x50
 800334e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003350:	2300      	movs	r3, #0
 8003352:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003354:	2300      	movs	r3, #0
 8003356:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800335c:	2300      	movs	r3, #0
 800335e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003360:	4b79      	ldr	r3, [pc, #484]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003362:	689b      	ldr	r3, [r3, #8]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b08      	cmp	r3, #8
 800336a:	d00d      	beq.n	8003388 <HAL_RCC_GetSysClockFreq+0x40>
 800336c:	2b08      	cmp	r3, #8
 800336e:	f200 80e1 	bhi.w	8003534 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003372:	2b00      	cmp	r3, #0
 8003374:	d002      	beq.n	800337c <HAL_RCC_GetSysClockFreq+0x34>
 8003376:	2b04      	cmp	r3, #4
 8003378:	d003      	beq.n	8003382 <HAL_RCC_GetSysClockFreq+0x3a>
 800337a:	e0db      	b.n	8003534 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800337c:	4b73      	ldr	r3, [pc, #460]	@ (800354c <HAL_RCC_GetSysClockFreq+0x204>)
 800337e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003380:	e0db      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003382:	4b73      	ldr	r3, [pc, #460]	@ (8003550 <HAL_RCC_GetSysClockFreq+0x208>)
 8003384:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003386:	e0d8      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003388:	4b6f      	ldr	r3, [pc, #444]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003390:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003392:	4b6d      	ldr	r3, [pc, #436]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800339a:	2b00      	cmp	r3, #0
 800339c:	d063      	beq.n	8003466 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339e:	4b6a      	ldr	r3, [pc, #424]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	099b      	lsrs	r3, r3, #6
 80033a4:	2200      	movs	r2, #0
 80033a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80033a8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80033aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80033b2:	2300      	movs	r3, #0
 80033b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80033b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80033ba:	4622      	mov	r2, r4
 80033bc:	462b      	mov	r3, r5
 80033be:	f04f 0000 	mov.w	r0, #0
 80033c2:	f04f 0100 	mov.w	r1, #0
 80033c6:	0159      	lsls	r1, r3, #5
 80033c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033cc:	0150      	lsls	r0, r2, #5
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4621      	mov	r1, r4
 80033d4:	1a51      	subs	r1, r2, r1
 80033d6:	6139      	str	r1, [r7, #16]
 80033d8:	4629      	mov	r1, r5
 80033da:	eb63 0301 	sbc.w	r3, r3, r1
 80033de:	617b      	str	r3, [r7, #20]
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80033ec:	4659      	mov	r1, fp
 80033ee:	018b      	lsls	r3, r1, #6
 80033f0:	4651      	mov	r1, sl
 80033f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033f6:	4651      	mov	r1, sl
 80033f8:	018a      	lsls	r2, r1, #6
 80033fa:	4651      	mov	r1, sl
 80033fc:	ebb2 0801 	subs.w	r8, r2, r1
 8003400:	4659      	mov	r1, fp
 8003402:	eb63 0901 	sbc.w	r9, r3, r1
 8003406:	f04f 0200 	mov.w	r2, #0
 800340a:	f04f 0300 	mov.w	r3, #0
 800340e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800341a:	4690      	mov	r8, r2
 800341c:	4699      	mov	r9, r3
 800341e:	4623      	mov	r3, r4
 8003420:	eb18 0303 	adds.w	r3, r8, r3
 8003424:	60bb      	str	r3, [r7, #8]
 8003426:	462b      	mov	r3, r5
 8003428:	eb49 0303 	adc.w	r3, r9, r3
 800342c:	60fb      	str	r3, [r7, #12]
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800343a:	4629      	mov	r1, r5
 800343c:	024b      	lsls	r3, r1, #9
 800343e:	4621      	mov	r1, r4
 8003440:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003444:	4621      	mov	r1, r4
 8003446:	024a      	lsls	r2, r1, #9
 8003448:	4610      	mov	r0, r2
 800344a:	4619      	mov	r1, r3
 800344c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800344e:	2200      	movs	r2, #0
 8003450:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003452:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003454:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003458:	f7fc feba 	bl	80001d0 <__aeabi_uldivmod>
 800345c:	4602      	mov	r2, r0
 800345e:	460b      	mov	r3, r1
 8003460:	4613      	mov	r3, r2
 8003462:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003464:	e058      	b.n	8003518 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003466:	4b38      	ldr	r3, [pc, #224]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	2200      	movs	r2, #0
 800346e:	4618      	mov	r0, r3
 8003470:	4611      	mov	r1, r2
 8003472:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003476:	623b      	str	r3, [r7, #32]
 8003478:	2300      	movs	r3, #0
 800347a:	627b      	str	r3, [r7, #36]	@ 0x24
 800347c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003480:	4642      	mov	r2, r8
 8003482:	464b      	mov	r3, r9
 8003484:	f04f 0000 	mov.w	r0, #0
 8003488:	f04f 0100 	mov.w	r1, #0
 800348c:	0159      	lsls	r1, r3, #5
 800348e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003492:	0150      	lsls	r0, r2, #5
 8003494:	4602      	mov	r2, r0
 8003496:	460b      	mov	r3, r1
 8003498:	4641      	mov	r1, r8
 800349a:	ebb2 0a01 	subs.w	sl, r2, r1
 800349e:	4649      	mov	r1, r9
 80034a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80034a4:	f04f 0200 	mov.w	r2, #0
 80034a8:	f04f 0300 	mov.w	r3, #0
 80034ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80034b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80034b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80034b8:	ebb2 040a 	subs.w	r4, r2, sl
 80034bc:	eb63 050b 	sbc.w	r5, r3, fp
 80034c0:	f04f 0200 	mov.w	r2, #0
 80034c4:	f04f 0300 	mov.w	r3, #0
 80034c8:	00eb      	lsls	r3, r5, #3
 80034ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80034ce:	00e2      	lsls	r2, r4, #3
 80034d0:	4614      	mov	r4, r2
 80034d2:	461d      	mov	r5, r3
 80034d4:	4643      	mov	r3, r8
 80034d6:	18e3      	adds	r3, r4, r3
 80034d8:	603b      	str	r3, [r7, #0]
 80034da:	464b      	mov	r3, r9
 80034dc:	eb45 0303 	adc.w	r3, r5, r3
 80034e0:	607b      	str	r3, [r7, #4]
 80034e2:	f04f 0200 	mov.w	r2, #0
 80034e6:	f04f 0300 	mov.w	r3, #0
 80034ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80034ee:	4629      	mov	r1, r5
 80034f0:	028b      	lsls	r3, r1, #10
 80034f2:	4621      	mov	r1, r4
 80034f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80034f8:	4621      	mov	r1, r4
 80034fa:	028a      	lsls	r2, r1, #10
 80034fc:	4610      	mov	r0, r2
 80034fe:	4619      	mov	r1, r3
 8003500:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003502:	2200      	movs	r2, #0
 8003504:	61bb      	str	r3, [r7, #24]
 8003506:	61fa      	str	r2, [r7, #28]
 8003508:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800350c:	f7fc fe60 	bl	80001d0 <__aeabi_uldivmod>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4613      	mov	r3, r2
 8003516:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003518:	4b0b      	ldr	r3, [pc, #44]	@ (8003548 <HAL_RCC_GetSysClockFreq+0x200>)
 800351a:	685b      	ldr	r3, [r3, #4]
 800351c:	0c1b      	lsrs	r3, r3, #16
 800351e:	f003 0303 	and.w	r3, r3, #3
 8003522:	3301      	adds	r3, #1
 8003524:	005b      	lsls	r3, r3, #1
 8003526:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003528:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800352a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800352c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003530:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003532:	e002      	b.n	800353a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003534:	4b05      	ldr	r3, [pc, #20]	@ (800354c <HAL_RCC_GetSysClockFreq+0x204>)
 8003536:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800353a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800353c:	4618      	mov	r0, r3
 800353e:	3750      	adds	r7, #80	@ 0x50
 8003540:	46bd      	mov	sp, r7
 8003542:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	00f42400 	.word	0x00f42400
 8003550:	007a1200 	.word	0x007a1200

08003554 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003558:	4b03      	ldr	r3, [pc, #12]	@ (8003568 <HAL_RCC_GetHCLKFreq+0x14>)
 800355a:	681b      	ldr	r3, [r3, #0]
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr
 8003566:	bf00      	nop
 8003568:	20000000 	.word	0x20000000

0800356c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003570:	f7ff fff0 	bl	8003554 <HAL_RCC_GetHCLKFreq>
 8003574:	4602      	mov	r2, r0
 8003576:	4b05      	ldr	r3, [pc, #20]	@ (800358c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	0a9b      	lsrs	r3, r3, #10
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	4903      	ldr	r1, [pc, #12]	@ (8003590 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003582:	5ccb      	ldrb	r3, [r1, r3]
 8003584:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003588:	4618      	mov	r0, r3
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40023800 	.word	0x40023800
 8003590:	0800a440 	.word	0x0800a440

08003594 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	220f      	movs	r2, #15
 80035a2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80035a4:	4b12      	ldr	r3, [pc, #72]	@ (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	f003 0203 	and.w	r2, r3, #3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80035b0:	4b0f      	ldr	r3, [pc, #60]	@ (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80035bc:	4b0c      	ldr	r3, [pc, #48]	@ (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80035c8:	4b09      	ldr	r3, [pc, #36]	@ (80035f0 <HAL_RCC_GetClockConfig+0x5c>)
 80035ca:	689b      	ldr	r3, [r3, #8]
 80035cc:	08db      	lsrs	r3, r3, #3
 80035ce:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80035d6:	4b07      	ldr	r3, [pc, #28]	@ (80035f4 <HAL_RCC_GetClockConfig+0x60>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f003 0207 	and.w	r2, r3, #7
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	601a      	str	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40023800 	.word	0x40023800
 80035f4:	40023c00 	.word	0x40023c00

080035f8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b086      	sub	sp, #24
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003600:	2300      	movs	r3, #0
 8003602:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	2b00      	cmp	r3, #0
 8003612:	d105      	bne.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800361c:	2b00      	cmp	r3, #0
 800361e:	d035      	beq.n	800368c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003620:	4b62      	ldr	r3, [pc, #392]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003626:	f7fd ff3b 	bl	80014a0 <HAL_GetTick>
 800362a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800362c:	e008      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800362e:	f7fd ff37 	bl	80014a0 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d901      	bls.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e0b0      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003640:	4b5b      	ldr	r3, [pc, #364]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f0      	bne.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	019a      	lsls	r2, r3, #6
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	071b      	lsls	r3, r3, #28
 8003658:	4955      	ldr	r1, [pc, #340]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800365a:	4313      	orrs	r3, r2
 800365c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003660:	4b52      	ldr	r3, [pc, #328]	@ (80037ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003666:	f7fd ff1b 	bl	80014a0 <HAL_GetTick>
 800366a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800366e:	f7fd ff17 	bl	80014a0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e090      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003680:	4b4b      	ldr	r3, [pc, #300]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	f000 8083 	beq.w	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800369a:	2300      	movs	r3, #0
 800369c:	60fb      	str	r3, [r7, #12]
 800369e:	4b44      	ldr	r3, [pc, #272]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036a2:	4a43      	ldr	r2, [pc, #268]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80036aa:	4b41      	ldr	r3, [pc, #260]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036b2:	60fb      	str	r3, [r7, #12]
 80036b4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80036b6:	4b3f      	ldr	r3, [pc, #252]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a3e      	ldr	r2, [pc, #248]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036c0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036c2:	f7fd feed 	bl	80014a0 <HAL_GetTick>
 80036c6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036c8:	e008      	b.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036ca:	f7fd fee9 	bl	80014a0 <HAL_GetTick>
 80036ce:	4602      	mov	r2, r0
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	1ad3      	subs	r3, r2, r3
 80036d4:	2b02      	cmp	r3, #2
 80036d6:	d901      	bls.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80036d8:	2303      	movs	r3, #3
 80036da:	e062      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80036dc:	4b35      	ldr	r3, [pc, #212]	@ (80037b4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d0f0      	beq.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036e8:	4b31      	ldr	r3, [pc, #196]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036ec:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036f0:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d02f      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003700:	693a      	ldr	r2, [r7, #16]
 8003702:	429a      	cmp	r2, r3
 8003704:	d028      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003706:	4b2a      	ldr	r3, [pc, #168]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003708:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800370e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003710:	4b29      	ldr	r3, [pc, #164]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003716:	4b28      	ldr	r3, [pc, #160]	@ (80037b8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800371c:	4a24      	ldr	r2, [pc, #144]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003722:	4b23      	ldr	r3, [pc, #140]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	f003 0301 	and.w	r3, r3, #1
 800372a:	2b01      	cmp	r3, #1
 800372c:	d114      	bne.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800372e:	f7fd feb7 	bl	80014a0 <HAL_GetTick>
 8003732:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003734:	e00a      	b.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fd feb3 	bl	80014a0 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e02a      	b.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374c:	4b18      	ldr	r3, [pc, #96]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800374e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003750:	f003 0302 	and.w	r3, r3, #2
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0ee      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003760:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003764:	d10d      	bne.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003766:	4b12      	ldr	r3, [pc, #72]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	68db      	ldr	r3, [r3, #12]
 8003772:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8003776:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377a:	490d      	ldr	r1, [pc, #52]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800377c:	4313      	orrs	r3, r2
 800377e:	608b      	str	r3, [r1, #8]
 8003780:	e005      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003782:	4b0b      	ldr	r3, [pc, #44]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	4a0a      	ldr	r2, [pc, #40]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003788:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800378c:	6093      	str	r3, [r2, #8]
 800378e:	4b08      	ldr	r3, [pc, #32]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003790:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379a:	4905      	ldr	r1, [pc, #20]	@ (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800379c:	4313      	orrs	r3, r2
 800379e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80037a0:	2300      	movs	r3, #0
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3718      	adds	r7, #24
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	42470068 	.word	0x42470068
 80037b0:	40023800 	.word	0x40023800
 80037b4:	40007000 	.word	0x40007000
 80037b8:	42470e40 	.word	0x42470e40

080037bc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80037c4:	2300      	movs	r3, #0
 80037c6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80037c8:	2300      	movs	r3, #0
 80037ca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2b01      	cmp	r3, #1
 80037d8:	d13f      	bne.n	800385a <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80037da:	4b24      	ldr	r3, [pc, #144]	@ (800386c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80037e2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d006      	beq.n	80037f8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80037f0:	d12f      	bne.n	8003852 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80037f2:	4b1f      	ldr	r3, [pc, #124]	@ (8003870 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80037f4:	617b      	str	r3, [r7, #20]
          break;
 80037f6:	e02f      	b.n	8003858 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037f8:	4b1c      	ldr	r3, [pc, #112]	@ (800386c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003800:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003804:	d108      	bne.n	8003818 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003806:	4b19      	ldr	r3, [pc, #100]	@ (800386c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003808:	685b      	ldr	r3, [r3, #4]
 800380a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800380e:	4a19      	ldr	r2, [pc, #100]	@ (8003874 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	613b      	str	r3, [r7, #16]
 8003816:	e007      	b.n	8003828 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003818:	4b14      	ldr	r3, [pc, #80]	@ (800386c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003820:	4a15      	ldr	r2, [pc, #84]	@ (8003878 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8003822:	fbb2 f3f3 	udiv	r3, r2, r3
 8003826:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003828:	4b10      	ldr	r3, [pc, #64]	@ (800386c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800382a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	fb02 f303 	mul.w	r3, r2, r3
 800383a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800383c:	4b0b      	ldr	r3, [pc, #44]	@ (800386c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800383e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003842:	0f1b      	lsrs	r3, r3, #28
 8003844:	f003 0307 	and.w	r3, r3, #7
 8003848:	68ba      	ldr	r2, [r7, #8]
 800384a:	fbb2 f3f3 	udiv	r3, r2, r3
 800384e:	617b      	str	r3, [r7, #20]
          break;
 8003850:	e002      	b.n	8003858 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8003852:	2300      	movs	r3, #0
 8003854:	617b      	str	r3, [r7, #20]
          break;
 8003856:	bf00      	nop
        }
      }
      break;
 8003858:	e000      	b.n	800385c <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800385a:	bf00      	nop
    }
  }
  return frequency;
 800385c:	697b      	ldr	r3, [r7, #20]
}
 800385e:	4618      	mov	r0, r3
 8003860:	371c      	adds	r7, #28
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	40023800 	.word	0x40023800
 8003870:	00bb8000 	.word	0x00bb8000
 8003874:	007a1200 	.word	0x007a1200
 8003878:	00f42400 	.word	0x00f42400

0800387c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b082      	sub	sp, #8
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d101      	bne.n	800388e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e07b      	b.n	8003986 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	2b00      	cmp	r3, #0
 8003894:	d108      	bne.n	80038a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800389e:	d009      	beq.n	80038b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2200      	movs	r2, #0
 80038a4:	61da      	str	r2, [r3, #28]
 80038a6:	e005      	b.n	80038b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d106      	bne.n	80038d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f7fd fc80 	bl	80011d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80038fc:	431a      	orrs	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	f003 0302 	and.w	r3, r3, #2
 8003910:	431a      	orrs	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003924:	431a      	orrs	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	69db      	ldr	r3, [r3, #28]
 800392a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800392e:	431a      	orrs	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6a1b      	ldr	r3, [r3, #32]
 8003934:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003938:	ea42 0103 	orr.w	r1, r2, r3
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003940:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	430a      	orrs	r2, r1
 800394a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	0c1b      	lsrs	r3, r3, #16
 8003952:	f003 0104 	and.w	r1, r3, #4
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800395a:	f003 0210 	and.w	r2, r3, #16
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	69da      	ldr	r2, [r3, #28]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003974:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003984:	2300      	movs	r3, #0
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800398e:	b580      	push	{r7, lr}
 8003990:	b088      	sub	sp, #32
 8003992:	af00      	add	r7, sp, #0
 8003994:	60f8      	str	r0, [r7, #12]
 8003996:	60b9      	str	r1, [r7, #8]
 8003998:	603b      	str	r3, [r7, #0]
 800399a:	4613      	mov	r3, r2
 800399c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800399e:	f7fd fd7f 	bl	80014a0 <HAL_GetTick>
 80039a2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80039a4:	88fb      	ldrh	r3, [r7, #6]
 80039a6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d001      	beq.n	80039b8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80039b4:	2302      	movs	r3, #2
 80039b6:	e12a      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80039b8:	68bb      	ldr	r3, [r7, #8]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d002      	beq.n	80039c4 <HAL_SPI_Transmit+0x36>
 80039be:	88fb      	ldrh	r3, [r7, #6]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e122      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_SPI_Transmit+0x48>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e11b      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	2203      	movs	r2, #3
 80039e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	2200      	movs	r2, #0
 80039ea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	68ba      	ldr	r2, [r7, #8]
 80039f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	88fa      	ldrh	r2, [r7, #6]
 80039f6:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	88fa      	ldrh	r2, [r7, #6]
 80039fc:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2200      	movs	r2, #0
 8003a02:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2200      	movs	r2, #0
 8003a08:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2200      	movs	r2, #0
 8003a14:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003a24:	d10f      	bne.n	8003a46 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003a34:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003a44:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a50:	2b40      	cmp	r3, #64	@ 0x40
 8003a52:	d007      	beq.n	8003a64 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	681a      	ldr	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a62:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	68db      	ldr	r3, [r3, #12]
 8003a68:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003a6c:	d152      	bne.n	8003b14 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d002      	beq.n	8003a7c <HAL_SPI_Transmit+0xee>
 8003a76:	8b7b      	ldrh	r3, [r7, #26]
 8003a78:	2b01      	cmp	r3, #1
 8003a7a:	d145      	bne.n	8003b08 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a80:	881a      	ldrh	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8c:	1c9a      	adds	r2, r3, #2
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	b29a      	uxth	r2, r3
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003aa0:	e032      	b.n	8003b08 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0302 	and.w	r3, r3, #2
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d112      	bne.n	8003ad6 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ab4:	881a      	ldrh	r2, [r3, #0]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ac0:	1c9a      	adds	r2, r3, #2
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aca:	b29b      	uxth	r3, r3
 8003acc:	3b01      	subs	r3, #1
 8003ace:	b29a      	uxth	r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ad4:	e018      	b.n	8003b08 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad6:	f7fd fce3 	bl	80014a0 <HAL_GetTick>
 8003ada:	4602      	mov	r2, r0
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	1ad3      	subs	r3, r2, r3
 8003ae0:	683a      	ldr	r2, [r7, #0]
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d803      	bhi.n	8003aee <HAL_SPI_Transmit+0x160>
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003aec:	d102      	bne.n	8003af4 <HAL_SPI_Transmit+0x166>
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d109      	bne.n	8003b08 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003b04:	2303      	movs	r3, #3
 8003b06:	e082      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b0c:	b29b      	uxth	r3, r3
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1c7      	bne.n	8003aa2 <HAL_SPI_Transmit+0x114>
 8003b12:	e053      	b.n	8003bbc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d002      	beq.n	8003b22 <HAL_SPI_Transmit+0x194>
 8003b1c:	8b7b      	ldrh	r3, [r7, #26]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d147      	bne.n	8003bb2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	330c      	adds	r3, #12
 8003b2c:	7812      	ldrb	r2, [r2, #0]
 8003b2e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b34:	1c5a      	adds	r2, r3, #1
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b3e:	b29b      	uxth	r3, r3
 8003b40:	3b01      	subs	r3, #1
 8003b42:	b29a      	uxth	r2, r3
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b48:	e033      	b.n	8003bb2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f003 0302 	and.w	r3, r3, #2
 8003b54:	2b02      	cmp	r3, #2
 8003b56:	d113      	bne.n	8003b80 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	330c      	adds	r3, #12
 8003b62:	7812      	ldrb	r2, [r2, #0]
 8003b64:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b6a:	1c5a      	adds	r2, r3, #1
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003b7e:	e018      	b.n	8003bb2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b80:	f7fd fc8e 	bl	80014a0 <HAL_GetTick>
 8003b84:	4602      	mov	r2, r0
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	1ad3      	subs	r3, r2, r3
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d803      	bhi.n	8003b98 <HAL_SPI_Transmit+0x20a>
 8003b90:	683b      	ldr	r3, [r7, #0]
 8003b92:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b96:	d102      	bne.n	8003b9e <HAL_SPI_Transmit+0x210>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d109      	bne.n	8003bb2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e02d      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003bb6:	b29b      	uxth	r3, r3
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d1c6      	bne.n	8003b4a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bbc:	69fa      	ldr	r2, [r7, #28]
 8003bbe:	6839      	ldr	r1, [r7, #0]
 8003bc0:	68f8      	ldr	r0, [r7, #12]
 8003bc2:	f000 f8b1 	bl	8003d28 <SPI_EndRxTxTransaction>
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d002      	beq.n	8003bd2 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	689b      	ldr	r3, [r3, #8]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d10a      	bne.n	8003bf0 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bda:	2300      	movs	r3, #0
 8003bdc:	617b      	str	r3, [r7, #20]
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68db      	ldr	r3, [r3, #12]
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d001      	beq.n	8003c0c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003c08:	2301      	movs	r3, #1
 8003c0a:	e000      	b.n	8003c0e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003c0c:	2300      	movs	r3, #0
  }
}
 8003c0e:	4618      	mov	r0, r3
 8003c10:	3720      	adds	r7, #32
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}
	...

08003c18 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b088      	sub	sp, #32
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	603b      	str	r3, [r7, #0]
 8003c24:	4613      	mov	r3, r2
 8003c26:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c28:	f7fd fc3a 	bl	80014a0 <HAL_GetTick>
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c30:	1a9b      	subs	r3, r3, r2
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	4413      	add	r3, r2
 8003c36:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c38:	f7fd fc32 	bl	80014a0 <HAL_GetTick>
 8003c3c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c3e:	4b39      	ldr	r3, [pc, #228]	@ (8003d24 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	015b      	lsls	r3, r3, #5
 8003c44:	0d1b      	lsrs	r3, r3, #20
 8003c46:	69fa      	ldr	r2, [r7, #28]
 8003c48:	fb02 f303 	mul.w	r3, r2, r3
 8003c4c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c4e:	e055      	b.n	8003cfc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c56:	d051      	beq.n	8003cfc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c58:	f7fd fc22 	bl	80014a0 <HAL_GetTick>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	1ad3      	subs	r3, r2, r3
 8003c62:	69fa      	ldr	r2, [r7, #28]
 8003c64:	429a      	cmp	r2, r3
 8003c66:	d902      	bls.n	8003c6e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c68:	69fb      	ldr	r3, [r7, #28]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d13d      	bne.n	8003cea <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685a      	ldr	r2, [r3, #4]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c7c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c86:	d111      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	689b      	ldr	r3, [r3, #8]
 8003c8c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c90:	d004      	beq.n	8003c9c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c9a:	d107      	bne.n	8003cac <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003caa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cb4:	d10f      	bne.n	8003cd6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cc4:	601a      	str	r2, [r3, #0]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	681a      	ldr	r2, [r3, #0]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cd4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2201      	movs	r2, #1
 8003cda:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ce6:	2303      	movs	r3, #3
 8003ce8:	e018      	b.n	8003d1c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d102      	bne.n	8003cf6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	61fb      	str	r3, [r7, #28]
 8003cf4:	e002      	b.n	8003cfc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003cf6:	697b      	ldr	r3, [r7, #20]
 8003cf8:	3b01      	subs	r3, #1
 8003cfa:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	689a      	ldr	r2, [r3, #8]
 8003d02:	68bb      	ldr	r3, [r7, #8]
 8003d04:	4013      	ands	r3, r2
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	429a      	cmp	r2, r3
 8003d0a:	bf0c      	ite	eq
 8003d0c:	2301      	moveq	r3, #1
 8003d0e:	2300      	movne	r3, #0
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	461a      	mov	r2, r3
 8003d14:	79fb      	ldrb	r3, [r7, #7]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	d19a      	bne.n	8003c50 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	4618      	mov	r0, r3
 8003d1e:	3720      	adds	r7, #32
 8003d20:	46bd      	mov	sp, r7
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	20000000 	.word	0x20000000

08003d28 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b088      	sub	sp, #32
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	60f8      	str	r0, [r7, #12]
 8003d30:	60b9      	str	r1, [r7, #8]
 8003d32:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	9300      	str	r3, [sp, #0]
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	2102      	movs	r1, #2
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f7ff ff6a 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d007      	beq.n	8003d5a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d56:	2303      	movs	r3, #3
 8003d58:	e032      	b.n	8003dc0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8003dc8 <SPI_EndRxTxTransaction+0xa0>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a1b      	ldr	r2, [pc, #108]	@ (8003dcc <SPI_EndRxTxTransaction+0xa4>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	0d5b      	lsrs	r3, r3, #21
 8003d66:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d6a:	fb02 f303 	mul.w	r3, r2, r3
 8003d6e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d78:	d112      	bne.n	8003da0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2200      	movs	r2, #0
 8003d82:	2180      	movs	r1, #128	@ 0x80
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f7ff ff47 	bl	8003c18 <SPI_WaitFlagStateUntilTimeout>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d016      	beq.n	8003dbe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d94:	f043 0220 	orr.w	r2, r3, #32
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d9c:	2303      	movs	r3, #3
 8003d9e:	e00f      	b.n	8003dc0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003da0:	697b      	ldr	r3, [r7, #20]
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d00a      	beq.n	8003dbc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	3b01      	subs	r3, #1
 8003daa:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689b      	ldr	r3, [r3, #8]
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b80      	cmp	r3, #128	@ 0x80
 8003db8:	d0f2      	beq.n	8003da0 <SPI_EndRxTxTransaction+0x78>
 8003dba:	e000      	b.n	8003dbe <SPI_EndRxTxTransaction+0x96>
        break;
 8003dbc:	bf00      	nop
  }

  return HAL_OK;
 8003dbe:	2300      	movs	r3, #0
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3718      	adds	r7, #24
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}
 8003dc8:	20000000 	.word	0x20000000
 8003dcc:	165e9f81 	.word	0x165e9f81

08003dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b082      	sub	sp, #8
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d101      	bne.n	8003de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e041      	b.n	8003e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d106      	bne.n	8003dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f000 f839 	bl	8003e6e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2202      	movs	r2, #2
 8003e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	3304      	adds	r3, #4
 8003e0c:	4619      	mov	r1, r3
 8003e0e:	4610      	mov	r0, r2
 8003e10:	f000 f9c0 	bl	8004194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b083      	sub	sp, #12
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e76:	bf00      	nop
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
	...

08003e84 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b085      	sub	sp, #20
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e92:	b2db      	uxtb	r3, r3
 8003e94:	2b01      	cmp	r3, #1
 8003e96:	d001      	beq.n	8003e9c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e04e      	b.n	8003f3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2202      	movs	r2, #2
 8003ea0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	68da      	ldr	r2, [r3, #12]
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f042 0201 	orr.w	r2, r2, #1
 8003eb2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	@ (8003f48 <HAL_TIM_Base_Start_IT+0xc4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d022      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ec6:	d01d      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4a1f      	ldr	r2, [pc, #124]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xc8>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d018      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f50 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d013      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a1c      	ldr	r2, [pc, #112]	@ (8003f54 <HAL_TIM_Base_Start_IT+0xd0>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d00e      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4a1b      	ldr	r2, [pc, #108]	@ (8003f58 <HAL_TIM_Base_Start_IT+0xd4>)
 8003eec:	4293      	cmp	r3, r2
 8003eee:	d009      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a19      	ldr	r2, [pc, #100]	@ (8003f5c <HAL_TIM_Base_Start_IT+0xd8>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d004      	beq.n	8003f04 <HAL_TIM_Base_Start_IT+0x80>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a18      	ldr	r2, [pc, #96]	@ (8003f60 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d111      	bne.n	8003f28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0307 	and.w	r3, r3, #7
 8003f0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b06      	cmp	r3, #6
 8003f14:	d010      	beq.n	8003f38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e007      	b.n	8003f38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3714      	adds	r7, #20
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	40010000 	.word	0x40010000
 8003f4c:	40000400 	.word	0x40000400
 8003f50:	40000800 	.word	0x40000800
 8003f54:	40000c00 	.word	0x40000c00
 8003f58:	40010400 	.word	0x40010400
 8003f5c:	40014000 	.word	0x40014000
 8003f60:	40001800 	.word	0x40001800

08003f64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	691b      	ldr	r3, [r3, #16]
 8003f7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	f003 0302 	and.w	r3, r3, #2
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d020      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d01b      	beq.n	8003fc8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f06f 0202 	mvn.w	r2, #2
 8003f98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2201      	movs	r2, #1
 8003f9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	f003 0303 	and.w	r3, r3, #3
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 f8d2 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 8003fb4:	e005      	b.n	8003fc2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f8c4 	bl	8004144 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fbc:	6878      	ldr	r0, [r7, #4]
 8003fbe:	f000 f8d5 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	f003 0304 	and.w	r3, r3, #4
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d020      	beq.n	8004014 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d01b      	beq.n	8004014 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f06f 0204 	mvn.w	r2, #4
 8003fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	699b      	ldr	r3, [r3, #24]
 8003ff2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d003      	beq.n	8004002 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f000 f8ac 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 8004000:	e005      	b.n	800400e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f89e 	bl	8004144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f000 f8af 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2200      	movs	r2, #0
 8004012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	f003 0308 	and.w	r3, r3, #8
 800401a:	2b00      	cmp	r3, #0
 800401c:	d020      	beq.n	8004060 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f003 0308 	and.w	r3, r3, #8
 8004024:	2b00      	cmp	r3, #0
 8004026:	d01b      	beq.n	8004060 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f06f 0208 	mvn.w	r2, #8
 8004030:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2204      	movs	r2, #4
 8004036:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	69db      	ldr	r3, [r3, #28]
 800403e:	f003 0303 	and.w	r3, r3, #3
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f000 f886 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 800404c:	e005      	b.n	800405a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f878 	bl	8004144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004054:	6878      	ldr	r0, [r7, #4]
 8004056:	f000 f889 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2200      	movs	r2, #0
 800405e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f003 0310 	and.w	r3, r3, #16
 8004066:	2b00      	cmp	r3, #0
 8004068:	d020      	beq.n	80040ac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	f003 0310 	and.w	r3, r3, #16
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01b      	beq.n	80040ac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0210 	mvn.w	r2, #16
 800407c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2208      	movs	r2, #8
 8004082:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	69db      	ldr	r3, [r3, #28]
 800408a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800408e:	2b00      	cmp	r3, #0
 8004090:	d003      	beq.n	800409a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f860 	bl	8004158 <HAL_TIM_IC_CaptureCallback>
 8004098:	e005      	b.n	80040a6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f852 	bl	8004144 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f863 	bl	800416c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	f003 0301 	and.w	r3, r3, #1
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00c      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	f003 0301 	and.w	r3, r3, #1
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d007      	beq.n	80040d0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f06f 0201 	mvn.w	r2, #1
 80040c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f7fc ff66 	bl	8000f9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00c      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d007      	beq.n	80040f4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f900 	bl	80042f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00c      	beq.n	8004118 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004104:	2b00      	cmp	r3, #0
 8004106:	d007      	beq.n	8004118 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f834 	bl	8004180 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f003 0320 	and.w	r3, r3, #32
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00c      	beq.n	800413c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b00      	cmp	r3, #0
 800412a:	d007      	beq.n	800413c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f06f 0220 	mvn.w	r2, #32
 8004134:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8d2 	bl	80042e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800413c:	bf00      	nop
 800413e:	3710      	adds	r7, #16
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}

08004144 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004144:	b480      	push	{r7}
 8004146:	b083      	sub	sp, #12
 8004148:	af00      	add	r7, sp, #0
 800414a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800414c:	bf00      	nop
 800414e:	370c      	adds	r7, #12
 8004150:	46bd      	mov	sp, r7
 8004152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004156:	4770      	bx	lr

08004158 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004158:	b480      	push	{r7}
 800415a:	b083      	sub	sp, #12
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800416c:	b480      	push	{r7}
 800416e:	b083      	sub	sp, #12
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004174:	bf00      	nop
 8004176:	370c      	adds	r7, #12
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004180:	b480      	push	{r7}
 8004182:	b083      	sub	sp, #12
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004188:	bf00      	nop
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004192:	4770      	bx	lr

08004194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	4a43      	ldr	r2, [pc, #268]	@ (80042b4 <TIM_Base_SetConfig+0x120>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	d013      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041b2:	d00f      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a40      	ldr	r2, [pc, #256]	@ (80042b8 <TIM_Base_SetConfig+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d00b      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a3f      	ldr	r2, [pc, #252]	@ (80042bc <TIM_Base_SetConfig+0x128>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d007      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a3e      	ldr	r2, [pc, #248]	@ (80042c0 <TIM_Base_SetConfig+0x12c>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d003      	beq.n	80041d4 <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a3d      	ldr	r2, [pc, #244]	@ (80042c4 <TIM_Base_SetConfig+0x130>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d108      	bne.n	80041e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	4a32      	ldr	r2, [pc, #200]	@ (80042b4 <TIM_Base_SetConfig+0x120>)
 80041ea:	4293      	cmp	r3, r2
 80041ec:	d02b      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041f4:	d027      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	4a2f      	ldr	r2, [pc, #188]	@ (80042b8 <TIM_Base_SetConfig+0x124>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d023      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a2e      	ldr	r2, [pc, #184]	@ (80042bc <TIM_Base_SetConfig+0x128>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d01f      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	4a2d      	ldr	r2, [pc, #180]	@ (80042c0 <TIM_Base_SetConfig+0x12c>)
 800420a:	4293      	cmp	r3, r2
 800420c:	d01b      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2c      	ldr	r2, [pc, #176]	@ (80042c4 <TIM_Base_SetConfig+0x130>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d017      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <TIM_Base_SetConfig+0x134>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d013      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2a      	ldr	r2, [pc, #168]	@ (80042cc <TIM_Base_SetConfig+0x138>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d00f      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a29      	ldr	r2, [pc, #164]	@ (80042d0 <TIM_Base_SetConfig+0x13c>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d00b      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a28      	ldr	r2, [pc, #160]	@ (80042d4 <TIM_Base_SetConfig+0x140>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d007      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a27      	ldr	r2, [pc, #156]	@ (80042d8 <TIM_Base_SetConfig+0x144>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d003      	beq.n	8004246 <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a26      	ldr	r2, [pc, #152]	@ (80042dc <TIM_Base_SetConfig+0x148>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d108      	bne.n	8004258 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800424c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	68db      	ldr	r3, [r3, #12]
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	4313      	orrs	r3, r2
 8004256:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	4313      	orrs	r3, r2
 8004264:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689a      	ldr	r2, [r3, #8]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	4a0e      	ldr	r2, [pc, #56]	@ (80042b4 <TIM_Base_SetConfig+0x120>)
 800427a:	4293      	cmp	r3, r2
 800427c:	d003      	beq.n	8004286 <TIM_Base_SetConfig+0xf2>
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	4a10      	ldr	r2, [pc, #64]	@ (80042c4 <TIM_Base_SetConfig+0x130>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d103      	bne.n	800428e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	691a      	ldr	r2, [r3, #16]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f043 0204 	orr.w	r2, r3, #4
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	68fa      	ldr	r2, [r7, #12]
 80042a4:	601a      	str	r2, [r3, #0]
}
 80042a6:	bf00      	nop
 80042a8:	3714      	adds	r7, #20
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr
 80042b2:	bf00      	nop
 80042b4:	40010000 	.word	0x40010000
 80042b8:	40000400 	.word	0x40000400
 80042bc:	40000800 	.word	0x40000800
 80042c0:	40000c00 	.word	0x40000c00
 80042c4:	40010400 	.word	0x40010400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	40014400 	.word	0x40014400
 80042d0:	40014800 	.word	0x40014800
 80042d4:	40001800 	.word	0x40001800
 80042d8:	40001c00 	.word	0x40001c00
 80042dc:	40002000 	.word	0x40002000

080042e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80042e8:	bf00      	nop
 80042ea:	370c      	adds	r7, #12
 80042ec:	46bd      	mov	sp, r7
 80042ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f2:	4770      	bx	lr

080042f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b083      	sub	sp, #12
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80042fc:	bf00      	nop
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <__NVIC_SetPriority>:
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	4603      	mov	r3, r0
 8004310:	6039      	str	r1, [r7, #0]
 8004312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004318:	2b00      	cmp	r3, #0
 800431a:	db0a      	blt.n	8004332 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	b2da      	uxtb	r2, r3
 8004320:	490c      	ldr	r1, [pc, #48]	@ (8004354 <__NVIC_SetPriority+0x4c>)
 8004322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004326:	0112      	lsls	r2, r2, #4
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	440b      	add	r3, r1
 800432c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004330:	e00a      	b.n	8004348 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	b2da      	uxtb	r2, r3
 8004336:	4908      	ldr	r1, [pc, #32]	@ (8004358 <__NVIC_SetPriority+0x50>)
 8004338:	79fb      	ldrb	r3, [r7, #7]
 800433a:	f003 030f 	and.w	r3, r3, #15
 800433e:	3b04      	subs	r3, #4
 8004340:	0112      	lsls	r2, r2, #4
 8004342:	b2d2      	uxtb	r2, r2
 8004344:	440b      	add	r3, r1
 8004346:	761a      	strb	r2, [r3, #24]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	e000e100 	.word	0xe000e100
 8004358:	e000ed00 	.word	0xe000ed00

0800435c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800435c:	b580      	push	{r7, lr}
 800435e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004360:	4b05      	ldr	r3, [pc, #20]	@ (8004378 <SysTick_Handler+0x1c>)
 8004362:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004364:	f002 f9d2 	bl	800670c <xTaskGetSchedulerState>
 8004368:	4603      	mov	r3, r0
 800436a:	2b01      	cmp	r3, #1
 800436c:	d001      	beq.n	8004372 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800436e:	f003 f803 	bl	8007378 <xPortSysTickHandler>
  }
}
 8004372:	bf00      	nop
 8004374:	bd80      	pop	{r7, pc}
 8004376:	bf00      	nop
 8004378:	e000e010 	.word	0xe000e010

0800437c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800437c:	b580      	push	{r7, lr}
 800437e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004380:	2100      	movs	r1, #0
 8004382:	f06f 0004 	mvn.w	r0, #4
 8004386:	f7ff ffbf 	bl	8004308 <__NVIC_SetPriority>
#endif
}
 800438a:	bf00      	nop
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004396:	f3ef 8305 	mrs	r3, IPSR
 800439a:	603b      	str	r3, [r7, #0]
  return(result);
 800439c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d003      	beq.n	80043aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80043a2:	f06f 0305 	mvn.w	r3, #5
 80043a6:	607b      	str	r3, [r7, #4]
 80043a8:	e00c      	b.n	80043c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80043aa:	4b0a      	ldr	r3, [pc, #40]	@ (80043d4 <osKernelInitialize+0x44>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d105      	bne.n	80043be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80043b2:	4b08      	ldr	r3, [pc, #32]	@ (80043d4 <osKernelInitialize+0x44>)
 80043b4:	2201      	movs	r2, #1
 80043b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80043b8:	2300      	movs	r3, #0
 80043ba:	607b      	str	r3, [r7, #4]
 80043bc:	e002      	b.n	80043c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80043be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80043c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043c4:	687b      	ldr	r3, [r7, #4]
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	370c      	adds	r7, #12
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	20000780 	.word	0x20000780

080043d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80043d8:	b580      	push	{r7, lr}
 80043da:	b082      	sub	sp, #8
 80043dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043de:	f3ef 8305 	mrs	r3, IPSR
 80043e2:	603b      	str	r3, [r7, #0]
  return(result);
 80043e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d003      	beq.n	80043f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80043ea:	f06f 0305 	mvn.w	r3, #5
 80043ee:	607b      	str	r3, [r7, #4]
 80043f0:	e010      	b.n	8004414 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80043f2:	4b0b      	ldr	r3, [pc, #44]	@ (8004420 <osKernelStart+0x48>)
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	2b01      	cmp	r3, #1
 80043f8:	d109      	bne.n	800440e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80043fa:	f7ff ffbf 	bl	800437c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043fe:	4b08      	ldr	r3, [pc, #32]	@ (8004420 <osKernelStart+0x48>)
 8004400:	2202      	movs	r2, #2
 8004402:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004404:	f001 fc7c 	bl	8005d00 <vTaskStartScheduler>
      stat = osOK;
 8004408:	2300      	movs	r3, #0
 800440a:	607b      	str	r3, [r7, #4]
 800440c:	e002      	b.n	8004414 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800440e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004412:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004414:	687b      	ldr	r3, [r7, #4]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	20000780 	.word	0x20000780

08004424 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b08e      	sub	sp, #56	@ 0x38
 8004428:	af04      	add	r7, sp, #16
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004434:	f3ef 8305 	mrs	r3, IPSR
 8004438:	617b      	str	r3, [r7, #20]
  return(result);
 800443a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800443c:	2b00      	cmp	r3, #0
 800443e:	d17e      	bne.n	800453e <osThreadNew+0x11a>
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	2b00      	cmp	r3, #0
 8004444:	d07b      	beq.n	800453e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004446:	2380      	movs	r3, #128	@ 0x80
 8004448:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800444a:	2318      	movs	r3, #24
 800444c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004456:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d045      	beq.n	80044ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d002      	beq.n	800446c <osThreadNew+0x48>
        name = attr->name;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800447a:	69fb      	ldr	r3, [r7, #28]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d008      	beq.n	8004492 <osThreadNew+0x6e>
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	2b38      	cmp	r3, #56	@ 0x38
 8004484:	d805      	bhi.n	8004492 <osThreadNew+0x6e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <osThreadNew+0x72>
        return (NULL);
 8004492:	2300      	movs	r3, #0
 8004494:	e054      	b.n	8004540 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	089b      	lsrs	r3, r3, #2
 80044a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00e      	beq.n	80044cc <osThreadNew+0xa8>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2ba7      	cmp	r3, #167	@ 0xa7
 80044b4:	d90a      	bls.n	80044cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d006      	beq.n	80044cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <osThreadNew+0xa8>
        mem = 1;
 80044c6:	2301      	movs	r3, #1
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	e010      	b.n	80044ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	689b      	ldr	r3, [r3, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d10c      	bne.n	80044ee <osThreadNew+0xca>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d108      	bne.n	80044ee <osThreadNew+0xca>
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d104      	bne.n	80044ee <osThreadNew+0xca>
          mem = 0;
 80044e4:	2300      	movs	r3, #0
 80044e6:	61bb      	str	r3, [r7, #24]
 80044e8:	e001      	b.n	80044ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80044ea:	2300      	movs	r3, #0
 80044ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d110      	bne.n	8004516 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80044f8:	687a      	ldr	r2, [r7, #4]
 80044fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044fc:	9202      	str	r2, [sp, #8]
 80044fe:	9301      	str	r3, [sp, #4]
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	6a3a      	ldr	r2, [r7, #32]
 8004508:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f001 fa04 	bl	8005918 <xTaskCreateStatic>
 8004510:	4603      	mov	r3, r0
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	e013      	b.n	800453e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	2b00      	cmp	r3, #0
 800451a:	d110      	bne.n	800453e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800451c:	6a3b      	ldr	r3, [r7, #32]
 800451e:	b29a      	uxth	r2, r3
 8004520:	f107 0310 	add.w	r3, r7, #16
 8004524:	9301      	str	r3, [sp, #4]
 8004526:	69fb      	ldr	r3, [r7, #28]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800452e:	68f8      	ldr	r0, [r7, #12]
 8004530:	f001 fa52 	bl	80059d8 <xTaskCreate>
 8004534:	4603      	mov	r3, r0
 8004536:	2b01      	cmp	r3, #1
 8004538:	d001      	beq.n	800453e <osThreadNew+0x11a>
            hTask = NULL;
 800453a:	2300      	movs	r3, #0
 800453c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800453e:	693b      	ldr	r3, [r7, #16]
}
 8004540:	4618      	mov	r0, r3
 8004542:	3728      	adds	r7, #40	@ 0x28
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004550:	f3ef 8305 	mrs	r3, IPSR
 8004554:	60bb      	str	r3, [r7, #8]
  return(result);
 8004556:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004558:	2b00      	cmp	r3, #0
 800455a:	d003      	beq.n	8004564 <osDelay+0x1c>
    stat = osErrorISR;
 800455c:	f06f 0305 	mvn.w	r3, #5
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	e007      	b.n	8004574 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <osDelay+0x2c>
      vTaskDelay(ticks);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f001 fb90 	bl	8005c94 <vTaskDelay>
    }
  }

  return (stat);
 8004574:	68fb      	ldr	r3, [r7, #12]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3710      	adds	r7, #16
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800457e:	b580      	push	{r7, lr}
 8004580:	b086      	sub	sp, #24
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004586:	2300      	movs	r3, #0
 8004588:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458a:	f3ef 8305 	mrs	r3, IPSR
 800458e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004590:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004592:	2b00      	cmp	r3, #0
 8004594:	d12d      	bne.n	80045f2 <osEventFlagsNew+0x74>
    mem = -1;
 8004596:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800459a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d015      	beq.n	80045ce <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	689b      	ldr	r3, [r3, #8]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d006      	beq.n	80045b8 <osEventFlagsNew+0x3a>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	2b1f      	cmp	r3, #31
 80045b0:	d902      	bls.n	80045b8 <osEventFlagsNew+0x3a>
        mem = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	613b      	str	r3, [r7, #16]
 80045b6:	e00c      	b.n	80045d2 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d108      	bne.n	80045d2 <osEventFlagsNew+0x54>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d104      	bne.n	80045d2 <osEventFlagsNew+0x54>
          mem = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	613b      	str	r3, [r7, #16]
 80045cc:	e001      	b.n	80045d2 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80045ce:	2300      	movs	r3, #0
 80045d0:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d106      	bne.n	80045e6 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 f96f 	bl	80048c0 <xEventGroupCreateStatic>
 80045e2:	6178      	str	r0, [r7, #20]
 80045e4:	e005      	b.n	80045f2 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 80045e6:	693b      	ldr	r3, [r7, #16]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d102      	bne.n	80045f2 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 80045ec:	f000 f9a1 	bl	8004932 <xEventGroupCreate>
 80045f0:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 80045f2:	697b      	ldr	r3, [r7, #20]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3718      	adds	r7, #24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	bd80      	pop	{r7, pc}

080045fc <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b086      	sub	sp, #24
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
 8004604:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <osEventFlagsSet+0x1c>
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004616:	d303      	bcc.n	8004620 <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004618:	f06f 0303 	mvn.w	r3, #3
 800461c:	617b      	str	r3, [r7, #20]
 800461e:	e028      	b.n	8004672 <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004620:	f3ef 8305 	mrs	r3, IPSR
 8004624:	60fb      	str	r3, [r7, #12]
  return(result);
 8004626:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01d      	beq.n	8004668 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800462c:	2300      	movs	r3, #0
 800462e:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004630:	f107 0308 	add.w	r3, r7, #8
 8004634:	461a      	mov	r2, r3
 8004636:	6839      	ldr	r1, [r7, #0]
 8004638:	6938      	ldr	r0, [r7, #16]
 800463a:	f000 fb23 	bl	8004c84 <xEventGroupSetBitsFromISR>
 800463e:	4603      	mov	r3, r0
 8004640:	2b00      	cmp	r3, #0
 8004642:	d103      	bne.n	800464c <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8004644:	f06f 0302 	mvn.w	r3, #2
 8004648:	617b      	str	r3, [r7, #20]
 800464a:	e012      	b.n	8004672 <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00d      	beq.n	8004672 <osEventFlagsSet+0x76>
 8004656:	4b09      	ldr	r3, [pc, #36]	@ (800467c <osEventFlagsSet+0x80>)
 8004658:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	e004      	b.n	8004672 <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004668:	6839      	ldr	r1, [r7, #0]
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f000 fa4e 	bl	8004b0c <xEventGroupSetBits>
 8004670:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004672:	697b      	ldr	r3, [r7, #20]
}
 8004674:	4618      	mov	r0, r3
 8004676:	3718      	adds	r7, #24
 8004678:	46bd      	mov	sp, r7
 800467a:	bd80      	pop	{r7, pc}
 800467c:	e000ed04 	.word	0xe000ed04

08004680 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004680:	b580      	push	{r7, lr}
 8004682:	b08c      	sub	sp, #48	@ 0x30
 8004684:	af02      	add	r7, sp, #8
 8004686:	60f8      	str	r0, [r7, #12]
 8004688:	60b9      	str	r1, [r7, #8]
 800468a:	607a      	str	r2, [r7, #4]
 800468c:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d003      	beq.n	80046a0 <osEventFlagsWait+0x20>
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800469e:	d303      	bcc.n	80046a8 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80046a0:	f06f 0303 	mvn.w	r3, #3
 80046a4:	61fb      	str	r3, [r7, #28]
 80046a6:	e04b      	b.n	8004740 <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046a8:	f3ef 8305 	mrs	r3, IPSR
 80046ac:	617b      	str	r3, [r7, #20]
  return(result);
 80046ae:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d003      	beq.n	80046bc <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 80046b4:	f06f 0305 	mvn.w	r3, #5
 80046b8:	61fb      	str	r3, [r7, #28]
 80046ba:	e041      	b.n	8004740 <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	f003 0301 	and.w	r3, r3, #1
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d002      	beq.n	80046cc <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 80046c6:	2301      	movs	r3, #1
 80046c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80046ca:	e001      	b.n	80046d0 <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 80046cc:	2300      	movs	r3, #0
 80046ce:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	f003 0302 	and.w	r3, r3, #2
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d002      	beq.n	80046e0 <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 80046da:	2300      	movs	r3, #0
 80046dc:	623b      	str	r3, [r7, #32]
 80046de:	e001      	b.n	80046e4 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 80046e0:	2301      	movs	r3, #1
 80046e2:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	9300      	str	r3, [sp, #0]
 80046e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046ea:	6a3a      	ldr	r2, [r7, #32]
 80046ec:	68b9      	ldr	r1, [r7, #8]
 80046ee:	69b8      	ldr	r0, [r7, #24]
 80046f0:	f000 f93a 	bl	8004968 <xEventGroupWaitBits>
 80046f4:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d010      	beq.n	8004722 <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8004700:	68ba      	ldr	r2, [r7, #8]
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	4013      	ands	r3, r2
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	429a      	cmp	r2, r3
 800470a:	d019      	beq.n	8004740 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d003      	beq.n	800471a <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8004712:	f06f 0301 	mvn.w	r3, #1
 8004716:	61fb      	str	r3, [r7, #28]
 8004718:	e012      	b.n	8004740 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800471a:	f06f 0302 	mvn.w	r3, #2
 800471e:	61fb      	str	r3, [r7, #28]
 8004720:	e00e      	b.n	8004740 <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004722:	68ba      	ldr	r2, [r7, #8]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	4013      	ands	r3, r2
 8004728:	2b00      	cmp	r3, #0
 800472a:	d109      	bne.n	8004740 <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d003      	beq.n	800473a <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8004732:	f06f 0301 	mvn.w	r3, #1
 8004736:	61fb      	str	r3, [r7, #28]
 8004738:	e002      	b.n	8004740 <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 800473a:	f06f 0302 	mvn.w	r3, #2
 800473e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004740:	69fb      	ldr	r3, [r7, #28]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3728      	adds	r7, #40	@ 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800474a:	b580      	push	{r7, lr}
 800474c:	b088      	sub	sp, #32
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004752:	2300      	movs	r3, #0
 8004754:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004756:	f3ef 8305 	mrs	r3, IPSR
 800475a:	60bb      	str	r3, [r7, #8]
  return(result);
 800475c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800475e:	2b00      	cmp	r3, #0
 8004760:	d174      	bne.n	800484c <osMutexNew+0x102>
    if (attr != NULL) {
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	61bb      	str	r3, [r7, #24]
 800476e:	e001      	b.n	8004774 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004770:	2300      	movs	r3, #0
 8004772:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004774:	69bb      	ldr	r3, [r7, #24]
 8004776:	f003 0301 	and.w	r3, r3, #1
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <osMutexNew+0x3a>
      rmtx = 1U;
 800477e:	2301      	movs	r3, #1
 8004780:	617b      	str	r3, [r7, #20]
 8004782:	e001      	b.n	8004788 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004788:	69bb      	ldr	r3, [r7, #24]
 800478a:	f003 0308 	and.w	r3, r3, #8
 800478e:	2b00      	cmp	r3, #0
 8004790:	d15c      	bne.n	800484c <osMutexNew+0x102>
      mem = -1;
 8004792:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004796:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d015      	beq.n	80047ca <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d006      	beq.n	80047b4 <osMutexNew+0x6a>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68db      	ldr	r3, [r3, #12]
 80047aa:	2b4f      	cmp	r3, #79	@ 0x4f
 80047ac:	d902      	bls.n	80047b4 <osMutexNew+0x6a>
          mem = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	613b      	str	r3, [r7, #16]
 80047b2:	e00c      	b.n	80047ce <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	689b      	ldr	r3, [r3, #8]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d108      	bne.n	80047ce <osMutexNew+0x84>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d104      	bne.n	80047ce <osMutexNew+0x84>
            mem = 0;
 80047c4:	2300      	movs	r3, #0
 80047c6:	613b      	str	r3, [r7, #16]
 80047c8:	e001      	b.n	80047ce <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80047ca:	2300      	movs	r3, #0
 80047cc:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	2b01      	cmp	r3, #1
 80047d2:	d112      	bne.n	80047fa <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80047d4:	697b      	ldr	r3, [r7, #20]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4619      	mov	r1, r3
 80047e0:	2004      	movs	r0, #4
 80047e2:	f000 fc8e 	bl	8005102 <xQueueCreateMutexStatic>
 80047e6:	61f8      	str	r0, [r7, #28]
 80047e8:	e016      	b.n	8004818 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	4619      	mov	r1, r3
 80047f0:	2001      	movs	r0, #1
 80047f2:	f000 fc86 	bl	8005102 <xQueueCreateMutexStatic>
 80047f6:	61f8      	str	r0, [r7, #28]
 80047f8:	e00e      	b.n	8004818 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10b      	bne.n	8004818 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d004      	beq.n	8004810 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004806:	2004      	movs	r0, #4
 8004808:	f000 fc63 	bl	80050d2 <xQueueCreateMutex>
 800480c:	61f8      	str	r0, [r7, #28]
 800480e:	e003      	b.n	8004818 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8004810:	2001      	movs	r0, #1
 8004812:	f000 fc5e 	bl	80050d2 <xQueueCreateMutex>
 8004816:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d00c      	beq.n	8004838 <osMutexNew+0xee>
        if (attr != NULL) {
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <osMutexNew+0xe2>
          name = attr->name;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	e001      	b.n	8004830 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800482c:	2300      	movs	r3, #0
 800482e:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8004830:	68f9      	ldr	r1, [r7, #12]
 8004832:	69f8      	ldr	r0, [r7, #28]
 8004834:	f001 f812 	bl	800585c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d006      	beq.n	800484c <osMutexNew+0x102>
 800483e:	697b      	ldr	r3, [r7, #20]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d003      	beq.n	800484c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f043 0301 	orr.w	r3, r3, #1
 800484a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800484c:	69fb      	ldr	r3, [r7, #28]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3720      	adds	r7, #32
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004858:	b480      	push	{r7}
 800485a:	b085      	sub	sp, #20
 800485c:	af00      	add	r7, sp, #0
 800485e:	60f8      	str	r0, [r7, #12]
 8004860:	60b9      	str	r1, [r7, #8]
 8004862:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	4a07      	ldr	r2, [pc, #28]	@ (8004884 <vApplicationGetIdleTaskMemory+0x2c>)
 8004868:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	4a06      	ldr	r2, [pc, #24]	@ (8004888 <vApplicationGetIdleTaskMemory+0x30>)
 800486e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2280      	movs	r2, #128	@ 0x80
 8004874:	601a      	str	r2, [r3, #0]
}
 8004876:	bf00      	nop
 8004878:	3714      	adds	r7, #20
 800487a:	46bd      	mov	sp, r7
 800487c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004880:	4770      	bx	lr
 8004882:	bf00      	nop
 8004884:	20000784 	.word	0x20000784
 8004888:	2000082c 	.word	0x2000082c

0800488c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a07      	ldr	r2, [pc, #28]	@ (80048b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800489c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a06      	ldr	r2, [pc, #24]	@ (80048bc <vApplicationGetTimerTaskMemory+0x30>)
 80048a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80048aa:	601a      	str	r2, [r3, #0]
}
 80048ac:	bf00      	nop
 80048ae:	3714      	adds	r7, #20
 80048b0:	46bd      	mov	sp, r7
 80048b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b6:	4770      	bx	lr
 80048b8:	20000a2c 	.word	0x20000a2c
 80048bc:	20000ad4 	.word	0x20000ad4

080048c0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10b      	bne.n	80048e6 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80048e0:	bf00      	nop
 80048e2:	bf00      	nop
 80048e4:	e7fd      	b.n	80048e2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80048e6:	2320      	movs	r3, #32
 80048e8:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	2b20      	cmp	r3, #32
 80048ee:	d00b      	beq.n	8004908 <xEventGroupCreateStatic+0x48>
	__asm volatile
 80048f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f4:	f383 8811 	msr	BASEPRI, r3
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	f3bf 8f4f 	dsb	sy
 8004900:	60fb      	str	r3, [r7, #12]
}
 8004902:	bf00      	nop
 8004904:	bf00      	nop
 8004906:	e7fd      	b.n	8004904 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	2b00      	cmp	r3, #0
 8004910:	d00a      	beq.n	8004928 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	3304      	adds	r3, #4
 800491c:	4618      	mov	r0, r3
 800491e:	f000 f9c5 	bl	8004cac <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	2201      	movs	r2, #1
 8004926:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8004928:	697b      	ldr	r3, [r7, #20]
	}
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}

08004932 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8004932:	b580      	push	{r7, lr}
 8004934:	b082      	sub	sp, #8
 8004936:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8004938:	2020      	movs	r0, #32
 800493a:	f002 fdaf 	bl	800749c <pvPortMalloc>
 800493e:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d00a      	beq.n	800495c <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	3304      	adds	r3, #4
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f9ab 	bl	8004cac <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2200      	movs	r2, #0
 800495a:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800495c:	687b      	ldr	r3, [r7, #4]
	}
 800495e:	4618      	mov	r0, r3
 8004960:	3708      	adds	r7, #8
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
	...

08004968 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8004968:	b580      	push	{r7, lr}
 800496a:	b090      	sub	sp, #64	@ 0x40
 800496c:	af00      	add	r7, sp, #0
 800496e:	60f8      	str	r0, [r7, #12]
 8004970:	60b9      	str	r1, [r7, #8]
 8004972:	607a      	str	r2, [r7, #4]
 8004974:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800497a:	2300      	movs	r3, #0
 800497c:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d10b      	bne.n	80049a0 <xEventGroupWaitBits+0x38>
	__asm volatile
 8004988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800498c:	f383 8811 	msr	BASEPRI, r3
 8004990:	f3bf 8f6f 	isb	sy
 8004994:	f3bf 8f4f 	dsb	sy
 8004998:	623b      	str	r3, [r7, #32]
}
 800499a:	bf00      	nop
 800499c:	bf00      	nop
 800499e:	e7fd      	b.n	800499c <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80049a6:	d30b      	bcc.n	80049c0 <xEventGroupWaitBits+0x58>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	61fb      	str	r3, [r7, #28]
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <xEventGroupWaitBits+0x76>
	__asm volatile
 80049c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ca:	f383 8811 	msr	BASEPRI, r3
 80049ce:	f3bf 8f6f 	isb	sy
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	61bb      	str	r3, [r7, #24]
}
 80049d8:	bf00      	nop
 80049da:	bf00      	nop
 80049dc:	e7fd      	b.n	80049da <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80049de:	f001 fe95 	bl	800670c <xTaskGetSchedulerState>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d102      	bne.n	80049ee <xEventGroupWaitBits+0x86>
 80049e8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d101      	bne.n	80049f2 <xEventGroupWaitBits+0x8a>
 80049ee:	2301      	movs	r3, #1
 80049f0:	e000      	b.n	80049f4 <xEventGroupWaitBits+0x8c>
 80049f2:	2300      	movs	r3, #0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d10b      	bne.n	8004a10 <xEventGroupWaitBits+0xa8>
	__asm volatile
 80049f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049fc:	f383 8811 	msr	BASEPRI, r3
 8004a00:	f3bf 8f6f 	isb	sy
 8004a04:	f3bf 8f4f 	dsb	sy
 8004a08:	617b      	str	r3, [r7, #20]
}
 8004a0a:	bf00      	nop
 8004a0c:	bf00      	nop
 8004a0e:	e7fd      	b.n	8004a0c <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8004a10:	f001 f9e6 	bl	8005de0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8004a14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	68b9      	ldr	r1, [r7, #8]
 8004a1e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004a20:	f000 f90d 	bl	8004c3e <prvTestWaitCondition>
 8004a24:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00e      	beq.n	8004a4a <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8004a2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8004a30:	2300      	movs	r3, #0
 8004a32:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d028      	beq.n	8004a8c <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004a3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68bb      	ldr	r3, [r7, #8]
 8004a40:	43db      	mvns	r3, r3
 8004a42:	401a      	ands	r2, r3
 8004a44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a46:	601a      	str	r2, [r3, #0]
 8004a48:	e020      	b.n	8004a8c <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d104      	bne.n	8004a5a <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8004a50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8004a54:	2301      	movs	r3, #1
 8004a56:	633b      	str	r3, [r7, #48]	@ 0x30
 8004a58:	e018      	b.n	8004a8c <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d003      	beq.n	8004a68 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8004a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a62:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004a66:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a70:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a74:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8004a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a78:	1d18      	adds	r0, r3, #4
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7e:	4313      	orrs	r3, r2
 8004a80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a82:	4619      	mov	r1, r3
 8004a84:	f001 fbae 	bl	80061e4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8004a88:	2300      	movs	r3, #0
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8004a8c:	f001 f9b6 	bl	8005dfc <xTaskResumeAll>
 8004a90:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8004a92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d031      	beq.n	8004afc <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8004a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d107      	bne.n	8004aae <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8004a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8004b08 <xEventGroupWaitBits+0x1a0>)
 8004aa0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004aa4:	601a      	str	r2, [r3, #0]
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8004aae:	f001 febb 	bl	8006828 <uxTaskResetEventItemValue>
 8004ab2:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8004ab4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ab6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d11a      	bne.n	8004af4 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8004abe:	f002 fbcb 	bl	8007258 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8004ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8004ac8:	683a      	ldr	r2, [r7, #0]
 8004aca:	68b9      	ldr	r1, [r7, #8]
 8004acc:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8004ace:	f000 f8b6 	bl	8004c3e <prvTestWaitCondition>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d009      	beq.n	8004aec <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d006      	beq.n	8004aec <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8004ade:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	401a      	ands	r2, r3
 8004ae8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aea:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8004aec:	2301      	movs	r3, #1
 8004aee:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8004af0:	f002 fbe4 	bl	80072bc <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004af4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004af6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004afa:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8004afc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004afe:	4618      	mov	r0, r3
 8004b00:	3740      	adds	r7, #64	@ 0x40
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}
 8004b06:	bf00      	nop
 8004b08:	e000ed04 	.word	0xe000ed04

08004b0c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8004b0c:	b580      	push	{r7, lr}
 8004b0e:	b08e      	sub	sp, #56	@ 0x38
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	6078      	str	r0, [r7, #4]
 8004b14:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8004b16:	2300      	movs	r3, #0
 8004b18:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d10b      	bne.n	8004b40 <xEventGroupSetBits+0x34>
	__asm volatile
 8004b28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b2c:	f383 8811 	msr	BASEPRI, r3
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	f3bf 8f4f 	dsb	sy
 8004b38:	613b      	str	r3, [r7, #16]
}
 8004b3a:	bf00      	nop
 8004b3c:	bf00      	nop
 8004b3e:	e7fd      	b.n	8004b3c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b46:	d30b      	bcc.n	8004b60 <xEventGroupSetBits+0x54>
	__asm volatile
 8004b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b4c:	f383 8811 	msr	BASEPRI, r3
 8004b50:	f3bf 8f6f 	isb	sy
 8004b54:	f3bf 8f4f 	dsb	sy
 8004b58:	60fb      	str	r3, [r7, #12]
}
 8004b5a:	bf00      	nop
 8004b5c:	bf00      	nop
 8004b5e:	e7fd      	b.n	8004b5c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8004b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b62:	3304      	adds	r3, #4
 8004b64:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b68:	3308      	adds	r3, #8
 8004b6a:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8004b6c:	f001 f938 	bl	8005de0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8004b70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	431a      	orrs	r2, r3
 8004b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b80:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8004b82:	e03c      	b.n	8004bfe <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8004b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8004b8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8004b90:	2300      	movs	r3, #0
 8004b92:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8004b9a:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8004b9c:	69bb      	ldr	r3, [r7, #24]
 8004b9e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8004ba2:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d108      	bne.n	8004bc0 <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8004bae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb0:	681a      	ldr	r2, [r3, #0]
 8004bb2:	69bb      	ldr	r3, [r7, #24]
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d00b      	beq.n	8004bd2 <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004bbe:	e008      	b.n	8004bd2 <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8004bc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bc2:	681a      	ldr	r2, [r3, #0]
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	4013      	ands	r3, r2
 8004bc8:	69ba      	ldr	r2, [r7, #24]
 8004bca:	429a      	cmp	r2, r3
 8004bcc:	d101      	bne.n	8004bd2 <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8004bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d010      	beq.n	8004bfa <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d003      	beq.n	8004bea <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8004be2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004be4:	69bb      	ldr	r3, [r7, #24]
 8004be6:	4313      	orrs	r3, r2
 8004be8:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8004bf6:	f001 fbc3 	bl	8006380 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8004bfa:	69fb      	ldr	r3, [r7, #28]
 8004bfc:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8004bfe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c00:	6a3b      	ldr	r3, [r7, #32]
 8004c02:	429a      	cmp	r2, r3
 8004c04:	d1be      	bne.n	8004b84 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c0c:	43db      	mvns	r3, r3
 8004c0e:	401a      	ands	r2, r3
 8004c10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c12:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8004c14:	f001 f8f2 	bl	8005dfc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8004c18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c1a:	681b      	ldr	r3, [r3, #0]
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3738      	adds	r7, #56	@ 0x38
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}

08004c24 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8004c24:	b580      	push	{r7, lr}
 8004c26:	b082      	sub	sp, #8
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8004c2e:	6839      	ldr	r1, [r7, #0]
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff ff6b 	bl	8004b0c <xEventGroupSetBits>
}
 8004c36:	bf00      	nop
 8004c38:	3708      	adds	r7, #8
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}

08004c3e <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8004c3e:	b480      	push	{r7}
 8004c40:	b087      	sub	sp, #28
 8004c42:	af00      	add	r7, sp, #0
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	60b9      	str	r1, [r7, #8]
 8004c48:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d107      	bne.n	8004c64 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	4013      	ands	r3, r2
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d00a      	beq.n	8004c74 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	617b      	str	r3, [r7, #20]
 8004c62:	e007      	b.n	8004c74 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	4013      	ands	r3, r2
 8004c6a:	68ba      	ldr	r2, [r7, #8]
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d101      	bne.n	8004c74 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8004c70:	2301      	movs	r3, #1
 8004c72:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8004c74:	697b      	ldr	r3, [r7, #20]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	371c      	adds	r7, #28
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
	...

08004c84 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b086      	sub	sp, #24
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	60f8      	str	r0, [r7, #12]
 8004c8c:	60b9      	str	r1, [r7, #8]
 8004c8e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	68f9      	ldr	r1, [r7, #12]
 8004c96:	4804      	ldr	r0, [pc, #16]	@ (8004ca8 <xEventGroupSetBitsFromISR+0x24>)
 8004c98:	f002 f98c 	bl	8006fb4 <xTimerPendFunctionCallFromISR>
 8004c9c:	6178      	str	r0, [r7, #20]

		return xReturn;
 8004c9e:	697b      	ldr	r3, [r7, #20]
	}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3718      	adds	r7, #24
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	bd80      	pop	{r7, pc}
 8004ca8:	08004c25 	.word	0x08004c25

08004cac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	f103 0208 	add.w	r2, r3, #8
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004cc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	f103 0208 	add.w	r2, r3, #8
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f103 0208 	add.w	r2, r3, #8
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004ce0:	bf00      	nop
 8004ce2:	370c      	adds	r7, #12
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cea:	4770      	bx	lr

08004cec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cfa:	bf00      	nop
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d06:	b480      	push	{r7}
 8004d08:	b085      	sub	sp, #20
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	68fa      	ldr	r2, [r7, #12]
 8004d1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	689a      	ldr	r2, [r3, #8]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	1c5a      	adds	r2, r3, #1
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	601a      	str	r2, [r3, #0]
}
 8004d42:	bf00      	nop
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr

08004d4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d4e:	b480      	push	{r7}
 8004d50:	b085      	sub	sp, #20
 8004d52:	af00      	add	r7, sp, #0
 8004d54:	6078      	str	r0, [r7, #4]
 8004d56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d64:	d103      	bne.n	8004d6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	691b      	ldr	r3, [r3, #16]
 8004d6a:	60fb      	str	r3, [r7, #12]
 8004d6c:	e00c      	b.n	8004d88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	3308      	adds	r3, #8
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e002      	b.n	8004d7c <vListInsert+0x2e>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	685b      	ldr	r3, [r3, #4]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	68ba      	ldr	r2, [r7, #8]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d2f6      	bcs.n	8004d76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	683a      	ldr	r2, [r7, #0]
 8004da2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	1c5a      	adds	r2, r3, #1
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	601a      	str	r2, [r3, #0]
}
 8004db4:	bf00      	nop
 8004db6:	3714      	adds	r7, #20
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	691b      	ldr	r3, [r3, #16]
 8004dcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	685b      	ldr	r3, [r3, #4]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	6892      	ldr	r2, [r2, #8]
 8004dd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6852      	ldr	r2, [r2, #4]
 8004de0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	429a      	cmp	r2, r3
 8004dea:	d103      	bne.n	8004df4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689a      	ldr	r2, [r3, #8]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	1e5a      	subs	r2, r3, #1
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3714      	adds	r7, #20
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e12:	4770      	bx	lr

08004e14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b084      	sub	sp, #16
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
 8004e1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10b      	bne.n	8004e40 <xQueueGenericReset+0x2c>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	60bb      	str	r3, [r7, #8]
}
 8004e3a:	bf00      	nop
 8004e3c:	bf00      	nop
 8004e3e:	e7fd      	b.n	8004e3c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e40:	f002 fa0a 	bl	8007258 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4c:	68f9      	ldr	r1, [r7, #12]
 8004e4e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e50:	fb01 f303 	mul.w	r3, r1, r3
 8004e54:	441a      	add	r2, r3
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e70:	3b01      	subs	r3, #1
 8004e72:	68f9      	ldr	r1, [r7, #12]
 8004e74:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e76:	fb01 f303 	mul.w	r3, r1, r3
 8004e7a:	441a      	add	r2, r3
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	22ff      	movs	r2, #255	@ 0xff
 8004e84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	22ff      	movs	r2, #255	@ 0xff
 8004e8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d114      	bne.n	8004ec0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	691b      	ldr	r3, [r3, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01a      	beq.n	8004ed4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3310      	adds	r3, #16
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f001 fa08 	bl	80062b8 <xTaskRemoveFromEventList>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d012      	beq.n	8004ed4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004eae:	4b0d      	ldr	r3, [pc, #52]	@ (8004ee4 <xQueueGenericReset+0xd0>)
 8004eb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004eb4:	601a      	str	r2, [r3, #0]
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	e009      	b.n	8004ed4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3310      	adds	r3, #16
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7ff fef1 	bl	8004cac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3324      	adds	r3, #36	@ 0x24
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff feec 	bl	8004cac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ed4:	f002 f9f2 	bl	80072bc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004ed8:	2301      	movs	r3, #1
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3710      	adds	r7, #16
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	bd80      	pop	{r7, pc}
 8004ee2:	bf00      	nop
 8004ee4:	e000ed04 	.word	0xe000ed04

08004ee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b08e      	sub	sp, #56	@ 0x38
 8004eec:	af02      	add	r7, sp, #8
 8004eee:	60f8      	str	r0, [r7, #12]
 8004ef0:	60b9      	str	r1, [r7, #8]
 8004ef2:	607a      	str	r2, [r7, #4]
 8004ef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d10b      	bne.n	8004f14 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f00:	f383 8811 	msr	BASEPRI, r3
 8004f04:	f3bf 8f6f 	isb	sy
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004f0e:	bf00      	nop
 8004f10:	bf00      	nop
 8004f12:	e7fd      	b.n	8004f10 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d10b      	bne.n	8004f32 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004f1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f1e:	f383 8811 	msr	BASEPRI, r3
 8004f22:	f3bf 8f6f 	isb	sy
 8004f26:	f3bf 8f4f 	dsb	sy
 8004f2a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f2c:	bf00      	nop
 8004f2e:	bf00      	nop
 8004f30:	e7fd      	b.n	8004f2e <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d002      	beq.n	8004f3e <xQueueGenericCreateStatic+0x56>
 8004f38:	68bb      	ldr	r3, [r7, #8]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d001      	beq.n	8004f42 <xQueueGenericCreateStatic+0x5a>
 8004f3e:	2301      	movs	r3, #1
 8004f40:	e000      	b.n	8004f44 <xQueueGenericCreateStatic+0x5c>
 8004f42:	2300      	movs	r3, #0
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d10b      	bne.n	8004f60 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	623b      	str	r3, [r7, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	bf00      	nop
 8004f5e:	e7fd      	b.n	8004f5c <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d102      	bne.n	8004f6c <xQueueGenericCreateStatic+0x84>
 8004f66:	68bb      	ldr	r3, [r7, #8]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <xQueueGenericCreateStatic+0x88>
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e000      	b.n	8004f72 <xQueueGenericCreateStatic+0x8a>
 8004f70:	2300      	movs	r3, #0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d10b      	bne.n	8004f8e <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f7a:	f383 8811 	msr	BASEPRI, r3
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	f3bf 8f4f 	dsb	sy
 8004f86:	61fb      	str	r3, [r7, #28]
}
 8004f88:	bf00      	nop
 8004f8a:	bf00      	nop
 8004f8c:	e7fd      	b.n	8004f8a <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f8e:	2350      	movs	r3, #80	@ 0x50
 8004f90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	2b50      	cmp	r3, #80	@ 0x50
 8004f96:	d00b      	beq.n	8004fb0 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	61bb      	str	r3, [r7, #24]
}
 8004faa:	bf00      	nop
 8004fac:	bf00      	nop
 8004fae:	e7fd      	b.n	8004fac <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004fb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00d      	beq.n	8004fd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004fbc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004fc4:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004fc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fca:	9300      	str	r3, [sp, #0]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	687a      	ldr	r2, [r7, #4]
 8004fd0:	68b9      	ldr	r1, [r7, #8]
 8004fd2:	68f8      	ldr	r0, [r7, #12]
 8004fd4:	f000 f840 	bl	8005058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3730      	adds	r7, #48	@ 0x30
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b08a      	sub	sp, #40	@ 0x28
 8004fe6:	af02      	add	r7, sp, #8
 8004fe8:	60f8      	str	r0, [r7, #12]
 8004fea:	60b9      	str	r1, [r7, #8]
 8004fec:	4613      	mov	r3, r2
 8004fee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <xQueueGenericCreate+0x2c>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	613b      	str	r3, [r7, #16]
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	e7fd      	b.n	800500a <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	fb02 f303 	mul.w	r3, r2, r3
 8005016:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	3350      	adds	r3, #80	@ 0x50
 800501c:	4618      	mov	r0, r3
 800501e:	f002 fa3d 	bl	800749c <pvPortMalloc>
 8005022:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005024:	69bb      	ldr	r3, [r7, #24]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d011      	beq.n	800504e <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	3350      	adds	r3, #80	@ 0x50
 8005032:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005034:	69bb      	ldr	r3, [r7, #24]
 8005036:	2200      	movs	r2, #0
 8005038:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800503c:	79fa      	ldrb	r2, [r7, #7]
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	4613      	mov	r3, r2
 8005044:	697a      	ldr	r2, [r7, #20]
 8005046:	68b9      	ldr	r1, [r7, #8]
 8005048:	68f8      	ldr	r0, [r7, #12]
 800504a:	f000 f805 	bl	8005058 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800504e:	69bb      	ldr	r3, [r7, #24]
	}
 8005050:	4618      	mov	r0, r3
 8005052:	3720      	adds	r7, #32
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}

08005058 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005058:	b580      	push	{r7, lr}
 800505a:	b084      	sub	sp, #16
 800505c:	af00      	add	r7, sp, #0
 800505e:	60f8      	str	r0, [r7, #12]
 8005060:	60b9      	str	r1, [r7, #8]
 8005062:	607a      	str	r2, [r7, #4]
 8005064:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d103      	bne.n	8005074 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800506c:	69bb      	ldr	r3, [r7, #24]
 800506e:	69ba      	ldr	r2, [r7, #24]
 8005070:	601a      	str	r2, [r3, #0]
 8005072:	e002      	b.n	800507a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005074:	69bb      	ldr	r3, [r7, #24]
 8005076:	687a      	ldr	r2, [r7, #4]
 8005078:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	68fa      	ldr	r2, [r7, #12]
 800507e:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	68ba      	ldr	r2, [r7, #8]
 8005084:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005086:	2101      	movs	r1, #1
 8005088:	69b8      	ldr	r0, [r7, #24]
 800508a:	f7ff fec3 	bl	8004e14 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	78fa      	ldrb	r2, [r7, #3]
 8005092:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005096:	bf00      	nop
 8005098:	3710      	adds	r7, #16
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}

0800509e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800509e:	b580      	push	{r7, lr}
 80050a0:	b082      	sub	sp, #8
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d00e      	beq.n	80050ca <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	2200      	movs	r2, #0
 80050b0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80050be:	2300      	movs	r3, #0
 80050c0:	2200      	movs	r2, #0
 80050c2:	2100      	movs	r1, #0
 80050c4:	6878      	ldr	r0, [r7, #4]
 80050c6:	f000 f837 	bl	8005138 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80050ca:	bf00      	nop
 80050cc:	3708      	adds	r7, #8
 80050ce:	46bd      	mov	sp, r7
 80050d0:	bd80      	pop	{r7, pc}

080050d2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80050d2:	b580      	push	{r7, lr}
 80050d4:	b086      	sub	sp, #24
 80050d6:	af00      	add	r7, sp, #0
 80050d8:	4603      	mov	r3, r0
 80050da:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80050dc:	2301      	movs	r3, #1
 80050de:	617b      	str	r3, [r7, #20]
 80050e0:	2300      	movs	r3, #0
 80050e2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80050e4:	79fb      	ldrb	r3, [r7, #7]
 80050e6:	461a      	mov	r2, r3
 80050e8:	6939      	ldr	r1, [r7, #16]
 80050ea:	6978      	ldr	r0, [r7, #20]
 80050ec:	f7ff ff79 	bl	8004fe2 <xQueueGenericCreate>
 80050f0:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80050f2:	68f8      	ldr	r0, [r7, #12]
 80050f4:	f7ff ffd3 	bl	800509e <prvInitialiseMutex>

		return xNewQueue;
 80050f8:	68fb      	ldr	r3, [r7, #12]
	}
 80050fa:	4618      	mov	r0, r3
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}

08005102 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005102:	b580      	push	{r7, lr}
 8005104:	b088      	sub	sp, #32
 8005106:	af02      	add	r7, sp, #8
 8005108:	4603      	mov	r3, r0
 800510a:	6039      	str	r1, [r7, #0]
 800510c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800510e:	2301      	movs	r3, #1
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	2300      	movs	r3, #0
 8005114:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005116:	79fb      	ldrb	r3, [r7, #7]
 8005118:	9300      	str	r3, [sp, #0]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	2200      	movs	r2, #0
 800511e:	6939      	ldr	r1, [r7, #16]
 8005120:	6978      	ldr	r0, [r7, #20]
 8005122:	f7ff fee1 	bl	8004ee8 <xQueueGenericCreateStatic>
 8005126:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005128:	68f8      	ldr	r0, [r7, #12]
 800512a:	f7ff ffb8 	bl	800509e <prvInitialiseMutex>

		return xNewQueue;
 800512e:	68fb      	ldr	r3, [r7, #12]
	}
 8005130:	4618      	mov	r0, r3
 8005132:	3718      	adds	r7, #24
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b08e      	sub	sp, #56	@ 0x38
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	607a      	str	r2, [r7, #4]
 8005144:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005146:	2300      	movs	r3, #0
 8005148:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	d10b      	bne.n	800516c <xQueueGenericSend+0x34>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	e7fd      	b.n	8005168 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d103      	bne.n	800517a <xQueueGenericSend+0x42>
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005176:	2b00      	cmp	r3, #0
 8005178:	d101      	bne.n	800517e <xQueueGenericSend+0x46>
 800517a:	2301      	movs	r3, #1
 800517c:	e000      	b.n	8005180 <xQueueGenericSend+0x48>
 800517e:	2300      	movs	r3, #0
 8005180:	2b00      	cmp	r3, #0
 8005182:	d10b      	bne.n	800519c <xQueueGenericSend+0x64>
	__asm volatile
 8005184:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005188:	f383 8811 	msr	BASEPRI, r3
 800518c:	f3bf 8f6f 	isb	sy
 8005190:	f3bf 8f4f 	dsb	sy
 8005194:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005196:	bf00      	nop
 8005198:	bf00      	nop
 800519a:	e7fd      	b.n	8005198 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b02      	cmp	r3, #2
 80051a0:	d103      	bne.n	80051aa <xQueueGenericSend+0x72>
 80051a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d101      	bne.n	80051ae <xQueueGenericSend+0x76>
 80051aa:	2301      	movs	r3, #1
 80051ac:	e000      	b.n	80051b0 <xQueueGenericSend+0x78>
 80051ae:	2300      	movs	r3, #0
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d10b      	bne.n	80051cc <xQueueGenericSend+0x94>
	__asm volatile
 80051b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051b8:	f383 8811 	msr	BASEPRI, r3
 80051bc:	f3bf 8f6f 	isb	sy
 80051c0:	f3bf 8f4f 	dsb	sy
 80051c4:	623b      	str	r3, [r7, #32]
}
 80051c6:	bf00      	nop
 80051c8:	bf00      	nop
 80051ca:	e7fd      	b.n	80051c8 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051cc:	f001 fa9e 	bl	800670c <xTaskGetSchedulerState>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <xQueueGenericSend+0xa4>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d101      	bne.n	80051e0 <xQueueGenericSend+0xa8>
 80051dc:	2301      	movs	r3, #1
 80051de:	e000      	b.n	80051e2 <xQueueGenericSend+0xaa>
 80051e0:	2300      	movs	r3, #0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d10b      	bne.n	80051fe <xQueueGenericSend+0xc6>
	__asm volatile
 80051e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ea:	f383 8811 	msr	BASEPRI, r3
 80051ee:	f3bf 8f6f 	isb	sy
 80051f2:	f3bf 8f4f 	dsb	sy
 80051f6:	61fb      	str	r3, [r7, #28]
}
 80051f8:	bf00      	nop
 80051fa:	bf00      	nop
 80051fc:	e7fd      	b.n	80051fa <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051fe:	f002 f82b 	bl	8007258 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005206:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005208:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800520a:	429a      	cmp	r2, r3
 800520c:	d302      	bcc.n	8005214 <xQueueGenericSend+0xdc>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b02      	cmp	r3, #2
 8005212:	d129      	bne.n	8005268 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800521a:	f000 fa0f 	bl	800563c <prvCopyDataToQueue>
 800521e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005222:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005224:	2b00      	cmp	r3, #0
 8005226:	d010      	beq.n	800524a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005228:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800522a:	3324      	adds	r3, #36	@ 0x24
 800522c:	4618      	mov	r0, r3
 800522e:	f001 f843 	bl	80062b8 <xTaskRemoveFromEventList>
 8005232:	4603      	mov	r3, r0
 8005234:	2b00      	cmp	r3, #0
 8005236:	d013      	beq.n	8005260 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005238:	4b3f      	ldr	r3, [pc, #252]	@ (8005338 <xQueueGenericSend+0x200>)
 800523a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	f3bf 8f6f 	isb	sy
 8005248:	e00a      	b.n	8005260 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800524a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800524c:	2b00      	cmp	r3, #0
 800524e:	d007      	beq.n	8005260 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005250:	4b39      	ldr	r3, [pc, #228]	@ (8005338 <xQueueGenericSend+0x200>)
 8005252:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005256:	601a      	str	r2, [r3, #0]
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005260:	f002 f82c 	bl	80072bc <vPortExitCritical>
				return pdPASS;
 8005264:	2301      	movs	r3, #1
 8005266:	e063      	b.n	8005330 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d103      	bne.n	8005276 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800526e:	f002 f825 	bl	80072bc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005272:	2300      	movs	r3, #0
 8005274:	e05c      	b.n	8005330 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	2b00      	cmp	r3, #0
 800527a:	d106      	bne.n	800528a <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800527c:	f107 0314 	add.w	r3, r7, #20
 8005280:	4618      	mov	r0, r3
 8005282:	f001 f8e1 	bl	8006448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005286:	2301      	movs	r3, #1
 8005288:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800528a:	f002 f817 	bl	80072bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800528e:	f000 fda7 	bl	8005de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005292:	f001 ffe1 	bl	8007258 <vPortEnterCritical>
 8005296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005298:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800529c:	b25b      	sxtb	r3, r3
 800529e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052a2:	d103      	bne.n	80052ac <xQueueGenericSend+0x174>
 80052a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052b2:	b25b      	sxtb	r3, r3
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80052b8:	d103      	bne.n	80052c2 <xQueueGenericSend+0x18a>
 80052ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052bc:	2200      	movs	r2, #0
 80052be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052c2:	f001 fffb 	bl	80072bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052c6:	1d3a      	adds	r2, r7, #4
 80052c8:	f107 0314 	add.w	r3, r7, #20
 80052cc:	4611      	mov	r1, r2
 80052ce:	4618      	mov	r0, r3
 80052d0:	f001 f8d0 	bl	8006474 <xTaskCheckForTimeOut>
 80052d4:	4603      	mov	r3, r0
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d124      	bne.n	8005324 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80052da:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052dc:	f000 faa6 	bl	800582c <prvIsQueueFull>
 80052e0:	4603      	mov	r3, r0
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d018      	beq.n	8005318 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80052e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052e8:	3310      	adds	r3, #16
 80052ea:	687a      	ldr	r2, [r7, #4]
 80052ec:	4611      	mov	r1, r2
 80052ee:	4618      	mov	r0, r3
 80052f0:	f000 ff52 	bl	8006198 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80052f4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80052f6:	f000 fa31 	bl	800575c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80052fa:	f000 fd7f 	bl	8005dfc <xTaskResumeAll>
 80052fe:	4603      	mov	r3, r0
 8005300:	2b00      	cmp	r3, #0
 8005302:	f47f af7c 	bne.w	80051fe <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005306:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <xQueueGenericSend+0x200>)
 8005308:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800530c:	601a      	str	r2, [r3, #0]
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	f3bf 8f6f 	isb	sy
 8005316:	e772      	b.n	80051fe <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005318:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800531a:	f000 fa1f 	bl	800575c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800531e:	f000 fd6d 	bl	8005dfc <xTaskResumeAll>
 8005322:	e76c      	b.n	80051fe <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005324:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005326:	f000 fa19 	bl	800575c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800532a:	f000 fd67 	bl	8005dfc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800532e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005330:	4618      	mov	r0, r3
 8005332:	3738      	adds	r7, #56	@ 0x38
 8005334:	46bd      	mov	sp, r7
 8005336:	bd80      	pop	{r7, pc}
 8005338:	e000ed04 	.word	0xe000ed04

0800533c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b090      	sub	sp, #64	@ 0x40
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800534e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10b      	bne.n	800536c <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005358:	f383 8811 	msr	BASEPRI, r3
 800535c:	f3bf 8f6f 	isb	sy
 8005360:	f3bf 8f4f 	dsb	sy
 8005364:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005366:	bf00      	nop
 8005368:	bf00      	nop
 800536a:	e7fd      	b.n	8005368 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d103      	bne.n	800537a <xQueueGenericSendFromISR+0x3e>
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d101      	bne.n	800537e <xQueueGenericSendFromISR+0x42>
 800537a:	2301      	movs	r3, #1
 800537c:	e000      	b.n	8005380 <xQueueGenericSendFromISR+0x44>
 800537e:	2300      	movs	r3, #0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d10b      	bne.n	800539c <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005388:	f383 8811 	msr	BASEPRI, r3
 800538c:	f3bf 8f6f 	isb	sy
 8005390:	f3bf 8f4f 	dsb	sy
 8005394:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005396:	bf00      	nop
 8005398:	bf00      	nop
 800539a:	e7fd      	b.n	8005398 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d103      	bne.n	80053aa <xQueueGenericSendFromISR+0x6e>
 80053a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d101      	bne.n	80053ae <xQueueGenericSendFromISR+0x72>
 80053aa:	2301      	movs	r3, #1
 80053ac:	e000      	b.n	80053b0 <xQueueGenericSendFromISR+0x74>
 80053ae:	2300      	movs	r3, #0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d10b      	bne.n	80053cc <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80053b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053b8:	f383 8811 	msr	BASEPRI, r3
 80053bc:	f3bf 8f6f 	isb	sy
 80053c0:	f3bf 8f4f 	dsb	sy
 80053c4:	623b      	str	r3, [r7, #32]
}
 80053c6:	bf00      	nop
 80053c8:	bf00      	nop
 80053ca:	e7fd      	b.n	80053c8 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80053cc:	f002 f824 	bl	8007418 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80053d0:	f3ef 8211 	mrs	r2, BASEPRI
 80053d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	61fa      	str	r2, [r7, #28]
 80053e6:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80053e8:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80053ea:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80053ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d302      	bcc.n	80053fe <xQueueGenericSendFromISR+0xc2>
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	2b02      	cmp	r3, #2
 80053fc:	d12f      	bne.n	800545e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80053fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005400:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005404:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005408:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800540c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800540e:	683a      	ldr	r2, [r7, #0]
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005414:	f000 f912 	bl	800563c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005418:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005420:	d112      	bne.n	8005448 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005426:	2b00      	cmp	r3, #0
 8005428:	d016      	beq.n	8005458 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800542a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800542c:	3324      	adds	r3, #36	@ 0x24
 800542e:	4618      	mov	r0, r3
 8005430:	f000 ff42 	bl	80062b8 <xTaskRemoveFromEventList>
 8005434:	4603      	mov	r3, r0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00e      	beq.n	8005458 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d00b      	beq.n	8005458 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2201      	movs	r2, #1
 8005444:	601a      	str	r2, [r3, #0]
 8005446:	e007      	b.n	8005458 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005448:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800544c:	3301      	adds	r3, #1
 800544e:	b2db      	uxtb	r3, r3
 8005450:	b25a      	sxtb	r2, r3
 8005452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005454:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005458:	2301      	movs	r3, #1
 800545a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800545c:	e001      	b.n	8005462 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800545e:	2300      	movs	r3, #0
 8005460:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005462:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005464:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800546c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800546e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005470:	4618      	mov	r0, r3
 8005472:	3740      	adds	r7, #64	@ 0x40
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08c      	sub	sp, #48	@ 0x30
 800547c:	af00      	add	r7, sp, #0
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005484:	2300      	movs	r3, #0
 8005486:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800548c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800548e:	2b00      	cmp	r3, #0
 8005490:	d10b      	bne.n	80054aa <xQueueReceive+0x32>
	__asm volatile
 8005492:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005496:	f383 8811 	msr	BASEPRI, r3
 800549a:	f3bf 8f6f 	isb	sy
 800549e:	f3bf 8f4f 	dsb	sy
 80054a2:	623b      	str	r3, [r7, #32]
}
 80054a4:	bf00      	nop
 80054a6:	bf00      	nop
 80054a8:	e7fd      	b.n	80054a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d103      	bne.n	80054b8 <xQueueReceive+0x40>
 80054b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d101      	bne.n	80054bc <xQueueReceive+0x44>
 80054b8:	2301      	movs	r3, #1
 80054ba:	e000      	b.n	80054be <xQueueReceive+0x46>
 80054bc:	2300      	movs	r3, #0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d10b      	bne.n	80054da <xQueueReceive+0x62>
	__asm volatile
 80054c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c6:	f383 8811 	msr	BASEPRI, r3
 80054ca:	f3bf 8f6f 	isb	sy
 80054ce:	f3bf 8f4f 	dsb	sy
 80054d2:	61fb      	str	r3, [r7, #28]
}
 80054d4:	bf00      	nop
 80054d6:	bf00      	nop
 80054d8:	e7fd      	b.n	80054d6 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054da:	f001 f917 	bl	800670c <xTaskGetSchedulerState>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d102      	bne.n	80054ea <xQueueReceive+0x72>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d101      	bne.n	80054ee <xQueueReceive+0x76>
 80054ea:	2301      	movs	r3, #1
 80054ec:	e000      	b.n	80054f0 <xQueueReceive+0x78>
 80054ee:	2300      	movs	r3, #0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10b      	bne.n	800550c <xQueueReceive+0x94>
	__asm volatile
 80054f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054f8:	f383 8811 	msr	BASEPRI, r3
 80054fc:	f3bf 8f6f 	isb	sy
 8005500:	f3bf 8f4f 	dsb	sy
 8005504:	61bb      	str	r3, [r7, #24]
}
 8005506:	bf00      	nop
 8005508:	bf00      	nop
 800550a:	e7fd      	b.n	8005508 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800550c:	f001 fea4 	bl	8007258 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005514:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005516:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005518:	2b00      	cmp	r3, #0
 800551a:	d01f      	beq.n	800555c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800551c:	68b9      	ldr	r1, [r7, #8]
 800551e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005520:	f000 f8f6 	bl	8005710 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005524:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005526:	1e5a      	subs	r2, r3, #1
 8005528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800552c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552e:	691b      	ldr	r3, [r3, #16]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d00f      	beq.n	8005554 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005536:	3310      	adds	r3, #16
 8005538:	4618      	mov	r0, r3
 800553a:	f000 febd 	bl	80062b8 <xTaskRemoveFromEventList>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	d007      	beq.n	8005554 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005544:	4b3c      	ldr	r3, [pc, #240]	@ (8005638 <xQueueReceive+0x1c0>)
 8005546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800554a:	601a      	str	r2, [r3, #0]
 800554c:	f3bf 8f4f 	dsb	sy
 8005550:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005554:	f001 feb2 	bl	80072bc <vPortExitCritical>
				return pdPASS;
 8005558:	2301      	movs	r3, #1
 800555a:	e069      	b.n	8005630 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d103      	bne.n	800556a <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005562:	f001 feab 	bl	80072bc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005566:	2300      	movs	r3, #0
 8005568:	e062      	b.n	8005630 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800556a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800556c:	2b00      	cmp	r3, #0
 800556e:	d106      	bne.n	800557e <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005570:	f107 0310 	add.w	r3, r7, #16
 8005574:	4618      	mov	r0, r3
 8005576:	f000 ff67 	bl	8006448 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800557a:	2301      	movs	r3, #1
 800557c:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800557e:	f001 fe9d 	bl	80072bc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005582:	f000 fc2d 	bl	8005de0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005586:	f001 fe67 	bl	8007258 <vPortEnterCritical>
 800558a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005590:	b25b      	sxtb	r3, r3
 8005592:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005596:	d103      	bne.n	80055a0 <xQueueReceive+0x128>
 8005598:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800559a:	2200      	movs	r2, #0
 800559c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80055a6:	b25b      	sxtb	r3, r3
 80055a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80055ac:	d103      	bne.n	80055b6 <xQueueReceive+0x13e>
 80055ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80055b6:	f001 fe81 	bl	80072bc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055ba:	1d3a      	adds	r2, r7, #4
 80055bc:	f107 0310 	add.w	r3, r7, #16
 80055c0:	4611      	mov	r1, r2
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 ff56 	bl	8006474 <xTaskCheckForTimeOut>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d123      	bne.n	8005616 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055d0:	f000 f916 	bl	8005800 <prvIsQueueEmpty>
 80055d4:	4603      	mov	r3, r0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d017      	beq.n	800560a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80055da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055dc:	3324      	adds	r3, #36	@ 0x24
 80055de:	687a      	ldr	r2, [r7, #4]
 80055e0:	4611      	mov	r1, r2
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fdd8 	bl	8006198 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80055e8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80055ea:	f000 f8b7 	bl	800575c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80055ee:	f000 fc05 	bl	8005dfc <xTaskResumeAll>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d189      	bne.n	800550c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80055f8:	4b0f      	ldr	r3, [pc, #60]	@ (8005638 <xQueueReceive+0x1c0>)
 80055fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055fe:	601a      	str	r2, [r3, #0]
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	f3bf 8f6f 	isb	sy
 8005608:	e780      	b.n	800550c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800560a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800560c:	f000 f8a6 	bl	800575c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005610:	f000 fbf4 	bl	8005dfc <xTaskResumeAll>
 8005614:	e77a      	b.n	800550c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005616:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005618:	f000 f8a0 	bl	800575c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800561c:	f000 fbee 	bl	8005dfc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005620:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005622:	f000 f8ed 	bl	8005800 <prvIsQueueEmpty>
 8005626:	4603      	mov	r3, r0
 8005628:	2b00      	cmp	r3, #0
 800562a:	f43f af6f 	beq.w	800550c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800562e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005630:	4618      	mov	r0, r3
 8005632:	3730      	adds	r7, #48	@ 0x30
 8005634:	46bd      	mov	sp, r7
 8005636:	bd80      	pop	{r7, pc}
 8005638:	e000ed04 	.word	0xe000ed04

0800563c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b086      	sub	sp, #24
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005650:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10d      	bne.n	8005676 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d14d      	bne.n	80056fe <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	689b      	ldr	r3, [r3, #8]
 8005666:	4618      	mov	r0, r3
 8005668:	f001 f86e 	bl	8006748 <xTaskPriorityDisinherit>
 800566c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	2200      	movs	r2, #0
 8005672:	609a      	str	r2, [r3, #8]
 8005674:	e043      	b.n	80056fe <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d119      	bne.n	80056b0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6858      	ldr	r0, [r3, #4]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005684:	461a      	mov	r2, r3
 8005686:	68b9      	ldr	r1, [r7, #8]
 8005688:	f004 f9d6 	bl	8009a38 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005694:	441a      	add	r2, r3
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	689b      	ldr	r3, [r3, #8]
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d32b      	bcc.n	80056fe <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	681a      	ldr	r2, [r3, #0]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	605a      	str	r2, [r3, #4]
 80056ae:	e026      	b.n	80056fe <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	68d8      	ldr	r0, [r3, #12]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056b8:	461a      	mov	r2, r3
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	f004 f9bc 	bl	8009a38 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	68da      	ldr	r2, [r3, #12]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c8:	425b      	negs	r3, r3
 80056ca:	441a      	add	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d207      	bcs.n	80056ec <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	689a      	ldr	r2, [r3, #8]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056e4:	425b      	negs	r3, r3
 80056e6:	441a      	add	r2, r3
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b02      	cmp	r3, #2
 80056f0:	d105      	bne.n	80056fe <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d002      	beq.n	80056fe <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	3b01      	subs	r3, #1
 80056fc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	1c5a      	adds	r2, r3, #1
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005706:	697b      	ldr	r3, [r7, #20]
}
 8005708:	4618      	mov	r0, r3
 800570a:	3718      	adds	r7, #24
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b082      	sub	sp, #8
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800571e:	2b00      	cmp	r3, #0
 8005720:	d018      	beq.n	8005754 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68da      	ldr	r2, [r3, #12]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800572a:	441a      	add	r2, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68da      	ldr	r2, [r3, #12]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d303      	bcc.n	8005744 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	68d9      	ldr	r1, [r3, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574c:	461a      	mov	r2, r3
 800574e:	6838      	ldr	r0, [r7, #0]
 8005750:	f004 f972 	bl	8009a38 <memcpy>
	}
}
 8005754:	bf00      	nop
 8005756:	3708      	adds	r7, #8
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005764:	f001 fd78 	bl	8007258 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800576e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005770:	e011      	b.n	8005796 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005776:	2b00      	cmp	r3, #0
 8005778:	d012      	beq.n	80057a0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	3324      	adds	r3, #36	@ 0x24
 800577e:	4618      	mov	r0, r3
 8005780:	f000 fd9a 	bl	80062b8 <xTaskRemoveFromEventList>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800578a:	f000 fed7 	bl	800653c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800578e:	7bfb      	ldrb	r3, [r7, #15]
 8005790:	3b01      	subs	r3, #1
 8005792:	b2db      	uxtb	r3, r3
 8005794:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005796:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800579a:	2b00      	cmp	r3, #0
 800579c:	dce9      	bgt.n	8005772 <prvUnlockQueue+0x16>
 800579e:	e000      	b.n	80057a2 <prvUnlockQueue+0x46>
					break;
 80057a0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	22ff      	movs	r2, #255	@ 0xff
 80057a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057aa:	f001 fd87 	bl	80072bc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057ae:	f001 fd53 	bl	8007258 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057b8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057ba:	e011      	b.n	80057e0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	691b      	ldr	r3, [r3, #16]
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d012      	beq.n	80057ea <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3310      	adds	r3, #16
 80057c8:	4618      	mov	r0, r3
 80057ca:	f000 fd75 	bl	80062b8 <xTaskRemoveFromEventList>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80057d4:	f000 feb2 	bl	800653c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80057d8:	7bbb      	ldrb	r3, [r7, #14]
 80057da:	3b01      	subs	r3, #1
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	dce9      	bgt.n	80057bc <prvUnlockQueue+0x60>
 80057e8:	e000      	b.n	80057ec <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80057ea:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	22ff      	movs	r2, #255	@ 0xff
 80057f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80057f4:	f001 fd62 	bl	80072bc <vPortExitCritical>
}
 80057f8:	bf00      	nop
 80057fa:	3710      	adds	r7, #16
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bd80      	pop	{r7, pc}

08005800 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005808:	f001 fd26 	bl	8007258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005810:	2b00      	cmp	r3, #0
 8005812:	d102      	bne.n	800581a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005814:	2301      	movs	r3, #1
 8005816:	60fb      	str	r3, [r7, #12]
 8005818:	e001      	b.n	800581e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800581a:	2300      	movs	r3, #0
 800581c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800581e:	f001 fd4d 	bl	80072bc <vPortExitCritical>

	return xReturn;
 8005822:	68fb      	ldr	r3, [r7, #12]
}
 8005824:	4618      	mov	r0, r3
 8005826:	3710      	adds	r7, #16
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b084      	sub	sp, #16
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005834:	f001 fd10 	bl	8007258 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005840:	429a      	cmp	r2, r3
 8005842:	d102      	bne.n	800584a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005844:	2301      	movs	r3, #1
 8005846:	60fb      	str	r3, [r7, #12]
 8005848:	e001      	b.n	800584e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800584e:	f001 fd35 	bl	80072bc <vPortExitCritical>

	return xReturn;
 8005852:	68fb      	ldr	r3, [r7, #12]
}
 8005854:	4618      	mov	r0, r3
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}

0800585c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
 8005864:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005866:	2300      	movs	r3, #0
 8005868:	60fb      	str	r3, [r7, #12]
 800586a:	e014      	b.n	8005896 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800586c:	4a0f      	ldr	r2, [pc, #60]	@ (80058ac <vQueueAddToRegistry+0x50>)
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005878:	490c      	ldr	r1, [pc, #48]	@ (80058ac <vQueueAddToRegistry+0x50>)
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	683a      	ldr	r2, [r7, #0]
 800587e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005882:	4a0a      	ldr	r2, [pc, #40]	@ (80058ac <vQueueAddToRegistry+0x50>)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	00db      	lsls	r3, r3, #3
 8005888:	4413      	add	r3, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800588e:	e006      	b.n	800589e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	3301      	adds	r3, #1
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2b07      	cmp	r3, #7
 800589a:	d9e7      	bls.n	800586c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800589c:	bf00      	nop
 800589e:	bf00      	nop
 80058a0:	3714      	adds	r7, #20
 80058a2:	46bd      	mov	sp, r7
 80058a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a8:	4770      	bx	lr
 80058aa:	bf00      	nop
 80058ac:	20000ed4 	.word	0x20000ed4

080058b0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b086      	sub	sp, #24
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80058c0:	f001 fcca 	bl	8007258 <vPortEnterCritical>
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80058ca:	b25b      	sxtb	r3, r3
 80058cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058d0:	d103      	bne.n	80058da <vQueueWaitForMessageRestricted+0x2a>
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80058da:	697b      	ldr	r3, [r7, #20]
 80058dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80058e0:	b25b      	sxtb	r3, r3
 80058e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80058e6:	d103      	bne.n	80058f0 <vQueueWaitForMessageRestricted+0x40>
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	2200      	movs	r2, #0
 80058ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80058f0:	f001 fce4 	bl	80072bc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80058f4:	697b      	ldr	r3, [r7, #20]
 80058f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d106      	bne.n	800590a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80058fc:	697b      	ldr	r3, [r7, #20]
 80058fe:	3324      	adds	r3, #36	@ 0x24
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	68b9      	ldr	r1, [r7, #8]
 8005904:	4618      	mov	r0, r3
 8005906:	f000 fcab 	bl	8006260 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800590a:	6978      	ldr	r0, [r7, #20]
 800590c:	f7ff ff26 	bl	800575c <prvUnlockQueue>
	}
 8005910:	bf00      	nop
 8005912:	3718      	adds	r7, #24
 8005914:	46bd      	mov	sp, r7
 8005916:	bd80      	pop	{r7, pc}

08005918 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005918:	b580      	push	{r7, lr}
 800591a:	b08e      	sub	sp, #56	@ 0x38
 800591c:	af04      	add	r7, sp, #16
 800591e:	60f8      	str	r0, [r7, #12]
 8005920:	60b9      	str	r1, [r7, #8]
 8005922:	607a      	str	r2, [r7, #4]
 8005924:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005926:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xTaskCreateStatic+0x2c>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	623b      	str	r3, [r7, #32]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005944:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10b      	bne.n	8005962 <xTaskCreateStatic+0x4a>
	__asm volatile
 800594a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800594e:	f383 8811 	msr	BASEPRI, r3
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	f3bf 8f4f 	dsb	sy
 800595a:	61fb      	str	r3, [r7, #28]
}
 800595c:	bf00      	nop
 800595e:	bf00      	nop
 8005960:	e7fd      	b.n	800595e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005962:	23a8      	movs	r3, #168	@ 0xa8
 8005964:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	2ba8      	cmp	r3, #168	@ 0xa8
 800596a:	d00b      	beq.n	8005984 <xTaskCreateStatic+0x6c>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61bb      	str	r3, [r7, #24]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005984:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005988:	2b00      	cmp	r3, #0
 800598a:	d01e      	beq.n	80059ca <xTaskCreateStatic+0xb2>
 800598c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800598e:	2b00      	cmp	r3, #0
 8005990:	d01b      	beq.n	80059ca <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005992:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005994:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005998:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800599a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	2202      	movs	r2, #2
 80059a0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059a4:	2300      	movs	r3, #0
 80059a6:	9303      	str	r3, [sp, #12]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	9302      	str	r3, [sp, #8]
 80059ac:	f107 0314 	add.w	r3, r7, #20
 80059b0:	9301      	str	r3, [sp, #4]
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	9300      	str	r3, [sp, #0]
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	68b9      	ldr	r1, [r7, #8]
 80059bc:	68f8      	ldr	r0, [r7, #12]
 80059be:	f000 f851 	bl	8005a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059c2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80059c4:	f000 f8f6 	bl	8005bb4 <prvAddNewTaskToReadyList>
 80059c8:	e001      	b.n	80059ce <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80059ca:	2300      	movs	r3, #0
 80059cc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059ce:	697b      	ldr	r3, [r7, #20]
	}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3728      	adds	r7, #40	@ 0x28
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b08c      	sub	sp, #48	@ 0x30
 80059dc:	af04      	add	r7, sp, #16
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	603b      	str	r3, [r7, #0]
 80059e4:	4613      	mov	r3, r2
 80059e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80059e8:	88fb      	ldrh	r3, [r7, #6]
 80059ea:	009b      	lsls	r3, r3, #2
 80059ec:	4618      	mov	r0, r3
 80059ee:	f001 fd55 	bl	800749c <pvPortMalloc>
 80059f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00e      	beq.n	8005a18 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80059fa:	20a8      	movs	r0, #168	@ 0xa8
 80059fc:	f001 fd4e 	bl	800749c <pvPortMalloc>
 8005a00:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a02:	69fb      	ldr	r3, [r7, #28]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d003      	beq.n	8005a10 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a08:	69fb      	ldr	r3, [r7, #28]
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a0e:	e005      	b.n	8005a1c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a10:	6978      	ldr	r0, [r7, #20]
 8005a12:	f001 fe11 	bl	8007638 <vPortFree>
 8005a16:	e001      	b.n	8005a1c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a18:	2300      	movs	r3, #0
 8005a1a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a1c:	69fb      	ldr	r3, [r7, #28]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d017      	beq.n	8005a52 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a22:	69fb      	ldr	r3, [r7, #28]
 8005a24:	2200      	movs	r2, #0
 8005a26:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a2a:	88fa      	ldrh	r2, [r7, #6]
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	9303      	str	r3, [sp, #12]
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	9302      	str	r3, [sp, #8]
 8005a34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a36:	9301      	str	r3, [sp, #4]
 8005a38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a3a:	9300      	str	r3, [sp, #0]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	68b9      	ldr	r1, [r7, #8]
 8005a40:	68f8      	ldr	r0, [r7, #12]
 8005a42:	f000 f80f 	bl	8005a64 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a46:	69f8      	ldr	r0, [r7, #28]
 8005a48:	f000 f8b4 	bl	8005bb4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a4c:	2301      	movs	r3, #1
 8005a4e:	61bb      	str	r3, [r7, #24]
 8005a50:	e002      	b.n	8005a58 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a52:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005a56:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a58:	69bb      	ldr	r3, [r7, #24]
	}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3720      	adds	r7, #32
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
	...

08005a64 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b088      	sub	sp, #32
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	60f8      	str	r0, [r7, #12]
 8005a6c:	60b9      	str	r1, [r7, #8]
 8005a6e:	607a      	str	r2, [r7, #4]
 8005a70:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a74:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	009b      	lsls	r3, r3, #2
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	21a5      	movs	r1, #165	@ 0xa5
 8005a7e:	f003 ff49 	bl	8009914 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005a82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a84:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	009b      	lsls	r3, r3, #2
 8005a90:	4413      	add	r3, r2
 8005a92:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005a94:	69bb      	ldr	r3, [r7, #24]
 8005a96:	f023 0307 	bic.w	r3, r3, #7
 8005a9a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a9c:	69bb      	ldr	r3, [r7, #24]
 8005a9e:	f003 0307 	and.w	r3, r3, #7
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d00b      	beq.n	8005abe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005aa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aaa:	f383 8811 	msr	BASEPRI, r3
 8005aae:	f3bf 8f6f 	isb	sy
 8005ab2:	f3bf 8f4f 	dsb	sy
 8005ab6:	617b      	str	r3, [r7, #20]
}
 8005ab8:	bf00      	nop
 8005aba:	bf00      	nop
 8005abc:	e7fd      	b.n	8005aba <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005abe:	68bb      	ldr	r3, [r7, #8]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d01f      	beq.n	8005b04 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	61fb      	str	r3, [r7, #28]
 8005ac8:	e012      	b.n	8005af0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	7819      	ldrb	r1, [r3, #0]
 8005ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	3334      	adds	r3, #52	@ 0x34
 8005ada:	460a      	mov	r2, r1
 8005adc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005ade:	68ba      	ldr	r2, [r7, #8]
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	4413      	add	r3, r2
 8005ae4:	781b      	ldrb	r3, [r3, #0]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d006      	beq.n	8005af8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3301      	adds	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	2b0f      	cmp	r3, #15
 8005af4:	d9e9      	bls.n	8005aca <prvInitialiseNewTask+0x66>
 8005af6:	e000      	b.n	8005afa <prvInitialiseNewTask+0x96>
			{
				break;
 8005af8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b02:	e003      	b.n	8005b0c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b06:	2200      	movs	r2, #0
 8005b08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b0e:	2b37      	cmp	r3, #55	@ 0x37
 8005b10:	d901      	bls.n	8005b16 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b12:	2337      	movs	r3, #55	@ 0x37
 8005b14:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b18:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b1a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b20:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	2200      	movs	r2, #0
 8005b26:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	3304      	adds	r3, #4
 8005b2c:	4618      	mov	r0, r3
 8005b2e:	f7ff f8dd 	bl	8004cec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b34:	3318      	adds	r3, #24
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7ff f8d8 	bl	8004cec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b40:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b44:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b50:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b54:	2200      	movs	r2, #0
 8005b56:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	3354      	adds	r3, #84	@ 0x54
 8005b66:	224c      	movs	r2, #76	@ 0x4c
 8005b68:	2100      	movs	r1, #0
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f003 fed2 	bl	8009914 <memset>
 8005b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b72:	4a0d      	ldr	r2, [pc, #52]	@ (8005ba8 <prvInitialiseNewTask+0x144>)
 8005b74:	659a      	str	r2, [r3, #88]	@ 0x58
 8005b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b78:	4a0c      	ldr	r2, [pc, #48]	@ (8005bac <prvInitialiseNewTask+0x148>)
 8005b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	4a0c      	ldr	r2, [pc, #48]	@ (8005bb0 <prvInitialiseNewTask+0x14c>)
 8005b80:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b82:	683a      	ldr	r2, [r7, #0]
 8005b84:	68f9      	ldr	r1, [r7, #12]
 8005b86:	69b8      	ldr	r0, [r7, #24]
 8005b88:	f001 fa34 	bl	8006ff4 <pxPortInitialiseStack>
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b90:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005b92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b9c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b9e:	bf00      	nop
 8005ba0:	3720      	adds	r7, #32
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	200051bc 	.word	0x200051bc
 8005bac:	20005224 	.word	0x20005224
 8005bb0:	2000528c 	.word	0x2000528c

08005bb4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b082      	sub	sp, #8
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bbc:	f001 fb4c 	bl	8007258 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8005c78 <prvAddNewTaskToReadyList+0xc4>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	3301      	adds	r3, #1
 8005bc6:	4a2c      	ldr	r2, [pc, #176]	@ (8005c78 <prvAddNewTaskToReadyList+0xc4>)
 8005bc8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005bca:	4b2c      	ldr	r3, [pc, #176]	@ (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d109      	bne.n	8005be6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005bd8:	4b27      	ldr	r3, [pc, #156]	@ (8005c78 <prvAddNewTaskToReadyList+0xc4>)
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	2b01      	cmp	r3, #1
 8005bde:	d110      	bne.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005be0:	f000 fcd0 	bl	8006584 <prvInitialiseTaskLists>
 8005be4:	e00d      	b.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005be6:	4b26      	ldr	r3, [pc, #152]	@ (8005c80 <prvAddNewTaskToReadyList+0xcc>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d109      	bne.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005bee:	4b23      	ldr	r3, [pc, #140]	@ (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d802      	bhi.n	8005c02 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bfc:	4a1f      	ldr	r2, [pc, #124]	@ (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c02:	4b20      	ldr	r3, [pc, #128]	@ (8005c84 <prvAddNewTaskToReadyList+0xd0>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3301      	adds	r3, #1
 8005c08:	4a1e      	ldr	r2, [pc, #120]	@ (8005c84 <prvAddNewTaskToReadyList+0xd0>)
 8005c0a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8005c84 <prvAddNewTaskToReadyList+0xd0>)
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c18:	4b1b      	ldr	r3, [pc, #108]	@ (8005c88 <prvAddNewTaskToReadyList+0xd4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	429a      	cmp	r2, r3
 8005c1e:	d903      	bls.n	8005c28 <prvAddNewTaskToReadyList+0x74>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c24:	4a18      	ldr	r2, [pc, #96]	@ (8005c88 <prvAddNewTaskToReadyList+0xd4>)
 8005c26:	6013      	str	r3, [r2, #0]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c2c:	4613      	mov	r3, r2
 8005c2e:	009b      	lsls	r3, r3, #2
 8005c30:	4413      	add	r3, r2
 8005c32:	009b      	lsls	r3, r3, #2
 8005c34:	4a15      	ldr	r2, [pc, #84]	@ (8005c8c <prvAddNewTaskToReadyList+0xd8>)
 8005c36:	441a      	add	r2, r3
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	3304      	adds	r3, #4
 8005c3c:	4619      	mov	r1, r3
 8005c3e:	4610      	mov	r0, r2
 8005c40:	f7ff f861 	bl	8004d06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c44:	f001 fb3a 	bl	80072bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c48:	4b0d      	ldr	r3, [pc, #52]	@ (8005c80 <prvAddNewTaskToReadyList+0xcc>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d00e      	beq.n	8005c6e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c50:	4b0a      	ldr	r3, [pc, #40]	@ (8005c7c <prvAddNewTaskToReadyList+0xc8>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c5a:	429a      	cmp	r2, r3
 8005c5c:	d207      	bcs.n	8005c6e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c5e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c90 <prvAddNewTaskToReadyList+0xdc>)
 8005c60:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c64:	601a      	str	r2, [r3, #0]
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c6e:	bf00      	nop
 8005c70:	3708      	adds	r7, #8
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	200013e8 	.word	0x200013e8
 8005c7c:	20000f14 	.word	0x20000f14
 8005c80:	200013f4 	.word	0x200013f4
 8005c84:	20001404 	.word	0x20001404
 8005c88:	200013f0 	.word	0x200013f0
 8005c8c:	20000f18 	.word	0x20000f18
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b084      	sub	sp, #16
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d018      	beq.n	8005cd8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ca6:	4b14      	ldr	r3, [pc, #80]	@ (8005cf8 <vTaskDelay+0x64>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d00b      	beq.n	8005cc6 <vTaskDelay+0x32>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	60bb      	str	r3, [r7, #8]
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005cc6:	f000 f88b 	bl	8005de0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005cca:	2100      	movs	r1, #0
 8005ccc:	6878      	ldr	r0, [r7, #4]
 8005cce:	f000 fdc3 	bl	8006858 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005cd2:	f000 f893 	bl	8005dfc <xTaskResumeAll>
 8005cd6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d107      	bne.n	8005cee <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005cde:	4b07      	ldr	r3, [pc, #28]	@ (8005cfc <vTaskDelay+0x68>)
 8005ce0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ce4:	601a      	str	r2, [r3, #0]
 8005ce6:	f3bf 8f4f 	dsb	sy
 8005cea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	20001410 	.word	0x20001410
 8005cfc:	e000ed04 	.word	0xe000ed04

08005d00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	@ 0x28
 8005d04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d06:	2300      	movs	r3, #0
 8005d08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d0e:	463a      	mov	r2, r7
 8005d10:	1d39      	adds	r1, r7, #4
 8005d12:	f107 0308 	add.w	r3, r7, #8
 8005d16:	4618      	mov	r0, r3
 8005d18:	f7fe fd9e 	bl	8004858 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d1c:	6839      	ldr	r1, [r7, #0]
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	9202      	str	r2, [sp, #8]
 8005d24:	9301      	str	r3, [sp, #4]
 8005d26:	2300      	movs	r3, #0
 8005d28:	9300      	str	r3, [sp, #0]
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	460a      	mov	r2, r1
 8005d2e:	4924      	ldr	r1, [pc, #144]	@ (8005dc0 <vTaskStartScheduler+0xc0>)
 8005d30:	4824      	ldr	r0, [pc, #144]	@ (8005dc4 <vTaskStartScheduler+0xc4>)
 8005d32:	f7ff fdf1 	bl	8005918 <xTaskCreateStatic>
 8005d36:	4603      	mov	r3, r0
 8005d38:	4a23      	ldr	r2, [pc, #140]	@ (8005dc8 <vTaskStartScheduler+0xc8>)
 8005d3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d3c:	4b22      	ldr	r3, [pc, #136]	@ (8005dc8 <vTaskStartScheduler+0xc8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d002      	beq.n	8005d4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d44:	2301      	movs	r3, #1
 8005d46:	617b      	str	r3, [r7, #20]
 8005d48:	e001      	b.n	8005d4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d102      	bne.n	8005d5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d54:	f000 fdd4 	bl	8006900 <xTimerCreateTimerTask>
 8005d58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d11b      	bne.n	8005d98 <vTaskStartScheduler+0x98>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	613b      	str	r3, [r7, #16]
}
 8005d72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d74:	4b15      	ldr	r3, [pc, #84]	@ (8005dcc <vTaskStartScheduler+0xcc>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	3354      	adds	r3, #84	@ 0x54
 8005d7a:	4a15      	ldr	r2, [pc, #84]	@ (8005dd0 <vTaskStartScheduler+0xd0>)
 8005d7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d7e:	4b15      	ldr	r3, [pc, #84]	@ (8005dd4 <vTaskStartScheduler+0xd4>)
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005d84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d86:	4b14      	ldr	r3, [pc, #80]	@ (8005dd8 <vTaskStartScheduler+0xd8>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d8c:	4b13      	ldr	r3, [pc, #76]	@ (8005ddc <vTaskStartScheduler+0xdc>)
 8005d8e:	2200      	movs	r2, #0
 8005d90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d92:	f001 f9bd 	bl	8007110 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d96:	e00f      	b.n	8005db8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d98:	697b      	ldr	r3, [r7, #20]
 8005d9a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d9e:	d10b      	bne.n	8005db8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	60fb      	str	r3, [r7, #12]
}
 8005db2:	bf00      	nop
 8005db4:	bf00      	nop
 8005db6:	e7fd      	b.n	8005db4 <vTaskStartScheduler+0xb4>
}
 8005db8:	bf00      	nop
 8005dba:	3718      	adds	r7, #24
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	bd80      	pop	{r7, pc}
 8005dc0:	0800a37c 	.word	0x0800a37c
 8005dc4:	08006555 	.word	0x08006555
 8005dc8:	2000140c 	.word	0x2000140c
 8005dcc:	20000f14 	.word	0x20000f14
 8005dd0:	20000410 	.word	0x20000410
 8005dd4:	20001408 	.word	0x20001408
 8005dd8:	200013f4 	.word	0x200013f4
 8005ddc:	200013ec 	.word	0x200013ec

08005de0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005de0:	b480      	push	{r7}
 8005de2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005de4:	4b04      	ldr	r3, [pc, #16]	@ (8005df8 <vTaskSuspendAll+0x18>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	3301      	adds	r3, #1
 8005dea:	4a03      	ldr	r2, [pc, #12]	@ (8005df8 <vTaskSuspendAll+0x18>)
 8005dec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005dee:	bf00      	nop
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	20001410 	.word	0x20001410

08005dfc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b084      	sub	sp, #16
 8005e00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e06:	2300      	movs	r3, #0
 8005e08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e0a:	4b42      	ldr	r3, [pc, #264]	@ (8005f14 <xTaskResumeAll+0x118>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10b      	bne.n	8005e2a <xTaskResumeAll+0x2e>
	__asm volatile
 8005e12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e16:	f383 8811 	msr	BASEPRI, r3
 8005e1a:	f3bf 8f6f 	isb	sy
 8005e1e:	f3bf 8f4f 	dsb	sy
 8005e22:	603b      	str	r3, [r7, #0]
}
 8005e24:	bf00      	nop
 8005e26:	bf00      	nop
 8005e28:	e7fd      	b.n	8005e26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e2a:	f001 fa15 	bl	8007258 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e2e:	4b39      	ldr	r3, [pc, #228]	@ (8005f14 <xTaskResumeAll+0x118>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	4a37      	ldr	r2, [pc, #220]	@ (8005f14 <xTaskResumeAll+0x118>)
 8005e36:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e38:	4b36      	ldr	r3, [pc, #216]	@ (8005f14 <xTaskResumeAll+0x118>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d162      	bne.n	8005f06 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e40:	4b35      	ldr	r3, [pc, #212]	@ (8005f18 <xTaskResumeAll+0x11c>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d05e      	beq.n	8005f06 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e48:	e02f      	b.n	8005eaa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e4a:	4b34      	ldr	r3, [pc, #208]	@ (8005f1c <xTaskResumeAll+0x120>)
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	68db      	ldr	r3, [r3, #12]
 8005e50:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	3318      	adds	r3, #24
 8005e56:	4618      	mov	r0, r3
 8005e58:	f7fe ffb2 	bl	8004dc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	3304      	adds	r3, #4
 8005e60:	4618      	mov	r0, r3
 8005e62:	f7fe ffad 	bl	8004dc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e6a:	4b2d      	ldr	r3, [pc, #180]	@ (8005f20 <xTaskResumeAll+0x124>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	429a      	cmp	r2, r3
 8005e70:	d903      	bls.n	8005e7a <xTaskResumeAll+0x7e>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e76:	4a2a      	ldr	r2, [pc, #168]	@ (8005f20 <xTaskResumeAll+0x124>)
 8005e78:	6013      	str	r3, [r2, #0]
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7e:	4613      	mov	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4413      	add	r3, r2
 8005e84:	009b      	lsls	r3, r3, #2
 8005e86:	4a27      	ldr	r2, [pc, #156]	@ (8005f24 <xTaskResumeAll+0x128>)
 8005e88:	441a      	add	r2, r3
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7fe ff38 	bl	8004d06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e9a:	4b23      	ldr	r3, [pc, #140]	@ (8005f28 <xTaskResumeAll+0x12c>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d302      	bcc.n	8005eaa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ea4:	4b21      	ldr	r3, [pc, #132]	@ (8005f2c <xTaskResumeAll+0x130>)
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8005f1c <xTaskResumeAll+0x120>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1cb      	bne.n	8005e4a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eb8:	f000 fc08 	bl	80066cc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005ebc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f30 <xTaskResumeAll+0x134>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d010      	beq.n	8005eea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ec8:	f000 f846 	bl	8005f58 <xTaskIncrementTick>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d002      	beq.n	8005ed8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005ed2:	4b16      	ldr	r3, [pc, #88]	@ (8005f2c <xTaskResumeAll+0x130>)
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	3b01      	subs	r3, #1
 8005edc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d1f1      	bne.n	8005ec8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005ee4:	4b12      	ldr	r3, [pc, #72]	@ (8005f30 <xTaskResumeAll+0x134>)
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005eea:	4b10      	ldr	r3, [pc, #64]	@ (8005f2c <xTaskResumeAll+0x130>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d009      	beq.n	8005f06 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8005f34 <xTaskResumeAll+0x138>)
 8005ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005efc:	601a      	str	r2, [r3, #0]
 8005efe:	f3bf 8f4f 	dsb	sy
 8005f02:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f06:	f001 f9d9 	bl	80072bc <vPortExitCritical>

	return xAlreadyYielded;
 8005f0a:	68bb      	ldr	r3, [r7, #8]
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3710      	adds	r7, #16
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	20001410 	.word	0x20001410
 8005f18:	200013e8 	.word	0x200013e8
 8005f1c:	200013a8 	.word	0x200013a8
 8005f20:	200013f0 	.word	0x200013f0
 8005f24:	20000f18 	.word	0x20000f18
 8005f28:	20000f14 	.word	0x20000f14
 8005f2c:	200013fc 	.word	0x200013fc
 8005f30:	200013f8 	.word	0x200013f8
 8005f34:	e000ed04 	.word	0xe000ed04

08005f38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f3e:	4b05      	ldr	r3, [pc, #20]	@ (8005f54 <xTaskGetTickCount+0x1c>)
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f44:	687b      	ldr	r3, [r7, #4]
}
 8005f46:	4618      	mov	r0, r3
 8005f48:	370c      	adds	r7, #12
 8005f4a:	46bd      	mov	sp, r7
 8005f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f50:	4770      	bx	lr
 8005f52:	bf00      	nop
 8005f54:	200013ec 	.word	0x200013ec

08005f58 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f5e:	2300      	movs	r3, #0
 8005f60:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f62:	4b4f      	ldr	r3, [pc, #316]	@ (80060a0 <xTaskIncrementTick+0x148>)
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	f040 8090 	bne.w	800608c <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f6c:	4b4d      	ldr	r3, [pc, #308]	@ (80060a4 <xTaskIncrementTick+0x14c>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	3301      	adds	r3, #1
 8005f72:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f74:	4a4b      	ldr	r2, [pc, #300]	@ (80060a4 <xTaskIncrementTick+0x14c>)
 8005f76:	693b      	ldr	r3, [r7, #16]
 8005f78:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d121      	bne.n	8005fc4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f80:	4b49      	ldr	r3, [pc, #292]	@ (80060a8 <xTaskIncrementTick+0x150>)
 8005f82:	681b      	ldr	r3, [r3, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00b      	beq.n	8005fa2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	603b      	str	r3, [r7, #0]
}
 8005f9c:	bf00      	nop
 8005f9e:	bf00      	nop
 8005fa0:	e7fd      	b.n	8005f9e <xTaskIncrementTick+0x46>
 8005fa2:	4b41      	ldr	r3, [pc, #260]	@ (80060a8 <xTaskIncrementTick+0x150>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	60fb      	str	r3, [r7, #12]
 8005fa8:	4b40      	ldr	r3, [pc, #256]	@ (80060ac <xTaskIncrementTick+0x154>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a3e      	ldr	r2, [pc, #248]	@ (80060a8 <xTaskIncrementTick+0x150>)
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	4a3e      	ldr	r2, [pc, #248]	@ (80060ac <xTaskIncrementTick+0x154>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	6013      	str	r3, [r2, #0]
 8005fb6:	4b3e      	ldr	r3, [pc, #248]	@ (80060b0 <xTaskIncrementTick+0x158>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	4a3c      	ldr	r2, [pc, #240]	@ (80060b0 <xTaskIncrementTick+0x158>)
 8005fbe:	6013      	str	r3, [r2, #0]
 8005fc0:	f000 fb84 	bl	80066cc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fc4:	4b3b      	ldr	r3, [pc, #236]	@ (80060b4 <xTaskIncrementTick+0x15c>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	429a      	cmp	r2, r3
 8005fcc:	d349      	bcc.n	8006062 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fce:	4b36      	ldr	r3, [pc, #216]	@ (80060a8 <xTaskIncrementTick+0x150>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d104      	bne.n	8005fe2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd8:	4b36      	ldr	r3, [pc, #216]	@ (80060b4 <xTaskIncrementTick+0x15c>)
 8005fda:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005fde:	601a      	str	r2, [r3, #0]
					break;
 8005fe0:	e03f      	b.n	8006062 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fe2:	4b31      	ldr	r3, [pc, #196]	@ (80060a8 <xTaskIncrementTick+0x150>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	68db      	ldr	r3, [r3, #12]
 8005fea:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d203      	bcs.n	8006002 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ffa:	4a2e      	ldr	r2, [pc, #184]	@ (80060b4 <xTaskIncrementTick+0x15c>)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006000:	e02f      	b.n	8006062 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	3304      	adds	r3, #4
 8006006:	4618      	mov	r0, r3
 8006008:	f7fe feda 	bl	8004dc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006010:	2b00      	cmp	r3, #0
 8006012:	d004      	beq.n	800601e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006014:	68bb      	ldr	r3, [r7, #8]
 8006016:	3318      	adds	r3, #24
 8006018:	4618      	mov	r0, r3
 800601a:	f7fe fed1 	bl	8004dc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006022:	4b25      	ldr	r3, [pc, #148]	@ (80060b8 <xTaskIncrementTick+0x160>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	429a      	cmp	r2, r3
 8006028:	d903      	bls.n	8006032 <xTaskIncrementTick+0xda>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800602e:	4a22      	ldr	r2, [pc, #136]	@ (80060b8 <xTaskIncrementTick+0x160>)
 8006030:	6013      	str	r3, [r2, #0]
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006036:	4613      	mov	r3, r2
 8006038:	009b      	lsls	r3, r3, #2
 800603a:	4413      	add	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	4a1f      	ldr	r2, [pc, #124]	@ (80060bc <xTaskIncrementTick+0x164>)
 8006040:	441a      	add	r2, r3
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3304      	adds	r3, #4
 8006046:	4619      	mov	r1, r3
 8006048:	4610      	mov	r0, r2
 800604a:	f7fe fe5c 	bl	8004d06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800604e:	68bb      	ldr	r3, [r7, #8]
 8006050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006052:	4b1b      	ldr	r3, [pc, #108]	@ (80060c0 <xTaskIncrementTick+0x168>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006058:	429a      	cmp	r2, r3
 800605a:	d3b8      	bcc.n	8005fce <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800605c:	2301      	movs	r3, #1
 800605e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006060:	e7b5      	b.n	8005fce <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006062:	4b17      	ldr	r3, [pc, #92]	@ (80060c0 <xTaskIncrementTick+0x168>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006068:	4914      	ldr	r1, [pc, #80]	@ (80060bc <xTaskIncrementTick+0x164>)
 800606a:	4613      	mov	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	4413      	add	r3, r2
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	440b      	add	r3, r1
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b01      	cmp	r3, #1
 8006078:	d901      	bls.n	800607e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800607a:	2301      	movs	r3, #1
 800607c:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800607e:	4b11      	ldr	r3, [pc, #68]	@ (80060c4 <xTaskIncrementTick+0x16c>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d007      	beq.n	8006096 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006086:	2301      	movs	r3, #1
 8006088:	617b      	str	r3, [r7, #20]
 800608a:	e004      	b.n	8006096 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800608c:	4b0e      	ldr	r3, [pc, #56]	@ (80060c8 <xTaskIncrementTick+0x170>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	3301      	adds	r3, #1
 8006092:	4a0d      	ldr	r2, [pc, #52]	@ (80060c8 <xTaskIncrementTick+0x170>)
 8006094:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006096:	697b      	ldr	r3, [r7, #20]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	20001410 	.word	0x20001410
 80060a4:	200013ec 	.word	0x200013ec
 80060a8:	200013a0 	.word	0x200013a0
 80060ac:	200013a4 	.word	0x200013a4
 80060b0:	20001400 	.word	0x20001400
 80060b4:	20001408 	.word	0x20001408
 80060b8:	200013f0 	.word	0x200013f0
 80060bc:	20000f18 	.word	0x20000f18
 80060c0:	20000f14 	.word	0x20000f14
 80060c4:	200013fc 	.word	0x200013fc
 80060c8:	200013f8 	.word	0x200013f8

080060cc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b085      	sub	sp, #20
 80060d0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060d2:	4b2b      	ldr	r3, [pc, #172]	@ (8006180 <vTaskSwitchContext+0xb4>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d003      	beq.n	80060e2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060da:	4b2a      	ldr	r3, [pc, #168]	@ (8006184 <vTaskSwitchContext+0xb8>)
 80060dc:	2201      	movs	r2, #1
 80060de:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060e0:	e047      	b.n	8006172 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80060e2:	4b28      	ldr	r3, [pc, #160]	@ (8006184 <vTaskSwitchContext+0xb8>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e8:	4b27      	ldr	r3, [pc, #156]	@ (8006188 <vTaskSwitchContext+0xbc>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	60fb      	str	r3, [r7, #12]
 80060ee:	e011      	b.n	8006114 <vTaskSwitchContext+0x48>
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d10b      	bne.n	800610e <vTaskSwitchContext+0x42>
	__asm volatile
 80060f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060fa:	f383 8811 	msr	BASEPRI, r3
 80060fe:	f3bf 8f6f 	isb	sy
 8006102:	f3bf 8f4f 	dsb	sy
 8006106:	607b      	str	r3, [r7, #4]
}
 8006108:	bf00      	nop
 800610a:	bf00      	nop
 800610c:	e7fd      	b.n	800610a <vTaskSwitchContext+0x3e>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	3b01      	subs	r3, #1
 8006112:	60fb      	str	r3, [r7, #12]
 8006114:	491d      	ldr	r1, [pc, #116]	@ (800618c <vTaskSwitchContext+0xc0>)
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4613      	mov	r3, r2
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	4413      	add	r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d0e3      	beq.n	80060f0 <vTaskSwitchContext+0x24>
 8006128:	68fa      	ldr	r2, [r7, #12]
 800612a:	4613      	mov	r3, r2
 800612c:	009b      	lsls	r3, r3, #2
 800612e:	4413      	add	r3, r2
 8006130:	009b      	lsls	r3, r3, #2
 8006132:	4a16      	ldr	r2, [pc, #88]	@ (800618c <vTaskSwitchContext+0xc0>)
 8006134:	4413      	add	r3, r2
 8006136:	60bb      	str	r3, [r7, #8]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	605a      	str	r2, [r3, #4]
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	3308      	adds	r3, #8
 800614a:	429a      	cmp	r2, r3
 800614c:	d104      	bne.n	8006158 <vTaskSwitchContext+0x8c>
 800614e:	68bb      	ldr	r3, [r7, #8]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	685a      	ldr	r2, [r3, #4]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	605a      	str	r2, [r3, #4]
 8006158:	68bb      	ldr	r3, [r7, #8]
 800615a:	685b      	ldr	r3, [r3, #4]
 800615c:	68db      	ldr	r3, [r3, #12]
 800615e:	4a0c      	ldr	r2, [pc, #48]	@ (8006190 <vTaskSwitchContext+0xc4>)
 8006160:	6013      	str	r3, [r2, #0]
 8006162:	4a09      	ldr	r2, [pc, #36]	@ (8006188 <vTaskSwitchContext+0xbc>)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006168:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <vTaskSwitchContext+0xc4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	3354      	adds	r3, #84	@ 0x54
 800616e:	4a09      	ldr	r2, [pc, #36]	@ (8006194 <vTaskSwitchContext+0xc8>)
 8006170:	6013      	str	r3, [r2, #0]
}
 8006172:	bf00      	nop
 8006174:	3714      	adds	r7, #20
 8006176:	46bd      	mov	sp, r7
 8006178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617c:	4770      	bx	lr
 800617e:	bf00      	nop
 8006180:	20001410 	.word	0x20001410
 8006184:	200013fc 	.word	0x200013fc
 8006188:	200013f0 	.word	0x200013f0
 800618c:	20000f18 	.word	0x20000f18
 8006190:	20000f14 	.word	0x20000f14
 8006194:	20000410 	.word	0x20000410

08006198 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b084      	sub	sp, #16
 800619c:	af00      	add	r7, sp, #0
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d10b      	bne.n	80061c0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60fb      	str	r3, [r7, #12]
}
 80061ba:	bf00      	nop
 80061bc:	bf00      	nop
 80061be:	e7fd      	b.n	80061bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061c0:	4b07      	ldr	r3, [pc, #28]	@ (80061e0 <vTaskPlaceOnEventList+0x48>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	3318      	adds	r3, #24
 80061c6:	4619      	mov	r1, r3
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f7fe fdc0 	bl	8004d4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061ce:	2101      	movs	r1, #1
 80061d0:	6838      	ldr	r0, [r7, #0]
 80061d2:	f000 fb41 	bl	8006858 <prvAddCurrentTaskToDelayedList>
}
 80061d6:	bf00      	nop
 80061d8:	3710      	adds	r7, #16
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000f14 	.word	0x20000f14

080061e4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b086      	sub	sp, #24
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10b      	bne.n	800620e <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 80061f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fa:	f383 8811 	msr	BASEPRI, r3
 80061fe:	f3bf 8f6f 	isb	sy
 8006202:	f3bf 8f4f 	dsb	sy
 8006206:	617b      	str	r3, [r7, #20]
}
 8006208:	bf00      	nop
 800620a:	bf00      	nop
 800620c:	e7fd      	b.n	800620a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800620e:	4b12      	ldr	r3, [pc, #72]	@ (8006258 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d10b      	bne.n	800622e <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8006216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800621a:	f383 8811 	msr	BASEPRI, r3
 800621e:	f3bf 8f6f 	isb	sy
 8006222:	f3bf 8f4f 	dsb	sy
 8006226:	613b      	str	r3, [r7, #16]
}
 8006228:	bf00      	nop
 800622a:	bf00      	nop
 800622c:	e7fd      	b.n	800622a <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800622e:	4b0b      	ldr	r3, [pc, #44]	@ (800625c <vTaskPlaceOnUnorderedEventList+0x78>)
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	68ba      	ldr	r2, [r7, #8]
 8006234:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006238:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800623a:	4b08      	ldr	r3, [pc, #32]	@ (800625c <vTaskPlaceOnUnorderedEventList+0x78>)
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	3318      	adds	r3, #24
 8006240:	4619      	mov	r1, r3
 8006242:	68f8      	ldr	r0, [r7, #12]
 8006244:	f7fe fd5f 	bl	8004d06 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006248:	2101      	movs	r1, #1
 800624a:	6878      	ldr	r0, [r7, #4]
 800624c:	f000 fb04 	bl	8006858 <prvAddCurrentTaskToDelayedList>
}
 8006250:	bf00      	nop
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	20001410 	.word	0x20001410
 800625c:	20000f14 	.word	0x20000f14

08006260 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006260:	b580      	push	{r7, lr}
 8006262:	b086      	sub	sp, #24
 8006264:	af00      	add	r7, sp, #0
 8006266:	60f8      	str	r0, [r7, #12]
 8006268:	60b9      	str	r1, [r7, #8]
 800626a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d10b      	bne.n	800628a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006272:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006276:	f383 8811 	msr	BASEPRI, r3
 800627a:	f3bf 8f6f 	isb	sy
 800627e:	f3bf 8f4f 	dsb	sy
 8006282:	617b      	str	r3, [r7, #20]
}
 8006284:	bf00      	nop
 8006286:	bf00      	nop
 8006288:	e7fd      	b.n	8006286 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800628a:	4b0a      	ldr	r3, [pc, #40]	@ (80062b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	3318      	adds	r3, #24
 8006290:	4619      	mov	r1, r3
 8006292:	68f8      	ldr	r0, [r7, #12]
 8006294:	f7fe fd37 	bl	8004d06 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2b00      	cmp	r3, #0
 800629c:	d002      	beq.n	80062a4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800629e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80062a2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062a4:	6879      	ldr	r1, [r7, #4]
 80062a6:	68b8      	ldr	r0, [r7, #8]
 80062a8:	f000 fad6 	bl	8006858 <prvAddCurrentTaskToDelayedList>
	}
 80062ac:	bf00      	nop
 80062ae:	3718      	adds	r7, #24
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000f14 	.word	0x20000f14

080062b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	68db      	ldr	r3, [r3, #12]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d10b      	bne.n	80062e6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80062ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062d2:	f383 8811 	msr	BASEPRI, r3
 80062d6:	f3bf 8f6f 	isb	sy
 80062da:	f3bf 8f4f 	dsb	sy
 80062de:	60fb      	str	r3, [r7, #12]
}
 80062e0:	bf00      	nop
 80062e2:	bf00      	nop
 80062e4:	e7fd      	b.n	80062e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062e6:	693b      	ldr	r3, [r7, #16]
 80062e8:	3318      	adds	r3, #24
 80062ea:	4618      	mov	r0, r3
 80062ec:	f7fe fd68 	bl	8004dc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062f0:	4b1d      	ldr	r3, [pc, #116]	@ (8006368 <xTaskRemoveFromEventList+0xb0>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d11d      	bne.n	8006334 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3304      	adds	r3, #4
 80062fc:	4618      	mov	r0, r3
 80062fe:	f7fe fd5f 	bl	8004dc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006302:	693b      	ldr	r3, [r7, #16]
 8006304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006306:	4b19      	ldr	r3, [pc, #100]	@ (800636c <xTaskRemoveFromEventList+0xb4>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d903      	bls.n	8006316 <xTaskRemoveFromEventList+0x5e>
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006312:	4a16      	ldr	r2, [pc, #88]	@ (800636c <xTaskRemoveFromEventList+0xb4>)
 8006314:	6013      	str	r3, [r2, #0]
 8006316:	693b      	ldr	r3, [r7, #16]
 8006318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631a:	4613      	mov	r3, r2
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	4413      	add	r3, r2
 8006320:	009b      	lsls	r3, r3, #2
 8006322:	4a13      	ldr	r2, [pc, #76]	@ (8006370 <xTaskRemoveFromEventList+0xb8>)
 8006324:	441a      	add	r2, r3
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3304      	adds	r3, #4
 800632a:	4619      	mov	r1, r3
 800632c:	4610      	mov	r0, r2
 800632e:	f7fe fcea 	bl	8004d06 <vListInsertEnd>
 8006332:	e005      	b.n	8006340 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	3318      	adds	r3, #24
 8006338:	4619      	mov	r1, r3
 800633a:	480e      	ldr	r0, [pc, #56]	@ (8006374 <xTaskRemoveFromEventList+0xbc>)
 800633c:	f7fe fce3 	bl	8004d06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006344:	4b0c      	ldr	r3, [pc, #48]	@ (8006378 <xTaskRemoveFromEventList+0xc0>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800634a:	429a      	cmp	r2, r3
 800634c:	d905      	bls.n	800635a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800634e:	2301      	movs	r3, #1
 8006350:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006352:	4b0a      	ldr	r3, [pc, #40]	@ (800637c <xTaskRemoveFromEventList+0xc4>)
 8006354:	2201      	movs	r2, #1
 8006356:	601a      	str	r2, [r3, #0]
 8006358:	e001      	b.n	800635e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800635a:	2300      	movs	r3, #0
 800635c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800635e:	697b      	ldr	r3, [r7, #20]
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	20001410 	.word	0x20001410
 800636c:	200013f0 	.word	0x200013f0
 8006370:	20000f18 	.word	0x20000f18
 8006374:	200013a8 	.word	0x200013a8
 8006378:	20000f14 	.word	0x20000f14
 800637c:	200013fc 	.word	0x200013fc

08006380 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b086      	sub	sp, #24
 8006384:	af00      	add	r7, sp, #0
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800638a:	4b2a      	ldr	r3, [pc, #168]	@ (8006434 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d10b      	bne.n	80063aa <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8006392:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006396:	f383 8811 	msr	BASEPRI, r3
 800639a:	f3bf 8f6f 	isb	sy
 800639e:	f3bf 8f4f 	dsb	sy
 80063a2:	613b      	str	r3, [r7, #16]
}
 80063a4:	bf00      	nop
 80063a6:	bf00      	nop
 80063a8:	e7fd      	b.n	80063a6 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d10b      	bne.n	80063d8 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80063c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063c4:	f383 8811 	msr	BASEPRI, r3
 80063c8:	f3bf 8f6f 	isb	sy
 80063cc:	f3bf 8f4f 	dsb	sy
 80063d0:	60fb      	str	r3, [r7, #12]
}
 80063d2:	bf00      	nop
 80063d4:	bf00      	nop
 80063d6:	e7fd      	b.n	80063d4 <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80063d8:	6878      	ldr	r0, [r7, #4]
 80063da:	f7fe fcf1 	bl	8004dc0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fcec 	bl	8004dc0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ec:	4b12      	ldr	r3, [pc, #72]	@ (8006438 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d903      	bls.n	80063fc <vTaskRemoveFromUnorderedEventList+0x7c>
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063f8:	4a0f      	ldr	r2, [pc, #60]	@ (8006438 <vTaskRemoveFromUnorderedEventList+0xb8>)
 80063fa:	6013      	str	r3, [r2, #0]
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006400:	4613      	mov	r3, r2
 8006402:	009b      	lsls	r3, r3, #2
 8006404:	4413      	add	r3, r2
 8006406:	009b      	lsls	r3, r3, #2
 8006408:	4a0c      	ldr	r2, [pc, #48]	@ (800643c <vTaskRemoveFromUnorderedEventList+0xbc>)
 800640a:	441a      	add	r2, r3
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	3304      	adds	r3, #4
 8006410:	4619      	mov	r1, r3
 8006412:	4610      	mov	r0, r2
 8006414:	f7fe fc77 	bl	8004d06 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800641c:	4b08      	ldr	r3, [pc, #32]	@ (8006440 <vTaskRemoveFromUnorderedEventList+0xc0>)
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006422:	429a      	cmp	r2, r3
 8006424:	d902      	bls.n	800642c <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006426:	4b07      	ldr	r3, [pc, #28]	@ (8006444 <vTaskRemoveFromUnorderedEventList+0xc4>)
 8006428:	2201      	movs	r2, #1
 800642a:	601a      	str	r2, [r3, #0]
	}
}
 800642c:	bf00      	nop
 800642e:	3718      	adds	r7, #24
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}
 8006434:	20001410 	.word	0x20001410
 8006438:	200013f0 	.word	0x200013f0
 800643c:	20000f18 	.word	0x20000f18
 8006440:	20000f14 	.word	0x20000f14
 8006444:	200013fc 	.word	0x200013fc

08006448 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006448:	b480      	push	{r7}
 800644a:	b083      	sub	sp, #12
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006450:	4b06      	ldr	r3, [pc, #24]	@ (800646c <vTaskInternalSetTimeOutState+0x24>)
 8006452:	681a      	ldr	r2, [r3, #0]
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006458:	4b05      	ldr	r3, [pc, #20]	@ (8006470 <vTaskInternalSetTimeOutState+0x28>)
 800645a:	681a      	ldr	r2, [r3, #0]
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	605a      	str	r2, [r3, #4]
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr
 800646c:	20001400 	.word	0x20001400
 8006470:	200013ec 	.word	0x200013ec

08006474 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b088      	sub	sp, #32
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10b      	bne.n	800649c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	613b      	str	r3, [r7, #16]
}
 8006496:	bf00      	nop
 8006498:	bf00      	nop
 800649a:	e7fd      	b.n	8006498 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800649c:	683b      	ldr	r3, [r7, #0]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d10b      	bne.n	80064ba <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80064a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064a6:	f383 8811 	msr	BASEPRI, r3
 80064aa:	f3bf 8f6f 	isb	sy
 80064ae:	f3bf 8f4f 	dsb	sy
 80064b2:	60fb      	str	r3, [r7, #12]
}
 80064b4:	bf00      	nop
 80064b6:	bf00      	nop
 80064b8:	e7fd      	b.n	80064b6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80064ba:	f000 fecd 	bl	8007258 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064be:	4b1d      	ldr	r3, [pc, #116]	@ (8006534 <xTaskCheckForTimeOut+0xc0>)
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	685b      	ldr	r3, [r3, #4]
 80064c8:	69ba      	ldr	r2, [r7, #24]
 80064ca:	1ad3      	subs	r3, r2, r3
 80064cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064d6:	d102      	bne.n	80064de <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064d8:	2300      	movs	r3, #0
 80064da:	61fb      	str	r3, [r7, #28]
 80064dc:	e023      	b.n	8006526 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681a      	ldr	r2, [r3, #0]
 80064e2:	4b15      	ldr	r3, [pc, #84]	@ (8006538 <xTaskCheckForTimeOut+0xc4>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d007      	beq.n	80064fa <xTaskCheckForTimeOut+0x86>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	69ba      	ldr	r2, [r7, #24]
 80064f0:	429a      	cmp	r2, r3
 80064f2:	d302      	bcc.n	80064fa <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064f4:	2301      	movs	r3, #1
 80064f6:	61fb      	str	r3, [r7, #28]
 80064f8:	e015      	b.n	8006526 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	697a      	ldr	r2, [r7, #20]
 8006500:	429a      	cmp	r2, r3
 8006502:	d20b      	bcs.n	800651c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	681a      	ldr	r2, [r3, #0]
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	1ad2      	subs	r2, r2, r3
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7ff ff99 	bl	8006448 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006516:	2300      	movs	r3, #0
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	e004      	b.n	8006526 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	2200      	movs	r2, #0
 8006520:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006522:	2301      	movs	r3, #1
 8006524:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006526:	f000 fec9 	bl	80072bc <vPortExitCritical>

	return xReturn;
 800652a:	69fb      	ldr	r3, [r7, #28]
}
 800652c:	4618      	mov	r0, r3
 800652e:	3720      	adds	r7, #32
 8006530:	46bd      	mov	sp, r7
 8006532:	bd80      	pop	{r7, pc}
 8006534:	200013ec 	.word	0x200013ec
 8006538:	20001400 	.word	0x20001400

0800653c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800653c:	b480      	push	{r7}
 800653e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006540:	4b03      	ldr	r3, [pc, #12]	@ (8006550 <vTaskMissedYield+0x14>)
 8006542:	2201      	movs	r2, #1
 8006544:	601a      	str	r2, [r3, #0]
}
 8006546:	bf00      	nop
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr
 8006550:	200013fc 	.word	0x200013fc

08006554 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006554:	b580      	push	{r7, lr}
 8006556:	b082      	sub	sp, #8
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800655c:	f000 f852 	bl	8006604 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006560:	4b06      	ldr	r3, [pc, #24]	@ (800657c <prvIdleTask+0x28>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d9f9      	bls.n	800655c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006568:	4b05      	ldr	r3, [pc, #20]	@ (8006580 <prvIdleTask+0x2c>)
 800656a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800656e:	601a      	str	r2, [r3, #0]
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006578:	e7f0      	b.n	800655c <prvIdleTask+0x8>
 800657a:	bf00      	nop
 800657c:	20000f18 	.word	0x20000f18
 8006580:	e000ed04 	.word	0xe000ed04

08006584 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800658a:	2300      	movs	r3, #0
 800658c:	607b      	str	r3, [r7, #4]
 800658e:	e00c      	b.n	80065aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006590:	687a      	ldr	r2, [r7, #4]
 8006592:	4613      	mov	r3, r2
 8006594:	009b      	lsls	r3, r3, #2
 8006596:	4413      	add	r3, r2
 8006598:	009b      	lsls	r3, r3, #2
 800659a:	4a12      	ldr	r2, [pc, #72]	@ (80065e4 <prvInitialiseTaskLists+0x60>)
 800659c:	4413      	add	r3, r2
 800659e:	4618      	mov	r0, r3
 80065a0:	f7fe fb84 	bl	8004cac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3301      	adds	r3, #1
 80065a8:	607b      	str	r3, [r7, #4]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2b37      	cmp	r3, #55	@ 0x37
 80065ae:	d9ef      	bls.n	8006590 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065b0:	480d      	ldr	r0, [pc, #52]	@ (80065e8 <prvInitialiseTaskLists+0x64>)
 80065b2:	f7fe fb7b 	bl	8004cac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065b6:	480d      	ldr	r0, [pc, #52]	@ (80065ec <prvInitialiseTaskLists+0x68>)
 80065b8:	f7fe fb78 	bl	8004cac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065bc:	480c      	ldr	r0, [pc, #48]	@ (80065f0 <prvInitialiseTaskLists+0x6c>)
 80065be:	f7fe fb75 	bl	8004cac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065c2:	480c      	ldr	r0, [pc, #48]	@ (80065f4 <prvInitialiseTaskLists+0x70>)
 80065c4:	f7fe fb72 	bl	8004cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065c8:	480b      	ldr	r0, [pc, #44]	@ (80065f8 <prvInitialiseTaskLists+0x74>)
 80065ca:	f7fe fb6f 	bl	8004cac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065ce:	4b0b      	ldr	r3, [pc, #44]	@ (80065fc <prvInitialiseTaskLists+0x78>)
 80065d0:	4a05      	ldr	r2, [pc, #20]	@ (80065e8 <prvInitialiseTaskLists+0x64>)
 80065d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006600 <prvInitialiseTaskLists+0x7c>)
 80065d6:	4a05      	ldr	r2, [pc, #20]	@ (80065ec <prvInitialiseTaskLists+0x68>)
 80065d8:	601a      	str	r2, [r3, #0]
}
 80065da:	bf00      	nop
 80065dc:	3708      	adds	r7, #8
 80065de:	46bd      	mov	sp, r7
 80065e0:	bd80      	pop	{r7, pc}
 80065e2:	bf00      	nop
 80065e4:	20000f18 	.word	0x20000f18
 80065e8:	20001378 	.word	0x20001378
 80065ec:	2000138c 	.word	0x2000138c
 80065f0:	200013a8 	.word	0x200013a8
 80065f4:	200013bc 	.word	0x200013bc
 80065f8:	200013d4 	.word	0x200013d4
 80065fc:	200013a0 	.word	0x200013a0
 8006600:	200013a4 	.word	0x200013a4

08006604 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006604:	b580      	push	{r7, lr}
 8006606:	b082      	sub	sp, #8
 8006608:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800660a:	e019      	b.n	8006640 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800660c:	f000 fe24 	bl	8007258 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006610:	4b10      	ldr	r3, [pc, #64]	@ (8006654 <prvCheckTasksWaitingTermination+0x50>)
 8006612:	68db      	ldr	r3, [r3, #12]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	3304      	adds	r3, #4
 800661c:	4618      	mov	r0, r3
 800661e:	f7fe fbcf 	bl	8004dc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006622:	4b0d      	ldr	r3, [pc, #52]	@ (8006658 <prvCheckTasksWaitingTermination+0x54>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	3b01      	subs	r3, #1
 8006628:	4a0b      	ldr	r2, [pc, #44]	@ (8006658 <prvCheckTasksWaitingTermination+0x54>)
 800662a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800662c:	4b0b      	ldr	r3, [pc, #44]	@ (800665c <prvCheckTasksWaitingTermination+0x58>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	3b01      	subs	r3, #1
 8006632:	4a0a      	ldr	r2, [pc, #40]	@ (800665c <prvCheckTasksWaitingTermination+0x58>)
 8006634:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006636:	f000 fe41 	bl	80072bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	f000 f810 	bl	8006660 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006640:	4b06      	ldr	r3, [pc, #24]	@ (800665c <prvCheckTasksWaitingTermination+0x58>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d1e1      	bne.n	800660c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006648:	bf00      	nop
 800664a:	bf00      	nop
 800664c:	3708      	adds	r7, #8
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	200013bc 	.word	0x200013bc
 8006658:	200013e8 	.word	0x200013e8
 800665c:	200013d0 	.word	0x200013d0

08006660 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	3354      	adds	r3, #84	@ 0x54
 800666c:	4618      	mov	r0, r3
 800666e:	f003 f959 	bl	8009924 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006678:	2b00      	cmp	r3, #0
 800667a:	d108      	bne.n	800668e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006680:	4618      	mov	r0, r3
 8006682:	f000 ffd9 	bl	8007638 <vPortFree>
				vPortFree( pxTCB );
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 ffd6 	bl	8007638 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800668c:	e019      	b.n	80066c2 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006694:	2b01      	cmp	r3, #1
 8006696:	d103      	bne.n	80066a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006698:	6878      	ldr	r0, [r7, #4]
 800669a:	f000 ffcd 	bl	8007638 <vPortFree>
	}
 800669e:	e010      	b.n	80066c2 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80066a6:	2b02      	cmp	r3, #2
 80066a8:	d00b      	beq.n	80066c2 <prvDeleteTCB+0x62>
	__asm volatile
 80066aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ae:	f383 8811 	msr	BASEPRI, r3
 80066b2:	f3bf 8f6f 	isb	sy
 80066b6:	f3bf 8f4f 	dsb	sy
 80066ba:	60fb      	str	r3, [r7, #12]
}
 80066bc:	bf00      	nop
 80066be:	bf00      	nop
 80066c0:	e7fd      	b.n	80066be <prvDeleteTCB+0x5e>
	}
 80066c2:	bf00      	nop
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
	...

080066cc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066d2:	4b0c      	ldr	r3, [pc, #48]	@ (8006704 <prvResetNextTaskUnblockTime+0x38>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d104      	bne.n	80066e6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006708 <prvResetNextTaskUnblockTime+0x3c>)
 80066de:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80066e2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066e4:	e008      	b.n	80066f8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066e6:	4b07      	ldr	r3, [pc, #28]	@ (8006704 <prvResetNextTaskUnblockTime+0x38>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	68db      	ldr	r3, [r3, #12]
 80066ee:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	4a04      	ldr	r2, [pc, #16]	@ (8006708 <prvResetNextTaskUnblockTime+0x3c>)
 80066f6:	6013      	str	r3, [r2, #0]
}
 80066f8:	bf00      	nop
 80066fa:	370c      	adds	r7, #12
 80066fc:	46bd      	mov	sp, r7
 80066fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006702:	4770      	bx	lr
 8006704:	200013a0 	.word	0x200013a0
 8006708:	20001408 	.word	0x20001408

0800670c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006712:	4b0b      	ldr	r3, [pc, #44]	@ (8006740 <xTaskGetSchedulerState+0x34>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d102      	bne.n	8006720 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800671a:	2301      	movs	r3, #1
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	e008      	b.n	8006732 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006720:	4b08      	ldr	r3, [pc, #32]	@ (8006744 <xTaskGetSchedulerState+0x38>)
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d102      	bne.n	800672e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006728:	2302      	movs	r3, #2
 800672a:	607b      	str	r3, [r7, #4]
 800672c:	e001      	b.n	8006732 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800672e:	2300      	movs	r3, #0
 8006730:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006732:	687b      	ldr	r3, [r7, #4]
	}
 8006734:	4618      	mov	r0, r3
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr
 8006740:	200013f4 	.word	0x200013f4
 8006744:	20001410 	.word	0x20001410

08006748 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d058      	beq.n	8006810 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800675e:	4b2f      	ldr	r3, [pc, #188]	@ (800681c <xTaskPriorityDisinherit+0xd4>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	429a      	cmp	r2, r3
 8006766:	d00b      	beq.n	8006780 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676c:	f383 8811 	msr	BASEPRI, r3
 8006770:	f3bf 8f6f 	isb	sy
 8006774:	f3bf 8f4f 	dsb	sy
 8006778:	60fb      	str	r3, [r7, #12]
}
 800677a:	bf00      	nop
 800677c:	bf00      	nop
 800677e:	e7fd      	b.n	800677c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006784:	2b00      	cmp	r3, #0
 8006786:	d10b      	bne.n	80067a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006788:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678c:	f383 8811 	msr	BASEPRI, r3
 8006790:	f3bf 8f6f 	isb	sy
 8006794:	f3bf 8f4f 	dsb	sy
 8006798:	60bb      	str	r3, [r7, #8]
}
 800679a:	bf00      	nop
 800679c:	bf00      	nop
 800679e:	e7fd      	b.n	800679c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067a4:	1e5a      	subs	r2, r3, #1
 80067a6:	693b      	ldr	r3, [r7, #16]
 80067a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067ae:	693b      	ldr	r3, [r7, #16]
 80067b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d02c      	beq.n	8006810 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80067b6:	693b      	ldr	r3, [r7, #16]
 80067b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d128      	bne.n	8006810 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	3304      	adds	r3, #4
 80067c2:	4618      	mov	r0, r3
 80067c4:	f7fe fafc 	bl	8004dc0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006820 <xTaskPriorityDisinherit+0xd8>)
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	429a      	cmp	r2, r3
 80067e6:	d903      	bls.n	80067f0 <xTaskPriorityDisinherit+0xa8>
 80067e8:	693b      	ldr	r3, [r7, #16]
 80067ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006820 <xTaskPriorityDisinherit+0xd8>)
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	693b      	ldr	r3, [r7, #16]
 80067f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f4:	4613      	mov	r3, r2
 80067f6:	009b      	lsls	r3, r3, #2
 80067f8:	4413      	add	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4a09      	ldr	r2, [pc, #36]	@ (8006824 <xTaskPriorityDisinherit+0xdc>)
 80067fe:	441a      	add	r2, r3
 8006800:	693b      	ldr	r3, [r7, #16]
 8006802:	3304      	adds	r3, #4
 8006804:	4619      	mov	r1, r3
 8006806:	4610      	mov	r0, r2
 8006808:	f7fe fa7d 	bl	8004d06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800680c:	2301      	movs	r3, #1
 800680e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006810:	697b      	ldr	r3, [r7, #20]
	}
 8006812:	4618      	mov	r0, r3
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000f14 	.word	0x20000f14
 8006820:	200013f0 	.word	0x200013f0
 8006824:	20000f18 	.word	0x20000f18

08006828 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800682e:	4b09      	ldr	r3, [pc, #36]	@ (8006854 <uxTaskResetEventItemValue+0x2c>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	699b      	ldr	r3, [r3, #24]
 8006834:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006836:	4b07      	ldr	r3, [pc, #28]	@ (8006854 <uxTaskResetEventItemValue+0x2c>)
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800683c:	4b05      	ldr	r3, [pc, #20]	@ (8006854 <uxTaskResetEventItemValue+0x2c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8006844:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8006846:	687b      	ldr	r3, [r7, #4]
}
 8006848:	4618      	mov	r0, r3
 800684a:	370c      	adds	r7, #12
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	20000f14 	.word	0x20000f14

08006858 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006862:	4b21      	ldr	r3, [pc, #132]	@ (80068e8 <prvAddCurrentTaskToDelayedList+0x90>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006868:	4b20      	ldr	r3, [pc, #128]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	3304      	adds	r3, #4
 800686e:	4618      	mov	r0, r3
 8006870:	f7fe faa6 	bl	8004dc0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800687a:	d10a      	bne.n	8006892 <prvAddCurrentTaskToDelayedList+0x3a>
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d007      	beq.n	8006892 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006882:	4b1a      	ldr	r3, [pc, #104]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	3304      	adds	r3, #4
 8006888:	4619      	mov	r1, r3
 800688a:	4819      	ldr	r0, [pc, #100]	@ (80068f0 <prvAddCurrentTaskToDelayedList+0x98>)
 800688c:	f7fe fa3b 	bl	8004d06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006890:	e026      	b.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006892:	68fa      	ldr	r2, [r7, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4413      	add	r3, r2
 8006898:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800689a:	4b14      	ldr	r3, [pc, #80]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80068a2:	68ba      	ldr	r2, [r7, #8]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d209      	bcs.n	80068be <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068aa:	4b12      	ldr	r3, [pc, #72]	@ (80068f4 <prvAddCurrentTaskToDelayedList+0x9c>)
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	4b0f      	ldr	r3, [pc, #60]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	3304      	adds	r3, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	4610      	mov	r0, r2
 80068b8:	f7fe fa49 	bl	8004d4e <vListInsert>
}
 80068bc:	e010      	b.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80068be:	4b0e      	ldr	r3, [pc, #56]	@ (80068f8 <prvAddCurrentTaskToDelayedList+0xa0>)
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	4b0a      	ldr	r3, [pc, #40]	@ (80068ec <prvAddCurrentTaskToDelayedList+0x94>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3304      	adds	r3, #4
 80068c8:	4619      	mov	r1, r3
 80068ca:	4610      	mov	r0, r2
 80068cc:	f7fe fa3f 	bl	8004d4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80068d0:	4b0a      	ldr	r3, [pc, #40]	@ (80068fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68ba      	ldr	r2, [r7, #8]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	d202      	bcs.n	80068e0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80068da:	4a08      	ldr	r2, [pc, #32]	@ (80068fc <prvAddCurrentTaskToDelayedList+0xa4>)
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	6013      	str	r3, [r2, #0]
}
 80068e0:	bf00      	nop
 80068e2:	3710      	adds	r7, #16
 80068e4:	46bd      	mov	sp, r7
 80068e6:	bd80      	pop	{r7, pc}
 80068e8:	200013ec 	.word	0x200013ec
 80068ec:	20000f14 	.word	0x20000f14
 80068f0:	200013d4 	.word	0x200013d4
 80068f4:	200013a4 	.word	0x200013a4
 80068f8:	200013a0 	.word	0x200013a0
 80068fc:	20001408 	.word	0x20001408

08006900 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b08a      	sub	sp, #40	@ 0x28
 8006904:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800690a:	f000 fb13 	bl	8006f34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800690e:	4b1d      	ldr	r3, [pc, #116]	@ (8006984 <xTimerCreateTimerTask+0x84>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d021      	beq.n	800695a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800691a:	2300      	movs	r3, #0
 800691c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800691e:	1d3a      	adds	r2, r7, #4
 8006920:	f107 0108 	add.w	r1, r7, #8
 8006924:	f107 030c 	add.w	r3, r7, #12
 8006928:	4618      	mov	r0, r3
 800692a:	f7fd ffaf 	bl	800488c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800692e:	6879      	ldr	r1, [r7, #4]
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	9202      	str	r2, [sp, #8]
 8006936:	9301      	str	r3, [sp, #4]
 8006938:	2302      	movs	r3, #2
 800693a:	9300      	str	r3, [sp, #0]
 800693c:	2300      	movs	r3, #0
 800693e:	460a      	mov	r2, r1
 8006940:	4911      	ldr	r1, [pc, #68]	@ (8006988 <xTimerCreateTimerTask+0x88>)
 8006942:	4812      	ldr	r0, [pc, #72]	@ (800698c <xTimerCreateTimerTask+0x8c>)
 8006944:	f7fe ffe8 	bl	8005918 <xTaskCreateStatic>
 8006948:	4603      	mov	r3, r0
 800694a:	4a11      	ldr	r2, [pc, #68]	@ (8006990 <xTimerCreateTimerTask+0x90>)
 800694c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800694e:	4b10      	ldr	r3, [pc, #64]	@ (8006990 <xTimerCreateTimerTask+0x90>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	2b00      	cmp	r3, #0
 8006954:	d001      	beq.n	800695a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006956:	2301      	movs	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d10b      	bne.n	8006978 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006960:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006964:	f383 8811 	msr	BASEPRI, r3
 8006968:	f3bf 8f6f 	isb	sy
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	613b      	str	r3, [r7, #16]
}
 8006972:	bf00      	nop
 8006974:	bf00      	nop
 8006976:	e7fd      	b.n	8006974 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006978:	697b      	ldr	r3, [r7, #20]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20001444 	.word	0x20001444
 8006988:	0800a384 	.word	0x0800a384
 800698c:	08006acd 	.word	0x08006acd
 8006990:	20001448 	.word	0x20001448

08006994 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006994:	b580      	push	{r7, lr}
 8006996:	b08a      	sub	sp, #40	@ 0x28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
 80069a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80069a2:	2300      	movs	r3, #0
 80069a4:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d10b      	bne.n	80069c4 <xTimerGenericCommand+0x30>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	623b      	str	r3, [r7, #32]
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80069c4:	4b19      	ldr	r3, [pc, #100]	@ (8006a2c <xTimerGenericCommand+0x98>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d02a      	beq.n	8006a22 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80069cc:	68bb      	ldr	r3, [r7, #8]
 80069ce:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80069d8:	68bb      	ldr	r3, [r7, #8]
 80069da:	2b05      	cmp	r3, #5
 80069dc:	dc18      	bgt.n	8006a10 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80069de:	f7ff fe95 	bl	800670c <xTaskGetSchedulerState>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b02      	cmp	r3, #2
 80069e6:	d109      	bne.n	80069fc <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80069e8:	4b10      	ldr	r3, [pc, #64]	@ (8006a2c <xTimerGenericCommand+0x98>)
 80069ea:	6818      	ldr	r0, [r3, #0]
 80069ec:	f107 0110 	add.w	r1, r7, #16
 80069f0:	2300      	movs	r3, #0
 80069f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80069f4:	f7fe fba0 	bl	8005138 <xQueueGenericSend>
 80069f8:	6278      	str	r0, [r7, #36]	@ 0x24
 80069fa:	e012      	b.n	8006a22 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80069fc:	4b0b      	ldr	r3, [pc, #44]	@ (8006a2c <xTimerGenericCommand+0x98>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	f107 0110 	add.w	r1, r7, #16
 8006a04:	2300      	movs	r3, #0
 8006a06:	2200      	movs	r2, #0
 8006a08:	f7fe fb96 	bl	8005138 <xQueueGenericSend>
 8006a0c:	6278      	str	r0, [r7, #36]	@ 0x24
 8006a0e:	e008      	b.n	8006a22 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006a10:	4b06      	ldr	r3, [pc, #24]	@ (8006a2c <xTimerGenericCommand+0x98>)
 8006a12:	6818      	ldr	r0, [r3, #0]
 8006a14:	f107 0110 	add.w	r1, r7, #16
 8006a18:	2300      	movs	r3, #0
 8006a1a:	683a      	ldr	r2, [r7, #0]
 8006a1c:	f7fe fc8e 	bl	800533c <xQueueGenericSendFromISR>
 8006a20:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3728      	adds	r7, #40	@ 0x28
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	bd80      	pop	{r7, pc}
 8006a2c:	20001444 	.word	0x20001444

08006a30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b088      	sub	sp, #32
 8006a34:	af02      	add	r7, sp, #8
 8006a36:	6078      	str	r0, [r7, #4]
 8006a38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a3a:	4b23      	ldr	r3, [pc, #140]	@ (8006ac8 <prvProcessExpiredTimer+0x98>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	68db      	ldr	r3, [r3, #12]
 8006a40:	68db      	ldr	r3, [r3, #12]
 8006a42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	3304      	adds	r3, #4
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f7fe f9b9 	bl	8004dc0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006a54:	f003 0304 	and.w	r3, r3, #4
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d023      	beq.n	8006aa4 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	699a      	ldr	r2, [r3, #24]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	18d1      	adds	r1, r2, r3
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	6978      	ldr	r0, [r7, #20]
 8006a6a:	f000 f8d5 	bl	8006c18 <prvInsertTimerInActiveList>
 8006a6e:	4603      	mov	r3, r0
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d020      	beq.n	8006ab6 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006a74:	2300      	movs	r3, #0
 8006a76:	9300      	str	r3, [sp, #0]
 8006a78:	2300      	movs	r3, #0
 8006a7a:	687a      	ldr	r2, [r7, #4]
 8006a7c:	2100      	movs	r1, #0
 8006a7e:	6978      	ldr	r0, [r7, #20]
 8006a80:	f7ff ff88 	bl	8006994 <xTimerGenericCommand>
 8006a84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d114      	bne.n	8006ab6 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a90:	f383 8811 	msr	BASEPRI, r3
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	f3bf 8f4f 	dsb	sy
 8006a9c:	60fb      	str	r3, [r7, #12]
}
 8006a9e:	bf00      	nop
 8006aa0:	bf00      	nop
 8006aa2:	e7fd      	b.n	8006aa0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006aaa:	f023 0301 	bic.w	r3, r3, #1
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	6978      	ldr	r0, [r7, #20]
 8006abc:	4798      	blx	r3
}
 8006abe:	bf00      	nop
 8006ac0:	3718      	adds	r7, #24
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	bd80      	pop	{r7, pc}
 8006ac6:	bf00      	nop
 8006ac8:	2000143c 	.word	0x2000143c

08006acc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b084      	sub	sp, #16
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ad4:	f107 0308 	add.w	r3, r7, #8
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f000 f859 	bl	8006b90 <prvGetNextExpireTime>
 8006ade:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	68f8      	ldr	r0, [r7, #12]
 8006ae6:	f000 f805 	bl	8006af4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006aea:	f000 f8d7 	bl	8006c9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006aee:	bf00      	nop
 8006af0:	e7f0      	b.n	8006ad4 <prvTimerTask+0x8>
	...

08006af4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b084      	sub	sp, #16
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006afe:	f7ff f96f 	bl	8005de0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006b02:	f107 0308 	add.w	r3, r7, #8
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 f866 	bl	8006bd8 <prvSampleTimeNow>
 8006b0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d130      	bne.n	8006b76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006b14:	683b      	ldr	r3, [r7, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d10a      	bne.n	8006b30 <prvProcessTimerOrBlockTask+0x3c>
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d806      	bhi.n	8006b30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006b22:	f7ff f96b 	bl	8005dfc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f7ff ff81 	bl	8006a30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006b2e:	e024      	b.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d008      	beq.n	8006b48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006b36:	4b13      	ldr	r3, [pc, #76]	@ (8006b84 <prvProcessTimerOrBlockTask+0x90>)
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d101      	bne.n	8006b44 <prvProcessTimerOrBlockTask+0x50>
 8006b40:	2301      	movs	r3, #1
 8006b42:	e000      	b.n	8006b46 <prvProcessTimerOrBlockTask+0x52>
 8006b44:	2300      	movs	r3, #0
 8006b46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006b48:	4b0f      	ldr	r3, [pc, #60]	@ (8006b88 <prvProcessTimerOrBlockTask+0x94>)
 8006b4a:	6818      	ldr	r0, [r3, #0]
 8006b4c:	687a      	ldr	r2, [r7, #4]
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	1ad3      	subs	r3, r2, r3
 8006b52:	683a      	ldr	r2, [r7, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	f7fe feab 	bl	80058b0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006b5a:	f7ff f94f 	bl	8005dfc <xTaskResumeAll>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10a      	bne.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006b64:	4b09      	ldr	r3, [pc, #36]	@ (8006b8c <prvProcessTimerOrBlockTask+0x98>)
 8006b66:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b6a:	601a      	str	r2, [r3, #0]
 8006b6c:	f3bf 8f4f 	dsb	sy
 8006b70:	f3bf 8f6f 	isb	sy
}
 8006b74:	e001      	b.n	8006b7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006b76:	f7ff f941 	bl	8005dfc <xTaskResumeAll>
}
 8006b7a:	bf00      	nop
 8006b7c:	3710      	adds	r7, #16
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	bd80      	pop	{r7, pc}
 8006b82:	bf00      	nop
 8006b84:	20001440 	.word	0x20001440
 8006b88:	20001444 	.word	0x20001444
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b98:	4b0e      	ldr	r3, [pc, #56]	@ (8006bd4 <prvGetNextExpireTime+0x44>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d101      	bne.n	8006ba6 <prvGetNextExpireTime+0x16>
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	e000      	b.n	8006ba8 <prvGetNextExpireTime+0x18>
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d105      	bne.n	8006bc0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006bb4:	4b07      	ldr	r3, [pc, #28]	@ (8006bd4 <prvGetNextExpireTime+0x44>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	e001      	b.n	8006bc4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3714      	adds	r7, #20
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop
 8006bd4:	2000143c 	.word	0x2000143c

08006bd8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006bd8:	b580      	push	{r7, lr}
 8006bda:	b084      	sub	sp, #16
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006be0:	f7ff f9aa 	bl	8005f38 <xTaskGetTickCount>
 8006be4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006be6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c14 <prvSampleTimeNow+0x3c>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d205      	bcs.n	8006bfc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006bf0:	f000 f93a 	bl	8006e68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	e002      	b.n	8006c02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006c02:	4a04      	ldr	r2, [pc, #16]	@ (8006c14 <prvSampleTimeNow+0x3c>)
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006c08:	68fb      	ldr	r3, [r7, #12]
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	2000144c 	.word	0x2000144c

08006c18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b086      	sub	sp, #24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	60f8      	str	r0, [r7, #12]
 8006c20:	60b9      	str	r1, [r7, #8]
 8006c22:	607a      	str	r2, [r7, #4]
 8006c24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006c26:	2300      	movs	r3, #0
 8006c28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	68ba      	ldr	r2, [r7, #8]
 8006c2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	68fa      	ldr	r2, [r7, #12]
 8006c34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006c36:	68ba      	ldr	r2, [r7, #8]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	429a      	cmp	r2, r3
 8006c3c:	d812      	bhi.n	8006c64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	1ad2      	subs	r2, r2, r3
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	699b      	ldr	r3, [r3, #24]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d302      	bcc.n	8006c52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	617b      	str	r3, [r7, #20]
 8006c50:	e01b      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006c52:	4b10      	ldr	r3, [pc, #64]	@ (8006c94 <prvInsertTimerInActiveList+0x7c>)
 8006c54:	681a      	ldr	r2, [r3, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	3304      	adds	r3, #4
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	4610      	mov	r0, r2
 8006c5e:	f7fe f876 	bl	8004d4e <vListInsert>
 8006c62:	e012      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006c64:	687a      	ldr	r2, [r7, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d206      	bcs.n	8006c7a <prvInsertTimerInActiveList+0x62>
 8006c6c:	68ba      	ldr	r2, [r7, #8]
 8006c6e:	683b      	ldr	r3, [r7, #0]
 8006c70:	429a      	cmp	r2, r3
 8006c72:	d302      	bcc.n	8006c7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006c74:	2301      	movs	r3, #1
 8006c76:	617b      	str	r3, [r7, #20]
 8006c78:	e007      	b.n	8006c8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006c7a:	4b07      	ldr	r3, [pc, #28]	@ (8006c98 <prvInsertTimerInActiveList+0x80>)
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	3304      	adds	r3, #4
 8006c82:	4619      	mov	r1, r3
 8006c84:	4610      	mov	r0, r2
 8006c86:	f7fe f862 	bl	8004d4e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006c8a:	697b      	ldr	r3, [r7, #20]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}
 8006c94:	20001440 	.word	0x20001440
 8006c98:	2000143c 	.word	0x2000143c

08006c9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b08e      	sub	sp, #56	@ 0x38
 8006ca0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ca2:	e0ce      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	da19      	bge.n	8006cde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006caa:	1d3b      	adds	r3, r7, #4
 8006cac:	3304      	adds	r3, #4
 8006cae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006cb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	61fb      	str	r3, [r7, #28]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006cce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd4:	6850      	ldr	r0, [r2, #4]
 8006cd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd8:	6892      	ldr	r2, [r2, #8]
 8006cda:	4611      	mov	r1, r2
 8006cdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	f2c0 80ae 	blt.w	8006e42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006cea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d004      	beq.n	8006cfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fe f862 	bl	8004dc0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006cfc:	463b      	mov	r3, r7
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7ff ff6a 	bl	8006bd8 <prvSampleTimeNow>
 8006d04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b09      	cmp	r3, #9
 8006d0a:	f200 8097 	bhi.w	8006e3c <prvProcessReceivedCommands+0x1a0>
 8006d0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d14 <prvProcessReceivedCommands+0x78>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d3d 	.word	0x08006d3d
 8006d18:	08006d3d 	.word	0x08006d3d
 8006d1c:	08006d3d 	.word	0x08006d3d
 8006d20:	08006db3 	.word	0x08006db3
 8006d24:	08006dc7 	.word	0x08006dc7
 8006d28:	08006e13 	.word	0x08006e13
 8006d2c:	08006d3d 	.word	0x08006d3d
 8006d30:	08006d3d 	.word	0x08006d3d
 8006d34:	08006db3 	.word	0x08006db3
 8006d38:	08006dc7 	.word	0x08006dc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	b2da      	uxtb	r2, r3
 8006d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006d4e:	68ba      	ldr	r2, [r7, #8]
 8006d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d52:	699b      	ldr	r3, [r3, #24]
 8006d54:	18d1      	adds	r1, r2, r3
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d5c:	f7ff ff5c 	bl	8006c18 <prvInsertTimerInActiveList>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d06c      	beq.n	8006e40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d74:	f003 0304 	and.w	r3, r3, #4
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d061      	beq.n	8006e40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006d7c:	68ba      	ldr	r2, [r7, #8]
 8006d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d80:	699b      	ldr	r3, [r3, #24]
 8006d82:	441a      	add	r2, r3
 8006d84:	2300      	movs	r3, #0
 8006d86:	9300      	str	r3, [sp, #0]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	2100      	movs	r1, #0
 8006d8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d8e:	f7ff fe01 	bl	8006994 <xTimerGenericCommand>
 8006d92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d94:	6a3b      	ldr	r3, [r7, #32]
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	d152      	bne.n	8006e40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006d9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d9e:	f383 8811 	msr	BASEPRI, r3
 8006da2:	f3bf 8f6f 	isb	sy
 8006da6:	f3bf 8f4f 	dsb	sy
 8006daa:	61bb      	str	r3, [r7, #24]
}
 8006dac:	bf00      	nop
 8006dae:	bf00      	nop
 8006db0:	e7fd      	b.n	8006dae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006db2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006db4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006db8:	f023 0301 	bic.w	r3, r3, #1
 8006dbc:	b2da      	uxtb	r2, r3
 8006dbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006dc4:	e03d      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006dc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006dcc:	f043 0301 	orr.w	r3, r3, #1
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ddc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d10b      	bne.n	8006dfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006de6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dea:	f383 8811 	msr	BASEPRI, r3
 8006dee:	f3bf 8f6f 	isb	sy
 8006df2:	f3bf 8f4f 	dsb	sy
 8006df6:	617b      	str	r3, [r7, #20]
}
 8006df8:	bf00      	nop
 8006dfa:	bf00      	nop
 8006dfc:	e7fd      	b.n	8006dfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e04:	18d1      	adds	r1, r2, r3
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e0c:	f7ff ff04 	bl	8006c18 <prvInsertTimerInActiveList>
					break;
 8006e10:	e017      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e18:	f003 0302 	and.w	r3, r3, #2
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d103      	bne.n	8006e28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006e20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006e22:	f000 fc09 	bl	8007638 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006e26:	e00c      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e2e:	f023 0301 	bic.w	r3, r3, #1
 8006e32:	b2da      	uxtb	r2, r3
 8006e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006e3a:	e002      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006e3c:	bf00      	nop
 8006e3e:	e000      	b.n	8006e42 <prvProcessReceivedCommands+0x1a6>
					break;
 8006e40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e42:	4b08      	ldr	r3, [pc, #32]	@ (8006e64 <prvProcessReceivedCommands+0x1c8>)
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	1d39      	adds	r1, r7, #4
 8006e48:	2200      	movs	r2, #0
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f7fe fb14 	bl	8005478 <xQueueReceive>
 8006e50:	4603      	mov	r3, r0
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	f47f af26 	bne.w	8006ca4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006e58:	bf00      	nop
 8006e5a:	bf00      	nop
 8006e5c:	3730      	adds	r7, #48	@ 0x30
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	20001444 	.word	0x20001444

08006e68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b088      	sub	sp, #32
 8006e6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e6e:	e049      	b.n	8006f04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e70:	4b2e      	ldr	r3, [pc, #184]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68db      	ldr	r3, [r3, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68db      	ldr	r3, [r3, #12]
 8006e80:	68db      	ldr	r3, [r3, #12]
 8006e82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	3304      	adds	r3, #4
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f7fd ff99 	bl	8004dc0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	6a1b      	ldr	r3, [r3, #32]
 8006e92:	68f8      	ldr	r0, [r7, #12]
 8006e94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006e9c:	f003 0304 	and.w	r3, r3, #4
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d02f      	beq.n	8006f04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	699b      	ldr	r3, [r3, #24]
 8006ea8:	693a      	ldr	r2, [r7, #16]
 8006eaa:	4413      	add	r3, r2
 8006eac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d90e      	bls.n	8006ed4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	68ba      	ldr	r2, [r7, #8]
 8006eba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ec2:	4b1a      	ldr	r3, [pc, #104]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3304      	adds	r3, #4
 8006eca:	4619      	mov	r1, r3
 8006ecc:	4610      	mov	r0, r2
 8006ece:	f7fd ff3e 	bl	8004d4e <vListInsert>
 8006ed2:	e017      	b.n	8006f04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	9300      	str	r3, [sp, #0]
 8006ed8:	2300      	movs	r3, #0
 8006eda:	693a      	ldr	r2, [r7, #16]
 8006edc:	2100      	movs	r1, #0
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7ff fd58 	bl	8006994 <xTimerGenericCommand>
 8006ee4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d10b      	bne.n	8006f04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef0:	f383 8811 	msr	BASEPRI, r3
 8006ef4:	f3bf 8f6f 	isb	sy
 8006ef8:	f3bf 8f4f 	dsb	sy
 8006efc:	603b      	str	r3, [r7, #0]
}
 8006efe:	bf00      	nop
 8006f00:	bf00      	nop
 8006f02:	e7fd      	b.n	8006f00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006f04:	4b09      	ldr	r3, [pc, #36]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d1b0      	bne.n	8006e70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006f0e:	4b07      	ldr	r3, [pc, #28]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006f14:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <prvSwitchTimerLists+0xc8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4a04      	ldr	r2, [pc, #16]	@ (8006f2c <prvSwitchTimerLists+0xc4>)
 8006f1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006f1c:	4a04      	ldr	r2, [pc, #16]	@ (8006f30 <prvSwitchTimerLists+0xc8>)
 8006f1e:	697b      	ldr	r3, [r7, #20]
 8006f20:	6013      	str	r3, [r2, #0]
}
 8006f22:	bf00      	nop
 8006f24:	3718      	adds	r7, #24
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd80      	pop	{r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	2000143c 	.word	0x2000143c
 8006f30:	20001440 	.word	0x20001440

08006f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b082      	sub	sp, #8
 8006f38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006f3a:	f000 f98d 	bl	8007258 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006f3e:	4b15      	ldr	r3, [pc, #84]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d120      	bne.n	8006f88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006f46:	4814      	ldr	r0, [pc, #80]	@ (8006f98 <prvCheckForValidListAndQueue+0x64>)
 8006f48:	f7fd feb0 	bl	8004cac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006f4c:	4813      	ldr	r0, [pc, #76]	@ (8006f9c <prvCheckForValidListAndQueue+0x68>)
 8006f4e:	f7fd fead 	bl	8004cac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006f52:	4b13      	ldr	r3, [pc, #76]	@ (8006fa0 <prvCheckForValidListAndQueue+0x6c>)
 8006f54:	4a10      	ldr	r2, [pc, #64]	@ (8006f98 <prvCheckForValidListAndQueue+0x64>)
 8006f56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006f58:	4b12      	ldr	r3, [pc, #72]	@ (8006fa4 <prvCheckForValidListAndQueue+0x70>)
 8006f5a:	4a10      	ldr	r2, [pc, #64]	@ (8006f9c <prvCheckForValidListAndQueue+0x68>)
 8006f5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9300      	str	r3, [sp, #0]
 8006f62:	4b11      	ldr	r3, [pc, #68]	@ (8006fa8 <prvCheckForValidListAndQueue+0x74>)
 8006f64:	4a11      	ldr	r2, [pc, #68]	@ (8006fac <prvCheckForValidListAndQueue+0x78>)
 8006f66:	2110      	movs	r1, #16
 8006f68:	200a      	movs	r0, #10
 8006f6a:	f7fd ffbd 	bl	8004ee8 <xQueueGenericCreateStatic>
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4a08      	ldr	r2, [pc, #32]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006f74:	4b07      	ldr	r3, [pc, #28]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006f7c:	4b05      	ldr	r3, [pc, #20]	@ (8006f94 <prvCheckForValidListAndQueue+0x60>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	490b      	ldr	r1, [pc, #44]	@ (8006fb0 <prvCheckForValidListAndQueue+0x7c>)
 8006f82:	4618      	mov	r0, r3
 8006f84:	f7fe fc6a 	bl	800585c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006f88:	f000 f998 	bl	80072bc <vPortExitCritical>
}
 8006f8c:	bf00      	nop
 8006f8e:	46bd      	mov	sp, r7
 8006f90:	bd80      	pop	{r7, pc}
 8006f92:	bf00      	nop
 8006f94:	20001444 	.word	0x20001444
 8006f98:	20001414 	.word	0x20001414
 8006f9c:	20001428 	.word	0x20001428
 8006fa0:	2000143c 	.word	0x2000143c
 8006fa4:	20001440 	.word	0x20001440
 8006fa8:	200014f0 	.word	0x200014f0
 8006fac:	20001450 	.word	0x20001450
 8006fb0:	0800a38c 	.word	0x0800a38c

08006fb4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b08a      	sub	sp, #40	@ 0x28
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	60f8      	str	r0, [r7, #12]
 8006fbc:	60b9      	str	r1, [r7, #8]
 8006fbe:	607a      	str	r2, [r7, #4]
 8006fc0:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8006fc2:	f06f 0301 	mvn.w	r3, #1
 8006fc6:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006fd4:	4b06      	ldr	r3, [pc, #24]	@ (8006ff0 <xTimerPendFunctionCallFromISR+0x3c>)
 8006fd6:	6818      	ldr	r0, [r3, #0]
 8006fd8:	f107 0114 	add.w	r1, r7, #20
 8006fdc:	2300      	movs	r3, #0
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	f7fe f9ac 	bl	800533c <xQueueGenericSendFromISR>
 8006fe4:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8006fe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	3728      	adds	r7, #40	@ 0x28
 8006fec:	46bd      	mov	sp, r7
 8006fee:	bd80      	pop	{r7, pc}
 8006ff0:	20001444 	.word	0x20001444

08006ff4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	3b04      	subs	r3, #4
 8007004:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800700c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3b04      	subs	r3, #4
 8007012:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f023 0201 	bic.w	r2, r3, #1
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	3b04      	subs	r3, #4
 8007022:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007024:	4a0c      	ldr	r2, [pc, #48]	@ (8007058 <pxPortInitialiseStack+0x64>)
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	3b14      	subs	r3, #20
 800702e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007030:	687a      	ldr	r2, [r7, #4]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	3b04      	subs	r3, #4
 800703a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f06f 0202 	mvn.w	r2, #2
 8007042:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	3b20      	subs	r3, #32
 8007048:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800704a:	68fb      	ldr	r3, [r7, #12]
}
 800704c:	4618      	mov	r0, r3
 800704e:	3714      	adds	r7, #20
 8007050:	46bd      	mov	sp, r7
 8007052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007056:	4770      	bx	lr
 8007058:	0800705d 	.word	0x0800705d

0800705c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007062:	2300      	movs	r3, #0
 8007064:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007066:	4b13      	ldr	r3, [pc, #76]	@ (80070b4 <prvTaskExitError+0x58>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800706e:	d00b      	beq.n	8007088 <prvTaskExitError+0x2c>
	__asm volatile
 8007070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007074:	f383 8811 	msr	BASEPRI, r3
 8007078:	f3bf 8f6f 	isb	sy
 800707c:	f3bf 8f4f 	dsb	sy
 8007080:	60fb      	str	r3, [r7, #12]
}
 8007082:	bf00      	nop
 8007084:	bf00      	nop
 8007086:	e7fd      	b.n	8007084 <prvTaskExitError+0x28>
	__asm volatile
 8007088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800708c:	f383 8811 	msr	BASEPRI, r3
 8007090:	f3bf 8f6f 	isb	sy
 8007094:	f3bf 8f4f 	dsb	sy
 8007098:	60bb      	str	r3, [r7, #8]
}
 800709a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800709c:	bf00      	nop
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d0fc      	beq.n	800709e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80070a4:	bf00      	nop
 80070a6:	bf00      	nop
 80070a8:	3714      	adds	r7, #20
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	2000000c 	.word	0x2000000c
	...

080070c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80070c0:	4b07      	ldr	r3, [pc, #28]	@ (80070e0 <pxCurrentTCBConst2>)
 80070c2:	6819      	ldr	r1, [r3, #0]
 80070c4:	6808      	ldr	r0, [r1, #0]
 80070c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070ca:	f380 8809 	msr	PSP, r0
 80070ce:	f3bf 8f6f 	isb	sy
 80070d2:	f04f 0000 	mov.w	r0, #0
 80070d6:	f380 8811 	msr	BASEPRI, r0
 80070da:	4770      	bx	lr
 80070dc:	f3af 8000 	nop.w

080070e0 <pxCurrentTCBConst2>:
 80070e0:	20000f14 	.word	0x20000f14
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop

080070e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80070e8:	4808      	ldr	r0, [pc, #32]	@ (800710c <prvPortStartFirstTask+0x24>)
 80070ea:	6800      	ldr	r0, [r0, #0]
 80070ec:	6800      	ldr	r0, [r0, #0]
 80070ee:	f380 8808 	msr	MSP, r0
 80070f2:	f04f 0000 	mov.w	r0, #0
 80070f6:	f380 8814 	msr	CONTROL, r0
 80070fa:	b662      	cpsie	i
 80070fc:	b661      	cpsie	f
 80070fe:	f3bf 8f4f 	dsb	sy
 8007102:	f3bf 8f6f 	isb	sy
 8007106:	df00      	svc	0
 8007108:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800710a:	bf00      	nop
 800710c:	e000ed08 	.word	0xe000ed08

08007110 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b086      	sub	sp, #24
 8007114:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007116:	4b47      	ldr	r3, [pc, #284]	@ (8007234 <xPortStartScheduler+0x124>)
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4a47      	ldr	r2, [pc, #284]	@ (8007238 <xPortStartScheduler+0x128>)
 800711c:	4293      	cmp	r3, r2
 800711e:	d10b      	bne.n	8007138 <xPortStartScheduler+0x28>
	__asm volatile
 8007120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007124:	f383 8811 	msr	BASEPRI, r3
 8007128:	f3bf 8f6f 	isb	sy
 800712c:	f3bf 8f4f 	dsb	sy
 8007130:	60fb      	str	r3, [r7, #12]
}
 8007132:	bf00      	nop
 8007134:	bf00      	nop
 8007136:	e7fd      	b.n	8007134 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007138:	4b3e      	ldr	r3, [pc, #248]	@ (8007234 <xPortStartScheduler+0x124>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a3f      	ldr	r2, [pc, #252]	@ (800723c <xPortStartScheduler+0x12c>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d10b      	bne.n	800715a <xPortStartScheduler+0x4a>
	__asm volatile
 8007142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007146:	f383 8811 	msr	BASEPRI, r3
 800714a:	f3bf 8f6f 	isb	sy
 800714e:	f3bf 8f4f 	dsb	sy
 8007152:	613b      	str	r3, [r7, #16]
}
 8007154:	bf00      	nop
 8007156:	bf00      	nop
 8007158:	e7fd      	b.n	8007156 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800715a:	4b39      	ldr	r3, [pc, #228]	@ (8007240 <xPortStartScheduler+0x130>)
 800715c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800715e:	697b      	ldr	r3, [r7, #20]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	b2db      	uxtb	r3, r3
 8007164:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	22ff      	movs	r2, #255	@ 0xff
 800716a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	781b      	ldrb	r3, [r3, #0]
 8007170:	b2db      	uxtb	r3, r3
 8007172:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007174:	78fb      	ldrb	r3, [r7, #3]
 8007176:	b2db      	uxtb	r3, r3
 8007178:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800717c:	b2da      	uxtb	r2, r3
 800717e:	4b31      	ldr	r3, [pc, #196]	@ (8007244 <xPortStartScheduler+0x134>)
 8007180:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007182:	4b31      	ldr	r3, [pc, #196]	@ (8007248 <xPortStartScheduler+0x138>)
 8007184:	2207      	movs	r2, #7
 8007186:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007188:	e009      	b.n	800719e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800718a:	4b2f      	ldr	r3, [pc, #188]	@ (8007248 <xPortStartScheduler+0x138>)
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	3b01      	subs	r3, #1
 8007190:	4a2d      	ldr	r2, [pc, #180]	@ (8007248 <xPortStartScheduler+0x138>)
 8007192:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007194:	78fb      	ldrb	r3, [r7, #3]
 8007196:	b2db      	uxtb	r3, r3
 8007198:	005b      	lsls	r3, r3, #1
 800719a:	b2db      	uxtb	r3, r3
 800719c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800719e:	78fb      	ldrb	r3, [r7, #3]
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071a6:	2b80      	cmp	r3, #128	@ 0x80
 80071a8:	d0ef      	beq.n	800718a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80071aa:	4b27      	ldr	r3, [pc, #156]	@ (8007248 <xPortStartScheduler+0x138>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	f1c3 0307 	rsb	r3, r3, #7
 80071b2:	2b04      	cmp	r3, #4
 80071b4:	d00b      	beq.n	80071ce <xPortStartScheduler+0xbe>
	__asm volatile
 80071b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071ba:	f383 8811 	msr	BASEPRI, r3
 80071be:	f3bf 8f6f 	isb	sy
 80071c2:	f3bf 8f4f 	dsb	sy
 80071c6:	60bb      	str	r3, [r7, #8]
}
 80071c8:	bf00      	nop
 80071ca:	bf00      	nop
 80071cc:	e7fd      	b.n	80071ca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80071ce:	4b1e      	ldr	r3, [pc, #120]	@ (8007248 <xPortStartScheduler+0x138>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	021b      	lsls	r3, r3, #8
 80071d4:	4a1c      	ldr	r2, [pc, #112]	@ (8007248 <xPortStartScheduler+0x138>)
 80071d6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80071d8:	4b1b      	ldr	r3, [pc, #108]	@ (8007248 <xPortStartScheduler+0x138>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80071e0:	4a19      	ldr	r2, [pc, #100]	@ (8007248 <xPortStartScheduler+0x138>)
 80071e2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	b2da      	uxtb	r2, r3
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80071ec:	4b17      	ldr	r3, [pc, #92]	@ (800724c <xPortStartScheduler+0x13c>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a16      	ldr	r2, [pc, #88]	@ (800724c <xPortStartScheduler+0x13c>)
 80071f2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80071f6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80071f8:	4b14      	ldr	r3, [pc, #80]	@ (800724c <xPortStartScheduler+0x13c>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a13      	ldr	r2, [pc, #76]	@ (800724c <xPortStartScheduler+0x13c>)
 80071fe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007202:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007204:	f000 f8da 	bl	80073bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007208:	4b11      	ldr	r3, [pc, #68]	@ (8007250 <xPortStartScheduler+0x140>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800720e:	f000 f8f9 	bl	8007404 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007212:	4b10      	ldr	r3, [pc, #64]	@ (8007254 <xPortStartScheduler+0x144>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	4a0f      	ldr	r2, [pc, #60]	@ (8007254 <xPortStartScheduler+0x144>)
 8007218:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800721c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800721e:	f7ff ff63 	bl	80070e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007222:	f7fe ff53 	bl	80060cc <vTaskSwitchContext>
	prvTaskExitError();
 8007226:	f7ff ff19 	bl	800705c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3718      	adds	r7, #24
 8007230:	46bd      	mov	sp, r7
 8007232:	bd80      	pop	{r7, pc}
 8007234:	e000ed00 	.word	0xe000ed00
 8007238:	410fc271 	.word	0x410fc271
 800723c:	410fc270 	.word	0x410fc270
 8007240:	e000e400 	.word	0xe000e400
 8007244:	20001540 	.word	0x20001540
 8007248:	20001544 	.word	0x20001544
 800724c:	e000ed20 	.word	0xe000ed20
 8007250:	2000000c 	.word	0x2000000c
 8007254:	e000ef34 	.word	0xe000ef34

08007258 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
	__asm volatile
 800725e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007262:	f383 8811 	msr	BASEPRI, r3
 8007266:	f3bf 8f6f 	isb	sy
 800726a:	f3bf 8f4f 	dsb	sy
 800726e:	607b      	str	r3, [r7, #4]
}
 8007270:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007272:	4b10      	ldr	r3, [pc, #64]	@ (80072b4 <vPortEnterCritical+0x5c>)
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3301      	adds	r3, #1
 8007278:	4a0e      	ldr	r2, [pc, #56]	@ (80072b4 <vPortEnterCritical+0x5c>)
 800727a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800727c:	4b0d      	ldr	r3, [pc, #52]	@ (80072b4 <vPortEnterCritical+0x5c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d110      	bne.n	80072a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007284:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <vPortEnterCritical+0x60>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	b2db      	uxtb	r3, r3
 800728a:	2b00      	cmp	r3, #0
 800728c:	d00b      	beq.n	80072a6 <vPortEnterCritical+0x4e>
	__asm volatile
 800728e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007292:	f383 8811 	msr	BASEPRI, r3
 8007296:	f3bf 8f6f 	isb	sy
 800729a:	f3bf 8f4f 	dsb	sy
 800729e:	603b      	str	r3, [r7, #0]
}
 80072a0:	bf00      	nop
 80072a2:	bf00      	nop
 80072a4:	e7fd      	b.n	80072a2 <vPortEnterCritical+0x4a>
	}
}
 80072a6:	bf00      	nop
 80072a8:	370c      	adds	r7, #12
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr
 80072b2:	bf00      	nop
 80072b4:	2000000c 	.word	0x2000000c
 80072b8:	e000ed04 	.word	0xe000ed04

080072bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80072bc:	b480      	push	{r7}
 80072be:	b083      	sub	sp, #12
 80072c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80072c2:	4b12      	ldr	r3, [pc, #72]	@ (800730c <vPortExitCritical+0x50>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	d10b      	bne.n	80072e2 <vPortExitCritical+0x26>
	__asm volatile
 80072ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ce:	f383 8811 	msr	BASEPRI, r3
 80072d2:	f3bf 8f6f 	isb	sy
 80072d6:	f3bf 8f4f 	dsb	sy
 80072da:	607b      	str	r3, [r7, #4]
}
 80072dc:	bf00      	nop
 80072de:	bf00      	nop
 80072e0:	e7fd      	b.n	80072de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80072e2:	4b0a      	ldr	r3, [pc, #40]	@ (800730c <vPortExitCritical+0x50>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	3b01      	subs	r3, #1
 80072e8:	4a08      	ldr	r2, [pc, #32]	@ (800730c <vPortExitCritical+0x50>)
 80072ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80072ec:	4b07      	ldr	r3, [pc, #28]	@ (800730c <vPortExitCritical+0x50>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d105      	bne.n	8007300 <vPortExitCritical+0x44>
 80072f4:	2300      	movs	r3, #0
 80072f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	f383 8811 	msr	BASEPRI, r3
}
 80072fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007300:	bf00      	nop
 8007302:	370c      	adds	r7, #12
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr
 800730c:	2000000c 	.word	0x2000000c

08007310 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007310:	f3ef 8009 	mrs	r0, PSP
 8007314:	f3bf 8f6f 	isb	sy
 8007318:	4b15      	ldr	r3, [pc, #84]	@ (8007370 <pxCurrentTCBConst>)
 800731a:	681a      	ldr	r2, [r3, #0]
 800731c:	f01e 0f10 	tst.w	lr, #16
 8007320:	bf08      	it	eq
 8007322:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007326:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800732a:	6010      	str	r0, [r2, #0]
 800732c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007330:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007334:	f380 8811 	msr	BASEPRI, r0
 8007338:	f3bf 8f4f 	dsb	sy
 800733c:	f3bf 8f6f 	isb	sy
 8007340:	f7fe fec4 	bl	80060cc <vTaskSwitchContext>
 8007344:	f04f 0000 	mov.w	r0, #0
 8007348:	f380 8811 	msr	BASEPRI, r0
 800734c:	bc09      	pop	{r0, r3}
 800734e:	6819      	ldr	r1, [r3, #0]
 8007350:	6808      	ldr	r0, [r1, #0]
 8007352:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007356:	f01e 0f10 	tst.w	lr, #16
 800735a:	bf08      	it	eq
 800735c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007360:	f380 8809 	msr	PSP, r0
 8007364:	f3bf 8f6f 	isb	sy
 8007368:	4770      	bx	lr
 800736a:	bf00      	nop
 800736c:	f3af 8000 	nop.w

08007370 <pxCurrentTCBConst>:
 8007370:	20000f14 	.word	0x20000f14
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007374:	bf00      	nop
 8007376:	bf00      	nop

08007378 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b082      	sub	sp, #8
 800737c:	af00      	add	r7, sp, #0
	__asm volatile
 800737e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007382:	f383 8811 	msr	BASEPRI, r3
 8007386:	f3bf 8f6f 	isb	sy
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	607b      	str	r3, [r7, #4]
}
 8007390:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007392:	f7fe fde1 	bl	8005f58 <xTaskIncrementTick>
 8007396:	4603      	mov	r3, r0
 8007398:	2b00      	cmp	r3, #0
 800739a:	d003      	beq.n	80073a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800739c:	4b06      	ldr	r3, [pc, #24]	@ (80073b8 <xPortSysTickHandler+0x40>)
 800739e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	2300      	movs	r3, #0
 80073a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	f383 8811 	msr	BASEPRI, r3
}
 80073ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80073b0:	bf00      	nop
 80073b2:	3708      	adds	r7, #8
 80073b4:	46bd      	mov	sp, r7
 80073b6:	bd80      	pop	{r7, pc}
 80073b8:	e000ed04 	.word	0xe000ed04

080073bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80073bc:	b480      	push	{r7}
 80073be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80073c0:	4b0b      	ldr	r3, [pc, #44]	@ (80073f0 <vPortSetupTimerInterrupt+0x34>)
 80073c2:	2200      	movs	r2, #0
 80073c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80073c6:	4b0b      	ldr	r3, [pc, #44]	@ (80073f4 <vPortSetupTimerInterrupt+0x38>)
 80073c8:	2200      	movs	r2, #0
 80073ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80073cc:	4b0a      	ldr	r3, [pc, #40]	@ (80073f8 <vPortSetupTimerInterrupt+0x3c>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	@ (80073fc <vPortSetupTimerInterrupt+0x40>)
 80073d2:	fba2 2303 	umull	r2, r3, r2, r3
 80073d6:	099b      	lsrs	r3, r3, #6
 80073d8:	4a09      	ldr	r2, [pc, #36]	@ (8007400 <vPortSetupTimerInterrupt+0x44>)
 80073da:	3b01      	subs	r3, #1
 80073dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80073de:	4b04      	ldr	r3, [pc, #16]	@ (80073f0 <vPortSetupTimerInterrupt+0x34>)
 80073e0:	2207      	movs	r2, #7
 80073e2:	601a      	str	r2, [r3, #0]
}
 80073e4:	bf00      	nop
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	e000e010 	.word	0xe000e010
 80073f4:	e000e018 	.word	0xe000e018
 80073f8:	20000000 	.word	0x20000000
 80073fc:	10624dd3 	.word	0x10624dd3
 8007400:	e000e014 	.word	0xe000e014

08007404 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007404:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007414 <vPortEnableVFP+0x10>
 8007408:	6801      	ldr	r1, [r0, #0]
 800740a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800740e:	6001      	str	r1, [r0, #0]
 8007410:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007412:	bf00      	nop
 8007414:	e000ed88 	.word	0xe000ed88

08007418 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007418:	b480      	push	{r7}
 800741a:	b085      	sub	sp, #20
 800741c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800741e:	f3ef 8305 	mrs	r3, IPSR
 8007422:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2b0f      	cmp	r3, #15
 8007428:	d915      	bls.n	8007456 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800742a:	4a18      	ldr	r2, [pc, #96]	@ (800748c <vPortValidateInterruptPriority+0x74>)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	4413      	add	r3, r2
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007434:	4b16      	ldr	r3, [pc, #88]	@ (8007490 <vPortValidateInterruptPriority+0x78>)
 8007436:	781b      	ldrb	r3, [r3, #0]
 8007438:	7afa      	ldrb	r2, [r7, #11]
 800743a:	429a      	cmp	r2, r3
 800743c:	d20b      	bcs.n	8007456 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800743e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007442:	f383 8811 	msr	BASEPRI, r3
 8007446:	f3bf 8f6f 	isb	sy
 800744a:	f3bf 8f4f 	dsb	sy
 800744e:	607b      	str	r3, [r7, #4]
}
 8007450:	bf00      	nop
 8007452:	bf00      	nop
 8007454:	e7fd      	b.n	8007452 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007456:	4b0f      	ldr	r3, [pc, #60]	@ (8007494 <vPortValidateInterruptPriority+0x7c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800745e:	4b0e      	ldr	r3, [pc, #56]	@ (8007498 <vPortValidateInterruptPriority+0x80>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	429a      	cmp	r2, r3
 8007464:	d90b      	bls.n	800747e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007466:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746a:	f383 8811 	msr	BASEPRI, r3
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f3bf 8f4f 	dsb	sy
 8007476:	603b      	str	r3, [r7, #0]
}
 8007478:	bf00      	nop
 800747a:	bf00      	nop
 800747c:	e7fd      	b.n	800747a <vPortValidateInterruptPriority+0x62>
	}
 800747e:	bf00      	nop
 8007480:	3714      	adds	r7, #20
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr
 800748a:	bf00      	nop
 800748c:	e000e3f0 	.word	0xe000e3f0
 8007490:	20001540 	.word	0x20001540
 8007494:	e000ed0c 	.word	0xe000ed0c
 8007498:	20001544 	.word	0x20001544

0800749c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800749c:	b580      	push	{r7, lr}
 800749e:	b08a      	sub	sp, #40	@ 0x28
 80074a0:	af00      	add	r7, sp, #0
 80074a2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80074a4:	2300      	movs	r3, #0
 80074a6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80074a8:	f7fe fc9a 	bl	8005de0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80074ac:	4b5c      	ldr	r3, [pc, #368]	@ (8007620 <pvPortMalloc+0x184>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d101      	bne.n	80074b8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80074b4:	f000 f924 	bl	8007700 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80074b8:	4b5a      	ldr	r3, [pc, #360]	@ (8007624 <pvPortMalloc+0x188>)
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4013      	ands	r3, r2
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	f040 8095 	bne.w	80075f0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d01e      	beq.n	800750a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80074cc:	2208      	movs	r2, #8
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	4413      	add	r3, r2
 80074d2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f003 0307 	and.w	r3, r3, #7
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d015      	beq.n	800750a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	f023 0307 	bic.w	r3, r3, #7
 80074e4:	3308      	adds	r3, #8
 80074e6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f003 0307 	and.w	r3, r3, #7
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d00b      	beq.n	800750a <pvPortMalloc+0x6e>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	617b      	str	r3, [r7, #20]
}
 8007504:	bf00      	nop
 8007506:	bf00      	nop
 8007508:	e7fd      	b.n	8007506 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2b00      	cmp	r3, #0
 800750e:	d06f      	beq.n	80075f0 <pvPortMalloc+0x154>
 8007510:	4b45      	ldr	r3, [pc, #276]	@ (8007628 <pvPortMalloc+0x18c>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	687a      	ldr	r2, [r7, #4]
 8007516:	429a      	cmp	r2, r3
 8007518:	d86a      	bhi.n	80075f0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800751a:	4b44      	ldr	r3, [pc, #272]	@ (800762c <pvPortMalloc+0x190>)
 800751c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800751e:	4b43      	ldr	r3, [pc, #268]	@ (800762c <pvPortMalloc+0x190>)
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007524:	e004      	b.n	8007530 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007528:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800752a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007532:	685b      	ldr	r3, [r3, #4]
 8007534:	687a      	ldr	r2, [r7, #4]
 8007536:	429a      	cmp	r2, r3
 8007538:	d903      	bls.n	8007542 <pvPortMalloc+0xa6>
 800753a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d1f1      	bne.n	8007526 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007542:	4b37      	ldr	r3, [pc, #220]	@ (8007620 <pvPortMalloc+0x184>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007548:	429a      	cmp	r2, r3
 800754a:	d051      	beq.n	80075f0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800754c:	6a3b      	ldr	r3, [r7, #32]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2208      	movs	r2, #8
 8007552:	4413      	add	r3, r2
 8007554:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007556:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800755e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007560:	685a      	ldr	r2, [r3, #4]
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	1ad2      	subs	r2, r2, r3
 8007566:	2308      	movs	r3, #8
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	429a      	cmp	r2, r3
 800756c:	d920      	bls.n	80075b0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800756e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007576:	69bb      	ldr	r3, [r7, #24]
 8007578:	f003 0307 	and.w	r3, r3, #7
 800757c:	2b00      	cmp	r3, #0
 800757e:	d00b      	beq.n	8007598 <pvPortMalloc+0xfc>
	__asm volatile
 8007580:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007584:	f383 8811 	msr	BASEPRI, r3
 8007588:	f3bf 8f6f 	isb	sy
 800758c:	f3bf 8f4f 	dsb	sy
 8007590:	613b      	str	r3, [r7, #16]
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	e7fd      	b.n	8007594 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	1ad2      	subs	r2, r2, r3
 80075a0:	69bb      	ldr	r3, [r7, #24]
 80075a2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80075a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a6:	687a      	ldr	r2, [r7, #4]
 80075a8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80075aa:	69b8      	ldr	r0, [r7, #24]
 80075ac:	f000 f90a 	bl	80077c4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80075b0:	4b1d      	ldr	r3, [pc, #116]	@ (8007628 <pvPortMalloc+0x18c>)
 80075b2:	681a      	ldr	r2, [r3, #0]
 80075b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075b6:	685b      	ldr	r3, [r3, #4]
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	4a1b      	ldr	r2, [pc, #108]	@ (8007628 <pvPortMalloc+0x18c>)
 80075bc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80075be:	4b1a      	ldr	r3, [pc, #104]	@ (8007628 <pvPortMalloc+0x18c>)
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4b1b      	ldr	r3, [pc, #108]	@ (8007630 <pvPortMalloc+0x194>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d203      	bcs.n	80075d2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80075ca:	4b17      	ldr	r3, [pc, #92]	@ (8007628 <pvPortMalloc+0x18c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a18      	ldr	r2, [pc, #96]	@ (8007630 <pvPortMalloc+0x194>)
 80075d0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80075d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	4b13      	ldr	r3, [pc, #76]	@ (8007624 <pvPortMalloc+0x188>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	431a      	orrs	r2, r3
 80075dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075de:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e2:	2200      	movs	r2, #0
 80075e4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80075e6:	4b13      	ldr	r3, [pc, #76]	@ (8007634 <pvPortMalloc+0x198>)
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	3301      	adds	r3, #1
 80075ec:	4a11      	ldr	r2, [pc, #68]	@ (8007634 <pvPortMalloc+0x198>)
 80075ee:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80075f0:	f7fe fc04 	bl	8005dfc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f4:	69fb      	ldr	r3, [r7, #28]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00b      	beq.n	8007616 <pvPortMalloc+0x17a>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	60fb      	str	r3, [r7, #12]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <pvPortMalloc+0x176>
	return pvReturn;
 8007616:	69fb      	ldr	r3, [r7, #28]
}
 8007618:	4618      	mov	r0, r3
 800761a:	3728      	adds	r7, #40	@ 0x28
 800761c:	46bd      	mov	sp, r7
 800761e:	bd80      	pop	{r7, pc}
 8007620:	20005150 	.word	0x20005150
 8007624:	20005164 	.word	0x20005164
 8007628:	20005154 	.word	0x20005154
 800762c:	20005148 	.word	0x20005148
 8007630:	20005158 	.word	0x20005158
 8007634:	2000515c 	.word	0x2000515c

08007638 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b086      	sub	sp, #24
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d04f      	beq.n	80076ea <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800764a:	2308      	movs	r3, #8
 800764c:	425b      	negs	r3, r3
 800764e:	697a      	ldr	r2, [r7, #20]
 8007650:	4413      	add	r3, r2
 8007652:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007654:	697b      	ldr	r3, [r7, #20]
 8007656:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	4b25      	ldr	r3, [pc, #148]	@ (80076f4 <vPortFree+0xbc>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	4013      	ands	r3, r2
 8007662:	2b00      	cmp	r3, #0
 8007664:	d10b      	bne.n	800767e <vPortFree+0x46>
	__asm volatile
 8007666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800766a:	f383 8811 	msr	BASEPRI, r3
 800766e:	f3bf 8f6f 	isb	sy
 8007672:	f3bf 8f4f 	dsb	sy
 8007676:	60fb      	str	r3, [r7, #12]
}
 8007678:	bf00      	nop
 800767a:	bf00      	nop
 800767c:	e7fd      	b.n	800767a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00b      	beq.n	800769e <vPortFree+0x66>
	__asm volatile
 8007686:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800768a:	f383 8811 	msr	BASEPRI, r3
 800768e:	f3bf 8f6f 	isb	sy
 8007692:	f3bf 8f4f 	dsb	sy
 8007696:	60bb      	str	r3, [r7, #8]
}
 8007698:	bf00      	nop
 800769a:	bf00      	nop
 800769c:	e7fd      	b.n	800769a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800769e:	693b      	ldr	r3, [r7, #16]
 80076a0:	685a      	ldr	r2, [r3, #4]
 80076a2:	4b14      	ldr	r3, [pc, #80]	@ (80076f4 <vPortFree+0xbc>)
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	4013      	ands	r3, r2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d01e      	beq.n	80076ea <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80076ac:	693b      	ldr	r3, [r7, #16]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d11a      	bne.n	80076ea <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	685a      	ldr	r2, [r3, #4]
 80076b8:	4b0e      	ldr	r3, [pc, #56]	@ (80076f4 <vPortFree+0xbc>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	43db      	mvns	r3, r3
 80076be:	401a      	ands	r2, r3
 80076c0:	693b      	ldr	r3, [r7, #16]
 80076c2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80076c4:	f7fe fb8c 	bl	8005de0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80076c8:	693b      	ldr	r3, [r7, #16]
 80076ca:	685a      	ldr	r2, [r3, #4]
 80076cc:	4b0a      	ldr	r3, [pc, #40]	@ (80076f8 <vPortFree+0xc0>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	4413      	add	r3, r2
 80076d2:	4a09      	ldr	r2, [pc, #36]	@ (80076f8 <vPortFree+0xc0>)
 80076d4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80076d6:	6938      	ldr	r0, [r7, #16]
 80076d8:	f000 f874 	bl	80077c4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80076dc:	4b07      	ldr	r3, [pc, #28]	@ (80076fc <vPortFree+0xc4>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	3301      	adds	r3, #1
 80076e2:	4a06      	ldr	r2, [pc, #24]	@ (80076fc <vPortFree+0xc4>)
 80076e4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80076e6:	f7fe fb89 	bl	8005dfc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80076ea:	bf00      	nop
 80076ec:	3718      	adds	r7, #24
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	20005164 	.word	0x20005164
 80076f8:	20005154 	.word	0x20005154
 80076fc:	20005160 	.word	0x20005160

08007700 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007700:	b480      	push	{r7}
 8007702:	b085      	sub	sp, #20
 8007704:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007706:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800770a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800770c:	4b27      	ldr	r3, [pc, #156]	@ (80077ac <prvHeapInit+0xac>)
 800770e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f003 0307 	and.w	r3, r3, #7
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00c      	beq.n	8007734 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	3307      	adds	r3, #7
 800771e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	f023 0307 	bic.w	r3, r3, #7
 8007726:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007728:	68ba      	ldr	r2, [r7, #8]
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	1ad3      	subs	r3, r2, r3
 800772e:	4a1f      	ldr	r2, [pc, #124]	@ (80077ac <prvHeapInit+0xac>)
 8007730:	4413      	add	r3, r2
 8007732:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007738:	4a1d      	ldr	r2, [pc, #116]	@ (80077b0 <prvHeapInit+0xb0>)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800773e:	4b1c      	ldr	r3, [pc, #112]	@ (80077b0 <prvHeapInit+0xb0>)
 8007740:	2200      	movs	r2, #0
 8007742:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	68ba      	ldr	r2, [r7, #8]
 8007748:	4413      	add	r3, r2
 800774a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800774c:	2208      	movs	r2, #8
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	1a9b      	subs	r3, r3, r2
 8007752:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	f023 0307 	bic.w	r3, r3, #7
 800775a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	4a15      	ldr	r2, [pc, #84]	@ (80077b4 <prvHeapInit+0xb4>)
 8007760:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007762:	4b14      	ldr	r3, [pc, #80]	@ (80077b4 <prvHeapInit+0xb4>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	2200      	movs	r2, #0
 8007768:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800776a:	4b12      	ldr	r3, [pc, #72]	@ (80077b4 <prvHeapInit+0xb4>)
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2200      	movs	r2, #0
 8007770:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007776:	683b      	ldr	r3, [r7, #0]
 8007778:	68fa      	ldr	r2, [r7, #12]
 800777a:	1ad2      	subs	r2, r2, r3
 800777c:	683b      	ldr	r3, [r7, #0]
 800777e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007780:	4b0c      	ldr	r3, [pc, #48]	@ (80077b4 <prvHeapInit+0xb4>)
 8007782:	681a      	ldr	r2, [r3, #0]
 8007784:	683b      	ldr	r3, [r7, #0]
 8007786:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007788:	683b      	ldr	r3, [r7, #0]
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	4a0a      	ldr	r2, [pc, #40]	@ (80077b8 <prvHeapInit+0xb8>)
 800778e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007790:	683b      	ldr	r3, [r7, #0]
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	4a09      	ldr	r2, [pc, #36]	@ (80077bc <prvHeapInit+0xbc>)
 8007796:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007798:	4b09      	ldr	r3, [pc, #36]	@ (80077c0 <prvHeapInit+0xc0>)
 800779a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800779e:	601a      	str	r2, [r3, #0]
}
 80077a0:	bf00      	nop
 80077a2:	3714      	adds	r7, #20
 80077a4:	46bd      	mov	sp, r7
 80077a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077aa:	4770      	bx	lr
 80077ac:	20001548 	.word	0x20001548
 80077b0:	20005148 	.word	0x20005148
 80077b4:	20005150 	.word	0x20005150
 80077b8:	20005158 	.word	0x20005158
 80077bc:	20005154 	.word	0x20005154
 80077c0:	20005164 	.word	0x20005164

080077c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80077c4:	b480      	push	{r7}
 80077c6:	b085      	sub	sp, #20
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80077cc:	4b28      	ldr	r3, [pc, #160]	@ (8007870 <prvInsertBlockIntoFreeList+0xac>)
 80077ce:	60fb      	str	r3, [r7, #12]
 80077d0:	e002      	b.n	80077d8 <prvInsertBlockIntoFreeList+0x14>
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	60fb      	str	r3, [r7, #12]
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	687a      	ldr	r2, [r7, #4]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d8f7      	bhi.n	80077d2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	685b      	ldr	r3, [r3, #4]
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	4413      	add	r3, r2
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d108      	bne.n	8007806 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	685a      	ldr	r2, [r3, #4]
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	441a      	add	r2, r3
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	685b      	ldr	r3, [r3, #4]
 800780e:	68ba      	ldr	r2, [r7, #8]
 8007810:	441a      	add	r2, r3
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	429a      	cmp	r2, r3
 8007818:	d118      	bne.n	800784c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681a      	ldr	r2, [r3, #0]
 800781e:	4b15      	ldr	r3, [pc, #84]	@ (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d00d      	beq.n	8007842 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	685a      	ldr	r2, [r3, #4]
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	441a      	add	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	681a      	ldr	r2, [r3, #0]
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e008      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007842:	4b0c      	ldr	r3, [pc, #48]	@ (8007874 <prvInsertBlockIntoFreeList+0xb0>)
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	601a      	str	r2, [r3, #0]
 800784a:	e003      	b.n	8007854 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	681a      	ldr	r2, [r3, #0]
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	429a      	cmp	r2, r3
 800785a:	d002      	beq.n	8007862 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007862:	bf00      	nop
 8007864:	3714      	adds	r7, #20
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	20005148 	.word	0x20005148
 8007874:	20005150 	.word	0x20005150

08007878 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 800787c:	4b10      	ldr	r3, [pc, #64]	@ (80078c0 <MX_PDM2PCM_Init+0x48>)
 800787e:	2200      	movs	r2, #0
 8007880:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8007882:	4b0f      	ldr	r3, [pc, #60]	@ (80078c0 <MX_PDM2PCM_Init+0x48>)
 8007884:	2200      	movs	r2, #0
 8007886:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2122358088;
 8007888:	4b0d      	ldr	r3, [pc, #52]	@ (80078c0 <MX_PDM2PCM_Init+0x48>)
 800788a:	4a0e      	ldr	r2, [pc, #56]	@ (80078c4 <MX_PDM2PCM_Init+0x4c>)
 800788c:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 800788e:	4b0c      	ldr	r3, [pc, #48]	@ (80078c0 <MX_PDM2PCM_Init+0x48>)
 8007890:	2201      	movs	r2, #1
 8007892:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 2;
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <MX_PDM2PCM_Init+0x48>)
 8007896:	2202      	movs	r2, #2
 8007898:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 800789a:	4809      	ldr	r0, [pc, #36]	@ (80078c0 <MX_PDM2PCM_Init+0x48>)
 800789c:	f001 fd26 	bl	80092ec <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80078a0:	4b09      	ldr	r3, [pc, #36]	@ (80078c8 <MX_PDM2PCM_Init+0x50>)
 80078a2:	2202      	movs	r2, #2
 80078a4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80078a6:	4b08      	ldr	r3, [pc, #32]	@ (80078c8 <MX_PDM2PCM_Init+0x50>)
 80078a8:	2210      	movs	r2, #16
 80078aa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 80078ac:	4b06      	ldr	r3, [pc, #24]	@ (80078c8 <MX_PDM2PCM_Init+0x50>)
 80078ae:	2218      	movs	r2, #24
 80078b0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 80078b2:	4905      	ldr	r1, [pc, #20]	@ (80078c8 <MX_PDM2PCM_Init+0x50>)
 80078b4:	4802      	ldr	r0, [pc, #8]	@ (80078c0 <MX_PDM2PCM_Init+0x48>)
 80078b6:	f001 fde9 	bl	800948c <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80078ba:	bf00      	nop
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	20005168 	.word	0x20005168
 80078c4:	7e809d48 	.word	0x7e809d48
 80078c8:	200051b4 	.word	0x200051b4

080078cc <D16_GENERIC>:
 80078cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078d0:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 80078d4:	b089      	sub	sp, #36	@ 0x24
 80078d6:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80078d8:	6993      	ldr	r3, [r2, #24]
 80078da:	9406      	str	r4, [sp, #24]
 80078dc:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80078de:	9307      	str	r3, [sp, #28]
 80078e0:	9402      	str	r4, [sp, #8]
 80078e2:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 80078e6:	69d3      	ldr	r3, [r2, #28]
 80078e8:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80078ea:	9103      	str	r1, [sp, #12]
 80078ec:	2d00      	cmp	r5, #0
 80078ee:	d066      	beq.n	80079be <D16_GENERIC+0xf2>
 80078f0:	f004 0520 	and.w	r5, r4, #32
 80078f4:	f004 0410 	and.w	r4, r4, #16
 80078f8:	9505      	str	r5, [sp, #20]
 80078fa:	4937      	ldr	r1, [pc, #220]	@ (80079d8 <D16_GENERIC+0x10c>)
 80078fc:	9404      	str	r4, [sp, #16]
 80078fe:	f04f 0c00 	mov.w	ip, #0
 8007902:	4635      	mov	r5, r6
 8007904:	e04f      	b.n	80079a6 <D16_GENERIC+0xda>
 8007906:	5d87      	ldrb	r7, [r0, r6]
 8007908:	7804      	ldrb	r4, [r0, #0]
 800790a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800790e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8007912:	b2e6      	uxtb	r6, r4
 8007914:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007918:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800791c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007920:	4433      	add	r3, r6
 8007922:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8007926:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800792a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800792e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8007932:	0aa3      	lsrs	r3, r4, #10
 8007934:	4c29      	ldr	r4, [pc, #164]	@ (80079dc <D16_GENERIC+0x110>)
 8007936:	fb26 5404 	smlad	r4, r6, r4, r5
 800793a:	4d29      	ldr	r5, [pc, #164]	@ (80079e0 <D16_GENERIC+0x114>)
 800793c:	fb26 f505 	smuad	r5, r6, r5
 8007940:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8007944:	eb04 080a 	add.w	r8, r4, sl
 8007948:	eba8 080b 	sub.w	r8, r8, fp
 800794c:	4646      	mov	r6, r8
 800794e:	17f7      	asrs	r7, r6, #31
 8007950:	e9cd 6700 	strd	r6, r7, [sp]
 8007954:	9e04      	ldr	r6, [sp, #16]
 8007956:	f10c 0e01 	add.w	lr, ip, #1
 800795a:	b16e      	cbz	r6, 8007978 <D16_GENERIC+0xac>
 800795c:	6a16      	ldr	r6, [r2, #32]
 800795e:	9f01      	ldr	r7, [sp, #4]
 8007960:	fba8 ab06 	umull	sl, fp, r8, r6
 8007964:	fb06 bb07 	mla	fp, r6, r7, fp
 8007968:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 800796c:	f14b 0900 	adc.w	r9, fp, #0
 8007970:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007974:	46a3      	mov	fp, r4
 8007976:	4654      	mov	r4, sl
 8007978:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 800797a:	9f02      	ldr	r7, [sp, #8]
 800797c:	0424      	lsls	r4, r4, #16
 800797e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007982:	f04f 0900 	mov.w	r9, #0
 8007986:	fb0c fc06 	mul.w	ip, ip, r6
 800798a:	fbc7 8904 	smlal	r8, r9, r7, r4
 800798e:	9e03      	ldr	r6, [sp, #12]
 8007990:	464f      	mov	r7, r9
 8007992:	10bc      	asrs	r4, r7, #2
 8007994:	f304 040f 	ssat	r4, #16, r4
 8007998:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 800799c:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 800799e:	fa1f fc8e 	uxth.w	ip, lr
 80079a2:	4564      	cmp	r4, ip
 80079a4:	d90a      	bls.n	80079bc <D16_GENERIC+0xf0>
 80079a6:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80079a8:	2c01      	cmp	r4, #1
 80079aa:	b2e6      	uxtb	r6, r4
 80079ac:	d1ab      	bne.n	8007906 <D16_GENERIC+0x3a>
 80079ae:	9e05      	ldr	r6, [sp, #20]
 80079b0:	f850 4b02 	ldr.w	r4, [r0], #2
 80079b4:	2e00      	cmp	r6, #0
 80079b6:	d0ac      	beq.n	8007912 <D16_GENERIC+0x46>
 80079b8:	ba64      	rev16	r4, r4
 80079ba:	e7aa      	b.n	8007912 <D16_GENERIC+0x46>
 80079bc:	462e      	mov	r6, r5
 80079be:	9906      	ldr	r1, [sp, #24]
 80079c0:	61d3      	str	r3, [r2, #28]
 80079c2:	9b07      	ldr	r3, [sp, #28]
 80079c4:	6096      	str	r6, [r2, #8]
 80079c6:	2000      	movs	r0, #0
 80079c8:	60d1      	str	r1, [r2, #12]
 80079ca:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 80079ce:	6193      	str	r3, [r2, #24]
 80079d0:	b009      	add	sp, #36	@ 0x24
 80079d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079d6:	bf00      	nop
 80079d8:	20000010 	.word	0x20000010
 80079dc:	00030001 	.word	0x00030001
 80079e0:	00010003 	.word	0x00010003

080079e4 <D24_GENERIC>:
 80079e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e8:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80079ea:	6993      	ldr	r3, [r2, #24]
 80079ec:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80079ee:	b089      	sub	sp, #36	@ 0x24
 80079f0:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80079f4:	9307      	str	r3, [sp, #28]
 80079f6:	9503      	str	r5, [sp, #12]
 80079f8:	69d3      	ldr	r3, [r2, #28]
 80079fa:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80079fc:	9104      	str	r1, [sp, #16]
 80079fe:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8007a02:	2e00      	cmp	r6, #0
 8007a04:	f000 808f 	beq.w	8007b26 <D24_GENERIC+0x142>
 8007a08:	f005 0620 	and.w	r6, r5, #32
 8007a0c:	f005 0510 	and.w	r5, r5, #16
 8007a10:	4953      	ldr	r1, [pc, #332]	@ (8007b60 <D24_GENERIC+0x17c>)
 8007a12:	9606      	str	r6, [sp, #24]
 8007a14:	9505      	str	r5, [sp, #20]
 8007a16:	f04f 0c00 	mov.w	ip, #0
 8007a1a:	f8cd 9008 	str.w	r9, [sp, #8]
 8007a1e:	e068      	b.n	8007af2 <D24_GENERIC+0x10e>
 8007a20:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8007a24:	f810 8007 	ldrb.w	r8, [r0, r7]
 8007a28:	042d      	lsls	r5, r5, #16
 8007a2a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007a2e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8007a32:	44ae      	add	lr, r5
 8007a34:	4438      	add	r0, r7
 8007a36:	fa5f f68e 	uxtb.w	r6, lr
 8007a3a:	f3ce 2507 	ubfx	r5, lr, #8, #8
 8007a3e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007a42:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8007a46:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8007a4a:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 8007a4e:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8007a52:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8007a56:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8007a5a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007a5e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8007a62:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8007a66:	4d3f      	ldr	r5, [pc, #252]	@ (8007b64 <D24_GENERIC+0x180>)
 8007a68:	fb26 b705 	smlad	r7, r6, r5, fp
 8007a6c:	4d3e      	ldr	r5, [pc, #248]	@ (8007b68 <D24_GENERIC+0x184>)
 8007a6e:	fb26 4b05 	smlad	fp, r6, r5, r4
 8007a72:	f3c3 0409 	ubfx	r4, r3, #0, #10
 8007a76:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 8007a7a:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 8007a7e:	2401      	movs	r4, #1
 8007a80:	fb26 f604 	smuad	r6, r6, r4
 8007a84:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8007a88:	9f02      	ldr	r7, [sp, #8]
 8007a8a:	eb0c 0e04 	add.w	lr, ip, r4
 8007a8e:	eb08 0406 	add.w	r4, r8, r6
 8007a92:	eb05 060a 	add.w	r6, r5, sl
 8007a96:	1bf6      	subs	r6, r6, r7
 8007a98:	4637      	mov	r7, r6
 8007a9a:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007a9e:	e9cd 7800 	strd	r7, r8, [sp]
 8007aa2:	9f05      	ldr	r7, [sp, #20]
 8007aa4:	b177      	cbz	r7, 8007ac4 <D24_GENERIC+0xe0>
 8007aa6:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007aaa:	9502      	str	r5, [sp, #8]
 8007aac:	fba6 9a08 	umull	r9, sl, r6, r8
 8007ab0:	9e01      	ldr	r6, [sp, #4]
 8007ab2:	fb08 aa06 	mla	sl, r8, r6, sl
 8007ab6:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8007aba:	f14a 0700 	adc.w	r7, sl, #0
 8007abe:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007ac2:	4655      	mov	r5, sl
 8007ac4:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8007ac6:	9f03      	ldr	r7, [sp, #12]
 8007ac8:	03ad      	lsls	r5, r5, #14
 8007aca:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007ace:	f04f 0900 	mov.w	r9, #0
 8007ad2:	fb0c fc06 	mul.w	ip, ip, r6
 8007ad6:	fbc7 8905 	smlal	r8, r9, r7, r5
 8007ada:	9e04      	ldr	r6, [sp, #16]
 8007adc:	464f      	mov	r7, r9
 8007ade:	10bd      	asrs	r5, r7, #2
 8007ae0:	f305 050f 	ssat	r5, #16, r5
 8007ae4:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8007ae8:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007aea:	fa1f fc8e 	uxth.w	ip, lr
 8007aee:	4565      	cmp	r5, ip
 8007af0:	d917      	bls.n	8007b22 <D24_GENERIC+0x13e>
 8007af2:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8007af4:	f890 e000 	ldrb.w	lr, [r0]
 8007af8:	b2ef      	uxtb	r7, r5
 8007afa:	2d01      	cmp	r5, #1
 8007afc:	b23e      	sxth	r6, r7
 8007afe:	d18f      	bne.n	8007a20 <D24_GENERIC+0x3c>
 8007b00:	9d06      	ldr	r5, [sp, #24]
 8007b02:	b1dd      	cbz	r5, 8007b3c <D24_GENERIC+0x158>
 8007b04:	78c5      	ldrb	r5, [r0, #3]
 8007b06:	ea4f 280e 	mov.w	r8, lr, lsl #8
 8007b0a:	f01c 0f01 	tst.w	ip, #1
 8007b0e:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8007b12:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8007b16:	d11b      	bne.n	8007b50 <D24_GENERIC+0x16c>
 8007b18:	f890 e001 	ldrb.w	lr, [r0, #1]
 8007b1c:	3002      	adds	r0, #2
 8007b1e:	44c6      	add	lr, r8
 8007b20:	e789      	b.n	8007a36 <D24_GENERIC+0x52>
 8007b22:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007b26:	61d3      	str	r3, [r2, #28]
 8007b28:	9b07      	ldr	r3, [sp, #28]
 8007b2a:	6193      	str	r3, [r2, #24]
 8007b2c:	2000      	movs	r0, #0
 8007b2e:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8007b32:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8007b36:	b009      	add	sp, #36	@ 0x24
 8007b38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3c:	f890 8001 	ldrb.w	r8, [r0, #1]
 8007b40:	7885      	ldrb	r5, [r0, #2]
 8007b42:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8007b46:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8007b4a:	44c6      	add	lr, r8
 8007b4c:	3003      	adds	r0, #3
 8007b4e:	e772      	b.n	8007a36 <D24_GENERIC+0x52>
 8007b50:	f890 8002 	ldrb.w	r8, [r0, #2]
 8007b54:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8007b58:	44c6      	add	lr, r8
 8007b5a:	3004      	adds	r0, #4
 8007b5c:	e76b      	b.n	8007a36 <D24_GENERIC+0x52>
 8007b5e:	bf00      	nop
 8007b60:	20000010 	.word	0x20000010
 8007b64:	00030001 	.word	0x00030001
 8007b68:	00060007 	.word	0x00060007

08007b6c <D32_GENERIC>:
 8007b6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b70:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007b72:	6993      	ldr	r3, [r2, #24]
 8007b74:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007b76:	69d6      	ldr	r6, [r2, #28]
 8007b78:	b089      	sub	sp, #36	@ 0x24
 8007b7a:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8007b7e:	9307      	str	r3, [sp, #28]
 8007b80:	9403      	str	r4, [sp, #12]
 8007b82:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 8007b86:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8007b88:	9104      	str	r1, [sp, #16]
 8007b8a:	2d00      	cmp	r5, #0
 8007b8c:	f000 809a 	beq.w	8007cc4 <D32_GENERIC+0x158>
 8007b90:	f004 0520 	and.w	r5, r4, #32
 8007b94:	f004 0410 	and.w	r4, r4, #16
 8007b98:	9506      	str	r5, [sp, #24]
 8007b9a:	4951      	ldr	r1, [pc, #324]	@ (8007ce0 <D32_GENERIC+0x174>)
 8007b9c:	9405      	str	r4, [sp, #20]
 8007b9e:	f04f 0e00 	mov.w	lr, #0
 8007ba2:	f8cd 9008 	str.w	r9, [sp, #8]
 8007ba6:	461d      	mov	r5, r3
 8007ba8:	4617      	mov	r7, r2
 8007baa:	e077      	b.n	8007c9c <D32_GENERIC+0x130>
 8007bac:	7823      	ldrb	r3, [r4, #0]
 8007bae:	f810 800c 	ldrb.w	r8, [r0, ip]
 8007bb2:	f810 c002 	ldrb.w	ip, [r0, r2]
 8007bb6:	7800      	ldrb	r0, [r0, #0]
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8007bbe:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8007bc2:	4403      	add	r3, r0
 8007bc4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8007bc8:	b2dc      	uxtb	r4, r3
 8007bca:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8007bce:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8007bd2:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8007bd6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8007bda:	0e1b      	lsrs	r3, r3, #24
 8007bdc:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8007be0:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8007be4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8007be8:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8007bec:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8007bf0:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8007bf4:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8007bf8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007bfc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8007c00:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8007c04:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8007c08:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8007c0c:	4b35      	ldr	r3, [pc, #212]	@ (8007ce4 <D32_GENERIC+0x178>)
 8007c0e:	fb22 b403 	smlad	r4, r2, r3, fp
 8007c12:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8007c16:	fb2c 4803 	smlad	r8, ip, r3, r4
 8007c1a:	4b33      	ldr	r3, [pc, #204]	@ (8007ce8 <D32_GENERIC+0x17c>)
 8007c1c:	fb22 5503 	smlad	r5, r2, r3, r5
 8007c20:	4b32      	ldr	r3, [pc, #200]	@ (8007cec <D32_GENERIC+0x180>)
 8007c22:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8007c26:	2301      	movs	r3, #1
 8007c28:	fb22 f203 	smuad	r2, r2, r3
 8007c2c:	4b30      	ldr	r3, [pc, #192]	@ (8007cf0 <D32_GENERIC+0x184>)
 8007c2e:	fb2c 2503 	smlad	r5, ip, r3, r2
 8007c32:	9b02      	ldr	r3, [sp, #8]
 8007c34:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8007c38:	eb04 080a 	add.w	r8, r4, sl
 8007c3c:	eba8 0803 	sub.w	r8, r8, r3
 8007c40:	4642      	mov	r2, r8
 8007c42:	17d3      	asrs	r3, r2, #31
 8007c44:	e9cd 2300 	strd	r2, r3, [sp]
 8007c48:	9b05      	ldr	r3, [sp, #20]
 8007c4a:	f10e 0c01 	add.w	ip, lr, #1
 8007c4e:	b173      	cbz	r3, 8007c6e <D32_GENERIC+0x102>
 8007c50:	6a3a      	ldr	r2, [r7, #32]
 8007c52:	9b01      	ldr	r3, [sp, #4]
 8007c54:	9402      	str	r4, [sp, #8]
 8007c56:	fba8 8902 	umull	r8, r9, r8, r2
 8007c5a:	469a      	mov	sl, r3
 8007c5c:	fb02 930a 	mla	r3, r2, sl, r9
 8007c60:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8007c64:	f143 0900 	adc.w	r9, r3, #0
 8007c68:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8007c6c:	4654      	mov	r4, sl
 8007c6e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8007c70:	9a04      	ldr	r2, [sp, #16]
 8007c72:	fb0e fe03 	mul.w	lr, lr, r3
 8007c76:	9b03      	ldr	r3, [sp, #12]
 8007c78:	0364      	lsls	r4, r4, #13
 8007c7a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8007c7e:	f04f 0900 	mov.w	r9, #0
 8007c82:	fbc3 8904 	smlal	r8, r9, r3, r4
 8007c86:	464b      	mov	r3, r9
 8007c88:	109b      	asrs	r3, r3, #2
 8007c8a:	f303 030f 	ssat	r3, #16, r3
 8007c8e:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8007c92:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007c94:	fa1f fe8c 	uxth.w	lr, ip
 8007c98:	4573      	cmp	r3, lr
 8007c9a:	d90f      	bls.n	8007cbc <D32_GENERIC+0x150>
 8007c9c:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8007c9e:	b2da      	uxtb	r2, r3
 8007ca0:	2b01      	cmp	r3, #1
 8007ca2:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8007ca6:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8007caa:	f47f af7f 	bne.w	8007bac <D32_GENERIC+0x40>
 8007cae:	1d02      	adds	r2, r0, #4
 8007cb0:	6803      	ldr	r3, [r0, #0]
 8007cb2:	9806      	ldr	r0, [sp, #24]
 8007cb4:	b188      	cbz	r0, 8007cda <D32_GENERIC+0x16e>
 8007cb6:	ba5b      	rev16	r3, r3
 8007cb8:	4610      	mov	r0, r2
 8007cba:	e785      	b.n	8007bc8 <D32_GENERIC+0x5c>
 8007cbc:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	463a      	mov	r2, r7
 8007cc4:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8007cc8:	9b07      	ldr	r3, [sp, #28]
 8007cca:	61d6      	str	r6, [r2, #28]
 8007ccc:	2000      	movs	r0, #0
 8007cce:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8007cd2:	6193      	str	r3, [r2, #24]
 8007cd4:	b009      	add	sp, #36	@ 0x24
 8007cd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cda:	4610      	mov	r0, r2
 8007cdc:	e774      	b.n	8007bc8 <D32_GENERIC+0x5c>
 8007cde:	bf00      	nop
 8007ce0:	20000010 	.word	0x20000010
 8007ce4:	00060003 	.word	0x00060003
 8007ce8:	000a000c 	.word	0x000a000c
 8007cec:	000c000a 	.word	0x000c000a
 8007cf0:	00030006 	.word	0x00030006

08007cf4 <D48_GENERIC>:
 8007cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf8:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8007cfc:	b08b      	sub	sp, #44	@ 0x2c
 8007cfe:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8007d00:	9304      	str	r3, [sp, #16]
 8007d02:	6993      	ldr	r3, [r2, #24]
 8007d04:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d06:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8007d0a:	9401      	str	r4, [sp, #4]
 8007d0c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8007d0e:	9405      	str	r4, [sp, #20]
 8007d10:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8007d14:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8007d16:	9106      	str	r1, [sp, #24]
 8007d18:	2d00      	cmp	r5, #0
 8007d1a:	f000 80c2 	beq.w	8007ea2 <D48_GENERIC+0x1ae>
 8007d1e:	f004 0520 	and.w	r5, r4, #32
 8007d22:	f04f 0900 	mov.w	r9, #0
 8007d26:	f004 0410 	and.w	r4, r4, #16
 8007d2a:	9508      	str	r5, [sp, #32]
 8007d2c:	4964      	ldr	r1, [pc, #400]	@ (8007ec0 <D48_GENERIC+0x1cc>)
 8007d2e:	9407      	str	r4, [sp, #28]
 8007d30:	464d      	mov	r5, r9
 8007d32:	e09e      	b.n	8007e72 <D48_GENERIC+0x17e>
 8007d34:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8007d38:	f810 b008 	ldrb.w	fp, [r0, r8]
 8007d3c:	f819 8008 	ldrb.w	r8, [r9, r8]
 8007d40:	f810 9006 	ldrb.w	r9, [r0, r6]
 8007d44:	7800      	ldrb	r0, [r0, #0]
 8007d46:	0424      	lsls	r4, r4, #16
 8007d48:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8007d4c:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8007d50:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8007d54:	44be      	add	lr, r7
 8007d56:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8007d5a:	eb0b 0700 	add.w	r7, fp, r0
 8007d5e:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8007d62:	fa5f fe87 	uxtb.w	lr, r7
 8007d66:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8007d6a:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8007d6e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8007d72:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8007d76:	0e3f      	lsrs	r7, r7, #24
 8007d78:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8007d7c:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8007d80:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8007d84:	b2e7      	uxtb	r7, r4
 8007d86:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8007d8a:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8007d8e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8007d92:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8007d96:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8007d9a:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8007d9e:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8007da2:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8007da6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007daa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007dae:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8007db2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8007db6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8007dba:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007dbe:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8007dc2:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8007dc6:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8007dca:	4c3e      	ldr	r4, [pc, #248]	@ (8007ec4 <D48_GENERIC+0x1d0>)
 8007dcc:	9e01      	ldr	r6, [sp, #4]
 8007dce:	fb29 6404 	smlad	r4, r9, r4, r6
 8007dd2:	4e3d      	ldr	r6, [pc, #244]	@ (8007ec8 <D48_GENERIC+0x1d4>)
 8007dd4:	fb2e 4406 	smlad	r4, lr, r6, r4
 8007dd8:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8007ddc:	fb27 4b06 	smlad	fp, r7, r6, r4
 8007de0:	4c3a      	ldr	r4, [pc, #232]	@ (8007ecc <D48_GENERIC+0x1d8>)
 8007de2:	fb29 3304 	smlad	r3, r9, r4, r3
 8007de6:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8007dea:	fb2e 3304 	smlad	r3, lr, r4, r3
 8007dee:	4c38      	ldr	r4, [pc, #224]	@ (8007ed0 <D48_GENERIC+0x1dc>)
 8007df0:	fb27 3304 	smlad	r3, r7, r4, r3
 8007df4:	2601      	movs	r6, #1
 8007df6:	9301      	str	r3, [sp, #4]
 8007df8:	fb29 f906 	smuad	r9, r9, r6
 8007dfc:	4b35      	ldr	r3, [pc, #212]	@ (8007ed4 <D48_GENERIC+0x1e0>)
 8007dfe:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8007e02:	4b35      	ldr	r3, [pc, #212]	@ (8007ed8 <D48_GENERIC+0x1e4>)
 8007e04:	fb27 e303 	smlad	r3, r7, r3, lr
 8007e08:	9f04      	ldr	r7, [sp, #16]
 8007e0a:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8007e0e:	eb05 0e06 	add.w	lr, r5, r6
 8007e12:	eb04 060a 	add.w	r6, r4, sl
 8007e16:	1bf6      	subs	r6, r6, r7
 8007e18:	4637      	mov	r7, r6
 8007e1a:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8007e1e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8007e22:	9f07      	ldr	r7, [sp, #28]
 8007e24:	b177      	cbz	r7, 8007e44 <D48_GENERIC+0x150>
 8007e26:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8007e2a:	9404      	str	r4, [sp, #16]
 8007e2c:	fba6 9a08 	umull	r9, sl, r6, r8
 8007e30:	9e03      	ldr	r6, [sp, #12]
 8007e32:	fb08 aa06 	mla	sl, r8, r6, sl
 8007e36:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8007e3a:	f14a 0700 	adc.w	r7, sl, #0
 8007e3e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8007e42:	4654      	mov	r4, sl
 8007e44:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8007e46:	fb05 f606 	mul.w	r6, r5, r6
 8007e4a:	9d05      	ldr	r5, [sp, #20]
 8007e4c:	02e4      	lsls	r4, r4, #11
 8007e4e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8007e52:	f04f 0800 	mov.w	r8, #0
 8007e56:	fbc5 7804 	smlal	r7, r8, r5, r4
 8007e5a:	4645      	mov	r5, r8
 8007e5c:	10ac      	asrs	r4, r5, #2
 8007e5e:	9d06      	ldr	r5, [sp, #24]
 8007e60:	f304 040f 	ssat	r4, #16, r4
 8007e64:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8007e68:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007e6a:	fa1f f58e 	uxth.w	r5, lr
 8007e6e:	42ac      	cmp	r4, r5
 8007e70:	d917      	bls.n	8007ea2 <D48_GENERIC+0x1ae>
 8007e72:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8007e74:	b2e6      	uxtb	r6, r4
 8007e76:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8007e7a:	4277      	negs	r7, r6
 8007e7c:	eb00 0b08 	add.w	fp, r0, r8
 8007e80:	eb0b 0907 	add.w	r9, fp, r7
 8007e84:	2c01      	cmp	r4, #1
 8007e86:	eb09 0e08 	add.w	lr, r9, r8
 8007e8a:	f47f af53 	bne.w	8007d34 <D48_GENERIC+0x40>
 8007e8e:	9e08      	ldr	r6, [sp, #32]
 8007e90:	e9d0 7400 	ldrd	r7, r4, [r0]
 8007e94:	3006      	adds	r0, #6
 8007e96:	2e00      	cmp	r6, #0
 8007e98:	f43f af63 	beq.w	8007d62 <D48_GENERIC+0x6e>
 8007e9c:	ba7f      	rev16	r7, r7
 8007e9e:	ba64      	rev16	r4, r4
 8007ea0:	e75f      	b.n	8007d62 <D48_GENERIC+0x6e>
 8007ea2:	6093      	str	r3, [r2, #8]
 8007ea4:	9b01      	ldr	r3, [sp, #4]
 8007ea6:	60d3      	str	r3, [r2, #12]
 8007ea8:	9b04      	ldr	r3, [sp, #16]
 8007eaa:	6153      	str	r3, [r2, #20]
 8007eac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007eae:	f8c2 c01c 	str.w	ip, [r2, #28]
 8007eb2:	2000      	movs	r0, #0
 8007eb4:	f8c2 a010 	str.w	sl, [r2, #16]
 8007eb8:	6193      	str	r3, [r2, #24]
 8007eba:	b00b      	add	sp, #44	@ 0x2c
 8007ebc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec0:	20000010 	.word	0x20000010
 8007ec4:	000f000a 	.word	0x000f000a
 8007ec8:	00060003 	.word	0x00060003
 8007ecc:	00150019 	.word	0x00150019
 8007ed0:	00190015 	.word	0x00190015
 8007ed4:	00030006 	.word	0x00030006
 8007ed8:	000a000f 	.word	0x000a000f

08007edc <D64_GENERIC>:
 8007edc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee0:	b089      	sub	sp, #36	@ 0x24
 8007ee2:	6895      	ldr	r5, [r2, #8]
 8007ee4:	6913      	ldr	r3, [r2, #16]
 8007ee6:	9501      	str	r5, [sp, #4]
 8007ee8:	68d5      	ldr	r5, [r2, #12]
 8007eea:	9302      	str	r3, [sp, #8]
 8007eec:	9500      	str	r5, [sp, #0]
 8007eee:	6953      	ldr	r3, [r2, #20]
 8007ef0:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8007ef2:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8007ef4:	9303      	str	r3, [sp, #12]
 8007ef6:	6993      	ldr	r3, [r2, #24]
 8007ef8:	9307      	str	r3, [sp, #28]
 8007efa:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8007efe:	69d3      	ldr	r3, [r2, #28]
 8007f00:	2c00      	cmp	r4, #0
 8007f02:	f000 80d7 	beq.w	80080b4 <D64_GENERIC+0x1d8>
 8007f06:	6a11      	ldr	r1, [r2, #32]
 8007f08:	9106      	str	r1, [sp, #24]
 8007f0a:	f04f 0e00 	mov.w	lr, #0
 8007f0e:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 80080f4 <D64_GENERIC+0x218>
 8007f12:	4681      	mov	r9, r0
 8007f14:	e0bf      	b.n	8008096 <D64_GENERIC+0x1ba>
 8007f16:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8007f1a:	426c      	negs	r4, r5
 8007f1c:	eb09 0708 	add.w	r7, r9, r8
 8007f20:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8007f24:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8007f28:	5d38      	ldrb	r0, [r7, r4]
 8007f2a:	5d31      	ldrb	r1, [r6, r4]
 8007f2c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8007f30:	f819 a008 	ldrb.w	sl, [r9, r8]
 8007f34:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8007f38:	f899 7000 	ldrb.w	r7, [r9]
 8007f3c:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8007f40:	4426      	add	r6, r4
 8007f42:	0409      	lsls	r1, r1, #16
 8007f44:	0400      	lsls	r0, r0, #16
 8007f46:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8007f4a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8007f4e:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8007f52:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8007f56:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8007f5a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8007f5e:	4459      	add	r1, fp
 8007f60:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8007f64:	4438      	add	r0, r7
 8007f66:	b2c5      	uxtb	r5, r0
 8007f68:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8007f6c:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8007f70:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8007f74:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8007f78:	0e00      	lsrs	r0, r0, #24
 8007f7a:	eb03 0806 	add.w	r8, r3, r6
 8007f7e:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8007f82:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8007f86:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8007f8a:	b2c8      	uxtb	r0, r1
 8007f8c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8007f90:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8007f94:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8007f98:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8007f9c:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8007fa0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8007fa4:	0e09      	lsrs	r1, r1, #24
 8007fa6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8007faa:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8007fae:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8007fb2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8007fb6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8007fba:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8007fbe:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8007fc2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8007fc6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8007fca:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8007fce:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8007fd2:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8007fd6:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8007fda:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8007fde:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8007fe2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8007fe6:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8007fea:	0a8b      	lsrs	r3, r1, #10
 8007fec:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8007ff0:	4938      	ldr	r1, [pc, #224]	@ (80080d4 <D64_GENERIC+0x1f8>)
 8007ff2:	9c00      	ldr	r4, [sp, #0]
 8007ff4:	fb28 4101 	smlad	r1, r8, r1, r4
 8007ff8:	4c37      	ldr	r4, [pc, #220]	@ (80080d8 <D64_GENERIC+0x1fc>)
 8007ffa:	fb27 1104 	smlad	r1, r7, r4, r1
 8007ffe:	4c37      	ldr	r4, [pc, #220]	@ (80080dc <D64_GENERIC+0x200>)
 8008000:	fb20 1104 	smlad	r1, r0, r4, r1
 8008004:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8008008:	fb2a 1106 	smlad	r1, sl, r6, r1
 800800c:	4d34      	ldr	r5, [pc, #208]	@ (80080e0 <D64_GENERIC+0x204>)
 800800e:	9c01      	ldr	r4, [sp, #4]
 8008010:	fb28 4405 	smlad	r4, r8, r5, r4
 8008014:	fb2a 4415 	smladx	r4, sl, r5, r4
 8008018:	4d32      	ldr	r5, [pc, #200]	@ (80080e4 <D64_GENERIC+0x208>)
 800801a:	fb27 4405 	smlad	r4, r7, r5, r4
 800801e:	fb20 4415 	smladx	r4, r0, r5, r4
 8008022:	2501      	movs	r5, #1
 8008024:	9400      	str	r4, [sp, #0]
 8008026:	fb28 f805 	smuad	r8, r8, r5
 800802a:	4c2f      	ldr	r4, [pc, #188]	@ (80080e8 <D64_GENERIC+0x20c>)
 800802c:	fb27 8704 	smlad	r7, r7, r4, r8
 8008030:	4c2e      	ldr	r4, [pc, #184]	@ (80080ec <D64_GENERIC+0x210>)
 8008032:	fb20 7004 	smlad	r0, r0, r4, r7
 8008036:	4c2e      	ldr	r4, [pc, #184]	@ (80080f0 <D64_GENERIC+0x214>)
 8008038:	fb2a 0004 	smlad	r0, sl, r4, r0
 800803c:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8008040:	9906      	ldr	r1, [sp, #24]
 8008042:	9001      	str	r0, [sp, #4]
 8008044:	b181      	cbz	r1, 8008068 <D64_GENERIC+0x18c>
 8008046:	9802      	ldr	r0, [sp, #8]
 8008048:	9c03      	ldr	r4, [sp, #12]
 800804a:	4430      	add	r0, r6
 800804c:	1b00      	subs	r0, r0, r4
 800804e:	fba0 7801 	umull	r7, r8, r0, r1
 8008052:	17c5      	asrs	r5, r0, #31
 8008054:	fb01 8805 	mla	r8, r1, r5, r8
 8008058:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 800805c:	f148 0100 	adc.w	r1, r8, #0
 8008060:	0049      	lsls	r1, r1, #1
 8008062:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8008066:	460e      	mov	r6, r1
 8008068:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 800806a:	9904      	ldr	r1, [sp, #16]
 800806c:	9805      	ldr	r0, [sp, #20]
 800806e:	02b6      	lsls	r6, r6, #10
 8008070:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8008074:	f04f 0800 	mov.w	r8, #0
 8008078:	fb0e f404 	mul.w	r4, lr, r4
 800807c:	fbc1 7806 	smlal	r7, r8, r1, r6
 8008080:	4641      	mov	r1, r8
 8008082:	1089      	asrs	r1, r1, #2
 8008084:	f301 010f 	ssat	r1, #16, r1
 8008088:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 800808c:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 800808e:	f10e 0e01 	add.w	lr, lr, #1
 8008092:	4571      	cmp	r1, lr
 8008094:	dd0e      	ble.n	80080b4 <D64_GENERIC+0x1d8>
 8008096:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8008098:	2d01      	cmp	r5, #1
 800809a:	f47f af3c 	bne.w	8007f16 <D64_GENERIC+0x3a>
 800809e:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80080a0:	06ac      	lsls	r4, r5, #26
 80080a2:	e9d9 0100 	ldrd	r0, r1, [r9]
 80080a6:	f109 0908 	add.w	r9, r9, #8
 80080aa:	f57f af5c 	bpl.w	8007f66 <D64_GENERIC+0x8a>
 80080ae:	ba40      	rev16	r0, r0
 80080b0:	ba49      	rev16	r1, r1
 80080b2:	e758      	b.n	8007f66 <D64_GENERIC+0x8a>
 80080b4:	61d3      	str	r3, [r2, #28]
 80080b6:	9b02      	ldr	r3, [sp, #8]
 80080b8:	9901      	ldr	r1, [sp, #4]
 80080ba:	6113      	str	r3, [r2, #16]
 80080bc:	9b03      	ldr	r3, [sp, #12]
 80080be:	6091      	str	r1, [r2, #8]
 80080c0:	6153      	str	r3, [r2, #20]
 80080c2:	9900      	ldr	r1, [sp, #0]
 80080c4:	9b07      	ldr	r3, [sp, #28]
 80080c6:	60d1      	str	r1, [r2, #12]
 80080c8:	2000      	movs	r0, #0
 80080ca:	6193      	str	r3, [r2, #24]
 80080cc:	b009      	add	sp, #36	@ 0x24
 80080ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080d2:	bf00      	nop
 80080d4:	001c0015 	.word	0x001c0015
 80080d8:	000f000a 	.word	0x000f000a
 80080dc:	00060003 	.word	0x00060003
 80080e0:	0024002a 	.word	0x0024002a
 80080e4:	002e0030 	.word	0x002e0030
 80080e8:	00030006 	.word	0x00030006
 80080ec:	000a000f 	.word	0x000a000f
 80080f0:	0015001c 	.word	0x0015001c
 80080f4:	20000010 	.word	0x20000010

080080f8 <D80_GENERIC>:
 80080f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080fc:	b08b      	sub	sp, #44	@ 0x2c
 80080fe:	6914      	ldr	r4, [r2, #16]
 8008100:	9405      	str	r4, [sp, #20]
 8008102:	6954      	ldr	r4, [r2, #20]
 8008104:	9406      	str	r4, [sp, #24]
 8008106:	6994      	ldr	r4, [r2, #24]
 8008108:	9409      	str	r4, [sp, #36]	@ 0x24
 800810a:	6894      	ldr	r4, [r2, #8]
 800810c:	9402      	str	r4, [sp, #8]
 800810e:	68d4      	ldr	r4, [r2, #12]
 8008110:	9401      	str	r4, [sp, #4]
 8008112:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008114:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008116:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800811a:	e9cd 4107 	strd	r4, r1, [sp, #28]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 810a 	beq.w	8008338 <D80_GENERIC+0x240>
 8008124:	2300      	movs	r3, #0
 8008126:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8008388 <D80_GENERIC+0x290>
 800812a:	e9cd b303 	strd	fp, r3, [sp, #12]
 800812e:	e0ee      	b.n	800830e <D80_GENERIC+0x216>
 8008130:	fa5f fe8e 	uxtb.w	lr, lr
 8008134:	fa0f f48e 	sxth.w	r4, lr
 8008138:	0066      	lsls	r6, r4, #1
 800813a:	eb06 0804 	add.w	r8, r6, r4
 800813e:	f1ce 0500 	rsb	r5, lr, #0
 8008142:	eb00 0108 	add.w	r1, r0, r8
 8008146:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800814a:	194b      	adds	r3, r1, r5
 800814c:	5d49      	ldrb	r1, [r1, r5]
 800814e:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008152:	f813 b004 	ldrb.w	fp, [r3, r4]
 8008156:	f810 e00e 	ldrb.w	lr, [r0, lr]
 800815a:	f890 8000 	ldrb.w	r8, [r0]
 800815e:	eb03 0c04 	add.w	ip, r3, r4
 8008162:	eb0c 0705 	add.w	r7, ip, r5
 8008166:	0409      	lsls	r1, r1, #16
 8008168:	f81c 3005 	ldrb.w	r3, [ip, r5]
 800816c:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008170:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008174:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8008178:	eb0a 0004 	add.w	r0, sl, r4
 800817c:	041b      	lsls	r3, r3, #16
 800817e:	f81a a004 	ldrb.w	sl, [sl, r4]
 8008182:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8008186:	5d44      	ldrb	r4, [r0, r5]
 8008188:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 800818c:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8008190:	4428      	add	r0, r5
 8008192:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8008196:	4441      	add	r1, r8
 8008198:	4430      	add	r0, r6
 800819a:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 800819e:	441f      	add	r7, r3
 80081a0:	b2cd      	uxtb	r5, r1
 80081a2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80081a6:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80081aa:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 80081ae:	9b03      	ldr	r3, [sp, #12]
 80081b0:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80081b4:	0e09      	lsrs	r1, r1, #24
 80081b6:	4433      	add	r3, r6
 80081b8:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80081bc:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80081c0:	b2fd      	uxtb	r5, r7
 80081c2:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 80081c6:	469b      	mov	fp, r3
 80081c8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80081cc:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 80081d0:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 80081d4:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 80081d8:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80081dc:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 80081e0:	0e3b      	lsrs	r3, r7, #24
 80081e2:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80081e6:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 80081ea:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80081ee:	fa5f fc84 	uxtb.w	ip, r4
 80081f2:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 80081f6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80081fa:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80081fe:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8008202:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8008206:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800820a:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800820e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8008212:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008216:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800821a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800821e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008222:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008226:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800822a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800822e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008232:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8008236:	0aa3      	lsrs	r3, r4, #10
 8008238:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800823c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008240:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008244:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8008248:	9303      	str	r3, [sp, #12]
 800824a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800824e:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8008252:	4b41      	ldr	r3, [pc, #260]	@ (8008358 <D80_GENERIC+0x260>)
 8008254:	9901      	ldr	r1, [sp, #4]
 8008256:	fb2b 1303 	smlad	r3, fp, r3, r1
 800825a:	4940      	ldr	r1, [pc, #256]	@ (800835c <D80_GENERIC+0x264>)
 800825c:	fb28 3301 	smlad	r3, r8, r1, r3
 8008260:	493f      	ldr	r1, [pc, #252]	@ (8008360 <D80_GENERIC+0x268>)
 8008262:	fb2e 3301 	smlad	r3, lr, r1, r3
 8008266:	493f      	ldr	r1, [pc, #252]	@ (8008364 <D80_GENERIC+0x26c>)
 8008268:	fb27 3301 	smlad	r3, r7, r1, r3
 800826c:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8008270:	fb2c 3404 	smlad	r4, ip, r4, r3
 8008274:	4b3c      	ldr	r3, [pc, #240]	@ (8008368 <D80_GENERIC+0x270>)
 8008276:	9902      	ldr	r1, [sp, #8]
 8008278:	fb2b 1303 	smlad	r3, fp, r3, r1
 800827c:	493b      	ldr	r1, [pc, #236]	@ (800836c <D80_GENERIC+0x274>)
 800827e:	fb28 3301 	smlad	r3, r8, r1, r3
 8008282:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 8008286:	fb2e 3101 	smlad	r1, lr, r1, r3
 800828a:	4b39      	ldr	r3, [pc, #228]	@ (8008370 <D80_GENERIC+0x278>)
 800828c:	fb27 1103 	smlad	r1, r7, r3, r1
 8008290:	4b38      	ldr	r3, [pc, #224]	@ (8008374 <D80_GENERIC+0x27c>)
 8008292:	fb2c 1303 	smlad	r3, ip, r3, r1
 8008296:	2101      	movs	r1, #1
 8008298:	9301      	str	r3, [sp, #4]
 800829a:	fb2b fb01 	smuad	fp, fp, r1
 800829e:	4b36      	ldr	r3, [pc, #216]	@ (8008378 <D80_GENERIC+0x280>)
 80082a0:	fb28 b803 	smlad	r8, r8, r3, fp
 80082a4:	4d35      	ldr	r5, [pc, #212]	@ (800837c <D80_GENERIC+0x284>)
 80082a6:	fb2e 8e05 	smlad	lr, lr, r5, r8
 80082aa:	4d35      	ldr	r5, [pc, #212]	@ (8008380 <D80_GENERIC+0x288>)
 80082ac:	fb27 e705 	smlad	r7, r7, r5, lr
 80082b0:	4b34      	ldr	r3, [pc, #208]	@ (8008384 <D80_GENERIC+0x28c>)
 80082b2:	fb2c 7303 	smlad	r3, ip, r3, r7
 80082b6:	6a11      	ldr	r1, [r2, #32]
 80082b8:	9302      	str	r3, [sp, #8]
 80082ba:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 80082be:	b181      	cbz	r1, 80082e2 <D80_GENERIC+0x1ea>
 80082c0:	9c05      	ldr	r4, [sp, #20]
 80082c2:	9d06      	ldr	r5, [sp, #24]
 80082c4:	441c      	add	r4, r3
 80082c6:	1b64      	subs	r4, r4, r5
 80082c8:	fba4 ab01 	umull	sl, fp, r4, r1
 80082cc:	17e7      	asrs	r7, r4, #31
 80082ce:	fb01 bb07 	mla	fp, r1, r7, fp
 80082d2:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 80082d6:	f14b 0500 	adc.w	r5, fp, #0
 80082da:	0069      	lsls	r1, r5, #1
 80082dc:	e9cd 1305 	strd	r1, r3, [sp, #20]
 80082e0:	460b      	mov	r3, r1
 80082e2:	9e04      	ldr	r6, [sp, #16]
 80082e4:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 80082e6:	9f07      	ldr	r7, [sp, #28]
 80082e8:	025b      	lsls	r3, r3, #9
 80082ea:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 80082ee:	2500      	movs	r5, #0
 80082f0:	fb06 f101 	mul.w	r1, r6, r1
 80082f4:	fbc7 4503 	smlal	r4, r5, r7, r3
 80082f8:	9c08      	ldr	r4, [sp, #32]
 80082fa:	10ab      	asrs	r3, r5, #2
 80082fc:	f303 030f 	ssat	r3, #16, r3
 8008300:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8008304:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008306:	1c71      	adds	r1, r6, #1
 8008308:	428b      	cmp	r3, r1
 800830a:	9104      	str	r1, [sp, #16]
 800830c:	dd12      	ble.n	8008334 <D80_GENERIC+0x23c>
 800830e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8008312:	f1be 0f01 	cmp.w	lr, #1
 8008316:	f47f af0b 	bne.w	8008130 <D80_GENERIC+0x38>
 800831a:	6801      	ldr	r1, [r0, #0]
 800831c:	6847      	ldr	r7, [r0, #4]
 800831e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8008320:	6884      	ldr	r4, [r0, #8]
 8008322:	069b      	lsls	r3, r3, #26
 8008324:	f100 000a 	add.w	r0, r0, #10
 8008328:	f57f af3a 	bpl.w	80081a0 <D80_GENERIC+0xa8>
 800832c:	ba49      	rev16	r1, r1
 800832e:	ba7f      	rev16	r7, r7
 8008330:	ba64      	rev16	r4, r4
 8008332:	e735      	b.n	80081a0 <D80_GENERIC+0xa8>
 8008334:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008338:	9b02      	ldr	r3, [sp, #8]
 800833a:	6093      	str	r3, [r2, #8]
 800833c:	9b01      	ldr	r3, [sp, #4]
 800833e:	60d3      	str	r3, [r2, #12]
 8008340:	9b05      	ldr	r3, [sp, #20]
 8008342:	6113      	str	r3, [r2, #16]
 8008344:	9b06      	ldr	r3, [sp, #24]
 8008346:	6153      	str	r3, [r2, #20]
 8008348:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800834a:	f8c2 b01c 	str.w	fp, [r2, #28]
 800834e:	2000      	movs	r0, #0
 8008350:	6193      	str	r3, [r2, #24]
 8008352:	b00b      	add	sp, #44	@ 0x2c
 8008354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008358:	002d0024 	.word	0x002d0024
 800835c:	001c0015 	.word	0x001c0015
 8008360:	000f000a 	.word	0x000f000a
 8008364:	00060003 	.word	0x00060003
 8008368:	0037003f 	.word	0x0037003f
 800836c:	00450049 	.word	0x00450049
 8008370:	00490045 	.word	0x00490045
 8008374:	003f0037 	.word	0x003f0037
 8008378:	00030006 	.word	0x00030006
 800837c:	000a000f 	.word	0x000a000f
 8008380:	0015001c 	.word	0x0015001c
 8008384:	0024002d 	.word	0x0024002d
 8008388:	20000010 	.word	0x20000010

0800838c <D128_GENERIC>:
 800838c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008390:	b091      	sub	sp, #68	@ 0x44
 8008392:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008394:	9004      	str	r0, [sp, #16]
 8008396:	6910      	ldr	r0, [r2, #16]
 8008398:	900a      	str	r0, [sp, #40]	@ 0x28
 800839a:	6950      	ldr	r0, [r2, #20]
 800839c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800839e:	6990      	ldr	r0, [r2, #24]
 80083a0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80083a2:	69d0      	ldr	r0, [r2, #28]
 80083a4:	9002      	str	r0, [sp, #8]
 80083a6:	6890      	ldr	r0, [r2, #8]
 80083a8:	9003      	str	r0, [sp, #12]
 80083aa:	68d0      	ldr	r0, [r2, #12]
 80083ac:	9001      	str	r0, [sp, #4]
 80083ae:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80083b0:	9200      	str	r2, [sp, #0]
 80083b2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	f000 8196 	beq.w	80086e8 <D128_GENERIC+0x35c>
 80083bc:	2300      	movs	r3, #0
 80083be:	6a12      	ldr	r2, [r2, #32]
 80083c0:	920e      	str	r2, [sp, #56]	@ 0x38
 80083c2:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8008764 <D128_GENERIC+0x3d8>
 80083c6:	9305      	str	r3, [sp, #20]
 80083c8:	e177      	b.n	80086ba <D128_GENERIC+0x32e>
 80083ca:	b2d2      	uxtb	r2, r2
 80083cc:	9d04      	ldr	r5, [sp, #16]
 80083ce:	b214      	sxth	r4, r2
 80083d0:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 80083d4:	4250      	negs	r0, r2
 80083d6:	eb05 010a 	add.w	r1, r5, sl
 80083da:	00a6      	lsls	r6, r4, #2
 80083dc:	eb01 0800 	add.w	r8, r1, r0
 80083e0:	eb06 0e04 	add.w	lr, r6, r4
 80083e4:	eb08 070e 	add.w	r7, r8, lr
 80083e8:	183b      	adds	r3, r7, r0
 80083ea:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 80083ee:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 80083f2:	9608      	str	r6, [sp, #32]
 80083f4:	eb0c 0604 	add.w	r6, ip, r4
 80083f8:	9304      	str	r3, [sp, #16]
 80083fa:	1833      	adds	r3, r6, r0
 80083fc:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8008400:	9306      	str	r3, [sp, #24]
 8008402:	f818 a00e 	ldrb.w	sl, [r8, lr]
 8008406:	9b04      	ldr	r3, [sp, #16]
 8008408:	f815 e002 	ldrb.w	lr, [r5, r2]
 800840c:	782d      	ldrb	r5, [r5, #0]
 800840e:	5c3a      	ldrb	r2, [r7, r0]
 8008410:	9507      	str	r5, [sp, #28]
 8008412:	9d06      	ldr	r5, [sp, #24]
 8008414:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8008418:	f81c 8004 	ldrb.w	r8, [ip, r4]
 800841c:	9304      	str	r3, [sp, #16]
 800841e:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8008422:	5c33      	ldrb	r3, [r6, r0]
 8008424:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8008428:	5c09      	ldrb	r1, [r1, r0]
 800842a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800842e:	0412      	lsls	r2, r2, #16
 8008430:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8008434:	eb06 0a04 	add.w	sl, r6, r4
 8008438:	5d36      	ldrb	r6, [r6, r4]
 800843a:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 800843e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8008442:	042d      	lsls	r5, r5, #16
 8008444:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8008448:	0409      	lsls	r1, r1, #16
 800844a:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800844e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8008452:	041b      	lsls	r3, r3, #16
 8008454:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8008458:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 800845c:	eb0a 0e00 	add.w	lr, sl, r0
 8008460:	9d07      	ldr	r5, [sp, #28]
 8008462:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 8008466:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 800846a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 800846e:	9f08      	ldr	r7, [sp, #32]
 8008470:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8008474:	4429      	add	r1, r5
 8008476:	9d04      	ldr	r5, [sp, #16]
 8008478:	4438      	add	r0, r7
 800847a:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 800847e:	9004      	str	r0, [sp, #16]
 8008480:	442a      	add	r2, r5
 8008482:	eb06 0a0b 	add.w	sl, r6, fp
 8008486:	1918      	adds	r0, r3, r4
 8008488:	b2cb      	uxtb	r3, r1
 800848a:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800848e:	9e02      	ldr	r6, [sp, #8]
 8008490:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008494:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8008498:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800849c:	441e      	add	r6, r3
 800849e:	0e09      	lsrs	r1, r1, #24
 80084a0:	4633      	mov	r3, r6
 80084a2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80084a6:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80084aa:	b2d4      	uxtb	r4, r2
 80084ac:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80084b0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 80084b4:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 80084b8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80084bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80084c0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80084c4:	0e12      	lsrs	r2, r2, #24
 80084c6:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 80084ca:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 80084ce:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80084d2:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 80084d6:	9702      	str	r7, [sp, #8]
 80084d8:	b2c2      	uxtb	r2, r0
 80084da:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 80084de:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 80084e2:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 80084e6:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 80084ea:	f3c0 2207 	ubfx	r2, r0, #8, #8
 80084ee:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 80084f2:	f3c0 4607 	ubfx	r6, r0, #16, #8
 80084f6:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 80084fa:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 80084fe:	0e00      	lsrs	r0, r0, #24
 8008500:	fa5f f68a 	uxtb.w	r6, sl
 8008504:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008508:	9308      	str	r3, [sp, #32]
 800850a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800850e:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8008512:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8008516:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800851a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800851e:	9509      	str	r5, [sp, #36]	@ 0x24
 8008520:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8008524:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8008528:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800852c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8008530:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8008534:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8008538:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800853c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8008540:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8008544:	9306      	str	r3, [sp, #24]
 8008546:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800854a:	9b02      	ldr	r3, [sp, #8]
 800854c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8008550:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008554:	f8cd a01c 	str.w	sl, [sp, #28]
 8008558:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800855c:	9b06      	ldr	r3, [sp, #24]
 800855e:	9506      	str	r5, [sp, #24]
 8008560:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008562:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008566:	f8cd e008 	str.w	lr, [sp, #8]
 800856a:	46ae      	mov	lr, r5
 800856c:	9d08      	ldr	r5, [sp, #32]
 800856e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008572:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8008576:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800857a:	9d02      	ldr	r5, [sp, #8]
 800857c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8008580:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008584:	9f07      	ldr	r7, [sp, #28]
 8008586:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800858a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800858e:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8008592:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008596:	9d06      	ldr	r5, [sp, #24]
 8008598:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800859c:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80085a0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80085a4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80085a8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80085ac:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 80085b0:	0abe      	lsrs	r6, r7, #10
 80085b2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80085b6:	9602      	str	r6, [sp, #8]
 80085b8:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 80085bc:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 80085c0:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 80085c4:	4e52      	ldr	r6, [pc, #328]	@ (8008710 <D128_GENERIC+0x384>)
 80085c6:	9f01      	ldr	r7, [sp, #4]
 80085c8:	fb2e 7606 	smlad	r6, lr, r6, r7
 80085cc:	4f51      	ldr	r7, [pc, #324]	@ (8008714 <D128_GENERIC+0x388>)
 80085ce:	fb2a 6607 	smlad	r6, sl, r7, r6
 80085d2:	4f51      	ldr	r7, [pc, #324]	@ (8008718 <D128_GENERIC+0x38c>)
 80085d4:	fb21 6607 	smlad	r6, r1, r7, r6
 80085d8:	4f50      	ldr	r7, [pc, #320]	@ (800871c <D128_GENERIC+0x390>)
 80085da:	fb24 6607 	smlad	r6, r4, r7, r6
 80085de:	4f50      	ldr	r7, [pc, #320]	@ (8008720 <D128_GENERIC+0x394>)
 80085e0:	fb22 6607 	smlad	r6, r2, r7, r6
 80085e4:	4f4f      	ldr	r7, [pc, #316]	@ (8008724 <D128_GENERIC+0x398>)
 80085e6:	fb20 6607 	smlad	r6, r0, r7, r6
 80085ea:	4f4f      	ldr	r7, [pc, #316]	@ (8008728 <D128_GENERIC+0x39c>)
 80085ec:	fb23 6607 	smlad	r6, r3, r7, r6
 80085f0:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 80085f4:	fb25 6807 	smlad	r8, r5, r7, r6
 80085f8:	4f4c      	ldr	r7, [pc, #304]	@ (800872c <D128_GENERIC+0x3a0>)
 80085fa:	9e03      	ldr	r6, [sp, #12]
 80085fc:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8008600:	4e4b      	ldr	r6, [pc, #300]	@ (8008730 <D128_GENERIC+0x3a4>)
 8008602:	fb2a cc06 	smlad	ip, sl, r6, ip
 8008606:	4f4b      	ldr	r7, [pc, #300]	@ (8008734 <D128_GENERIC+0x3a8>)
 8008608:	fb21 cc07 	smlad	ip, r1, r7, ip
 800860c:	4f4a      	ldr	r7, [pc, #296]	@ (8008738 <D128_GENERIC+0x3ac>)
 800860e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8008612:	4f4a      	ldr	r7, [pc, #296]	@ (800873c <D128_GENERIC+0x3b0>)
 8008614:	fb22 cc07 	smlad	ip, r2, r7, ip
 8008618:	4f49      	ldr	r7, [pc, #292]	@ (8008740 <D128_GENERIC+0x3b4>)
 800861a:	fb20 cc07 	smlad	ip, r0, r7, ip
 800861e:	4f49      	ldr	r7, [pc, #292]	@ (8008744 <D128_GENERIC+0x3b8>)
 8008620:	fb23 c707 	smlad	r7, r3, r7, ip
 8008624:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8008768 <D128_GENERIC+0x3dc>
 8008628:	fb25 760c 	smlad	r6, r5, ip, r7
 800862c:	f04f 0b01 	mov.w	fp, #1
 8008630:	9601      	str	r6, [sp, #4]
 8008632:	fb2e fb0b 	smuad	fp, lr, fp
 8008636:	4f44      	ldr	r7, [pc, #272]	@ (8008748 <D128_GENERIC+0x3bc>)
 8008638:	fb2a ba07 	smlad	sl, sl, r7, fp
 800863c:	4f43      	ldr	r7, [pc, #268]	@ (800874c <D128_GENERIC+0x3c0>)
 800863e:	fb21 aa07 	smlad	sl, r1, r7, sl
 8008642:	4f43      	ldr	r7, [pc, #268]	@ (8008750 <D128_GENERIC+0x3c4>)
 8008644:	fb24 aa07 	smlad	sl, r4, r7, sl
 8008648:	4f42      	ldr	r7, [pc, #264]	@ (8008754 <D128_GENERIC+0x3c8>)
 800864a:	fb22 a707 	smlad	r7, r2, r7, sl
 800864e:	4a42      	ldr	r2, [pc, #264]	@ (8008758 <D128_GENERIC+0x3cc>)
 8008650:	fb20 7702 	smlad	r7, r0, r2, r7
 8008654:	4a41      	ldr	r2, [pc, #260]	@ (800875c <D128_GENERIC+0x3d0>)
 8008656:	fb23 7702 	smlad	r7, r3, r2, r7
 800865a:	4b41      	ldr	r3, [pc, #260]	@ (8008760 <D128_GENERIC+0x3d4>)
 800865c:	fb25 7303 	smlad	r3, r5, r3, r7
 8008660:	9303      	str	r3, [sp, #12]
 8008662:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008664:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8008668:	b183      	cbz	r3, 800868c <D128_GENERIC+0x300>
 800866a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800866c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800866e:	4432      	add	r2, r6
 8008670:	1a52      	subs	r2, r2, r1
 8008672:	fba2 4503 	umull	r4, r5, r2, r3
 8008676:	17d1      	asrs	r1, r2, #31
 8008678:	fb03 5501 	mla	r5, r3, r1, r5
 800867c:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8008680:	f145 0300 	adc.w	r3, r5, #0
 8008684:	005b      	lsls	r3, r3, #1
 8008686:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 800868a:	461e      	mov	r6, r3
 800868c:	9800      	ldr	r0, [sp, #0]
 800868e:	9c05      	ldr	r4, [sp, #20]
 8008690:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8008692:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8008694:	01f6      	lsls	r6, r6, #7
 8008696:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800869a:	2300      	movs	r3, #0
 800869c:	fbc5 2306 	smlal	r2, r3, r5, r6
 80086a0:	fb04 f101 	mul.w	r1, r4, r1
 80086a4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80086a6:	109b      	asrs	r3, r3, #2
 80086a8:	f303 030f 	ssat	r3, #16, r3
 80086ac:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 80086b0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 80086b2:	1c62      	adds	r2, r4, #1
 80086b4:	4293      	cmp	r3, r2
 80086b6:	9205      	str	r2, [sp, #20]
 80086b8:	dd16      	ble.n	80086e8 <D128_GENERIC+0x35c>
 80086ba:	9b00      	ldr	r3, [sp, #0]
 80086bc:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 80086be:	2a01      	cmp	r2, #1
 80086c0:	f47f ae83 	bne.w	80083ca <D128_GENERIC+0x3e>
 80086c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80086c6:	9c04      	ldr	r4, [sp, #16]
 80086c8:	069b      	lsls	r3, r3, #26
 80086ca:	e9d4 1200 	ldrd	r1, r2, [r4]
 80086ce:	68a0      	ldr	r0, [r4, #8]
 80086d0:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80086d4:	f104 0410 	add.w	r4, r4, #16
 80086d8:	d517      	bpl.n	800870a <D128_GENERIC+0x37e>
 80086da:	ba49      	rev16	r1, r1
 80086dc:	ba52      	rev16	r2, r2
 80086de:	ba40      	rev16	r0, r0
 80086e0:	fa9a fa9a 	rev16.w	sl, sl
 80086e4:	9404      	str	r4, [sp, #16]
 80086e6:	e6cf      	b.n	8008488 <D128_GENERIC+0xfc>
 80086e8:	9b00      	ldr	r3, [sp, #0]
 80086ea:	9903      	ldr	r1, [sp, #12]
 80086ec:	6099      	str	r1, [r3, #8]
 80086ee:	9901      	ldr	r1, [sp, #4]
 80086f0:	60d9      	str	r1, [r3, #12]
 80086f2:	9902      	ldr	r1, [sp, #8]
 80086f4:	61d9      	str	r1, [r3, #28]
 80086f6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80086f8:	6119      	str	r1, [r3, #16]
 80086fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80086fc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80086fe:	6159      	str	r1, [r3, #20]
 8008700:	2000      	movs	r0, #0
 8008702:	619a      	str	r2, [r3, #24]
 8008704:	b011      	add	sp, #68	@ 0x44
 8008706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800870a:	9404      	str	r4, [sp, #16]
 800870c:	e6bc      	b.n	8008488 <D128_GENERIC+0xfc>
 800870e:	bf00      	nop
 8008710:	00780069 	.word	0x00780069
 8008714:	005b004e 	.word	0x005b004e
 8008718:	00420037 	.word	0x00420037
 800871c:	002d0024 	.word	0x002d0024
 8008720:	001c0015 	.word	0x001c0015
 8008724:	000f000a 	.word	0x000f000a
 8008728:	00060003 	.word	0x00060003
 800872c:	00880096 	.word	0x00880096
 8008730:	00a200ac 	.word	0x00a200ac
 8008734:	00b400ba 	.word	0x00b400ba
 8008738:	00be00c0 	.word	0x00be00c0
 800873c:	00c000be 	.word	0x00c000be
 8008740:	00ba00b4 	.word	0x00ba00b4
 8008744:	00ac00a2 	.word	0x00ac00a2
 8008748:	00030006 	.word	0x00030006
 800874c:	000a000f 	.word	0x000a000f
 8008750:	0015001c 	.word	0x0015001c
 8008754:	0024002d 	.word	0x0024002d
 8008758:	00370042 	.word	0x00370042
 800875c:	004e005b 	.word	0x004e005b
 8008760:	00690078 	.word	0x00690078
 8008764:	20000010 	.word	0x20000010
 8008768:	00960088 	.word	0x00960088

0800876c <D16_1CH_HTONS_VOL_HP>:
 800876c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008770:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8008774:	b085      	sub	sp, #20
 8008776:	4681      	mov	r9, r0
 8008778:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800877a:	6993      	ldr	r3, [r2, #24]
 800877c:	9303      	str	r3, [sp, #12]
 800877e:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8008782:	69d3      	ldr	r3, [r2, #28]
 8008784:	9402      	str	r4, [sp, #8]
 8008786:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 800878a:	f8d2 c020 	ldr.w	ip, [r2, #32]
 800878e:	2800      	cmp	r0, #0
 8008790:	d057      	beq.n	8008842 <D16_1CH_HTONS_VOL_HP+0xd6>
 8008792:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 8008796:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8008850 <D16_1CH_HTONS_VOL_HP+0xe4>
 800879a:	f1a1 0802 	sub.w	r8, r1, #2
 800879e:	4639      	mov	r1, r7
 80087a0:	465f      	mov	r7, fp
 80087a2:	46d3      	mov	fp, sl
 80087a4:	46ca      	mov	sl, r9
 80087a6:	4699      	mov	r9, r3
 80087a8:	4633      	mov	r3, r6
 80087aa:	4616      	mov	r6, r2
 80087ac:	f85a 2b02 	ldr.w	r2, [sl], #2
 80087b0:	ba52      	rev16	r2, r2
 80087b2:	b2d4      	uxtb	r4, r2
 80087b4:	f3c2 2007 	ubfx	r0, r2, #8, #8
 80087b8:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 80087bc:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 80087c0:	4491      	add	r9, r2
 80087c2:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 80087c6:	f3c0 0209 	ubfx	r2, r0, #0, #10
 80087ca:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80087ce:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 80087d2:	ea4f 2990 	mov.w	r9, r0, lsr #10
 80087d6:	481c      	ldr	r0, [pc, #112]	@ (8008848 <D16_1CH_HTONS_VOL_HP+0xdc>)
 80087d8:	fb22 5400 	smlad	r4, r2, r0, r5
 80087dc:	481b      	ldr	r0, [pc, #108]	@ (800884c <D16_1CH_HTONS_VOL_HP+0xe0>)
 80087de:	fb22 f500 	smuad	r5, r2, r0
 80087e2:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 80087e6:	18e2      	adds	r2, r4, r3
 80087e8:	1a52      	subs	r2, r2, r1
 80087ea:	17d1      	asrs	r1, r2, #31
 80087ec:	fba2 230c 	umull	r2, r3, r2, ip
 80087f0:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 80087f4:	fb0c 3301 	mla	r3, ip, r1, r3
 80087f8:	f143 0100 	adc.w	r1, r3, #0
 80087fc:	e9cd 0100 	strd	r0, r1, [sp]
 8008800:	044a      	lsls	r2, r1, #17
 8008802:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008806:	2100      	movs	r1, #0
 8008808:	9b01      	ldr	r3, [sp, #4]
 800880a:	fbcb 0102 	smlal	r0, r1, fp, r2
 800880e:	45ba      	cmp	sl, r7
 8008810:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8008814:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8008818:	f302 020f 	ssat	r2, #16, r2
 800881c:	4621      	mov	r1, r4
 800881e:	f828 2f02 	strh.w	r2, [r8, #2]!
 8008822:	d1c3      	bne.n	80087ac <D16_1CH_HTONS_VOL_HP+0x40>
 8008824:	4632      	mov	r2, r6
 8008826:	461e      	mov	r6, r3
 8008828:	464b      	mov	r3, r9
 800882a:	9902      	ldr	r1, [sp, #8]
 800882c:	61d3      	str	r3, [r2, #28]
 800882e:	9b03      	ldr	r3, [sp, #12]
 8008830:	6095      	str	r5, [r2, #8]
 8008832:	2000      	movs	r0, #0
 8008834:	60d1      	str	r1, [r2, #12]
 8008836:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800883a:	6193      	str	r3, [r2, #24]
 800883c:	b005      	add	sp, #20
 800883e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008842:	463c      	mov	r4, r7
 8008844:	e7f1      	b.n	800882a <D16_1CH_HTONS_VOL_HP+0xbe>
 8008846:	bf00      	nop
 8008848:	00030001 	.word	0x00030001
 800884c:	00010003 	.word	0x00010003
 8008850:	20000010 	.word	0x20000010

08008854 <D24_1CH_HTONS_VOL_HP>:
 8008854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008858:	4696      	mov	lr, r2
 800885a:	b089      	sub	sp, #36	@ 0x24
 800885c:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 8008860:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008862:	f8de 3018 	ldr.w	r3, [lr, #24]
 8008866:	9703      	str	r7, [sp, #12]
 8008868:	f8de 7020 	ldr.w	r7, [lr, #32]
 800886c:	9306      	str	r3, [sp, #24]
 800886e:	9205      	str	r2, [sp, #20]
 8008870:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8008874:	f8de 601c 	ldr.w	r6, [lr, #28]
 8008878:	9704      	str	r7, [sp, #16]
 800887a:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 800887e:	2a00      	cmp	r2, #0
 8008880:	f000 8081 	beq.w	8008986 <D24_1CH_HTONS_VOL_HP+0x132>
 8008884:	f1a1 0b02 	sub.w	fp, r1, #2
 8008888:	2700      	movs	r7, #0
 800888a:	46d9      	mov	r9, fp
 800888c:	f8cd e01c 	str.w	lr, [sp, #28]
 8008890:	46d3      	mov	fp, sl
 8008892:	f8df c100 	ldr.w	ip, [pc, #256]	@ 8008994 <D24_1CH_HTONS_VOL_HP+0x140>
 8008896:	46a8      	mov	r8, r5
 8008898:	46ba      	mov	sl, r7
 800889a:	469e      	mov	lr, r3
 800889c:	e052      	b.n	8008944 <D24_1CH_HTONS_VOL_HP+0xf0>
 800889e:	7842      	ldrb	r2, [r0, #1]
 80088a0:	3002      	adds	r0, #2
 80088a2:	4413      	add	r3, r2
 80088a4:	b2d9      	uxtb	r1, r3
 80088a6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80088aa:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 80088ae:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80088b2:	0c1b      	lsrs	r3, r3, #16
 80088b4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80088b8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80088bc:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 80088c0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 80088c4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 80088c8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 80088cc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 80088d0:	4a2e      	ldr	r2, [pc, #184]	@ (800898c <D24_1CH_HTONS_VOL_HP+0x138>)
 80088d2:	fb23 b102 	smlad	r1, r3, r2, fp
 80088d6:	4a2e      	ldr	r2, [pc, #184]	@ (8008990 <D24_1CH_HTONS_VOL_HP+0x13c>)
 80088d8:	fb23 eb02 	smlad	fp, r3, r2, lr
 80088dc:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 80088e0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80088e4:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 80088e8:	2201      	movs	r2, #1
 80088ea:	fb23 f702 	smuad	r7, r3, r2
 80088ee:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 80088f2:	eb01 0208 	add.w	r2, r1, r8
 80088f6:	1b12      	subs	r2, r2, r4
 80088f8:	17d4      	asrs	r4, r2, #31
 80088fa:	4613      	mov	r3, r2
 80088fc:	e9cd 3400 	strd	r3, r4, [sp]
 8008900:	9c04      	ldr	r4, [sp, #16]
 8008902:	9d01      	ldr	r5, [sp, #4]
 8008904:	fba2 2304 	umull	r2, r3, r2, r4
 8008908:	fb04 3305 	mla	r3, r4, r5, r3
 800890c:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8008910:	f143 0500 	adc.w	r5, r3, #0
 8008914:	9b03      	ldr	r3, [sp, #12]
 8008916:	e9cd 4500 	strd	r4, r5, [sp]
 800891a:	03ea      	lsls	r2, r5, #15
 800891c:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8008920:	2500      	movs	r5, #0
 8008922:	fbc3 4502 	smlal	r4, r5, r3, r2
 8008926:	9b01      	ldr	r3, [sp, #4]
 8008928:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800892c:	10ab      	asrs	r3, r5, #2
 800892e:	f303 030f 	ssat	r3, #16, r3
 8008932:	f829 3f02 	strh.w	r3, [r9, #2]!
 8008936:	9b05      	ldr	r3, [sp, #20]
 8008938:	f10a 0a01 	add.w	sl, sl, #1
 800893c:	459a      	cmp	sl, r3
 800893e:	44be      	add	lr, r7
 8008940:	460c      	mov	r4, r1
 8008942:	d00e      	beq.n	8008962 <D24_1CH_HTONS_VOL_HP+0x10e>
 8008944:	7801      	ldrb	r1, [r0, #0]
 8008946:	78c2      	ldrb	r2, [r0, #3]
 8008948:	020b      	lsls	r3, r1, #8
 800894a:	f01a 0f01 	tst.w	sl, #1
 800894e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 8008952:	d0a4      	beq.n	800889e <D24_1CH_HTONS_VOL_HP+0x4a>
 8008954:	7885      	ldrb	r5, [r0, #2]
 8008956:	0212      	lsls	r2, r2, #8
 8008958:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 800895c:	440b      	add	r3, r1
 800895e:	3004      	adds	r0, #4
 8008960:	e7a0      	b.n	80088a4 <D24_1CH_HTONS_VOL_HP+0x50>
 8008962:	4673      	mov	r3, lr
 8008964:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8008968:	46da      	mov	sl, fp
 800896a:	4645      	mov	r5, r8
 800896c:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 8008970:	9b06      	ldr	r3, [sp, #24]
 8008972:	f8ce 601c 	str.w	r6, [lr, #28]
 8008976:	2000      	movs	r0, #0
 8008978:	e9ce 5104 	strd	r5, r1, [lr, #16]
 800897c:	f8ce 3018 	str.w	r3, [lr, #24]
 8008980:	b009      	add	sp, #36	@ 0x24
 8008982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008986:	4621      	mov	r1, r4
 8008988:	e7f0      	b.n	800896c <D24_1CH_HTONS_VOL_HP+0x118>
 800898a:	bf00      	nop
 800898c:	00030001 	.word	0x00030001
 8008990:	00060007 	.word	0x00060007
 8008994:	20000010 	.word	0x20000010

08008998 <D32_1CH_HTONS_VOL_HP>:
 8008998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800899c:	4682      	mov	sl, r0
 800899e:	b087      	sub	sp, #28
 80089a0:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80089a2:	6993      	ldr	r3, [r2, #24]
 80089a4:	9304      	str	r3, [sp, #16]
 80089a6:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80089aa:	69d5      	ldr	r5, [r2, #28]
 80089ac:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80089ae:	f8d2 9020 	ldr.w	r9, [r2, #32]
 80089b2:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 80089b6:	2800      	cmp	r0, #0
 80089b8:	d070      	beq.n	8008a9c <D32_1CH_HTONS_VOL_HP+0x104>
 80089ba:	468e      	mov	lr, r1
 80089bc:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8008ab0 <D32_1CH_HTONS_VOL_HP+0x118>
 80089c0:	9205      	str	r2, [sp, #20]
 80089c2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 80089c6:	46d3      	mov	fp, sl
 80089c8:	4638      	mov	r0, r7
 80089ca:	46ca      	mov	sl, r9
 80089cc:	9103      	str	r1, [sp, #12]
 80089ce:	4627      	mov	r7, r4
 80089d0:	4699      	mov	r9, r3
 80089d2:	f85b 1b04 	ldr.w	r1, [fp], #4
 80089d6:	ba49      	rev16	r1, r1
 80089d8:	b2ca      	uxtb	r2, r1
 80089da:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80089de:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 80089e2:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80089e6:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80089ea:	0e09      	lsrs	r1, r1, #24
 80089ec:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 80089f0:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 80089f4:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 80089f8:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 80089fc:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8008a00:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8008a04:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008a08:	f3c5 0109 	ubfx	r1, r5, #0, #10
 8008a0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008a10:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008a14:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008a18:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 8008a1c:	4a20      	ldr	r2, [pc, #128]	@ (8008aa0 <D32_1CH_HTONS_VOL_HP+0x108>)
 8008a1e:	fb23 8802 	smlad	r8, r3, r2, r8
 8008a22:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008a26:	fb24 8102 	smlad	r1, r4, r2, r8
 8008a2a:	4a1e      	ldr	r2, [pc, #120]	@ (8008aa4 <D32_1CH_HTONS_VOL_HP+0x10c>)
 8008a2c:	fb23 9802 	smlad	r8, r3, r2, r9
 8008a30:	4a1d      	ldr	r2, [pc, #116]	@ (8008aa8 <D32_1CH_HTONS_VOL_HP+0x110>)
 8008a32:	fb24 8802 	smlad	r8, r4, r2, r8
 8008a36:	2201      	movs	r2, #1
 8008a38:	fb23 f302 	smuad	r3, r3, r2
 8008a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aac <D32_1CH_HTONS_VOL_HP+0x114>)
 8008a3e:	fb24 3902 	smlad	r9, r4, r2, r3
 8008a42:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8008a46:	19a2      	adds	r2, r4, r6
 8008a48:	1a12      	subs	r2, r2, r0
 8008a4a:	17d1      	asrs	r1, r2, #31
 8008a4c:	fba2 230a 	umull	r2, r3, r2, sl
 8008a50:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8008a54:	fb0a 3301 	mla	r3, sl, r1, r3
 8008a58:	f143 0100 	adc.w	r1, r3, #0
 8008a5c:	e9cd 0100 	strd	r0, r1, [sp]
 8008a60:	038a      	lsls	r2, r1, #14
 8008a62:	9b01      	ldr	r3, [sp, #4]
 8008a64:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8008a68:	2100      	movs	r1, #0
 8008a6a:	fbc7 0102 	smlal	r0, r1, r7, r2
 8008a6e:	108a      	asrs	r2, r1, #2
 8008a70:	005e      	lsls	r6, r3, #1
 8008a72:	f302 020f 	ssat	r2, #16, r2
 8008a76:	9b03      	ldr	r3, [sp, #12]
 8008a78:	f82e 2b02 	strh.w	r2, [lr], #2
 8008a7c:	459e      	cmp	lr, r3
 8008a7e:	4620      	mov	r0, r4
 8008a80:	d1a7      	bne.n	80089d2 <D32_1CH_HTONS_VOL_HP+0x3a>
 8008a82:	9a05      	ldr	r2, [sp, #20]
 8008a84:	464b      	mov	r3, r9
 8008a86:	e9c2 3802 	strd	r3, r8, [r2, #8]
 8008a8a:	9b04      	ldr	r3, [sp, #16]
 8008a8c:	61d5      	str	r5, [r2, #28]
 8008a8e:	2000      	movs	r0, #0
 8008a90:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8008a94:	6193      	str	r3, [r2, #24]
 8008a96:	b007      	add	sp, #28
 8008a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9c:	463c      	mov	r4, r7
 8008a9e:	e7f2      	b.n	8008a86 <D32_1CH_HTONS_VOL_HP+0xee>
 8008aa0:	00060003 	.word	0x00060003
 8008aa4:	000a000c 	.word	0x000a000c
 8008aa8:	000c000a 	.word	0x000c000a
 8008aac:	00030006 	.word	0x00030006
 8008ab0:	20000010 	.word	0x20000010

08008ab4 <D48_1CH_HTONS_VOL_HP>:
 8008ab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ab8:	b087      	sub	sp, #28
 8008aba:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 8008abc:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8008abe:	6993      	ldr	r3, [r2, #24]
 8008ac0:	9702      	str	r7, [sp, #8]
 8008ac2:	6a17      	ldr	r7, [r2, #32]
 8008ac4:	9304      	str	r3, [sp, #16]
 8008ac6:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 8008aca:	69d6      	ldr	r6, [r2, #28]
 8008acc:	9705      	str	r7, [sp, #20]
 8008ace:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8008ad2:	2d00      	cmp	r5, #0
 8008ad4:	f000 8093 	beq.w	8008bfe <D48_1CH_HTONS_VOL_HP+0x14a>
 8008ad8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008adc:	46ba      	mov	sl, r7
 8008ade:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8008ae2:	3902      	subs	r1, #2
 8008ae4:	4f47      	ldr	r7, [pc, #284]	@ (8008c04 <D48_1CH_HTONS_VOL_HP+0x150>)
 8008ae6:	9503      	str	r5, [sp, #12]
 8008ae8:	9101      	str	r1, [sp, #4]
 8008aea:	469e      	mov	lr, r3
 8008aec:	9205      	str	r2, [sp, #20]
 8008aee:	e9d0 3500 	ldrd	r3, r5, [r0]
 8008af2:	3006      	adds	r0, #6
 8008af4:	ba5b      	rev16	r3, r3
 8008af6:	ba6d      	rev16	r5, r5
 8008af8:	b2da      	uxtb	r2, r3
 8008afa:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8008afe:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8008b02:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8008b06:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8008b0a:	0e1b      	lsrs	r3, r3, #24
 8008b0c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8008b10:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8008b14:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8008b18:	fa5f fb85 	uxtb.w	fp, r5
 8008b1c:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8008b20:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8008b24:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8008b28:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 8008b2c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8008b30:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8008b34:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8008b38:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8008b3c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008b40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008b44:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8008b48:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008b4c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008b50:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008b54:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8008b58:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8008b5c:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 8008b60:	4b29      	ldr	r3, [pc, #164]	@ (8008c08 <D48_1CH_HTONS_VOL_HP+0x154>)
 8008b62:	fb22 c103 	smlad	r1, r2, r3, ip
 8008b66:	4b29      	ldr	r3, [pc, #164]	@ (8008c0c <D48_1CH_HTONS_VOL_HP+0x158>)
 8008b68:	fb28 1103 	smlad	r1, r8, r3, r1
 8008b6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008b70:	fb25 1103 	smlad	r1, r5, r3, r1
 8008b74:	4b26      	ldr	r3, [pc, #152]	@ (8008c10 <D48_1CH_HTONS_VOL_HP+0x15c>)
 8008b76:	fb22 ec03 	smlad	ip, r2, r3, lr
 8008b7a:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8008b7e:	fb28 cc03 	smlad	ip, r8, r3, ip
 8008b82:	4b24      	ldr	r3, [pc, #144]	@ (8008c14 <D48_1CH_HTONS_VOL_HP+0x160>)
 8008b84:	fb25 cc03 	smlad	ip, r5, r3, ip
 8008b88:	f04f 0e01 	mov.w	lr, #1
 8008b8c:	fb22 f20e 	smuad	r2, r2, lr
 8008b90:	4b21      	ldr	r3, [pc, #132]	@ (8008c18 <D48_1CH_HTONS_VOL_HP+0x164>)
 8008b92:	fb28 2803 	smlad	r8, r8, r3, r2
 8008b96:	4b21      	ldr	r3, [pc, #132]	@ (8008c1c <D48_1CH_HTONS_VOL_HP+0x168>)
 8008b98:	fb25 8e03 	smlad	lr, r5, r3, r8
 8008b9c:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 8008ba0:	190a      	adds	r2, r1, r4
 8008ba2:	eba2 0209 	sub.w	r2, r2, r9
 8008ba6:	17d5      	asrs	r5, r2, #31
 8008ba8:	fba2 230a 	umull	r2, r3, r2, sl
 8008bac:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8008bb0:	fb0a 3305 	mla	r3, sl, r5, r3
 8008bb4:	f143 0500 	adc.w	r5, r3, #0
 8008bb8:	9b02      	ldr	r3, [sp, #8]
 8008bba:	032a      	lsls	r2, r5, #12
 8008bbc:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008bc0:	f04f 0900 	mov.w	r9, #0
 8008bc4:	fbc3 8902 	smlal	r8, r9, r3, r2
 8008bc8:	9a01      	ldr	r2, [sp, #4]
 8008bca:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008bce:	f303 030f 	ssat	r3, #16, r3
 8008bd2:	f822 3f02 	strh.w	r3, [r2, #2]!
 8008bd6:	9b03      	ldr	r3, [sp, #12]
 8008bd8:	9201      	str	r2, [sp, #4]
 8008bda:	4283      	cmp	r3, r0
 8008bdc:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8008be0:	4689      	mov	r9, r1
 8008be2:	d184      	bne.n	8008aee <D48_1CH_HTONS_VOL_HP+0x3a>
 8008be4:	9a05      	ldr	r2, [sp, #20]
 8008be6:	4673      	mov	r3, lr
 8008be8:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 8008bec:	9b04      	ldr	r3, [sp, #16]
 8008bee:	61d6      	str	r6, [r2, #28]
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8008bf6:	6193      	str	r3, [r2, #24]
 8008bf8:	b007      	add	sp, #28
 8008bfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bfe:	4649      	mov	r1, r9
 8008c00:	e7f2      	b.n	8008be8 <D48_1CH_HTONS_VOL_HP+0x134>
 8008c02:	bf00      	nop
 8008c04:	20000010 	.word	0x20000010
 8008c08:	000f000a 	.word	0x000f000a
 8008c0c:	00060003 	.word	0x00060003
 8008c10:	00150019 	.word	0x00150019
 8008c14:	00190015 	.word	0x00190015
 8008c18:	00030006 	.word	0x00030006
 8008c1c:	000a000f 	.word	0x000a000f

08008c20 <D64_1CH_HTONS_VOL_HP>:
 8008c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c24:	b087      	sub	sp, #28
 8008c26:	6913      	ldr	r3, [r2, #16]
 8008c28:	9300      	str	r3, [sp, #0]
 8008c2a:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8008c2e:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8008c30:	9601      	str	r6, [sp, #4]
 8008c32:	4681      	mov	r9, r0
 8008c34:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8008c36:	6a16      	ldr	r6, [r2, #32]
 8008c38:	9304      	str	r3, [sp, #16]
 8008c3a:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8008c3e:	69d3      	ldr	r3, [r2, #28]
 8008c40:	9602      	str	r6, [sp, #8]
 8008c42:	2800      	cmp	r0, #0
 8008c44:	f000 809d 	beq.w	8008d82 <D64_1CH_HTONS_VOL_HP+0x162>
 8008c48:	468e      	mov	lr, r1
 8008c4a:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8008dbc <D64_1CH_HTONS_VOL_HP+0x19c>
 8008c4e:	9205      	str	r2, [sp, #20]
 8008c50:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8008c54:	9103      	str	r1, [sp, #12]
 8008c56:	4622      	mov	r2, r4
 8008c58:	4619      	mov	r1, r3
 8008c5a:	f859 3b08 	ldr.w	r3, [r9], #8
 8008c5e:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8008c62:	ba5b      	rev16	r3, r3
 8008c64:	ba76      	rev16	r6, r6
 8008c66:	b2dc      	uxtb	r4, r3
 8008c68:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8008c6c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008c70:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8008c74:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8008c78:	0e1b      	lsrs	r3, r3, #24
 8008c7a:	eb01 0b07 	add.w	fp, r1, r7
 8008c7e:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8008c82:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8008c86:	b2f1      	uxtb	r1, r6
 8008c88:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8008c8c:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008c90:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8008c94:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8008c98:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8008c9c:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8008ca0:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8008ca4:	0e36      	lsrs	r6, r6, #24
 8008ca6:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 8008caa:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008cae:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8008cb2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8008cb6:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8008cba:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8008cbe:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008cc2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008cc6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8008cce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008cd2:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8008cd6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008cda:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8008cde:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008ce2:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8008ce6:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8008cea:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8008cee:	4b2b      	ldr	r3, [pc, #172]	@ (8008d9c <D64_1CH_HTONS_VOL_HP+0x17c>)
 8008cf0:	0ab1      	lsrs	r1, r6, #10
 8008cf2:	fb2b 8803 	smlad	r8, fp, r3, r8
 8008cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8008da0 <D64_1CH_HTONS_VOL_HP+0x180>)
 8008cf8:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008cfc:	4b29      	ldr	r3, [pc, #164]	@ (8008da4 <D64_1CH_HTONS_VOL_HP+0x184>)
 8008cfe:	fb27 8803 	smlad	r8, r7, r3, r8
 8008d02:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8008d06:	fb20 8604 	smlad	r6, r0, r4, r8
 8008d0a:	4b27      	ldr	r3, [pc, #156]	@ (8008da8 <D64_1CH_HTONS_VOL_HP+0x188>)
 8008d0c:	fb2b 5803 	smlad	r8, fp, r3, r5
 8008d10:	fb20 8813 	smladx	r8, r0, r3, r8
 8008d14:	4b25      	ldr	r3, [pc, #148]	@ (8008dac <D64_1CH_HTONS_VOL_HP+0x18c>)
 8008d16:	fb2a 8803 	smlad	r8, sl, r3, r8
 8008d1a:	fb27 8813 	smladx	r8, r7, r3, r8
 8008d1e:	2401      	movs	r4, #1
 8008d20:	fb2b fb04 	smuad	fp, fp, r4
 8008d24:	4b22      	ldr	r3, [pc, #136]	@ (8008db0 <D64_1CH_HTONS_VOL_HP+0x190>)
 8008d26:	fb2a ba03 	smlad	sl, sl, r3, fp
 8008d2a:	4b22      	ldr	r3, [pc, #136]	@ (8008db4 <D64_1CH_HTONS_VOL_HP+0x194>)
 8008d2c:	fb27 a703 	smlad	r7, r7, r3, sl
 8008d30:	4b21      	ldr	r3, [pc, #132]	@ (8008db8 <D64_1CH_HTONS_VOL_HP+0x198>)
 8008d32:	fb20 7503 	smlad	r5, r0, r3, r7
 8008d36:	9b00      	ldr	r3, [sp, #0]
 8008d38:	9802      	ldr	r0, [sp, #8]
 8008d3a:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8008d3e:	4423      	add	r3, r4
 8008d40:	1a9a      	subs	r2, r3, r2
 8008d42:	17d7      	asrs	r7, r2, #31
 8008d44:	fba2 2300 	umull	r2, r3, r2, r0
 8008d48:	fb00 3307 	mla	r3, r0, r7, r3
 8008d4c:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8008d50:	f143 0b00 	adc.w	fp, r3, #0
 8008d54:	9b01      	ldr	r3, [sp, #4]
 8008d56:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8008d5a:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8008d5e:	2700      	movs	r7, #0
 8008d60:	fbc3 6702 	smlal	r6, r7, r3, r2
 8008d64:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8008d68:	10ba      	asrs	r2, r7, #2
 8008d6a:	9300      	str	r3, [sp, #0]
 8008d6c:	f302 020f 	ssat	r2, #16, r2
 8008d70:	9b03      	ldr	r3, [sp, #12]
 8008d72:	f82e 2b02 	strh.w	r2, [lr], #2
 8008d76:	459e      	cmp	lr, r3
 8008d78:	4622      	mov	r2, r4
 8008d7a:	f47f af6e 	bne.w	8008c5a <D64_1CH_HTONS_VOL_HP+0x3a>
 8008d7e:	9a05      	ldr	r2, [sp, #20]
 8008d80:	460b      	mov	r3, r1
 8008d82:	61d3      	str	r3, [r2, #28]
 8008d84:	9b00      	ldr	r3, [sp, #0]
 8008d86:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8008d8a:	9b04      	ldr	r3, [sp, #16]
 8008d8c:	6193      	str	r3, [r2, #24]
 8008d8e:	2000      	movs	r0, #0
 8008d90:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8008d94:	b007      	add	sp, #28
 8008d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d9a:	bf00      	nop
 8008d9c:	001c0015 	.word	0x001c0015
 8008da0:	000f000a 	.word	0x000f000a
 8008da4:	00060003 	.word	0x00060003
 8008da8:	0024002a 	.word	0x0024002a
 8008dac:	002e0030 	.word	0x002e0030
 8008db0:	00030006 	.word	0x00030006
 8008db4:	000a000f 	.word	0x000a000f
 8008db8:	0015001c 	.word	0x0015001c
 8008dbc:	20000010 	.word	0x20000010

08008dc0 <D80_1CH_HTONS_VOL_HP>:
 8008dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	b089      	sub	sp, #36	@ 0x24
 8008dc8:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 8008dcc:	692b      	ldr	r3, [r5, #16]
 8008dce:	9301      	str	r3, [sp, #4]
 8008dd0:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8008dd4:	9400      	str	r4, [sp, #0]
 8008dd6:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8008dd8:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8008dda:	9403      	str	r4, [sp, #12]
 8008ddc:	6a2c      	ldr	r4, [r5, #32]
 8008dde:	9306      	str	r3, [sp, #24]
 8008de0:	9404      	str	r4, [sp, #16]
 8008de2:	69eb      	ldr	r3, [r5, #28]
 8008de4:	2a00      	cmp	r2, #0
 8008de6:	f000 80d3 	beq.w	8008f90 <D80_1CH_HTONS_VOL_HP+0x1d0>
 8008dea:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8008dee:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8008df2:	9205      	str	r2, [sp, #20]
 8008df4:	4c67      	ldr	r4, [pc, #412]	@ (8008f94 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8008df6:	9507      	str	r5, [sp, #28]
 8008df8:	1e8a      	subs	r2, r1, #2
 8008dfa:	9202      	str	r2, [sp, #8]
 8008dfc:	469b      	mov	fp, r3
 8008dfe:	6807      	ldr	r7, [r0, #0]
 8008e00:	6842      	ldr	r2, [r0, #4]
 8008e02:	6883      	ldr	r3, [r0, #8]
 8008e04:	300a      	adds	r0, #10
 8008e06:	ba7f      	rev16	r7, r7
 8008e08:	ba52      	rev16	r2, r2
 8008e0a:	ba5b      	rev16	r3, r3
 8008e0c:	b2fd      	uxtb	r5, r7
 8008e0e:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8008e12:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8008e16:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8008e1a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8008e1e:	44f3      	add	fp, lr
 8008e20:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008e24:	0e3f      	lsrs	r7, r7, #24
 8008e26:	fa5f fe82 	uxtb.w	lr, r2
 8008e2a:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8008e2e:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8008e32:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8008e36:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8008e3a:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8008e3e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8008e42:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8008e46:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8008e4a:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8008e4e:	0e12      	lsrs	r2, r2, #24
 8008e50:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8008e54:	fa5f fe83 	uxtb.w	lr, r3
 8008e58:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8008e5c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008e60:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8008e64:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8008e68:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8008e6c:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8008e70:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8008e74:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8008e78:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8008e7c:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8008e80:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8008e84:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8008e88:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008e8c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008e90:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8008e94:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008e98:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8008e9c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008ea0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008ea4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008ea8:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8008eac:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8008eb0:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8008eb4:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8008eb8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8008ebc:	4b36      	ldr	r3, [pc, #216]	@ (8008f98 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8008ebe:	9a00      	ldr	r2, [sp, #0]
 8008ec0:	fb21 2303 	smlad	r3, r1, r3, r2
 8008ec4:	4a35      	ldr	r2, [pc, #212]	@ (8008f9c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8008ec6:	fb27 3302 	smlad	r3, r7, r2, r3
 8008eca:	4a35      	ldr	r2, [pc, #212]	@ (8008fa0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8008ecc:	fb25 3302 	smlad	r3, r5, r2, r3
 8008ed0:	4a34      	ldr	r2, [pc, #208]	@ (8008fa4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8008ed2:	fb28 3302 	smlad	r3, r8, r2, r3
 8008ed6:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008eda:	fb2e 3302 	smlad	r3, lr, r2, r3
 8008ede:	4a32      	ldr	r2, [pc, #200]	@ (8008fa8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8008ee0:	fb21 cc02 	smlad	ip, r1, r2, ip
 8008ee4:	4a31      	ldr	r2, [pc, #196]	@ (8008fac <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8008ee6:	fb27 cc02 	smlad	ip, r7, r2, ip
 8008eea:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8008eee:	fb25 c909 	smlad	r9, r5, r9, ip
 8008ef2:	4a2f      	ldr	r2, [pc, #188]	@ (8008fb0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8008ef4:	fb28 9902 	smlad	r9, r8, r2, r9
 8008ef8:	4a2e      	ldr	r2, [pc, #184]	@ (8008fb4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8008efa:	fb2e 9202 	smlad	r2, lr, r2, r9
 8008efe:	f04f 0a01 	mov.w	sl, #1
 8008f02:	9200      	str	r2, [sp, #0]
 8008f04:	fb21 fa0a 	smuad	sl, r1, sl
 8008f08:	4a2b      	ldr	r2, [pc, #172]	@ (8008fb8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8008f0a:	fb27 a702 	smlad	r7, r7, r2, sl
 8008f0e:	4a2b      	ldr	r2, [pc, #172]	@ (8008fbc <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8008f10:	fb25 7702 	smlad	r7, r5, r2, r7
 8008f14:	4a2a      	ldr	r2, [pc, #168]	@ (8008fc0 <D80_1CH_HTONS_VOL_HP+0x200>)
 8008f16:	fb28 7202 	smlad	r2, r8, r2, r7
 8008f1a:	4d2a      	ldr	r5, [pc, #168]	@ (8008fc4 <D80_1CH_HTONS_VOL_HP+0x204>)
 8008f1c:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8008f20:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8008f24:	9b01      	ldr	r3, [sp, #4]
 8008f26:	9903      	ldr	r1, [sp, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	1b9e      	subs	r6, r3, r6
 8008f2c:	9b04      	ldr	r3, [sp, #16]
 8008f2e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8008f32:	fba6 5603 	umull	r5, r6, r6, r3
 8008f36:	fb03 6309 	mla	r3, r3, r9, r6
 8008f3a:	462e      	mov	r6, r5
 8008f3c:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8008f40:	f143 0700 	adc.w	r7, r3, #0
 8008f44:	02bb      	lsls	r3, r7, #10
 8008f46:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008f4a:	f04f 0900 	mov.w	r9, #0
 8008f4e:	fbc1 8903 	smlal	r8, r9, r1, r3
 8008f52:	9902      	ldr	r1, [sp, #8]
 8008f54:	007b      	lsls	r3, r7, #1
 8008f56:	9301      	str	r3, [sp, #4]
 8008f58:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8008f5c:	f303 030f 	ssat	r3, #16, r3
 8008f60:	f821 3f02 	strh.w	r3, [r1, #2]!
 8008f64:	9b05      	ldr	r3, [sp, #20]
 8008f66:	9102      	str	r1, [sp, #8]
 8008f68:	4283      	cmp	r3, r0
 8008f6a:	4616      	mov	r6, r2
 8008f6c:	f47f af47 	bne.w	8008dfe <D80_1CH_HTONS_VOL_HP+0x3e>
 8008f70:	9d07      	ldr	r5, [sp, #28]
 8008f72:	465b      	mov	r3, fp
 8008f74:	61eb      	str	r3, [r5, #28]
 8008f76:	9b01      	ldr	r3, [sp, #4]
 8008f78:	9900      	ldr	r1, [sp, #0]
 8008f7a:	f8c5 c008 	str.w	ip, [r5, #8]
 8008f7e:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8008f82:	9b06      	ldr	r3, [sp, #24]
 8008f84:	60e9      	str	r1, [r5, #12]
 8008f86:	2000      	movs	r0, #0
 8008f88:	61ab      	str	r3, [r5, #24]
 8008f8a:	b009      	add	sp, #36	@ 0x24
 8008f8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f90:	4632      	mov	r2, r6
 8008f92:	e7ef      	b.n	8008f74 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8008f94:	20000010 	.word	0x20000010
 8008f98:	002d0024 	.word	0x002d0024
 8008f9c:	001c0015 	.word	0x001c0015
 8008fa0:	000f000a 	.word	0x000f000a
 8008fa4:	00060003 	.word	0x00060003
 8008fa8:	0037003f 	.word	0x0037003f
 8008fac:	00450049 	.word	0x00450049
 8008fb0:	00490045 	.word	0x00490045
 8008fb4:	003f0037 	.word	0x003f0037
 8008fb8:	00030006 	.word	0x00030006
 8008fbc:	000a000f 	.word	0x000a000f
 8008fc0:	0015001c 	.word	0x0015001c
 8008fc4:	0024002d 	.word	0x0024002d

08008fc8 <D128_1CH_HTONS_VOL_HP>:
 8008fc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fcc:	b093      	sub	sp, #76	@ 0x4c
 8008fce:	6914      	ldr	r4, [r2, #16]
 8008fd0:	9404      	str	r4, [sp, #16]
 8008fd2:	6954      	ldr	r4, [r2, #20]
 8008fd4:	9406      	str	r4, [sp, #24]
 8008fd6:	6994      	ldr	r4, [r2, #24]
 8008fd8:	9410      	str	r4, [sp, #64]	@ 0x40
 8008fda:	6894      	ldr	r4, [r2, #8]
 8008fdc:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008fde:	9403      	str	r4, [sp, #12]
 8008fe0:	68d4      	ldr	r4, [r2, #12]
 8008fe2:	9211      	str	r2, [sp, #68]	@ 0x44
 8008fe4:	69d6      	ldr	r6, [r2, #28]
 8008fe6:	9402      	str	r4, [sp, #8]
 8008fe8:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008fea:	6a12      	ldr	r2, [r2, #32]
 8008fec:	940d      	str	r4, [sp, #52]	@ 0x34
 8008fee:	920e      	str	r2, [sp, #56]	@ 0x38
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	f000 814a 	beq.w	800928a <D128_1CH_HTONS_VOL_HP+0x2c2>
 8008ff6:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8008ffa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008ffc:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 80092c8 <D128_1CH_HTONS_VOL_HP+0x300>
 8009000:	9107      	str	r1, [sp, #28]
 8009002:	f100 0310 	add.w	r3, r0, #16
 8009006:	469b      	mov	fp, r3
 8009008:	9605      	str	r6, [sp, #20]
 800900a:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 800900e:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 8009012:	ba49      	rev16	r1, r1
 8009014:	ba52      	rev16	r2, r2
 8009016:	ba5b      	rev16	r3, r3
 8009018:	fa90 fa90 	rev16.w	sl, r0
 800901c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8009020:	b2cc      	uxtb	r4, r1
 8009022:	9e05      	ldr	r6, [sp, #20]
 8009024:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009028:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800902c:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8009030:	0e09      	lsrs	r1, r1, #24
 8009032:	4426      	add	r6, r4
 8009034:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8009038:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800903c:	b2d0      	uxtb	r0, r2
 800903e:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8009042:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009046:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 800904a:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800904e:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8009052:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009056:	0e12      	lsrs	r2, r2, #24
 8009058:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800905c:	9401      	str	r4, [sp, #4]
 800905e:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 8009062:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8009066:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800906a:	9705      	str	r7, [sp, #20]
 800906c:	b2da      	uxtb	r2, r3
 800906e:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8009072:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8009076:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800907a:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800907e:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8009082:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009086:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800908a:	0e1b      	lsrs	r3, r3, #24
 800908c:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8009090:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8009094:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8009098:	fa5f f38a 	uxtb.w	r3, sl
 800909c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80090a0:	960a      	str	r6, [sp, #40]	@ 0x28
 80090a2:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 80090a6:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 80090aa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80090ae:	f3ca 2307 	ubfx	r3, sl, #8, #8
 80090b2:	950b      	str	r5, [sp, #44]	@ 0x2c
 80090b4:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 80090b8:	f3ca 4507 	ubfx	r5, sl, #16, #8
 80090bc:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 80090c0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80090c4:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 80090c8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 80090cc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 80090d0:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 80090d4:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 80090d8:	9308      	str	r3, [sp, #32]
 80090da:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80090de:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 80090e2:	920c      	str	r2, [sp, #48]	@ 0x30
 80090e4:	9b01      	ldr	r3, [sp, #4]
 80090e6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80090e8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80090ec:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80090f0:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 80090f4:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80090f8:	9b05      	ldr	r3, [sp, #20]
 80090fa:	f8cd 9014 	str.w	r9, [sp, #20]
 80090fe:	4691      	mov	r9, r2
 8009100:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009102:	f8cd a004 	str.w	sl, [sp, #4]
 8009106:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 800910a:	9a01      	ldr	r2, [sp, #4]
 800910c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009110:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8009114:	9b08      	ldr	r3, [sp, #32]
 8009116:	9a05      	ldr	r2, [sp, #20]
 8009118:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800911c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009120:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009122:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009126:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800912a:	9201      	str	r2, [sp, #4]
 800912c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800912e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009132:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009136:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800913a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800913e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009142:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009146:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800914a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800914e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009152:	0a92      	lsrs	r2, r2, #10
 8009154:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8009158:	9205      	str	r2, [sp, #20]
 800915a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800915e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009162:	4d4b      	ldr	r5, [pc, #300]	@ (8009290 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009164:	9a02      	ldr	r2, [sp, #8]
 8009166:	fb29 2505 	smlad	r5, r9, r5, r2
 800916a:	4a4a      	ldr	r2, [pc, #296]	@ (8009294 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800916c:	fb2a 5502 	smlad	r5, sl, r2, r5
 8009170:	4a49      	ldr	r2, [pc, #292]	@ (8009298 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8009172:	fb21 5502 	smlad	r5, r1, r2, r5
 8009176:	4a49      	ldr	r2, [pc, #292]	@ (800929c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8009178:	fb24 5502 	smlad	r5, r4, r2, r5
 800917c:	4a48      	ldr	r2, [pc, #288]	@ (80092a0 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800917e:	9e01      	ldr	r6, [sp, #4]
 8009180:	fb26 5502 	smlad	r5, r6, r2, r5
 8009184:	4a47      	ldr	r2, [pc, #284]	@ (80092a4 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8009186:	fb20 5502 	smlad	r5, r0, r2, r5
 800918a:	4a47      	ldr	r2, [pc, #284]	@ (80092a8 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800918c:	fb23 5502 	smlad	r5, r3, r2, r5
 8009190:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8009194:	fb27 520c 	smlad	r2, r7, ip, r5
 8009198:	4616      	mov	r6, r2
 800919a:	9d03      	ldr	r5, [sp, #12]
 800919c:	4a43      	ldr	r2, [pc, #268]	@ (80092ac <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800919e:	fb29 5c02 	smlad	ip, r9, r2, r5
 80091a2:	4a43      	ldr	r2, [pc, #268]	@ (80092b0 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 80091a4:	fb2a ce02 	smlad	lr, sl, r2, ip
 80091a8:	f8df c120 	ldr.w	ip, [pc, #288]	@ 80092cc <D128_1CH_HTONS_VOL_HP+0x304>
 80091ac:	fb21 ec0c 	smlad	ip, r1, ip, lr
 80091b0:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 80092d0 <D128_1CH_HTONS_VOL_HP+0x308>
 80091b4:	fb24 cc0e 	smlad	ip, r4, lr, ip
 80091b8:	f8df e118 	ldr.w	lr, [pc, #280]	@ 80092d4 <D128_1CH_HTONS_VOL_HP+0x30c>
 80091bc:	9d01      	ldr	r5, [sp, #4]
 80091be:	fb25 ce0e 	smlad	lr, r5, lr, ip
 80091c2:	f8df c114 	ldr.w	ip, [pc, #276]	@ 80092d8 <D128_1CH_HTONS_VOL_HP+0x310>
 80091c6:	fb20 ee0c 	smlad	lr, r0, ip, lr
 80091ca:	f8df c110 	ldr.w	ip, [pc, #272]	@ 80092dc <D128_1CH_HTONS_VOL_HP+0x314>
 80091ce:	fb23 ec0c 	smlad	ip, r3, ip, lr
 80091d2:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 80092e0 <D128_1CH_HTONS_VOL_HP+0x318>
 80091d6:	fb27 c20e 	smlad	r2, r7, lr, ip
 80091da:	f04f 0c01 	mov.w	ip, #1
 80091de:	9202      	str	r2, [sp, #8]
 80091e0:	fb29 fc0c 	smuad	ip, r9, ip
 80091e4:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 80092e4 <D128_1CH_HTONS_VOL_HP+0x31c>
 80091e8:	fb2a ca09 	smlad	sl, sl, r9, ip
 80091ec:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 80092e8 <D128_1CH_HTONS_VOL_HP+0x320>
 80091f0:	fb21 a909 	smlad	r9, r1, r9, sl
 80091f4:	492f      	ldr	r1, [pc, #188]	@ (80092b4 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 80091f6:	fb24 9901 	smlad	r9, r4, r1, r9
 80091fa:	492f      	ldr	r1, [pc, #188]	@ (80092b8 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 80091fc:	fb25 9901 	smlad	r9, r5, r1, r9
 8009200:	492e      	ldr	r1, [pc, #184]	@ (80092bc <D128_1CH_HTONS_VOL_HP+0x2f4>)
 8009202:	fb20 9901 	smlad	r9, r0, r1, r9
 8009206:	492e      	ldr	r1, [pc, #184]	@ (80092c0 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 8009208:	fb23 9301 	smlad	r3, r3, r1, r9
 800920c:	482d      	ldr	r0, [pc, #180]	@ (80092c4 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800920e:	fb27 3300 	smlad	r3, r7, r0, r3
 8009212:	9303      	str	r3, [sp, #12]
 8009214:	9b04      	ldr	r3, [sp, #16]
 8009216:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8009218:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 800921c:	442b      	add	r3, r5
 800921e:	461a      	mov	r2, r3
 8009220:	9b06      	ldr	r3, [sp, #24]
 8009222:	9506      	str	r5, [sp, #24]
 8009224:	1ad2      	subs	r2, r2, r3
 8009226:	17d1      	asrs	r1, r2, #31
 8009228:	fba2 2304 	umull	r2, r3, r2, r4
 800922c:	fb04 3301 	mla	r3, r4, r1, r3
 8009230:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 8009234:	f143 0a00 	adc.w	sl, r3, #0
 8009238:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800923a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800923e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009242:	2100      	movs	r1, #0
 8009244:	fbc3 0102 	smlal	r0, r1, r3, r2
 8009248:	9b07      	ldr	r3, [sp, #28]
 800924a:	108a      	asrs	r2, r1, #2
 800924c:	f302 020f 	ssat	r2, #16, r2
 8009250:	f823 2b02 	strh.w	r2, [r3], #2
 8009254:	ea4f 024a 	mov.w	r2, sl, lsl #1
 8009258:	9204      	str	r2, [sp, #16]
 800925a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800925c:	9307      	str	r3, [sp, #28]
 800925e:	4293      	cmp	r3, r2
 8009260:	f10b 0b10 	add.w	fp, fp, #16
 8009264:	f47f aed1 	bne.w	800900a <D128_1CH_HTONS_VOL_HP+0x42>
 8009268:	9e05      	ldr	r6, [sp, #20]
 800926a:	4629      	mov	r1, r5
 800926c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800926e:	9803      	ldr	r0, [sp, #12]
 8009270:	6098      	str	r0, [r3, #8]
 8009272:	9802      	ldr	r0, [sp, #8]
 8009274:	60d8      	str	r0, [r3, #12]
 8009276:	9804      	ldr	r0, [sp, #16]
 8009278:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800927a:	61de      	str	r6, [r3, #28]
 800927c:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009280:	2000      	movs	r0, #0
 8009282:	619a      	str	r2, [r3, #24]
 8009284:	b013      	add	sp, #76	@ 0x4c
 8009286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800928a:	9906      	ldr	r1, [sp, #24]
 800928c:	e7ee      	b.n	800926c <D128_1CH_HTONS_VOL_HP+0x2a4>
 800928e:	bf00      	nop
 8009290:	00780069 	.word	0x00780069
 8009294:	005b004e 	.word	0x005b004e
 8009298:	00420037 	.word	0x00420037
 800929c:	002d0024 	.word	0x002d0024
 80092a0:	001c0015 	.word	0x001c0015
 80092a4:	000f000a 	.word	0x000f000a
 80092a8:	00060003 	.word	0x00060003
 80092ac:	00880096 	.word	0x00880096
 80092b0:	00a200ac 	.word	0x00a200ac
 80092b4:	0015001c 	.word	0x0015001c
 80092b8:	0024002d 	.word	0x0024002d
 80092bc:	00370042 	.word	0x00370042
 80092c0:	004e005b 	.word	0x004e005b
 80092c4:	00690078 	.word	0x00690078
 80092c8:	20000010 	.word	0x20000010
 80092cc:	00b400ba 	.word	0x00b400ba
 80092d0:	00be00c0 	.word	0x00be00c0
 80092d4:	00c000be 	.word	0x00c000be
 80092d8:	00ba00b4 	.word	0x00ba00b4
 80092dc:	00ac00a2 	.word	0x00ac00a2
 80092e0:	00960088 	.word	0x00960088
 80092e4:	00030006 	.word	0x00030006
 80092e8:	000a000f 	.word	0x000a000f

080092ec <PDM_Filter_Init>:
 80092ec:	4a59      	ldr	r2, [pc, #356]	@ (8009454 <PDM_Filter_Init+0x168>)
 80092ee:	495a      	ldr	r1, [pc, #360]	@ (8009458 <PDM_Filter_Init+0x16c>)
 80092f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80092f2:	6813      	ldr	r3, [r2, #0]
 80092f4:	f023 0301 	bic.w	r3, r3, #1
 80092f8:	6013      	str	r3, [r2, #0]
 80092fa:	680b      	ldr	r3, [r1, #0]
 80092fc:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8009300:	4013      	ands	r3, r2
 8009302:	f24c 2540 	movw	r5, #49728	@ 0xc240
 8009306:	42ab      	cmp	r3, r5
 8009308:	4604      	mov	r4, r0
 800930a:	d044      	beq.n	8009396 <PDM_Filter_Init+0xaa>
 800930c:	680b      	ldr	r3, [r1, #0]
 800930e:	f24c 2170 	movw	r1, #49776	@ 0xc270
 8009312:	401a      	ands	r2, r3
 8009314:	428a      	cmp	r2, r1
 8009316:	d03e      	beq.n	8009396 <PDM_Filter_Init+0xaa>
 8009318:	4b50      	ldr	r3, [pc, #320]	@ (800945c <PDM_Filter_Init+0x170>)
 800931a:	2201      	movs	r2, #1
 800931c:	601a      	str	r2, [r3, #0]
 800931e:	6819      	ldr	r1, [r3, #0]
 8009320:	2900      	cmp	r1, #0
 8009322:	d1fc      	bne.n	800931e <PDM_Filter_Init+0x32>
 8009324:	4b4e      	ldr	r3, [pc, #312]	@ (8009460 <PDM_Filter_Init+0x174>)
 8009326:	4a4f      	ldr	r2, [pc, #316]	@ (8009464 <PDM_Filter_Init+0x178>)
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	681a      	ldr	r2, [r3, #0]
 800932c:	4b4e      	ldr	r3, [pc, #312]	@ (8009468 <PDM_Filter_Init+0x17c>)
 800932e:	429a      	cmp	r2, r3
 8009330:	f104 000c 	add.w	r0, r4, #12
 8009334:	f04f 0240 	mov.w	r2, #64	@ 0x40
 8009338:	d047      	beq.n	80093ca <PDM_Filter_Init+0xde>
 800933a:	f000 faeb 	bl	8009914 <memset>
 800933e:	2300      	movs	r3, #0
 8009340:	6463      	str	r3, [r4, #68]	@ 0x44
 8009342:	8820      	ldrh	r0, [r4, #0]
 8009344:	8963      	ldrh	r3, [r4, #10]
 8009346:	8922      	ldrh	r2, [r4, #8]
 8009348:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800934a:	2801      	cmp	r0, #1
 800934c:	f04f 0300 	mov.w	r3, #0
 8009350:	61a3      	str	r3, [r4, #24]
 8009352:	e9c4 3304 	strd	r3, r3, [r4, #16]
 8009356:	60e3      	str	r3, [r4, #12]
 8009358:	6263      	str	r3, [r4, #36]	@ 0x24
 800935a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800935e:	6423      	str	r3, [r4, #64]	@ 0x40
 8009360:	86e2      	strh	r2, [r4, #54]	@ 0x36
 8009362:	d93a      	bls.n	80093da <PDM_Filter_Init+0xee>
 8009364:	2003      	movs	r0, #3
 8009366:	2302      	movs	r3, #2
 8009368:	8862      	ldrh	r2, [r4, #2]
 800936a:	2a01      	cmp	r2, #1
 800936c:	d932      	bls.n	80093d4 <PDM_Filter_Init+0xe8>
 800936e:	2140      	movs	r1, #64	@ 0x40
 8009370:	2300      	movs	r3, #0
 8009372:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009374:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8009378:	6862      	ldr	r2, [r4, #4]
 800937a:	bf04      	itt	eq
 800937c:	6421      	streq	r1, [r4, #64]	@ 0x40
 800937e:	460b      	moveq	r3, r1
 8009380:	b11a      	cbz	r2, 800938a <PDM_Filter_Init+0x9e>
 8009382:	f043 0310 	orr.w	r3, r3, #16
 8009386:	6423      	str	r3, [r4, #64]	@ 0x40
 8009388:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800938a:	2200      	movs	r2, #0
 800938c:	8722      	strh	r2, [r4, #56]	@ 0x38
 800938e:	b908      	cbnz	r0, 8009394 <PDM_Filter_Init+0xa8>
 8009390:	3380      	adds	r3, #128	@ 0x80
 8009392:	6423      	str	r3, [r4, #64]	@ 0x40
 8009394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009396:	4b35      	ldr	r3, [pc, #212]	@ (800946c <PDM_Filter_Init+0x180>)
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d1bc      	bne.n	8009318 <PDM_Filter_Init+0x2c>
 800939e:	4a34      	ldr	r2, [pc, #208]	@ (8009470 <PDM_Filter_Init+0x184>)
 80093a0:	6813      	ldr	r3, [r2, #0]
 80093a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093a6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80093aa:	d006      	beq.n	80093ba <PDM_Filter_Init+0xce>
 80093ac:	6813      	ldr	r3, [r2, #0]
 80093ae:	f240 4283 	movw	r2, #1155	@ 0x483
 80093b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d1ae      	bne.n	8009318 <PDM_Filter_Init+0x2c>
 80093ba:	4b2e      	ldr	r3, [pc, #184]	@ (8009474 <PDM_Filter_Init+0x188>)
 80093bc:	2201      	movs	r2, #1
 80093be:	601a      	str	r2, [r3, #0]
 80093c0:	6819      	ldr	r1, [r3, #0]
 80093c2:	2900      	cmp	r1, #0
 80093c4:	d1fc      	bne.n	80093c0 <PDM_Filter_Init+0xd4>
 80093c6:	4b2c      	ldr	r3, [pc, #176]	@ (8009478 <PDM_Filter_Init+0x18c>)
 80093c8:	e7ad      	b.n	8009326 <PDM_Filter_Init+0x3a>
 80093ca:	f000 faa3 	bl	8009914 <memset>
 80093ce:	4b26      	ldr	r3, [pc, #152]	@ (8009468 <PDM_Filter_Init+0x17c>)
 80093d0:	6463      	str	r3, [r4, #68]	@ 0x44
 80093d2:	e7b6      	b.n	8009342 <PDM_Filter_Init+0x56>
 80093d4:	d038      	beq.n	8009448 <PDM_Filter_Init+0x15c>
 80093d6:	4618      	mov	r0, r3
 80093d8:	e7c9      	b.n	800936e <PDM_Filter_Init+0x82>
 80093da:	4d28      	ldr	r5, [pc, #160]	@ (800947c <PDM_Filter_Init+0x190>)
 80093dc:	782a      	ldrb	r2, [r5, #0]
 80093de:	d01a      	beq.n	8009416 <PDM_Filter_Init+0x12a>
 80093e0:	2a01      	cmp	r2, #1
 80093e2:	d001      	beq.n	80093e8 <PDM_Filter_Init+0xfc>
 80093e4:	2001      	movs	r0, #1
 80093e6:	e7bf      	b.n	8009368 <PDM_Filter_Init+0x7c>
 80093e8:	4925      	ldr	r1, [pc, #148]	@ (8009480 <PDM_Filter_Init+0x194>)
 80093ea:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 8009488 <PDM_Filter_Init+0x19c>
 80093ee:	4f25      	ldr	r7, [pc, #148]	@ (8009484 <PDM_Filter_Init+0x198>)
 80093f0:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 80093f4:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80093f8:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 80093fc:	ea02 0007 	and.w	r0, r2, r7
 8009400:	4303      	orrs	r3, r0
 8009402:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009406:	4413      	add	r3, r2
 8009408:	428e      	cmp	r6, r1
 800940a:	600b      	str	r3, [r1, #0]
 800940c:	d1f2      	bne.n	80093f4 <PDM_Filter_Init+0x108>
 800940e:	2300      	movs	r3, #0
 8009410:	702b      	strb	r3, [r5, #0]
 8009412:	2001      	movs	r0, #1
 8009414:	e7a8      	b.n	8009368 <PDM_Filter_Init+0x7c>
 8009416:	2a00      	cmp	r2, #0
 8009418:	d1a6      	bne.n	8009368 <PDM_Filter_Init+0x7c>
 800941a:	4919      	ldr	r1, [pc, #100]	@ (8009480 <PDM_Filter_Init+0x194>)
 800941c:	f8df c068 	ldr.w	ip, [pc, #104]	@ 8009488 <PDM_Filter_Init+0x19c>
 8009420:	4f18      	ldr	r7, [pc, #96]	@ (8009484 <PDM_Filter_Init+0x198>)
 8009422:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 8009426:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800942a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800942e:	ea02 0007 	and.w	r0, r2, r7
 8009432:	4303      	orrs	r3, r0
 8009434:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8009438:	4413      	add	r3, r2
 800943a:	428e      	cmp	r6, r1
 800943c:	600b      	str	r3, [r1, #0]
 800943e:	d1f2      	bne.n	8009426 <PDM_Filter_Init+0x13a>
 8009440:	2001      	movs	r0, #1
 8009442:	7028      	strb	r0, [r5, #0]
 8009444:	2300      	movs	r3, #0
 8009446:	e78f      	b.n	8009368 <PDM_Filter_Init+0x7c>
 8009448:	2220      	movs	r2, #32
 800944a:	4618      	mov	r0, r3
 800944c:	6422      	str	r2, [r4, #64]	@ 0x40
 800944e:	4613      	mov	r3, r2
 8009450:	2160      	movs	r1, #96	@ 0x60
 8009452:	e78e      	b.n	8009372 <PDM_Filter_Init+0x86>
 8009454:	e0002000 	.word	0xe0002000
 8009458:	e000ed00 	.word	0xe000ed00
 800945c:	40023008 	.word	0x40023008
 8009460:	40023000 	.word	0x40023000
 8009464:	f407a5c2 	.word	0xf407a5c2
 8009468:	b5e8b5cd 	.word	0xb5e8b5cd
 800946c:	e0042000 	.word	0xe0042000
 8009470:	5c001000 	.word	0x5c001000
 8009474:	58024c08 	.word	0x58024c08
 8009478:	58024c00 	.word	0x58024c00
 800947c:	200051ba 	.word	0x200051ba
 8009480:	2000000c 	.word	0x2000000c
 8009484:	000ffc00 	.word	0x000ffc00
 8009488:	3ff00000 	.word	0x3ff00000

0800948c <PDM_Filter_setConfig>:
 800948c:	4b6d      	ldr	r3, [pc, #436]	@ (8009644 <PDM_Filter_setConfig+0x1b8>)
 800948e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8009490:	429a      	cmp	r2, r3
 8009492:	d12f      	bne.n	80094f4 <PDM_Filter_setConfig+0x68>
 8009494:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009496:	880e      	ldrh	r6, [r1, #0]
 8009498:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800949a:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800949e:	ed2d 8b02 	vpush	{d8}
 80094a2:	4604      	mov	r4, r0
 80094a4:	1e72      	subs	r2, r6, #1
 80094a6:	460d      	mov	r5, r1
 80094a8:	2a06      	cmp	r2, #6
 80094aa:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 80094ae:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 80094b2:	6421      	str	r1, [r4, #64]	@ 0x40
 80094b4:	b083      	sub	sp, #12
 80094b6:	d904      	bls.n	80094c2 <PDM_Filter_setConfig+0x36>
 80094b8:	42b8      	cmp	r0, r7
 80094ba:	f000 80bb 	beq.w	8009634 <PDM_Filter_setConfig+0x1a8>
 80094be:	2008      	movs	r0, #8
 80094c0:	e01d      	b.n	80094fe <PDM_Filter_setConfig+0x72>
 80094c2:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 80094c4:	42b2      	cmp	r2, r6
 80094c6:	d070      	beq.n	80095aa <PDM_Filter_setConfig+0x11e>
 80094c8:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 80094cc:	f023 0301 	bic.w	r3, r3, #1
 80094d0:	4333      	orrs	r3, r6
 80094d2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80094d6:	6423      	str	r3, [r4, #64]	@ 0x40
 80094d8:	2a70      	cmp	r2, #112	@ 0x70
 80094da:	f003 030f 	and.w	r3, r3, #15
 80094de:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80094e2:	d067      	beq.n	80095b4 <PDM_Filter_setConfig+0x128>
 80094e4:	2b06      	cmp	r3, #6
 80094e6:	d809      	bhi.n	80094fc <PDM_Filter_setConfig+0x70>
 80094e8:	e8df f003 	tbb	[pc, r3]
 80094ec:	89868380 	.word	0x89868380
 80094f0:	8f8c      	.short	0x8f8c
 80094f2:	7d          	.byte	0x7d
 80094f3:	00          	.byte	0x00
 80094f4:	2004      	movs	r0, #4
 80094f6:	4770      	bx	lr
 80094f8:	4b53      	ldr	r3, [pc, #332]	@ (8009648 <PDM_Filter_setConfig+0x1bc>)
 80094fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80094fc:	2000      	movs	r0, #0
 80094fe:	f117 0f0c 	cmn.w	r7, #12
 8009502:	da0a      	bge.n	800951a <PDM_Filter_setConfig+0x8e>
 8009504:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 8009508:	3040      	adds	r0, #64	@ 0x40
 800950a:	80ab      	strh	r3, [r5, #4]
 800950c:	886b      	ldrh	r3, [r5, #2]
 800950e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009510:	8626      	strh	r6, [r4, #48]	@ 0x30
 8009512:	b003      	add	sp, #12
 8009514:	ecbd 8b02 	vpop	{d8}
 8009518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800951a:	2f33      	cmp	r7, #51	@ 0x33
 800951c:	dc41      	bgt.n	80095a2 <PDM_Filter_setConfig+0x116>
 800951e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009520:	f003 030f 	and.w	r3, r3, #15
 8009524:	3b01      	subs	r3, #1
 8009526:	2b06      	cmp	r3, #6
 8009528:	d858      	bhi.n	80095dc <PDM_Filter_setConfig+0x150>
 800952a:	4948      	ldr	r1, [pc, #288]	@ (800964c <PDM_Filter_setConfig+0x1c0>)
 800952c:	4a48      	ldr	r2, [pc, #288]	@ (8009650 <PDM_Filter_setConfig+0x1c4>)
 800952e:	eddf 0a49 	vldr	s1, [pc, #292]	@ 8009654 <PDM_Filter_setConfig+0x1c8>
 8009532:	9001      	str	r0, [sp, #4]
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	4419      	add	r1, r3
 8009538:	edd1 7a00 	vldr	s15, [r1]
 800953c:	4413      	add	r3, r2
 800953e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8009542:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8009546:	ed93 8a00 	vldr	s16, [r3]
 800954a:	f000 fad9 	bl	8009b00 <powf>
 800954e:	9801      	ldr	r0, [sp, #4]
 8009550:	eef0 8a40 	vmov.f32	s17, s0
 8009554:	ee07 7a10 	vmov	s14, r7
 8009558:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 8009658 <PDM_Filter_setConfig+0x1cc>
 800955c:	9001      	str	r0, [sp, #4]
 800955e:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 8009562:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8009566:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800956a:	f000 fac9 	bl	8009b00 <powf>
 800956e:	ee28 8a28 	vmul.f32	s16, s16, s17
 8009572:	ee28 0a00 	vmul.f32	s0, s16, s0
 8009576:	f000 fb25 	bl	8009bc4 <roundf>
 800957a:	9801      	ldr	r0, [sp, #4]
 800957c:	886b      	ldrh	r3, [r5, #2]
 800957e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009580:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 8009584:	8727      	strh	r7, [r4, #56]	@ 0x38
 8009586:	8626      	strh	r6, [r4, #48]	@ 0x30
 8009588:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 800958c:	2800      	cmp	r0, #0
 800958e:	d1c0      	bne.n	8009512 <PDM_Filter_setConfig+0x86>
 8009590:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009592:	2000      	movs	r0, #0
 8009594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009598:	6423      	str	r3, [r4, #64]	@ 0x40
 800959a:	b003      	add	sp, #12
 800959c:	ecbd 8b02 	vpop	{d8}
 80095a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095a2:	2333      	movs	r3, #51	@ 0x33
 80095a4:	3040      	adds	r0, #64	@ 0x40
 80095a6:	80ab      	strh	r3, [r5, #4]
 80095a8:	e7b0      	b.n	800950c <PDM_Filter_setConfig+0x80>
 80095aa:	42b8      	cmp	r0, r7
 80095ac:	d1a6      	bne.n	80094fc <PDM_Filter_setConfig+0x70>
 80095ae:	886b      	ldrh	r3, [r5, #2]
 80095b0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80095b2:	e7ed      	b.n	8009590 <PDM_Filter_setConfig+0x104>
 80095b4:	2b06      	cmp	r3, #6
 80095b6:	d8a1      	bhi.n	80094fc <PDM_Filter_setConfig+0x70>
 80095b8:	a201      	add	r2, pc, #4	@ (adr r2, 80095c0 <PDM_Filter_setConfig+0x134>)
 80095ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80095be:	bf00      	nop
 80095c0:	0800962f 	.word	0x0800962f
 80095c4:	08009629 	.word	0x08009629
 80095c8:	0800961d 	.word	0x0800961d
 80095cc:	08009617 	.word	0x08009617
 80095d0:	080094f9 	.word	0x080094f9
 80095d4:	08009611 	.word	0x08009611
 80095d8:	08009623 	.word	0x08009623
 80095dc:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 800965c <PDM_Filter_setConfig+0x1d0>
 80095e0:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 8009660 <PDM_Filter_setConfig+0x1d4>
 80095e4:	e7b6      	b.n	8009554 <PDM_Filter_setConfig+0xc8>
 80095e6:	4b1f      	ldr	r3, [pc, #124]	@ (8009664 <PDM_Filter_setConfig+0x1d8>)
 80095e8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80095ea:	e787      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 80095ec:	4b1e      	ldr	r3, [pc, #120]	@ (8009668 <PDM_Filter_setConfig+0x1dc>)
 80095ee:	64a3      	str	r3, [r4, #72]	@ 0x48
 80095f0:	e784      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 80095f2:	4b1e      	ldr	r3, [pc, #120]	@ (800966c <PDM_Filter_setConfig+0x1e0>)
 80095f4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80095f6:	e781      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 80095f8:	4b1d      	ldr	r3, [pc, #116]	@ (8009670 <PDM_Filter_setConfig+0x1e4>)
 80095fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80095fc:	e77e      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 80095fe:	4b1d      	ldr	r3, [pc, #116]	@ (8009674 <PDM_Filter_setConfig+0x1e8>)
 8009600:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009602:	e77b      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 8009604:	4b1c      	ldr	r3, [pc, #112]	@ (8009678 <PDM_Filter_setConfig+0x1ec>)
 8009606:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009608:	e778      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 800960a:	4b1c      	ldr	r3, [pc, #112]	@ (800967c <PDM_Filter_setConfig+0x1f0>)
 800960c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800960e:	e775      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 8009610:	4b1b      	ldr	r3, [pc, #108]	@ (8009680 <PDM_Filter_setConfig+0x1f4>)
 8009612:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009614:	e772      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 8009616:	4b1b      	ldr	r3, [pc, #108]	@ (8009684 <PDM_Filter_setConfig+0x1f8>)
 8009618:	64a3      	str	r3, [r4, #72]	@ 0x48
 800961a:	e76f      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 800961c:	4b1a      	ldr	r3, [pc, #104]	@ (8009688 <PDM_Filter_setConfig+0x1fc>)
 800961e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009620:	e76c      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 8009622:	4b1a      	ldr	r3, [pc, #104]	@ (800968c <PDM_Filter_setConfig+0x200>)
 8009624:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009626:	e769      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 8009628:	4b19      	ldr	r3, [pc, #100]	@ (8009690 <PDM_Filter_setConfig+0x204>)
 800962a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800962c:	e766      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 800962e:	4b19      	ldr	r3, [pc, #100]	@ (8009694 <PDM_Filter_setConfig+0x208>)
 8009630:	64a3      	str	r3, [r4, #72]	@ 0x48
 8009632:	e763      	b.n	80094fc <PDM_Filter_setConfig+0x70>
 8009634:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 8009636:	42b3      	cmp	r3, r6
 8009638:	f47f af41 	bne.w	80094be <PDM_Filter_setConfig+0x32>
 800963c:	886b      	ldrh	r3, [r5, #2]
 800963e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8009640:	2008      	movs	r0, #8
 8009642:	e766      	b.n	8009512 <PDM_Filter_setConfig+0x86>
 8009644:	b5e8b5cd 	.word	0xb5e8b5cd
 8009648:	0800876d 	.word	0x0800876d
 800964c:	0800a450 	.word	0x0800a450
 8009650:	0800a46c 	.word	0x0800a46c
 8009654:	42000000 	.word	0x42000000
 8009658:	3d4ccccd 	.word	0x3d4ccccd
 800965c:	4f800000 	.word	0x4f800000
 8009660:	00000000 	.word	0x00000000
 8009664:	08007b6d 	.word	0x08007b6d
 8009668:	08007cf5 	.word	0x08007cf5
 800966c:	08007edd 	.word	0x08007edd
 8009670:	080080f9 	.word	0x080080f9
 8009674:	0800838d 	.word	0x0800838d
 8009678:	080078cd 	.word	0x080078cd
 800967c:	080079e5 	.word	0x080079e5
 8009680:	08008855 	.word	0x08008855
 8009684:	08008fc9 	.word	0x08008fc9
 8009688:	08008dc1 	.word	0x08008dc1
 800968c:	08008999 	.word	0x08008999
 8009690:	08008c21 	.word	0x08008c21
 8009694:	08008ab5 	.word	0x08008ab5

08009698 <PDM_Filter>:
 8009698:	b410      	push	{r4}
 800969a:	4b0b      	ldr	r3, [pc, #44]	@ (80096c8 <PDM_Filter+0x30>)
 800969c:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800969e:	429c      	cmp	r4, r3
 80096a0:	d107      	bne.n	80096b2 <PDM_Filter+0x1a>
 80096a2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 80096a4:	05dc      	lsls	r4, r3, #23
 80096a6:	d508      	bpl.n	80096ba <PDM_Filter+0x22>
 80096a8:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 80096aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096ae:	320c      	adds	r2, #12
 80096b0:	4718      	bx	r3
 80096b2:	2004      	movs	r0, #4
 80096b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80096be:	bf14      	ite	ne
 80096c0:	2020      	movne	r0, #32
 80096c2:	2030      	moveq	r0, #48	@ 0x30
 80096c4:	e7f6      	b.n	80096b4 <PDM_Filter+0x1c>
 80096c6:	bf00      	nop
 80096c8:	b5e8b5cd 	.word	0xb5e8b5cd

080096cc <arm_rfft_32_fast_init_f32>:
 80096cc:	b150      	cbz	r0, 80096e4 <arm_rfft_32_fast_init_f32+0x18>
 80096ce:	b510      	push	{r4, lr}
 80096d0:	2110      	movs	r1, #16
 80096d2:	4604      	mov	r4, r0
 80096d4:	f000 f8cc 	bl	8009870 <arm_cfft_init_f32>
 80096d8:	b918      	cbnz	r0, 80096e2 <arm_rfft_32_fast_init_f32+0x16>
 80096da:	4b04      	ldr	r3, [pc, #16]	@ (80096ec <arm_rfft_32_fast_init_f32+0x20>)
 80096dc:	6163      	str	r3, [r4, #20]
 80096de:	2220      	movs	r2, #32
 80096e0:	8222      	strh	r2, [r4, #16]
 80096e2:	bd10      	pop	{r4, pc}
 80096e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096e8:	4770      	bx	lr
 80096ea:	bf00      	nop
 80096ec:	08022ee0 	.word	0x08022ee0

080096f0 <arm_rfft_64_fast_init_f32>:
 80096f0:	b150      	cbz	r0, 8009708 <arm_rfft_64_fast_init_f32+0x18>
 80096f2:	b510      	push	{r4, lr}
 80096f4:	2120      	movs	r1, #32
 80096f6:	4604      	mov	r4, r0
 80096f8:	f000 f8ba 	bl	8009870 <arm_cfft_init_f32>
 80096fc:	b918      	cbnz	r0, 8009706 <arm_rfft_64_fast_init_f32+0x16>
 80096fe:	4b04      	ldr	r3, [pc, #16]	@ (8009710 <arm_rfft_64_fast_init_f32+0x20>)
 8009700:	6163      	str	r3, [r4, #20]
 8009702:	2240      	movs	r2, #64	@ 0x40
 8009704:	8222      	strh	r2, [r4, #16]
 8009706:	bd10      	pop	{r4, pc}
 8009708:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800970c:	4770      	bx	lr
 800970e:	bf00      	nop
 8009710:	08027760 	.word	0x08027760

08009714 <arm_rfft_128_fast_init_f32>:
 8009714:	b150      	cbz	r0, 800972c <arm_rfft_128_fast_init_f32+0x18>
 8009716:	b510      	push	{r4, lr}
 8009718:	2140      	movs	r1, #64	@ 0x40
 800971a:	4604      	mov	r4, r0
 800971c:	f000 f8a8 	bl	8009870 <arm_cfft_init_f32>
 8009720:	b918      	cbnz	r0, 800972a <arm_rfft_128_fast_init_f32+0x16>
 8009722:	4b04      	ldr	r3, [pc, #16]	@ (8009734 <arm_rfft_128_fast_init_f32+0x20>)
 8009724:	6163      	str	r3, [r4, #20]
 8009726:	2280      	movs	r2, #128	@ 0x80
 8009728:	8222      	strh	r2, [r4, #16]
 800972a:	bd10      	pop	{r4, pc}
 800972c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009730:	4770      	bx	lr
 8009732:	bf00      	nop
 8009734:	080208e0 	.word	0x080208e0

08009738 <arm_rfft_256_fast_init_f32>:
 8009738:	b158      	cbz	r0, 8009752 <arm_rfft_256_fast_init_f32+0x1a>
 800973a:	b510      	push	{r4, lr}
 800973c:	2180      	movs	r1, #128	@ 0x80
 800973e:	4604      	mov	r4, r0
 8009740:	f000 f896 	bl	8009870 <arm_cfft_init_f32>
 8009744:	b920      	cbnz	r0, 8009750 <arm_rfft_256_fast_init_f32+0x18>
 8009746:	4b04      	ldr	r3, [pc, #16]	@ (8009758 <arm_rfft_256_fast_init_f32+0x20>)
 8009748:	6163      	str	r3, [r4, #20]
 800974a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800974e:	8222      	strh	r2, [r4, #16]
 8009750:	bd10      	pop	{r4, pc}
 8009752:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009756:	4770      	bx	lr
 8009758:	08022ae0 	.word	0x08022ae0

0800975c <arm_rfft_512_fast_init_f32>:
 800975c:	b160      	cbz	r0, 8009778 <arm_rfft_512_fast_init_f32+0x1c>
 800975e:	b510      	push	{r4, lr}
 8009760:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8009764:	4604      	mov	r4, r0
 8009766:	f000 f883 	bl	8009870 <arm_cfft_init_f32>
 800976a:	b920      	cbnz	r0, 8009776 <arm_rfft_512_fast_init_f32+0x1a>
 800976c:	4b04      	ldr	r3, [pc, #16]	@ (8009780 <arm_rfft_512_fast_init_f32+0x24>)
 800976e:	6163      	str	r3, [r4, #20]
 8009770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009774:	8222      	strh	r2, [r4, #16]
 8009776:	bd10      	pop	{r4, pc}
 8009778:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800977c:	4770      	bx	lr
 800977e:	bf00      	nop
 8009780:	08026f60 	.word	0x08026f60

08009784 <arm_rfft_1024_fast_init_f32>:
 8009784:	b160      	cbz	r0, 80097a0 <arm_rfft_1024_fast_init_f32+0x1c>
 8009786:	b510      	push	{r4, lr}
 8009788:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800978c:	4604      	mov	r4, r0
 800978e:	f000 f86f 	bl	8009870 <arm_cfft_init_f32>
 8009792:	b920      	cbnz	r0, 800979e <arm_rfft_1024_fast_init_f32+0x1a>
 8009794:	4b04      	ldr	r3, [pc, #16]	@ (80097a8 <arm_rfft_1024_fast_init_f32+0x24>)
 8009796:	6163      	str	r3, [r4, #20]
 8009798:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800979c:	8222      	strh	r2, [r4, #16]
 800979e:	bd10      	pop	{r4, pc}
 80097a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097a4:	4770      	bx	lr
 80097a6:	bf00      	nop
 80097a8:	0801f8e0 	.word	0x0801f8e0

080097ac <arm_rfft_2048_fast_init_f32>:
 80097ac:	b160      	cbz	r0, 80097c8 <arm_rfft_2048_fast_init_f32+0x1c>
 80097ae:	b510      	push	{r4, lr}
 80097b0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80097b4:	4604      	mov	r4, r0
 80097b6:	f000 f85b 	bl	8009870 <arm_cfft_init_f32>
 80097ba:	b920      	cbnz	r0, 80097c6 <arm_rfft_2048_fast_init_f32+0x1a>
 80097bc:	4b04      	ldr	r3, [pc, #16]	@ (80097d0 <arm_rfft_2048_fast_init_f32+0x24>)
 80097be:	6163      	str	r3, [r4, #20]
 80097c0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80097c4:	8222      	strh	r2, [r4, #16]
 80097c6:	bd10      	pop	{r4, pc}
 80097c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097cc:	4770      	bx	lr
 80097ce:	bf00      	nop
 80097d0:	08020ae0 	.word	0x08020ae0

080097d4 <arm_rfft_4096_fast_init_f32>:
 80097d4:	b160      	cbz	r0, 80097f0 <arm_rfft_4096_fast_init_f32+0x1c>
 80097d6:	b510      	push	{r4, lr}
 80097d8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80097dc:	4604      	mov	r4, r0
 80097de:	f000 f847 	bl	8009870 <arm_cfft_init_f32>
 80097e2:	b920      	cbnz	r0, 80097ee <arm_rfft_4096_fast_init_f32+0x1a>
 80097e4:	4b04      	ldr	r3, [pc, #16]	@ (80097f8 <arm_rfft_4096_fast_init_f32+0x24>)
 80097e6:	6163      	str	r3, [r4, #20]
 80097e8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80097ec:	8222      	strh	r2, [r4, #16]
 80097ee:	bd10      	pop	{r4, pc}
 80097f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	08022f60 	.word	0x08022f60

080097fc <arm_rfft_fast_init_f32>:
 80097fc:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009800:	d024      	beq.n	800984c <arm_rfft_fast_init_f32+0x50>
 8009802:	d807      	bhi.n	8009814 <arm_rfft_fast_init_f32+0x18>
 8009804:	2980      	cmp	r1, #128	@ 0x80
 8009806:	d01c      	beq.n	8009842 <arm_rfft_fast_init_f32+0x46>
 8009808:	d90c      	bls.n	8009824 <arm_rfft_fast_init_f32+0x28>
 800980a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800980e:	d11a      	bne.n	8009846 <arm_rfft_fast_init_f32+0x4a>
 8009810:	4b0f      	ldr	r3, [pc, #60]	@ (8009850 <arm_rfft_fast_init_f32+0x54>)
 8009812:	4718      	bx	r3
 8009814:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009818:	d011      	beq.n	800983e <arm_rfft_fast_init_f32+0x42>
 800981a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800981e:	d107      	bne.n	8009830 <arm_rfft_fast_init_f32+0x34>
 8009820:	4b0c      	ldr	r3, [pc, #48]	@ (8009854 <arm_rfft_fast_init_f32+0x58>)
 8009822:	4718      	bx	r3
 8009824:	2920      	cmp	r1, #32
 8009826:	d008      	beq.n	800983a <arm_rfft_fast_init_f32+0x3e>
 8009828:	2940      	cmp	r1, #64	@ 0x40
 800982a:	d10c      	bne.n	8009846 <arm_rfft_fast_init_f32+0x4a>
 800982c:	4b0a      	ldr	r3, [pc, #40]	@ (8009858 <arm_rfft_fast_init_f32+0x5c>)
 800982e:	e7f0      	b.n	8009812 <arm_rfft_fast_init_f32+0x16>
 8009830:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8009834:	d107      	bne.n	8009846 <arm_rfft_fast_init_f32+0x4a>
 8009836:	4b09      	ldr	r3, [pc, #36]	@ (800985c <arm_rfft_fast_init_f32+0x60>)
 8009838:	e7eb      	b.n	8009812 <arm_rfft_fast_init_f32+0x16>
 800983a:	4b09      	ldr	r3, [pc, #36]	@ (8009860 <arm_rfft_fast_init_f32+0x64>)
 800983c:	e7e9      	b.n	8009812 <arm_rfft_fast_init_f32+0x16>
 800983e:	4b09      	ldr	r3, [pc, #36]	@ (8009864 <arm_rfft_fast_init_f32+0x68>)
 8009840:	e7e7      	b.n	8009812 <arm_rfft_fast_init_f32+0x16>
 8009842:	4b09      	ldr	r3, [pc, #36]	@ (8009868 <arm_rfft_fast_init_f32+0x6c>)
 8009844:	e7e5      	b.n	8009812 <arm_rfft_fast_init_f32+0x16>
 8009846:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800984a:	4770      	bx	lr
 800984c:	4b07      	ldr	r3, [pc, #28]	@ (800986c <arm_rfft_fast_init_f32+0x70>)
 800984e:	e7e0      	b.n	8009812 <arm_rfft_fast_init_f32+0x16>
 8009850:	08009739 	.word	0x08009739
 8009854:	080097d5 	.word	0x080097d5
 8009858:	080096f1 	.word	0x080096f1
 800985c:	08009785 	.word	0x08009785
 8009860:	080096cd 	.word	0x080096cd
 8009864:	080097ad 	.word	0x080097ad
 8009868:	08009715 	.word	0x08009715
 800986c:	0800975d 	.word	0x0800975d

08009870 <arm_cfft_init_f32>:
 8009870:	4603      	mov	r3, r0
 8009872:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 8009876:	f04f 0000 	mov.w	r0, #0
 800987a:	b410      	push	{r4}
 800987c:	8019      	strh	r1, [r3, #0]
 800987e:	6058      	str	r0, [r3, #4]
 8009880:	d033      	beq.n	80098ea <arm_cfft_init_f32+0x7a>
 8009882:	d918      	bls.n	80098b6 <arm_cfft_init_f32+0x46>
 8009884:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 8009888:	d027      	beq.n	80098da <arm_cfft_init_f32+0x6a>
 800988a:	d90c      	bls.n	80098a6 <arm_cfft_init_f32+0x36>
 800988c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 8009890:	d11e      	bne.n	80098d0 <arm_cfft_init_f32+0x60>
 8009892:	4a17      	ldr	r2, [pc, #92]	@ (80098f0 <arm_cfft_init_f32+0x80>)
 8009894:	8994      	ldrh	r4, [r2, #12]
 8009896:	819c      	strh	r4, [r3, #12]
 8009898:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800989c:	e9c3 2101 	strd	r2, r1, [r3, #4]
 80098a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a4:	4770      	bx	lr
 80098a6:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80098aa:	d018      	beq.n	80098de <arm_cfft_init_f32+0x6e>
 80098ac:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80098b0:	d10e      	bne.n	80098d0 <arm_cfft_init_f32+0x60>
 80098b2:	4a10      	ldr	r2, [pc, #64]	@ (80098f4 <arm_cfft_init_f32+0x84>)
 80098b4:	e7ee      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098b6:	2940      	cmp	r1, #64	@ 0x40
 80098b8:	d013      	beq.n	80098e2 <arm_cfft_init_f32+0x72>
 80098ba:	d903      	bls.n	80098c4 <arm_cfft_init_f32+0x54>
 80098bc:	2980      	cmp	r1, #128	@ 0x80
 80098be:	d107      	bne.n	80098d0 <arm_cfft_init_f32+0x60>
 80098c0:	4a0d      	ldr	r2, [pc, #52]	@ (80098f8 <arm_cfft_init_f32+0x88>)
 80098c2:	e7e7      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098c4:	2910      	cmp	r1, #16
 80098c6:	d00e      	beq.n	80098e6 <arm_cfft_init_f32+0x76>
 80098c8:	2920      	cmp	r1, #32
 80098ca:	d101      	bne.n	80098d0 <arm_cfft_init_f32+0x60>
 80098cc:	4a0b      	ldr	r2, [pc, #44]	@ (80098fc <arm_cfft_init_f32+0x8c>)
 80098ce:	e7e1      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80098d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098d8:	4770      	bx	lr
 80098da:	4a09      	ldr	r2, [pc, #36]	@ (8009900 <arm_cfft_init_f32+0x90>)
 80098dc:	e7da      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098de:	4a09      	ldr	r2, [pc, #36]	@ (8009904 <arm_cfft_init_f32+0x94>)
 80098e0:	e7d8      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098e2:	4a09      	ldr	r2, [pc, #36]	@ (8009908 <arm_cfft_init_f32+0x98>)
 80098e4:	e7d6      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098e6:	4a09      	ldr	r2, [pc, #36]	@ (800990c <arm_cfft_init_f32+0x9c>)
 80098e8:	e7d4      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098ea:	4a09      	ldr	r2, [pc, #36]	@ (8009910 <arm_cfft_init_f32+0xa0>)
 80098ec:	e7d2      	b.n	8009894 <arm_cfft_init_f32+0x24>
 80098ee:	bf00      	nop
 80098f0:	080278c0 	.word	0x080278c0
 80098f4:	08027860 	.word	0x08027860
 80098f8:	08027870 	.word	0x08027870
 80098fc:	080278b0 	.word	0x080278b0
 8009900:	08027890 	.word	0x08027890
 8009904:	080278d0 	.word	0x080278d0
 8009908:	080278e0 	.word	0x080278e0
 800990c:	08027880 	.word	0x08027880
 8009910:	080278a0 	.word	0x080278a0

08009914 <memset>:
 8009914:	4402      	add	r2, r0
 8009916:	4603      	mov	r3, r0
 8009918:	4293      	cmp	r3, r2
 800991a:	d100      	bne.n	800991e <memset+0xa>
 800991c:	4770      	bx	lr
 800991e:	f803 1b01 	strb.w	r1, [r3], #1
 8009922:	e7f9      	b.n	8009918 <memset+0x4>

08009924 <_reclaim_reent>:
 8009924:	4b2d      	ldr	r3, [pc, #180]	@ (80099dc <_reclaim_reent+0xb8>)
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	4283      	cmp	r3, r0
 800992a:	b570      	push	{r4, r5, r6, lr}
 800992c:	4604      	mov	r4, r0
 800992e:	d053      	beq.n	80099d8 <_reclaim_reent+0xb4>
 8009930:	69c3      	ldr	r3, [r0, #28]
 8009932:	b31b      	cbz	r3, 800997c <_reclaim_reent+0x58>
 8009934:	68db      	ldr	r3, [r3, #12]
 8009936:	b163      	cbz	r3, 8009952 <_reclaim_reent+0x2e>
 8009938:	2500      	movs	r5, #0
 800993a:	69e3      	ldr	r3, [r4, #28]
 800993c:	68db      	ldr	r3, [r3, #12]
 800993e:	5959      	ldr	r1, [r3, r5]
 8009940:	b9b1      	cbnz	r1, 8009970 <_reclaim_reent+0x4c>
 8009942:	3504      	adds	r5, #4
 8009944:	2d80      	cmp	r5, #128	@ 0x80
 8009946:	d1f8      	bne.n	800993a <_reclaim_reent+0x16>
 8009948:	69e3      	ldr	r3, [r4, #28]
 800994a:	4620      	mov	r0, r4
 800994c:	68d9      	ldr	r1, [r3, #12]
 800994e:	f000 f881 	bl	8009a54 <_free_r>
 8009952:	69e3      	ldr	r3, [r4, #28]
 8009954:	6819      	ldr	r1, [r3, #0]
 8009956:	b111      	cbz	r1, 800995e <_reclaim_reent+0x3a>
 8009958:	4620      	mov	r0, r4
 800995a:	f000 f87b 	bl	8009a54 <_free_r>
 800995e:	69e3      	ldr	r3, [r4, #28]
 8009960:	689d      	ldr	r5, [r3, #8]
 8009962:	b15d      	cbz	r5, 800997c <_reclaim_reent+0x58>
 8009964:	4629      	mov	r1, r5
 8009966:	4620      	mov	r0, r4
 8009968:	682d      	ldr	r5, [r5, #0]
 800996a:	f000 f873 	bl	8009a54 <_free_r>
 800996e:	e7f8      	b.n	8009962 <_reclaim_reent+0x3e>
 8009970:	680e      	ldr	r6, [r1, #0]
 8009972:	4620      	mov	r0, r4
 8009974:	f000 f86e 	bl	8009a54 <_free_r>
 8009978:	4631      	mov	r1, r6
 800997a:	e7e1      	b.n	8009940 <_reclaim_reent+0x1c>
 800997c:	6961      	ldr	r1, [r4, #20]
 800997e:	b111      	cbz	r1, 8009986 <_reclaim_reent+0x62>
 8009980:	4620      	mov	r0, r4
 8009982:	f000 f867 	bl	8009a54 <_free_r>
 8009986:	69e1      	ldr	r1, [r4, #28]
 8009988:	b111      	cbz	r1, 8009990 <_reclaim_reent+0x6c>
 800998a:	4620      	mov	r0, r4
 800998c:	f000 f862 	bl	8009a54 <_free_r>
 8009990:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8009992:	b111      	cbz	r1, 800999a <_reclaim_reent+0x76>
 8009994:	4620      	mov	r0, r4
 8009996:	f000 f85d 	bl	8009a54 <_free_r>
 800999a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800999c:	b111      	cbz	r1, 80099a4 <_reclaim_reent+0x80>
 800999e:	4620      	mov	r0, r4
 80099a0:	f000 f858 	bl	8009a54 <_free_r>
 80099a4:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80099a6:	b111      	cbz	r1, 80099ae <_reclaim_reent+0x8a>
 80099a8:	4620      	mov	r0, r4
 80099aa:	f000 f853 	bl	8009a54 <_free_r>
 80099ae:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80099b0:	b111      	cbz	r1, 80099b8 <_reclaim_reent+0x94>
 80099b2:	4620      	mov	r0, r4
 80099b4:	f000 f84e 	bl	8009a54 <_free_r>
 80099b8:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80099ba:	b111      	cbz	r1, 80099c2 <_reclaim_reent+0x9e>
 80099bc:	4620      	mov	r0, r4
 80099be:	f000 f849 	bl	8009a54 <_free_r>
 80099c2:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80099c4:	b111      	cbz	r1, 80099cc <_reclaim_reent+0xa8>
 80099c6:	4620      	mov	r0, r4
 80099c8:	f000 f844 	bl	8009a54 <_free_r>
 80099cc:	6a23      	ldr	r3, [r4, #32]
 80099ce:	b11b      	cbz	r3, 80099d8 <_reclaim_reent+0xb4>
 80099d0:	4620      	mov	r0, r4
 80099d2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80099d6:	4718      	bx	r3
 80099d8:	bd70      	pop	{r4, r5, r6, pc}
 80099da:	bf00      	nop
 80099dc:	20000410 	.word	0x20000410

080099e0 <__errno>:
 80099e0:	4b01      	ldr	r3, [pc, #4]	@ (80099e8 <__errno+0x8>)
 80099e2:	6818      	ldr	r0, [r3, #0]
 80099e4:	4770      	bx	lr
 80099e6:	bf00      	nop
 80099e8:	20000410 	.word	0x20000410

080099ec <__libc_init_array>:
 80099ec:	b570      	push	{r4, r5, r6, lr}
 80099ee:	4d0d      	ldr	r5, [pc, #52]	@ (8009a24 <__libc_init_array+0x38>)
 80099f0:	4c0d      	ldr	r4, [pc, #52]	@ (8009a28 <__libc_init_array+0x3c>)
 80099f2:	1b64      	subs	r4, r4, r5
 80099f4:	10a4      	asrs	r4, r4, #2
 80099f6:	2600      	movs	r6, #0
 80099f8:	42a6      	cmp	r6, r4
 80099fa:	d109      	bne.n	8009a10 <__libc_init_array+0x24>
 80099fc:	4d0b      	ldr	r5, [pc, #44]	@ (8009a2c <__libc_init_array+0x40>)
 80099fe:	4c0c      	ldr	r4, [pc, #48]	@ (8009a30 <__libc_init_array+0x44>)
 8009a00:	f000 fc6a 	bl	800a2d8 <_init>
 8009a04:	1b64      	subs	r4, r4, r5
 8009a06:	10a4      	asrs	r4, r4, #2
 8009a08:	2600      	movs	r6, #0
 8009a0a:	42a6      	cmp	r6, r4
 8009a0c:	d105      	bne.n	8009a1a <__libc_init_array+0x2e>
 8009a0e:	bd70      	pop	{r4, r5, r6, pc}
 8009a10:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a14:	4798      	blx	r3
 8009a16:	3601      	adds	r6, #1
 8009a18:	e7ee      	b.n	80099f8 <__libc_init_array+0xc>
 8009a1a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009a1e:	4798      	blx	r3
 8009a20:	3601      	adds	r6, #1
 8009a22:	e7f2      	b.n	8009a0a <__libc_init_array+0x1e>
 8009a24:	08027910 	.word	0x08027910
 8009a28:	08027910 	.word	0x08027910
 8009a2c:	08027910 	.word	0x08027910
 8009a30:	08027914 	.word	0x08027914

08009a34 <__retarget_lock_acquire_recursive>:
 8009a34:	4770      	bx	lr

08009a36 <__retarget_lock_release_recursive>:
 8009a36:	4770      	bx	lr

08009a38 <memcpy>:
 8009a38:	440a      	add	r2, r1
 8009a3a:	4291      	cmp	r1, r2
 8009a3c:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8009a40:	d100      	bne.n	8009a44 <memcpy+0xc>
 8009a42:	4770      	bx	lr
 8009a44:	b510      	push	{r4, lr}
 8009a46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a4e:	4291      	cmp	r1, r2
 8009a50:	d1f9      	bne.n	8009a46 <memcpy+0xe>
 8009a52:	bd10      	pop	{r4, pc}

08009a54 <_free_r>:
 8009a54:	b538      	push	{r3, r4, r5, lr}
 8009a56:	4605      	mov	r5, r0
 8009a58:	2900      	cmp	r1, #0
 8009a5a:	d041      	beq.n	8009ae0 <_free_r+0x8c>
 8009a5c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a60:	1f0c      	subs	r4, r1, #4
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	bfb8      	it	lt
 8009a66:	18e4      	addlt	r4, r4, r3
 8009a68:	f000 f83e 	bl	8009ae8 <__malloc_lock>
 8009a6c:	4a1d      	ldr	r2, [pc, #116]	@ (8009ae4 <_free_r+0x90>)
 8009a6e:	6813      	ldr	r3, [r2, #0]
 8009a70:	b933      	cbnz	r3, 8009a80 <_free_r+0x2c>
 8009a72:	6063      	str	r3, [r4, #4]
 8009a74:	6014      	str	r4, [r2, #0]
 8009a76:	4628      	mov	r0, r5
 8009a78:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a7c:	f000 b83a 	b.w	8009af4 <__malloc_unlock>
 8009a80:	42a3      	cmp	r3, r4
 8009a82:	d908      	bls.n	8009a96 <_free_r+0x42>
 8009a84:	6820      	ldr	r0, [r4, #0]
 8009a86:	1821      	adds	r1, r4, r0
 8009a88:	428b      	cmp	r3, r1
 8009a8a:	bf01      	itttt	eq
 8009a8c:	6819      	ldreq	r1, [r3, #0]
 8009a8e:	685b      	ldreq	r3, [r3, #4]
 8009a90:	1809      	addeq	r1, r1, r0
 8009a92:	6021      	streq	r1, [r4, #0]
 8009a94:	e7ed      	b.n	8009a72 <_free_r+0x1e>
 8009a96:	461a      	mov	r2, r3
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	b10b      	cbz	r3, 8009aa0 <_free_r+0x4c>
 8009a9c:	42a3      	cmp	r3, r4
 8009a9e:	d9fa      	bls.n	8009a96 <_free_r+0x42>
 8009aa0:	6811      	ldr	r1, [r2, #0]
 8009aa2:	1850      	adds	r0, r2, r1
 8009aa4:	42a0      	cmp	r0, r4
 8009aa6:	d10b      	bne.n	8009ac0 <_free_r+0x6c>
 8009aa8:	6820      	ldr	r0, [r4, #0]
 8009aaa:	4401      	add	r1, r0
 8009aac:	1850      	adds	r0, r2, r1
 8009aae:	4283      	cmp	r3, r0
 8009ab0:	6011      	str	r1, [r2, #0]
 8009ab2:	d1e0      	bne.n	8009a76 <_free_r+0x22>
 8009ab4:	6818      	ldr	r0, [r3, #0]
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	6053      	str	r3, [r2, #4]
 8009aba:	4408      	add	r0, r1
 8009abc:	6010      	str	r0, [r2, #0]
 8009abe:	e7da      	b.n	8009a76 <_free_r+0x22>
 8009ac0:	d902      	bls.n	8009ac8 <_free_r+0x74>
 8009ac2:	230c      	movs	r3, #12
 8009ac4:	602b      	str	r3, [r5, #0]
 8009ac6:	e7d6      	b.n	8009a76 <_free_r+0x22>
 8009ac8:	6820      	ldr	r0, [r4, #0]
 8009aca:	1821      	adds	r1, r4, r0
 8009acc:	428b      	cmp	r3, r1
 8009ace:	bf04      	itt	eq
 8009ad0:	6819      	ldreq	r1, [r3, #0]
 8009ad2:	685b      	ldreq	r3, [r3, #4]
 8009ad4:	6063      	str	r3, [r4, #4]
 8009ad6:	bf04      	itt	eq
 8009ad8:	1809      	addeq	r1, r1, r0
 8009ada:	6021      	streq	r1, [r4, #0]
 8009adc:	6054      	str	r4, [r2, #4]
 8009ade:	e7ca      	b.n	8009a76 <_free_r+0x22>
 8009ae0:	bd38      	pop	{r3, r4, r5, pc}
 8009ae2:	bf00      	nop
 8009ae4:	200052f8 	.word	0x200052f8

08009ae8 <__malloc_lock>:
 8009ae8:	4801      	ldr	r0, [pc, #4]	@ (8009af0 <__malloc_lock+0x8>)
 8009aea:	f7ff bfa3 	b.w	8009a34 <__retarget_lock_acquire_recursive>
 8009aee:	bf00      	nop
 8009af0:	200052f4 	.word	0x200052f4

08009af4 <__malloc_unlock>:
 8009af4:	4801      	ldr	r0, [pc, #4]	@ (8009afc <__malloc_unlock+0x8>)
 8009af6:	f7ff bf9e 	b.w	8009a36 <__retarget_lock_release_recursive>
 8009afa:	bf00      	nop
 8009afc:	200052f4 	.word	0x200052f4

08009b00 <powf>:
 8009b00:	b508      	push	{r3, lr}
 8009b02:	ed2d 8b04 	vpush	{d8-d9}
 8009b06:	eeb0 8a60 	vmov.f32	s16, s1
 8009b0a:	eeb0 9a40 	vmov.f32	s18, s0
 8009b0e:	f000 f87d 	bl	8009c0c <__ieee754_powf>
 8009b12:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b1a:	eef0 8a40 	vmov.f32	s17, s0
 8009b1e:	d63e      	bvs.n	8009b9e <powf+0x9e>
 8009b20:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009b24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b28:	d112      	bne.n	8009b50 <powf+0x50>
 8009b2a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b32:	d039      	beq.n	8009ba8 <powf+0xa8>
 8009b34:	eeb0 0a48 	vmov.f32	s0, s16
 8009b38:	f000 f839 	bl	8009bae <finitef>
 8009b3c:	b378      	cbz	r0, 8009b9e <powf+0x9e>
 8009b3e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b46:	d52a      	bpl.n	8009b9e <powf+0x9e>
 8009b48:	f7ff ff4a 	bl	80099e0 <__errno>
 8009b4c:	2322      	movs	r3, #34	@ 0x22
 8009b4e:	e014      	b.n	8009b7a <powf+0x7a>
 8009b50:	f000 f82d 	bl	8009bae <finitef>
 8009b54:	b998      	cbnz	r0, 8009b7e <powf+0x7e>
 8009b56:	eeb0 0a49 	vmov.f32	s0, s18
 8009b5a:	f000 f828 	bl	8009bae <finitef>
 8009b5e:	b170      	cbz	r0, 8009b7e <powf+0x7e>
 8009b60:	eeb0 0a48 	vmov.f32	s0, s16
 8009b64:	f000 f823 	bl	8009bae <finitef>
 8009b68:	b148      	cbz	r0, 8009b7e <powf+0x7e>
 8009b6a:	eef4 8a68 	vcmp.f32	s17, s17
 8009b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b72:	d7e9      	bvc.n	8009b48 <powf+0x48>
 8009b74:	f7ff ff34 	bl	80099e0 <__errno>
 8009b78:	2321      	movs	r3, #33	@ 0x21
 8009b7a:	6003      	str	r3, [r0, #0]
 8009b7c:	e00f      	b.n	8009b9e <powf+0x9e>
 8009b7e:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b86:	d10a      	bne.n	8009b9e <powf+0x9e>
 8009b88:	eeb0 0a49 	vmov.f32	s0, s18
 8009b8c:	f000 f80f 	bl	8009bae <finitef>
 8009b90:	b128      	cbz	r0, 8009b9e <powf+0x9e>
 8009b92:	eeb0 0a48 	vmov.f32	s0, s16
 8009b96:	f000 f80a 	bl	8009bae <finitef>
 8009b9a:	2800      	cmp	r0, #0
 8009b9c:	d1d4      	bne.n	8009b48 <powf+0x48>
 8009b9e:	eeb0 0a68 	vmov.f32	s0, s17
 8009ba2:	ecbd 8b04 	vpop	{d8-d9}
 8009ba6:	bd08      	pop	{r3, pc}
 8009ba8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8009bac:	e7f7      	b.n	8009b9e <powf+0x9e>

08009bae <finitef>:
 8009bae:	ee10 3a10 	vmov	r3, s0
 8009bb2:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8009bb6:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8009bba:	bfac      	ite	ge
 8009bbc:	2000      	movge	r0, #0
 8009bbe:	2001      	movlt	r0, #1
 8009bc0:	4770      	bx	lr
	...

08009bc4 <roundf>:
 8009bc4:	ee10 0a10 	vmov	r0, s0
 8009bc8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 8009bcc:	3a7f      	subs	r2, #127	@ 0x7f
 8009bce:	2a16      	cmp	r2, #22
 8009bd0:	dc15      	bgt.n	8009bfe <roundf+0x3a>
 8009bd2:	2a00      	cmp	r2, #0
 8009bd4:	da08      	bge.n	8009be8 <roundf+0x24>
 8009bd6:	3201      	adds	r2, #1
 8009bd8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8009bdc:	d101      	bne.n	8009be2 <roundf+0x1e>
 8009bde:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 8009be2:	ee00 3a10 	vmov	s0, r3
 8009be6:	4770      	bx	lr
 8009be8:	4907      	ldr	r1, [pc, #28]	@ (8009c08 <roundf+0x44>)
 8009bea:	4111      	asrs	r1, r2
 8009bec:	4201      	tst	r1, r0
 8009bee:	d0fa      	beq.n	8009be6 <roundf+0x22>
 8009bf0:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8009bf4:	4113      	asrs	r3, r2
 8009bf6:	4403      	add	r3, r0
 8009bf8:	ea23 0301 	bic.w	r3, r3, r1
 8009bfc:	e7f1      	b.n	8009be2 <roundf+0x1e>
 8009bfe:	2a80      	cmp	r2, #128	@ 0x80
 8009c00:	d1f1      	bne.n	8009be6 <roundf+0x22>
 8009c02:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c06:	4770      	bx	lr
 8009c08:	007fffff 	.word	0x007fffff

08009c0c <__ieee754_powf>:
 8009c0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009c10:	ee10 4a90 	vmov	r4, s1
 8009c14:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8009c18:	ed2d 8b02 	vpush	{d8}
 8009c1c:	ee10 6a10 	vmov	r6, s0
 8009c20:	eeb0 8a40 	vmov.f32	s16, s0
 8009c24:	eef0 8a60 	vmov.f32	s17, s1
 8009c28:	d10c      	bne.n	8009c44 <__ieee754_powf+0x38>
 8009c2a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8009c2e:	0076      	lsls	r6, r6, #1
 8009c30:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8009c34:	f240 8274 	bls.w	800a120 <__ieee754_powf+0x514>
 8009c38:	ee38 0a28 	vadd.f32	s0, s16, s17
 8009c3c:	ecbd 8b02 	vpop	{d8}
 8009c40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c44:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8009c48:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8009c4c:	d802      	bhi.n	8009c54 <__ieee754_powf+0x48>
 8009c4e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009c52:	d908      	bls.n	8009c66 <__ieee754_powf+0x5a>
 8009c54:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8009c58:	d1ee      	bne.n	8009c38 <__ieee754_powf+0x2c>
 8009c5a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8009c5e:	0064      	lsls	r4, r4, #1
 8009c60:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8009c64:	e7e6      	b.n	8009c34 <__ieee754_powf+0x28>
 8009c66:	2e00      	cmp	r6, #0
 8009c68:	da1f      	bge.n	8009caa <__ieee754_powf+0x9e>
 8009c6a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8009c6e:	f080 8260 	bcs.w	800a132 <__ieee754_powf+0x526>
 8009c72:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009c76:	d32f      	bcc.n	8009cd8 <__ieee754_powf+0xcc>
 8009c78:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8009c7c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8009c80:	fa49 f503 	asr.w	r5, r9, r3
 8009c84:	fa05 f303 	lsl.w	r3, r5, r3
 8009c88:	454b      	cmp	r3, r9
 8009c8a:	d123      	bne.n	8009cd4 <__ieee754_powf+0xc8>
 8009c8c:	f005 0501 	and.w	r5, r5, #1
 8009c90:	f1c5 0502 	rsb	r5, r5, #2
 8009c94:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8009c98:	d11f      	bne.n	8009cda <__ieee754_powf+0xce>
 8009c9a:	2c00      	cmp	r4, #0
 8009c9c:	f280 8246 	bge.w	800a12c <__ieee754_powf+0x520>
 8009ca0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009ca4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8009ca8:	e7c8      	b.n	8009c3c <__ieee754_powf+0x30>
 8009caa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8009cae:	d111      	bne.n	8009cd4 <__ieee754_powf+0xc8>
 8009cb0:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8009cb4:	f000 8234 	beq.w	800a120 <__ieee754_powf+0x514>
 8009cb8:	d906      	bls.n	8009cc8 <__ieee754_powf+0xbc>
 8009cba:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8009fd0 <__ieee754_powf+0x3c4>
 8009cbe:	2c00      	cmp	r4, #0
 8009cc0:	bfa8      	it	ge
 8009cc2:	eeb0 0a68 	vmovge.f32	s0, s17
 8009cc6:	e7b9      	b.n	8009c3c <__ieee754_powf+0x30>
 8009cc8:	2c00      	cmp	r4, #0
 8009cca:	f280 822c 	bge.w	800a126 <__ieee754_powf+0x51a>
 8009cce:	eeb1 0a68 	vneg.f32	s0, s17
 8009cd2:	e7b3      	b.n	8009c3c <__ieee754_powf+0x30>
 8009cd4:	2500      	movs	r5, #0
 8009cd6:	e7dd      	b.n	8009c94 <__ieee754_powf+0x88>
 8009cd8:	2500      	movs	r5, #0
 8009cda:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8009cde:	d102      	bne.n	8009ce6 <__ieee754_powf+0xda>
 8009ce0:	ee28 0a08 	vmul.f32	s0, s16, s16
 8009ce4:	e7aa      	b.n	8009c3c <__ieee754_powf+0x30>
 8009ce6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8009cea:	f040 8227 	bne.w	800a13c <__ieee754_powf+0x530>
 8009cee:	2e00      	cmp	r6, #0
 8009cf0:	f2c0 8224 	blt.w	800a13c <__ieee754_powf+0x530>
 8009cf4:	eeb0 0a48 	vmov.f32	s0, s16
 8009cf8:	ecbd 8b02 	vpop	{d8}
 8009cfc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d00:	f000 bae6 	b.w	800a2d0 <__ieee754_sqrtf>
 8009d04:	2d01      	cmp	r5, #1
 8009d06:	d199      	bne.n	8009c3c <__ieee754_powf+0x30>
 8009d08:	eeb1 0a40 	vneg.f32	s0, s0
 8009d0c:	e796      	b.n	8009c3c <__ieee754_powf+0x30>
 8009d0e:	0ff0      	lsrs	r0, r6, #31
 8009d10:	3801      	subs	r0, #1
 8009d12:	ea55 0300 	orrs.w	r3, r5, r0
 8009d16:	d104      	bne.n	8009d22 <__ieee754_powf+0x116>
 8009d18:	ee38 8a48 	vsub.f32	s16, s16, s16
 8009d1c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8009d20:	e78c      	b.n	8009c3c <__ieee754_powf+0x30>
 8009d22:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8009d26:	d96d      	bls.n	8009e04 <__ieee754_powf+0x1f8>
 8009d28:	4baa      	ldr	r3, [pc, #680]	@ (8009fd4 <__ieee754_powf+0x3c8>)
 8009d2a:	4598      	cmp	r8, r3
 8009d2c:	d808      	bhi.n	8009d40 <__ieee754_powf+0x134>
 8009d2e:	2c00      	cmp	r4, #0
 8009d30:	da0b      	bge.n	8009d4a <__ieee754_powf+0x13e>
 8009d32:	2000      	movs	r0, #0
 8009d34:	ecbd 8b02 	vpop	{d8}
 8009d38:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d3c:	f000 bac2 	b.w	800a2c4 <__math_oflowf>
 8009d40:	4ba5      	ldr	r3, [pc, #660]	@ (8009fd8 <__ieee754_powf+0x3cc>)
 8009d42:	4598      	cmp	r8, r3
 8009d44:	d908      	bls.n	8009d58 <__ieee754_powf+0x14c>
 8009d46:	2c00      	cmp	r4, #0
 8009d48:	dcf3      	bgt.n	8009d32 <__ieee754_powf+0x126>
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	ecbd 8b02 	vpop	{d8}
 8009d50:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d54:	f000 bab0 	b.w	800a2b8 <__math_uflowf>
 8009d58:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8009d5c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009d60:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 8009fdc <__ieee754_powf+0x3d0>
 8009d64:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8009d68:	eee0 6a67 	vfms.f32	s13, s0, s15
 8009d6c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8009d70:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8009d74:	ee20 7a00 	vmul.f32	s14, s0, s0
 8009d78:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8009fe0 <__ieee754_powf+0x3d4>
 8009d7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8009d80:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8009fe4 <__ieee754_powf+0x3d8>
 8009d84:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8009d88:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8009fe8 <__ieee754_powf+0x3dc>
 8009d8c:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009d90:	eeb0 7a67 	vmov.f32	s14, s15
 8009d94:	eea0 7a26 	vfma.f32	s14, s0, s13
 8009d98:	ee17 3a10 	vmov	r3, s14
 8009d9c:	f36f 030b 	bfc	r3, #0, #12
 8009da0:	ee07 3a10 	vmov	s14, r3
 8009da4:	eeb0 6a47 	vmov.f32	s12, s14
 8009da8:	eea0 6a66 	vfms.f32	s12, s0, s13
 8009dac:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8009db0:	3d01      	subs	r5, #1
 8009db2:	4305      	orrs	r5, r0
 8009db4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009db8:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8009dbc:	f36f 040b 	bfc	r4, #0, #12
 8009dc0:	bf18      	it	ne
 8009dc2:	eeb0 8a66 	vmovne.f32	s16, s13
 8009dc6:	ee06 4a90 	vmov	s13, r4
 8009dca:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8009dce:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8009dd2:	ee67 7a26 	vmul.f32	s15, s14, s13
 8009dd6:	eee6 0a07 	vfma.f32	s1, s12, s14
 8009dda:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8009dde:	ee17 1a10 	vmov	r1, s14
 8009de2:	2900      	cmp	r1, #0
 8009de4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009de8:	f340 80dd 	ble.w	8009fa6 <__ieee754_powf+0x39a>
 8009dec:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8009df0:	f240 80ca 	bls.w	8009f88 <__ieee754_powf+0x37c>
 8009df4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009df8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009dfc:	bf4c      	ite	mi
 8009dfe:	2001      	movmi	r0, #1
 8009e00:	2000      	movpl	r0, #0
 8009e02:	e797      	b.n	8009d34 <__ieee754_powf+0x128>
 8009e04:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8009e08:	bf01      	itttt	eq
 8009e0a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 8009fec <__ieee754_powf+0x3e0>
 8009e0e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8009e12:	f06f 0317 	mvneq.w	r3, #23
 8009e16:	ee17 7a90 	vmoveq	r7, s15
 8009e1a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8009e1e:	bf18      	it	ne
 8009e20:	2300      	movne	r3, #0
 8009e22:	3a7f      	subs	r2, #127	@ 0x7f
 8009e24:	441a      	add	r2, r3
 8009e26:	4b72      	ldr	r3, [pc, #456]	@ (8009ff0 <__ieee754_powf+0x3e4>)
 8009e28:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8009e2c:	429f      	cmp	r7, r3
 8009e2e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8009e32:	dd06      	ble.n	8009e42 <__ieee754_powf+0x236>
 8009e34:	4b6f      	ldr	r3, [pc, #444]	@ (8009ff4 <__ieee754_powf+0x3e8>)
 8009e36:	429f      	cmp	r7, r3
 8009e38:	f340 80a4 	ble.w	8009f84 <__ieee754_powf+0x378>
 8009e3c:	3201      	adds	r2, #1
 8009e3e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8009e42:	2600      	movs	r6, #0
 8009e44:	4b6c      	ldr	r3, [pc, #432]	@ (8009ff8 <__ieee754_powf+0x3ec>)
 8009e46:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8009e4a:	ee07 1a10 	vmov	s14, r1
 8009e4e:	edd3 5a00 	vldr	s11, [r3]
 8009e52:	4b6a      	ldr	r3, [pc, #424]	@ (8009ffc <__ieee754_powf+0x3f0>)
 8009e54:	ee75 7a87 	vadd.f32	s15, s11, s14
 8009e58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8009e5c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8009e60:	1049      	asrs	r1, r1, #1
 8009e62:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8009e66:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8009e6a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8009e6e:	ee37 6a65 	vsub.f32	s12, s14, s11
 8009e72:	ee07 1a90 	vmov	s15, r1
 8009e76:	ee26 5a24 	vmul.f32	s10, s12, s9
 8009e7a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8009e7e:	ee15 7a10 	vmov	r7, s10
 8009e82:	401f      	ands	r7, r3
 8009e84:	ee06 7a90 	vmov	s13, r7
 8009e88:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8009e8c:	ee37 7a65 	vsub.f32	s14, s14, s11
 8009e90:	ee65 7a05 	vmul.f32	s15, s10, s10
 8009e94:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8009e98:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800a000 <__ieee754_powf+0x3f4>
 8009e9c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800a004 <__ieee754_powf+0x3f8>
 8009ea0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8009ea4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800a008 <__ieee754_powf+0x3fc>
 8009ea8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009eac:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 8009fdc <__ieee754_powf+0x3d0>
 8009eb0:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009eb4:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800a00c <__ieee754_powf+0x400>
 8009eb8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8009ebc:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800a010 <__ieee754_powf+0x404>
 8009ec0:	ee26 6a24 	vmul.f32	s12, s12, s9
 8009ec4:	eee7 5a27 	vfma.f32	s11, s14, s15
 8009ec8:	ee35 7a26 	vadd.f32	s14, s10, s13
 8009ecc:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8009ed0:	ee27 7a06 	vmul.f32	s14, s14, s12
 8009ed4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8009ed8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8009edc:	eef0 5a67 	vmov.f32	s11, s15
 8009ee0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8009ee4:	ee75 5a87 	vadd.f32	s11, s11, s14
 8009ee8:	ee15 1a90 	vmov	r1, s11
 8009eec:	4019      	ands	r1, r3
 8009eee:	ee05 1a90 	vmov	s11, r1
 8009ef2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009ef6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8009efa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8009efe:	ee67 7a85 	vmul.f32	s15, s15, s10
 8009f02:	eee6 7a25 	vfma.f32	s15, s12, s11
 8009f06:	eeb0 6a67 	vmov.f32	s12, s15
 8009f0a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8009f0e:	ee16 1a10 	vmov	r1, s12
 8009f12:	4019      	ands	r1, r3
 8009f14:	ee06 1a10 	vmov	s12, r1
 8009f18:	eeb0 7a46 	vmov.f32	s14, s12
 8009f1c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8009f20:	493c      	ldr	r1, [pc, #240]	@ (800a014 <__ieee754_powf+0x408>)
 8009f22:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8009f26:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009f2a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800a018 <__ieee754_powf+0x40c>
 8009f2e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800a01c <__ieee754_powf+0x410>
 8009f32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8009f36:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800a020 <__ieee754_powf+0x414>
 8009f3a:	eee6 7a07 	vfma.f32	s15, s12, s14
 8009f3e:	ed91 7a00 	vldr	s14, [r1]
 8009f42:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009f46:	ee07 2a10 	vmov	s14, r2
 8009f4a:	4a36      	ldr	r2, [pc, #216]	@ (800a024 <__ieee754_powf+0x418>)
 8009f4c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8009f50:	eeb0 7a67 	vmov.f32	s14, s15
 8009f54:	eea6 7a25 	vfma.f32	s14, s12, s11
 8009f58:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 8009f5c:	ed92 5a00 	vldr	s10, [r2]
 8009f60:	ee37 7a05 	vadd.f32	s14, s14, s10
 8009f64:	ee37 7a26 	vadd.f32	s14, s14, s13
 8009f68:	ee17 2a10 	vmov	r2, s14
 8009f6c:	401a      	ands	r2, r3
 8009f6e:	ee07 2a10 	vmov	s14, r2
 8009f72:	ee77 6a66 	vsub.f32	s13, s14, s13
 8009f76:	ee76 6ac5 	vsub.f32	s13, s13, s10
 8009f7a:	eee6 6a65 	vfms.f32	s13, s12, s11
 8009f7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009f82:	e715      	b.n	8009db0 <__ieee754_powf+0x1a4>
 8009f84:	2601      	movs	r6, #1
 8009f86:	e75d      	b.n	8009e44 <__ieee754_powf+0x238>
 8009f88:	d152      	bne.n	800a030 <__ieee754_powf+0x424>
 8009f8a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800a028 <__ieee754_powf+0x41c>
 8009f8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009f92:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8009f96:	eef4 6ac7 	vcmpe.f32	s13, s14
 8009f9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f9e:	f73f af29 	bgt.w	8009df4 <__ieee754_powf+0x1e8>
 8009fa2:	2386      	movs	r3, #134	@ 0x86
 8009fa4:	e048      	b.n	800a038 <__ieee754_powf+0x42c>
 8009fa6:	4a21      	ldr	r2, [pc, #132]	@ (800a02c <__ieee754_powf+0x420>)
 8009fa8:	4293      	cmp	r3, r2
 8009faa:	d907      	bls.n	8009fbc <__ieee754_powf+0x3b0>
 8009fac:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009fb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fb4:	bf4c      	ite	mi
 8009fb6:	2001      	movmi	r0, #1
 8009fb8:	2000      	movpl	r0, #0
 8009fba:	e6c7      	b.n	8009d4c <__ieee754_powf+0x140>
 8009fbc:	d138      	bne.n	800a030 <__ieee754_powf+0x424>
 8009fbe:	ee37 7a67 	vsub.f32	s14, s14, s15
 8009fc2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8009fc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fca:	dbea      	blt.n	8009fa2 <__ieee754_powf+0x396>
 8009fcc:	e7ee      	b.n	8009fac <__ieee754_powf+0x3a0>
 8009fce:	bf00      	nop
 8009fd0:	00000000 	.word	0x00000000
 8009fd4:	3f7ffff3 	.word	0x3f7ffff3
 8009fd8:	3f800007 	.word	0x3f800007
 8009fdc:	3eaaaaab 	.word	0x3eaaaaab
 8009fe0:	3fb8aa00 	.word	0x3fb8aa00
 8009fe4:	3fb8aa3b 	.word	0x3fb8aa3b
 8009fe8:	36eca570 	.word	0x36eca570
 8009fec:	4b800000 	.word	0x4b800000
 8009ff0:	001cc471 	.word	0x001cc471
 8009ff4:	005db3d6 	.word	0x005db3d6
 8009ff8:	08027900 	.word	0x08027900
 8009ffc:	fffff000 	.word	0xfffff000
 800a000:	3e6c3255 	.word	0x3e6c3255
 800a004:	3e53f142 	.word	0x3e53f142
 800a008:	3e8ba305 	.word	0x3e8ba305
 800a00c:	3edb6db7 	.word	0x3edb6db7
 800a010:	3f19999a 	.word	0x3f19999a
 800a014:	080278f0 	.word	0x080278f0
 800a018:	3f76384f 	.word	0x3f76384f
 800a01c:	3f763800 	.word	0x3f763800
 800a020:	369dc3a0 	.word	0x369dc3a0
 800a024:	080278f8 	.word	0x080278f8
 800a028:	3338aa3c 	.word	0x3338aa3c
 800a02c:	43160000 	.word	0x43160000
 800a030:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800a034:	d96f      	bls.n	800a116 <__ieee754_powf+0x50a>
 800a036:	15db      	asrs	r3, r3, #23
 800a038:	3b7e      	subs	r3, #126	@ 0x7e
 800a03a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800a03e:	4118      	asrs	r0, r3
 800a040:	4408      	add	r0, r1
 800a042:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800a046:	4a4e      	ldr	r2, [pc, #312]	@ (800a180 <__ieee754_powf+0x574>)
 800a048:	3b7f      	subs	r3, #127	@ 0x7f
 800a04a:	411a      	asrs	r2, r3
 800a04c:	4002      	ands	r2, r0
 800a04e:	ee07 2a10 	vmov	s14, r2
 800a052:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800a056:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800a05a:	f1c3 0317 	rsb	r3, r3, #23
 800a05e:	4118      	asrs	r0, r3
 800a060:	2900      	cmp	r1, #0
 800a062:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a066:	bfb8      	it	lt
 800a068:	4240      	neglt	r0, r0
 800a06a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800a06e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800a184 <__ieee754_powf+0x578>
 800a072:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800a188 <__ieee754_powf+0x57c>
 800a076:	ee16 3a90 	vmov	r3, s13
 800a07a:	f36f 030b 	bfc	r3, #0, #12
 800a07e:	ee06 3a90 	vmov	s13, r3
 800a082:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a086:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a08a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a08e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800a18c <__ieee754_powf+0x580>
 800a092:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800a096:	eee0 7a87 	vfma.f32	s15, s1, s14
 800a09a:	eeb0 7a67 	vmov.f32	s14, s15
 800a09e:	eea6 7a86 	vfma.f32	s14, s13, s12
 800a0a2:	eef0 5a47 	vmov.f32	s11, s14
 800a0a6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800a0aa:	ee67 6a07 	vmul.f32	s13, s14, s14
 800a0ae:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800a0b2:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800a190 <__ieee754_powf+0x584>
 800a0b6:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800a194 <__ieee754_powf+0x588>
 800a0ba:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800a0be:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800a198 <__ieee754_powf+0x58c>
 800a0c2:	eee6 5a26 	vfma.f32	s11, s12, s13
 800a0c6:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800a19c <__ieee754_powf+0x590>
 800a0ca:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800a0ce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a1a0 <__ieee754_powf+0x594>
 800a0d2:	eee6 5a26 	vfma.f32	s11, s12, s13
 800a0d6:	eeb0 6a47 	vmov.f32	s12, s14
 800a0da:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800a0de:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800a0e2:	ee67 5a06 	vmul.f32	s11, s14, s12
 800a0e6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800a0ea:	eee7 7a27 	vfma.f32	s15, s14, s15
 800a0ee:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800a0f2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800a0f6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a0fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a0fe:	ee10 3a10 	vmov	r3, s0
 800a102:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a106:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a10a:	da06      	bge.n	800a11a <__ieee754_powf+0x50e>
 800a10c:	f000 f854 	bl	800a1b8 <scalbnf>
 800a110:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a114:	e592      	b.n	8009c3c <__ieee754_powf+0x30>
 800a116:	2000      	movs	r0, #0
 800a118:	e7a7      	b.n	800a06a <__ieee754_powf+0x45e>
 800a11a:	ee00 3a10 	vmov	s0, r3
 800a11e:	e7f7      	b.n	800a110 <__ieee754_powf+0x504>
 800a120:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800a124:	e58a      	b.n	8009c3c <__ieee754_powf+0x30>
 800a126:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800a1a4 <__ieee754_powf+0x598>
 800a12a:	e587      	b.n	8009c3c <__ieee754_powf+0x30>
 800a12c:	eeb0 0a48 	vmov.f32	s0, s16
 800a130:	e584      	b.n	8009c3c <__ieee754_powf+0x30>
 800a132:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800a136:	f43f adbb 	beq.w	8009cb0 <__ieee754_powf+0xa4>
 800a13a:	2502      	movs	r5, #2
 800a13c:	eeb0 0a48 	vmov.f32	s0, s16
 800a140:	f000 f832 	bl	800a1a8 <fabsf>
 800a144:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800a148:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800a14c:	4647      	mov	r7, r8
 800a14e:	d003      	beq.n	800a158 <__ieee754_powf+0x54c>
 800a150:	f1b8 0f00 	cmp.w	r8, #0
 800a154:	f47f addb 	bne.w	8009d0e <__ieee754_powf+0x102>
 800a158:	2c00      	cmp	r4, #0
 800a15a:	bfbc      	itt	lt
 800a15c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800a160:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a164:	2e00      	cmp	r6, #0
 800a166:	f6bf ad69 	bge.w	8009c3c <__ieee754_powf+0x30>
 800a16a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800a16e:	ea58 0805 	orrs.w	r8, r8, r5
 800a172:	f47f adc7 	bne.w	8009d04 <__ieee754_powf+0xf8>
 800a176:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a17a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a17e:	e55d      	b.n	8009c3c <__ieee754_powf+0x30>
 800a180:	ff800000 	.word	0xff800000
 800a184:	3f317218 	.word	0x3f317218
 800a188:	3f317200 	.word	0x3f317200
 800a18c:	35bfbe8c 	.word	0x35bfbe8c
 800a190:	b5ddea0e 	.word	0xb5ddea0e
 800a194:	3331bb4c 	.word	0x3331bb4c
 800a198:	388ab355 	.word	0x388ab355
 800a19c:	bb360b61 	.word	0xbb360b61
 800a1a0:	3e2aaaab 	.word	0x3e2aaaab
 800a1a4:	00000000 	.word	0x00000000

0800a1a8 <fabsf>:
 800a1a8:	ee10 3a10 	vmov	r3, s0
 800a1ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a1b0:	ee00 3a10 	vmov	s0, r3
 800a1b4:	4770      	bx	lr
	...

0800a1b8 <scalbnf>:
 800a1b8:	ee10 3a10 	vmov	r3, s0
 800a1bc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800a1c0:	d02b      	beq.n	800a21a <scalbnf+0x62>
 800a1c2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800a1c6:	d302      	bcc.n	800a1ce <scalbnf+0x16>
 800a1c8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a1cc:	4770      	bx	lr
 800a1ce:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800a1d2:	d123      	bne.n	800a21c <scalbnf+0x64>
 800a1d4:	4b24      	ldr	r3, [pc, #144]	@ (800a268 <scalbnf+0xb0>)
 800a1d6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800a26c <scalbnf+0xb4>
 800a1da:	4298      	cmp	r0, r3
 800a1dc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a1e0:	db17      	blt.n	800a212 <scalbnf+0x5a>
 800a1e2:	ee10 3a10 	vmov	r3, s0
 800a1e6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a1ea:	3a19      	subs	r2, #25
 800a1ec:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800a1f0:	4288      	cmp	r0, r1
 800a1f2:	dd15      	ble.n	800a220 <scalbnf+0x68>
 800a1f4:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800a270 <scalbnf+0xb8>
 800a1f8:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800a274 <scalbnf+0xbc>
 800a1fc:	ee10 3a10 	vmov	r3, s0
 800a200:	eeb0 7a67 	vmov.f32	s14, s15
 800a204:	2b00      	cmp	r3, #0
 800a206:	bfb8      	it	lt
 800a208:	eef0 7a66 	vmovlt.f32	s15, s13
 800a20c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800a210:	4770      	bx	lr
 800a212:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800a278 <scalbnf+0xc0>
 800a216:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a21a:	4770      	bx	lr
 800a21c:	0dd2      	lsrs	r2, r2, #23
 800a21e:	e7e5      	b.n	800a1ec <scalbnf+0x34>
 800a220:	4410      	add	r0, r2
 800a222:	28fe      	cmp	r0, #254	@ 0xfe
 800a224:	dce6      	bgt.n	800a1f4 <scalbnf+0x3c>
 800a226:	2800      	cmp	r0, #0
 800a228:	dd06      	ble.n	800a238 <scalbnf+0x80>
 800a22a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a22e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a232:	ee00 3a10 	vmov	s0, r3
 800a236:	4770      	bx	lr
 800a238:	f110 0f16 	cmn.w	r0, #22
 800a23c:	da09      	bge.n	800a252 <scalbnf+0x9a>
 800a23e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800a278 <scalbnf+0xc0>
 800a242:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800a27c <scalbnf+0xc4>
 800a246:	ee10 3a10 	vmov	r3, s0
 800a24a:	eeb0 7a67 	vmov.f32	s14, s15
 800a24e:	2b00      	cmp	r3, #0
 800a250:	e7d9      	b.n	800a206 <scalbnf+0x4e>
 800a252:	3019      	adds	r0, #25
 800a254:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800a258:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800a25c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800a280 <scalbnf+0xc8>
 800a260:	ee07 3a90 	vmov	s15, r3
 800a264:	e7d7      	b.n	800a216 <scalbnf+0x5e>
 800a266:	bf00      	nop
 800a268:	ffff3cb0 	.word	0xffff3cb0
 800a26c:	4c000000 	.word	0x4c000000
 800a270:	7149f2ca 	.word	0x7149f2ca
 800a274:	f149f2ca 	.word	0xf149f2ca
 800a278:	0da24260 	.word	0x0da24260
 800a27c:	8da24260 	.word	0x8da24260
 800a280:	33000000 	.word	0x33000000

0800a284 <with_errnof>:
 800a284:	b510      	push	{r4, lr}
 800a286:	ed2d 8b02 	vpush	{d8}
 800a28a:	eeb0 8a40 	vmov.f32	s16, s0
 800a28e:	4604      	mov	r4, r0
 800a290:	f7ff fba6 	bl	80099e0 <__errno>
 800a294:	eeb0 0a48 	vmov.f32	s0, s16
 800a298:	ecbd 8b02 	vpop	{d8}
 800a29c:	6004      	str	r4, [r0, #0]
 800a29e:	bd10      	pop	{r4, pc}

0800a2a0 <xflowf>:
 800a2a0:	b130      	cbz	r0, 800a2b0 <xflowf+0x10>
 800a2a2:	eef1 7a40 	vneg.f32	s15, s0
 800a2a6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800a2aa:	2022      	movs	r0, #34	@ 0x22
 800a2ac:	f7ff bfea 	b.w	800a284 <with_errnof>
 800a2b0:	eef0 7a40 	vmov.f32	s15, s0
 800a2b4:	e7f7      	b.n	800a2a6 <xflowf+0x6>
	...

0800a2b8 <__math_uflowf>:
 800a2b8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a2c0 <__math_uflowf+0x8>
 800a2bc:	f7ff bff0 	b.w	800a2a0 <xflowf>
 800a2c0:	10000000 	.word	0x10000000

0800a2c4 <__math_oflowf>:
 800a2c4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800a2cc <__math_oflowf+0x8>
 800a2c8:	f7ff bfea 	b.w	800a2a0 <xflowf>
 800a2cc:	70000000 	.word	0x70000000

0800a2d0 <__ieee754_sqrtf>:
 800a2d0:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800a2d4:	4770      	bx	lr
	...

0800a2d8 <_init>:
 800a2d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2da:	bf00      	nop
 800a2dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2de:	bc08      	pop	{r3}
 800a2e0:	469e      	mov	lr, r3
 800a2e2:	4770      	bx	lr

0800a2e4 <_fini>:
 800a2e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2e6:	bf00      	nop
 800a2e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a2ea:	bc08      	pop	{r3}
 800a2ec:	469e      	mov	lr, r3
 800a2ee:	4770      	bx	lr
