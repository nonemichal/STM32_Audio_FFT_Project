
audio_fft_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cd60  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001da30  0800cef0  0800cef0  0000def0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802a920  0802a920  0002c460  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802a920  0802a920  0002b920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802a928  0802a928  0002c460  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802a928  0802a928  0002b928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802a92c  0802a92c  0002b92c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000460  20000000  0802a930  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002c460  2**0
                  CONTENTS
 10 .bss          0000a650  20000460  20000460  0002c460  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000aab0  2000aab0  0002c460  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002c460  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002941d  00000000  00000000  0002c490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000056d9  00000000  00000000  000558ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001970  00000000  00000000  0005af88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000126a  00000000  00000000  0005c8f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c49  00000000  00000000  0005db62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dcc5  00000000  00000000  000627ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000db36e  00000000  00000000  00080470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000137  00000000  00000000  0015b7de  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000070c0  00000000  00000000  0015b918  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  001629d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000391c  00000000  00000000  00162a43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001b0  00000000  00000000  0016635f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000460 	.word	0x20000460
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ced8 	.word	0x0800ced8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000464 	.word	0x20000464
 80001cc:	0800ced8 	.word	0x0800ced8

080001d0 <__aeabi_drsub>:
 80001d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001d4:	e002      	b.n	80001dc <__adddf3>
 80001d6:	bf00      	nop

080001d8 <__aeabi_dsub>:
 80001d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001dc <__adddf3>:
 80001dc:	b530      	push	{r4, r5, lr}
 80001de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001e6:	ea94 0f05 	teq	r4, r5
 80001ea:	bf08      	it	eq
 80001ec:	ea90 0f02 	teqeq	r0, r2
 80001f0:	bf1f      	itttt	ne
 80001f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000202:	f000 80e2 	beq.w	80003ca <__adddf3+0x1ee>
 8000206:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800020a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800020e:	bfb8      	it	lt
 8000210:	426d      	neglt	r5, r5
 8000212:	dd0c      	ble.n	800022e <__adddf3+0x52>
 8000214:	442c      	add	r4, r5
 8000216:	ea80 0202 	eor.w	r2, r0, r2
 800021a:	ea81 0303 	eor.w	r3, r1, r3
 800021e:	ea82 0000 	eor.w	r0, r2, r0
 8000222:	ea83 0101 	eor.w	r1, r3, r1
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	2d36      	cmp	r5, #54	@ 0x36
 8000230:	bf88      	it	hi
 8000232:	bd30      	pophi	{r4, r5, pc}
 8000234:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000238:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800023c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000240:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000244:	d002      	beq.n	800024c <__adddf3+0x70>
 8000246:	4240      	negs	r0, r0
 8000248:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800024c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000250:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000254:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000258:	d002      	beq.n	8000260 <__adddf3+0x84>
 800025a:	4252      	negs	r2, r2
 800025c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000260:	ea94 0f05 	teq	r4, r5
 8000264:	f000 80a7 	beq.w	80003b6 <__adddf3+0x1da>
 8000268:	f1a4 0401 	sub.w	r4, r4, #1
 800026c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000270:	db0d      	blt.n	800028e <__adddf3+0xb2>
 8000272:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000276:	fa22 f205 	lsr.w	r2, r2, r5
 800027a:	1880      	adds	r0, r0, r2
 800027c:	f141 0100 	adc.w	r1, r1, #0
 8000280:	fa03 f20e 	lsl.w	r2, r3, lr
 8000284:	1880      	adds	r0, r0, r2
 8000286:	fa43 f305 	asr.w	r3, r3, r5
 800028a:	4159      	adcs	r1, r3
 800028c:	e00e      	b.n	80002ac <__adddf3+0xd0>
 800028e:	f1a5 0520 	sub.w	r5, r5, #32
 8000292:	f10e 0e20 	add.w	lr, lr, #32
 8000296:	2a01      	cmp	r2, #1
 8000298:	fa03 fc0e 	lsl.w	ip, r3, lr
 800029c:	bf28      	it	cs
 800029e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	18c0      	adds	r0, r0, r3
 80002a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b0:	d507      	bpl.n	80002c2 <__adddf3+0xe6>
 80002b2:	f04f 0e00 	mov.w	lr, #0
 80002b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002be:	eb6e 0101 	sbc.w	r1, lr, r1
 80002c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002c6:	d31b      	bcc.n	8000300 <__adddf3+0x124>
 80002c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002cc:	d30c      	bcc.n	80002e8 <__adddf3+0x10c>
 80002ce:	0849      	lsrs	r1, r1, #1
 80002d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d8:	f104 0401 	add.w	r4, r4, #1
 80002dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002e4:	f080 809a 	bcs.w	800041c <__adddf3+0x240>
 80002e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002ec:	bf08      	it	eq
 80002ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002f2:	f150 0000 	adcs.w	r0, r0, #0
 80002f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002fa:	ea41 0105 	orr.w	r1, r1, r5
 80002fe:	bd30      	pop	{r4, r5, pc}
 8000300:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000304:	4140      	adcs	r0, r0
 8000306:	eb41 0101 	adc.w	r1, r1, r1
 800030a:	3c01      	subs	r4, #1
 800030c:	bf28      	it	cs
 800030e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000312:	d2e9      	bcs.n	80002e8 <__adddf3+0x10c>
 8000314:	f091 0f00 	teq	r1, #0
 8000318:	bf04      	itt	eq
 800031a:	4601      	moveq	r1, r0
 800031c:	2000      	moveq	r0, #0
 800031e:	fab1 f381 	clz	r3, r1
 8000322:	bf08      	it	eq
 8000324:	3320      	addeq	r3, #32
 8000326:	f1a3 030b 	sub.w	r3, r3, #11
 800032a:	f1b3 0220 	subs.w	r2, r3, #32
 800032e:	da0c      	bge.n	800034a <__adddf3+0x16e>
 8000330:	320c      	adds	r2, #12
 8000332:	dd08      	ble.n	8000346 <__adddf3+0x16a>
 8000334:	f102 0c14 	add.w	ip, r2, #20
 8000338:	f1c2 020c 	rsb	r2, r2, #12
 800033c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000340:	fa21 f102 	lsr.w	r1, r1, r2
 8000344:	e00c      	b.n	8000360 <__adddf3+0x184>
 8000346:	f102 0214 	add.w	r2, r2, #20
 800034a:	bfd8      	it	le
 800034c:	f1c2 0c20 	rsble	ip, r2, #32
 8000350:	fa01 f102 	lsl.w	r1, r1, r2
 8000354:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000358:	bfdc      	itt	le
 800035a:	ea41 010c 	orrle.w	r1, r1, ip
 800035e:	4090      	lslle	r0, r2
 8000360:	1ae4      	subs	r4, r4, r3
 8000362:	bfa2      	ittt	ge
 8000364:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000368:	4329      	orrge	r1, r5
 800036a:	bd30      	popge	{r4, r5, pc}
 800036c:	ea6f 0404 	mvn.w	r4, r4
 8000370:	3c1f      	subs	r4, #31
 8000372:	da1c      	bge.n	80003ae <__adddf3+0x1d2>
 8000374:	340c      	adds	r4, #12
 8000376:	dc0e      	bgt.n	8000396 <__adddf3+0x1ba>
 8000378:	f104 0414 	add.w	r4, r4, #20
 800037c:	f1c4 0220 	rsb	r2, r4, #32
 8000380:	fa20 f004 	lsr.w	r0, r0, r4
 8000384:	fa01 f302 	lsl.w	r3, r1, r2
 8000388:	ea40 0003 	orr.w	r0, r0, r3
 800038c:	fa21 f304 	lsr.w	r3, r1, r4
 8000390:	ea45 0103 	orr.w	r1, r5, r3
 8000394:	bd30      	pop	{r4, r5, pc}
 8000396:	f1c4 040c 	rsb	r4, r4, #12
 800039a:	f1c4 0220 	rsb	r2, r4, #32
 800039e:	fa20 f002 	lsr.w	r0, r0, r2
 80003a2:	fa01 f304 	lsl.w	r3, r1, r4
 80003a6:	ea40 0003 	orr.w	r0, r0, r3
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	fa21 f004 	lsr.w	r0, r1, r4
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f094 0f00 	teq	r4, #0
 80003ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003be:	bf06      	itte	eq
 80003c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003c4:	3401      	addeq	r4, #1
 80003c6:	3d01      	subne	r5, #1
 80003c8:	e74e      	b.n	8000268 <__adddf3+0x8c>
 80003ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ce:	bf18      	it	ne
 80003d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d4:	d029      	beq.n	800042a <__adddf3+0x24e>
 80003d6:	ea94 0f05 	teq	r4, r5
 80003da:	bf08      	it	eq
 80003dc:	ea90 0f02 	teqeq	r0, r2
 80003e0:	d005      	beq.n	80003ee <__adddf3+0x212>
 80003e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003e6:	bf04      	itt	eq
 80003e8:	4619      	moveq	r1, r3
 80003ea:	4610      	moveq	r0, r2
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	ea91 0f03 	teq	r1, r3
 80003f2:	bf1e      	ittt	ne
 80003f4:	2100      	movne	r1, #0
 80003f6:	2000      	movne	r0, #0
 80003f8:	bd30      	popne	{r4, r5, pc}
 80003fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003fe:	d105      	bne.n	800040c <__adddf3+0x230>
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	4149      	adcs	r1, r1
 8000404:	bf28      	it	cs
 8000406:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800040a:	bd30      	pop	{r4, r5, pc}
 800040c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000410:	bf3c      	itt	cc
 8000412:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000416:	bd30      	popcc	{r4, r5, pc}
 8000418:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800041c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000420:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000424:	f04f 0000 	mov.w	r0, #0
 8000428:	bd30      	pop	{r4, r5, pc}
 800042a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800042e:	bf1a      	itte	ne
 8000430:	4619      	movne	r1, r3
 8000432:	4610      	movne	r0, r2
 8000434:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000438:	bf1c      	itt	ne
 800043a:	460b      	movne	r3, r1
 800043c:	4602      	movne	r2, r0
 800043e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000442:	bf06      	itte	eq
 8000444:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000448:	ea91 0f03 	teqeq	r1, r3
 800044c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000450:	bd30      	pop	{r4, r5, pc}
 8000452:	bf00      	nop

08000454 <__aeabi_ui2d>:
 8000454:	f090 0f00 	teq	r0, #0
 8000458:	bf04      	itt	eq
 800045a:	2100      	moveq	r1, #0
 800045c:	4770      	bxeq	lr
 800045e:	b530      	push	{r4, r5, lr}
 8000460:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000464:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000468:	f04f 0500 	mov.w	r5, #0
 800046c:	f04f 0100 	mov.w	r1, #0
 8000470:	e750      	b.n	8000314 <__adddf3+0x138>
 8000472:	bf00      	nop

08000474 <__aeabi_i2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000488:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800048c:	bf48      	it	mi
 800048e:	4240      	negmi	r0, r0
 8000490:	f04f 0100 	mov.w	r1, #0
 8000494:	e73e      	b.n	8000314 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_f2d>:
 8000498:	0042      	lsls	r2, r0, #1
 800049a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800049e:	ea4f 0131 	mov.w	r1, r1, rrx
 80004a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004a6:	bf1f      	itttt	ne
 80004a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004b4:	4770      	bxne	lr
 80004b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004ba:	bf08      	it	eq
 80004bc:	4770      	bxeq	lr
 80004be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004c2:	bf04      	itt	eq
 80004c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004c8:	4770      	bxeq	lr
 80004ca:	b530      	push	{r4, r5, lr}
 80004cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004d8:	e71c      	b.n	8000314 <__adddf3+0x138>
 80004da:	bf00      	nop

080004dc <__aeabi_ul2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f04f 0500 	mov.w	r5, #0
 80004ea:	e00a      	b.n	8000502 <__aeabi_l2d+0x16>

080004ec <__aeabi_l2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80004fa:	d502      	bpl.n	8000502 <__aeabi_l2d+0x16>
 80004fc:	4240      	negs	r0, r0
 80004fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000502:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000506:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800050a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800050e:	f43f aed8 	beq.w	80002c2 <__adddf3+0xe6>
 8000512:	f04f 0203 	mov.w	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000532:	fa20 f002 	lsr.w	r0, r0, r2
 8000536:	fa01 fe03 	lsl.w	lr, r1, r3
 800053a:	ea40 000e 	orr.w	r0, r0, lr
 800053e:	fa21 f102 	lsr.w	r1, r1, r2
 8000542:	4414      	add	r4, r2
 8000544:	e6bd      	b.n	80002c2 <__adddf3+0xe6>
 8000546:	bf00      	nop

08000548 <__gedf2>:
 8000548:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 800054c:	e006      	b.n	800055c <__cmpdf2+0x4>
 800054e:	bf00      	nop

08000550 <__ledf2>:
 8000550:	f04f 0c01 	mov.w	ip, #1
 8000554:	e002      	b.n	800055c <__cmpdf2+0x4>
 8000556:	bf00      	nop

08000558 <__cmpdf2>:
 8000558:	f04f 0c01 	mov.w	ip, #1
 800055c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000560:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000564:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000568:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800056c:	bf18      	it	ne
 800056e:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000572:	d01b      	beq.n	80005ac <__cmpdf2+0x54>
 8000574:	b001      	add	sp, #4
 8000576:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800057a:	bf0c      	ite	eq
 800057c:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000580:	ea91 0f03 	teqne	r1, r3
 8000584:	bf02      	ittt	eq
 8000586:	ea90 0f02 	teqeq	r0, r2
 800058a:	2000      	moveq	r0, #0
 800058c:	4770      	bxeq	lr
 800058e:	f110 0f00 	cmn.w	r0, #0
 8000592:	ea91 0f03 	teq	r1, r3
 8000596:	bf58      	it	pl
 8000598:	4299      	cmppl	r1, r3
 800059a:	bf08      	it	eq
 800059c:	4290      	cmpeq	r0, r2
 800059e:	bf2c      	ite	cs
 80005a0:	17d8      	asrcs	r0, r3, #31
 80005a2:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80005a6:	f040 0001 	orr.w	r0, r0, #1
 80005aa:	4770      	bx	lr
 80005ac:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80005b0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005b4:	d102      	bne.n	80005bc <__cmpdf2+0x64>
 80005b6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80005ba:	d107      	bne.n	80005cc <__cmpdf2+0x74>
 80005bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80005c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80005c4:	d1d6      	bne.n	8000574 <__cmpdf2+0x1c>
 80005c6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80005ca:	d0d3      	beq.n	8000574 <__cmpdf2+0x1c>
 80005cc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <__aeabi_cdrcmple>:
 80005d4:	4684      	mov	ip, r0
 80005d6:	4610      	mov	r0, r2
 80005d8:	4662      	mov	r2, ip
 80005da:	468c      	mov	ip, r1
 80005dc:	4619      	mov	r1, r3
 80005de:	4663      	mov	r3, ip
 80005e0:	e000      	b.n	80005e4 <__aeabi_cdcmpeq>
 80005e2:	bf00      	nop

080005e4 <__aeabi_cdcmpeq>:
 80005e4:	b501      	push	{r0, lr}
 80005e6:	f7ff ffb7 	bl	8000558 <__cmpdf2>
 80005ea:	2800      	cmp	r0, #0
 80005ec:	bf48      	it	mi
 80005ee:	f110 0f00 	cmnmi.w	r0, #0
 80005f2:	bd01      	pop	{r0, pc}

080005f4 <__aeabi_dcmpeq>:
 80005f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80005f8:	f7ff fff4 	bl	80005e4 <__aeabi_cdcmpeq>
 80005fc:	bf0c      	ite	eq
 80005fe:	2001      	moveq	r0, #1
 8000600:	2000      	movne	r0, #0
 8000602:	f85d fb08 	ldr.w	pc, [sp], #8
 8000606:	bf00      	nop

08000608 <__aeabi_dcmplt>:
 8000608:	f84d ed08 	str.w	lr, [sp, #-8]!
 800060c:	f7ff ffea 	bl	80005e4 <__aeabi_cdcmpeq>
 8000610:	bf34      	ite	cc
 8000612:	2001      	movcc	r0, #1
 8000614:	2000      	movcs	r0, #0
 8000616:	f85d fb08 	ldr.w	pc, [sp], #8
 800061a:	bf00      	nop

0800061c <__aeabi_dcmple>:
 800061c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000620:	f7ff ffe0 	bl	80005e4 <__aeabi_cdcmpeq>
 8000624:	bf94      	ite	ls
 8000626:	2001      	movls	r0, #1
 8000628:	2000      	movhi	r0, #0
 800062a:	f85d fb08 	ldr.w	pc, [sp], #8
 800062e:	bf00      	nop

08000630 <__aeabi_dcmpge>:
 8000630:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000634:	f7ff ffce 	bl	80005d4 <__aeabi_cdrcmple>
 8000638:	bf94      	ite	ls
 800063a:	2001      	movls	r0, #1
 800063c:	2000      	movhi	r0, #0
 800063e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000642:	bf00      	nop

08000644 <__aeabi_dcmpgt>:
 8000644:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000648:	f7ff ffc4 	bl	80005d4 <__aeabi_cdrcmple>
 800064c:	bf34      	ite	cc
 800064e:	2001      	movcc	r0, #1
 8000650:	2000      	movcs	r0, #0
 8000652:	f85d fb08 	ldr.w	pc, [sp], #8
 8000656:	bf00      	nop

08000658 <__aeabi_uldivmod>:
 8000658:	b953      	cbnz	r3, 8000670 <__aeabi_uldivmod+0x18>
 800065a:	b94a      	cbnz	r2, 8000670 <__aeabi_uldivmod+0x18>
 800065c:	2900      	cmp	r1, #0
 800065e:	bf08      	it	eq
 8000660:	2800      	cmpeq	r0, #0
 8000662:	bf1c      	itt	ne
 8000664:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000668:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 800066c:	f000 b988 	b.w	8000980 <__aeabi_idiv0>
 8000670:	f1ad 0c08 	sub.w	ip, sp, #8
 8000674:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000678:	f000 f806 	bl	8000688 <__udivmoddi4>
 800067c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000680:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000684:	b004      	add	sp, #16
 8000686:	4770      	bx	lr

08000688 <__udivmoddi4>:
 8000688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800068c:	9d08      	ldr	r5, [sp, #32]
 800068e:	468e      	mov	lr, r1
 8000690:	4604      	mov	r4, r0
 8000692:	4688      	mov	r8, r1
 8000694:	2b00      	cmp	r3, #0
 8000696:	d14a      	bne.n	800072e <__udivmoddi4+0xa6>
 8000698:	428a      	cmp	r2, r1
 800069a:	4617      	mov	r7, r2
 800069c:	d962      	bls.n	8000764 <__udivmoddi4+0xdc>
 800069e:	fab2 f682 	clz	r6, r2
 80006a2:	b14e      	cbz	r6, 80006b8 <__udivmoddi4+0x30>
 80006a4:	f1c6 0320 	rsb	r3, r6, #32
 80006a8:	fa01 f806 	lsl.w	r8, r1, r6
 80006ac:	fa20 f303 	lsr.w	r3, r0, r3
 80006b0:	40b7      	lsls	r7, r6
 80006b2:	ea43 0808 	orr.w	r8, r3, r8
 80006b6:	40b4      	lsls	r4, r6
 80006b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80006bc:	fa1f fc87 	uxth.w	ip, r7
 80006c0:	fbb8 f1fe 	udiv	r1, r8, lr
 80006c4:	0c23      	lsrs	r3, r4, #16
 80006c6:	fb0e 8811 	mls	r8, lr, r1, r8
 80006ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80006ce:	fb01 f20c 	mul.w	r2, r1, ip
 80006d2:	429a      	cmp	r2, r3
 80006d4:	d909      	bls.n	80006ea <__udivmoddi4+0x62>
 80006d6:	18fb      	adds	r3, r7, r3
 80006d8:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 80006dc:	f080 80ea 	bcs.w	80008b4 <__udivmoddi4+0x22c>
 80006e0:	429a      	cmp	r2, r3
 80006e2:	f240 80e7 	bls.w	80008b4 <__udivmoddi4+0x22c>
 80006e6:	3902      	subs	r1, #2
 80006e8:	443b      	add	r3, r7
 80006ea:	1a9a      	subs	r2, r3, r2
 80006ec:	b2a3      	uxth	r3, r4
 80006ee:	fbb2 f0fe 	udiv	r0, r2, lr
 80006f2:	fb0e 2210 	mls	r2, lr, r0, r2
 80006f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80006fa:	fb00 fc0c 	mul.w	ip, r0, ip
 80006fe:	459c      	cmp	ip, r3
 8000700:	d909      	bls.n	8000716 <__udivmoddi4+0x8e>
 8000702:	18fb      	adds	r3, r7, r3
 8000704:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000708:	f080 80d6 	bcs.w	80008b8 <__udivmoddi4+0x230>
 800070c:	459c      	cmp	ip, r3
 800070e:	f240 80d3 	bls.w	80008b8 <__udivmoddi4+0x230>
 8000712:	443b      	add	r3, r7
 8000714:	3802      	subs	r0, #2
 8000716:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800071a:	eba3 030c 	sub.w	r3, r3, ip
 800071e:	2100      	movs	r1, #0
 8000720:	b11d      	cbz	r5, 800072a <__udivmoddi4+0xa2>
 8000722:	40f3      	lsrs	r3, r6
 8000724:	2200      	movs	r2, #0
 8000726:	e9c5 3200 	strd	r3, r2, [r5]
 800072a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800072e:	428b      	cmp	r3, r1
 8000730:	d905      	bls.n	800073e <__udivmoddi4+0xb6>
 8000732:	b10d      	cbz	r5, 8000738 <__udivmoddi4+0xb0>
 8000734:	e9c5 0100 	strd	r0, r1, [r5]
 8000738:	2100      	movs	r1, #0
 800073a:	4608      	mov	r0, r1
 800073c:	e7f5      	b.n	800072a <__udivmoddi4+0xa2>
 800073e:	fab3 f183 	clz	r1, r3
 8000742:	2900      	cmp	r1, #0
 8000744:	d146      	bne.n	80007d4 <__udivmoddi4+0x14c>
 8000746:	4573      	cmp	r3, lr
 8000748:	d302      	bcc.n	8000750 <__udivmoddi4+0xc8>
 800074a:	4282      	cmp	r2, r0
 800074c:	f200 8105 	bhi.w	800095a <__udivmoddi4+0x2d2>
 8000750:	1a84      	subs	r4, r0, r2
 8000752:	eb6e 0203 	sbc.w	r2, lr, r3
 8000756:	2001      	movs	r0, #1
 8000758:	4690      	mov	r8, r2
 800075a:	2d00      	cmp	r5, #0
 800075c:	d0e5      	beq.n	800072a <__udivmoddi4+0xa2>
 800075e:	e9c5 4800 	strd	r4, r8, [r5]
 8000762:	e7e2      	b.n	800072a <__udivmoddi4+0xa2>
 8000764:	2a00      	cmp	r2, #0
 8000766:	f000 8090 	beq.w	800088a <__udivmoddi4+0x202>
 800076a:	fab2 f682 	clz	r6, r2
 800076e:	2e00      	cmp	r6, #0
 8000770:	f040 80a4 	bne.w	80008bc <__udivmoddi4+0x234>
 8000774:	1a8a      	subs	r2, r1, r2
 8000776:	0c03      	lsrs	r3, r0, #16
 8000778:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800077c:	b280      	uxth	r0, r0
 800077e:	b2bc      	uxth	r4, r7
 8000780:	2101      	movs	r1, #1
 8000782:	fbb2 fcfe 	udiv	ip, r2, lr
 8000786:	fb0e 221c 	mls	r2, lr, ip, r2
 800078a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800078e:	fb04 f20c 	mul.w	r2, r4, ip
 8000792:	429a      	cmp	r2, r3
 8000794:	d907      	bls.n	80007a6 <__udivmoddi4+0x11e>
 8000796:	18fb      	adds	r3, r7, r3
 8000798:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 800079c:	d202      	bcs.n	80007a4 <__udivmoddi4+0x11c>
 800079e:	429a      	cmp	r2, r3
 80007a0:	f200 80e0 	bhi.w	8000964 <__udivmoddi4+0x2dc>
 80007a4:	46c4      	mov	ip, r8
 80007a6:	1a9b      	subs	r3, r3, r2
 80007a8:	fbb3 f2fe 	udiv	r2, r3, lr
 80007ac:	fb0e 3312 	mls	r3, lr, r2, r3
 80007b0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80007b4:	fb02 f404 	mul.w	r4, r2, r4
 80007b8:	429c      	cmp	r4, r3
 80007ba:	d907      	bls.n	80007cc <__udivmoddi4+0x144>
 80007bc:	18fb      	adds	r3, r7, r3
 80007be:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80007c2:	d202      	bcs.n	80007ca <__udivmoddi4+0x142>
 80007c4:	429c      	cmp	r4, r3
 80007c6:	f200 80ca 	bhi.w	800095e <__udivmoddi4+0x2d6>
 80007ca:	4602      	mov	r2, r0
 80007cc:	1b1b      	subs	r3, r3, r4
 80007ce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80007d2:	e7a5      	b.n	8000720 <__udivmoddi4+0x98>
 80007d4:	f1c1 0620 	rsb	r6, r1, #32
 80007d8:	408b      	lsls	r3, r1
 80007da:	fa22 f706 	lsr.w	r7, r2, r6
 80007de:	431f      	orrs	r7, r3
 80007e0:	fa0e f401 	lsl.w	r4, lr, r1
 80007e4:	fa20 f306 	lsr.w	r3, r0, r6
 80007e8:	fa2e fe06 	lsr.w	lr, lr, r6
 80007ec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80007f0:	4323      	orrs	r3, r4
 80007f2:	fa00 f801 	lsl.w	r8, r0, r1
 80007f6:	fa1f fc87 	uxth.w	ip, r7
 80007fa:	fbbe f0f9 	udiv	r0, lr, r9
 80007fe:	0c1c      	lsrs	r4, r3, #16
 8000800:	fb09 ee10 	mls	lr, r9, r0, lr
 8000804:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000808:	fb00 fe0c 	mul.w	lr, r0, ip
 800080c:	45a6      	cmp	lr, r4
 800080e:	fa02 f201 	lsl.w	r2, r2, r1
 8000812:	d909      	bls.n	8000828 <__udivmoddi4+0x1a0>
 8000814:	193c      	adds	r4, r7, r4
 8000816:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 800081a:	f080 809c 	bcs.w	8000956 <__udivmoddi4+0x2ce>
 800081e:	45a6      	cmp	lr, r4
 8000820:	f240 8099 	bls.w	8000956 <__udivmoddi4+0x2ce>
 8000824:	3802      	subs	r0, #2
 8000826:	443c      	add	r4, r7
 8000828:	eba4 040e 	sub.w	r4, r4, lr
 800082c:	fa1f fe83 	uxth.w	lr, r3
 8000830:	fbb4 f3f9 	udiv	r3, r4, r9
 8000834:	fb09 4413 	mls	r4, r9, r3, r4
 8000838:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800083c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000840:	45a4      	cmp	ip, r4
 8000842:	d908      	bls.n	8000856 <__udivmoddi4+0x1ce>
 8000844:	193c      	adds	r4, r7, r4
 8000846:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 800084a:	f080 8082 	bcs.w	8000952 <__udivmoddi4+0x2ca>
 800084e:	45a4      	cmp	ip, r4
 8000850:	d97f      	bls.n	8000952 <__udivmoddi4+0x2ca>
 8000852:	3b02      	subs	r3, #2
 8000854:	443c      	add	r4, r7
 8000856:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800085a:	eba4 040c 	sub.w	r4, r4, ip
 800085e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000862:	4564      	cmp	r4, ip
 8000864:	4673      	mov	r3, lr
 8000866:	46e1      	mov	r9, ip
 8000868:	d362      	bcc.n	8000930 <__udivmoddi4+0x2a8>
 800086a:	d05f      	beq.n	800092c <__udivmoddi4+0x2a4>
 800086c:	b15d      	cbz	r5, 8000886 <__udivmoddi4+0x1fe>
 800086e:	ebb8 0203 	subs.w	r2, r8, r3
 8000872:	eb64 0409 	sbc.w	r4, r4, r9
 8000876:	fa04 f606 	lsl.w	r6, r4, r6
 800087a:	fa22 f301 	lsr.w	r3, r2, r1
 800087e:	431e      	orrs	r6, r3
 8000880:	40cc      	lsrs	r4, r1
 8000882:	e9c5 6400 	strd	r6, r4, [r5]
 8000886:	2100      	movs	r1, #0
 8000888:	e74f      	b.n	800072a <__udivmoddi4+0xa2>
 800088a:	fbb1 fcf2 	udiv	ip, r1, r2
 800088e:	0c01      	lsrs	r1, r0, #16
 8000890:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000894:	b280      	uxth	r0, r0
 8000896:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800089a:	463b      	mov	r3, r7
 800089c:	4638      	mov	r0, r7
 800089e:	463c      	mov	r4, r7
 80008a0:	46b8      	mov	r8, r7
 80008a2:	46be      	mov	lr, r7
 80008a4:	2620      	movs	r6, #32
 80008a6:	fbb1 f1f7 	udiv	r1, r1, r7
 80008aa:	eba2 0208 	sub.w	r2, r2, r8
 80008ae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80008b2:	e766      	b.n	8000782 <__udivmoddi4+0xfa>
 80008b4:	4601      	mov	r1, r0
 80008b6:	e718      	b.n	80006ea <__udivmoddi4+0x62>
 80008b8:	4610      	mov	r0, r2
 80008ba:	e72c      	b.n	8000716 <__udivmoddi4+0x8e>
 80008bc:	f1c6 0220 	rsb	r2, r6, #32
 80008c0:	fa2e f302 	lsr.w	r3, lr, r2
 80008c4:	40b7      	lsls	r7, r6
 80008c6:	40b1      	lsls	r1, r6
 80008c8:	fa20 f202 	lsr.w	r2, r0, r2
 80008cc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008d0:	430a      	orrs	r2, r1
 80008d2:	fbb3 f8fe 	udiv	r8, r3, lr
 80008d6:	b2bc      	uxth	r4, r7
 80008d8:	fb0e 3318 	mls	r3, lr, r8, r3
 80008dc:	0c11      	lsrs	r1, r2, #16
 80008de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80008e2:	fb08 f904 	mul.w	r9, r8, r4
 80008e6:	40b0      	lsls	r0, r6
 80008e8:	4589      	cmp	r9, r1
 80008ea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80008ee:	b280      	uxth	r0, r0
 80008f0:	d93e      	bls.n	8000970 <__udivmoddi4+0x2e8>
 80008f2:	1879      	adds	r1, r7, r1
 80008f4:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 80008f8:	d201      	bcs.n	80008fe <__udivmoddi4+0x276>
 80008fa:	4589      	cmp	r9, r1
 80008fc:	d81f      	bhi.n	800093e <__udivmoddi4+0x2b6>
 80008fe:	eba1 0109 	sub.w	r1, r1, r9
 8000902:	fbb1 f9fe 	udiv	r9, r1, lr
 8000906:	fb09 f804 	mul.w	r8, r9, r4
 800090a:	fb0e 1119 	mls	r1, lr, r9, r1
 800090e:	b292      	uxth	r2, r2
 8000910:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000914:	4542      	cmp	r2, r8
 8000916:	d229      	bcs.n	800096c <__udivmoddi4+0x2e4>
 8000918:	18ba      	adds	r2, r7, r2
 800091a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 800091e:	d2c4      	bcs.n	80008aa <__udivmoddi4+0x222>
 8000920:	4542      	cmp	r2, r8
 8000922:	d2c2      	bcs.n	80008aa <__udivmoddi4+0x222>
 8000924:	f1a9 0102 	sub.w	r1, r9, #2
 8000928:	443a      	add	r2, r7
 800092a:	e7be      	b.n	80008aa <__udivmoddi4+0x222>
 800092c:	45f0      	cmp	r8, lr
 800092e:	d29d      	bcs.n	800086c <__udivmoddi4+0x1e4>
 8000930:	ebbe 0302 	subs.w	r3, lr, r2
 8000934:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000938:	3801      	subs	r0, #1
 800093a:	46e1      	mov	r9, ip
 800093c:	e796      	b.n	800086c <__udivmoddi4+0x1e4>
 800093e:	eba7 0909 	sub.w	r9, r7, r9
 8000942:	4449      	add	r1, r9
 8000944:	f1a8 0c02 	sub.w	ip, r8, #2
 8000948:	fbb1 f9fe 	udiv	r9, r1, lr
 800094c:	fb09 f804 	mul.w	r8, r9, r4
 8000950:	e7db      	b.n	800090a <__udivmoddi4+0x282>
 8000952:	4673      	mov	r3, lr
 8000954:	e77f      	b.n	8000856 <__udivmoddi4+0x1ce>
 8000956:	4650      	mov	r0, sl
 8000958:	e766      	b.n	8000828 <__udivmoddi4+0x1a0>
 800095a:	4608      	mov	r0, r1
 800095c:	e6fd      	b.n	800075a <__udivmoddi4+0xd2>
 800095e:	443b      	add	r3, r7
 8000960:	3a02      	subs	r2, #2
 8000962:	e733      	b.n	80007cc <__udivmoddi4+0x144>
 8000964:	f1ac 0c02 	sub.w	ip, ip, #2
 8000968:	443b      	add	r3, r7
 800096a:	e71c      	b.n	80007a6 <__udivmoddi4+0x11e>
 800096c:	4649      	mov	r1, r9
 800096e:	e79c      	b.n	80008aa <__udivmoddi4+0x222>
 8000970:	eba1 0109 	sub.w	r1, r1, r9
 8000974:	46c4      	mov	ip, r8
 8000976:	fbb1 f9fe 	udiv	r9, r1, lr
 800097a:	fb09 f804 	mul.w	r8, r9, r4
 800097e:	e7c4      	b.n	800090a <__udivmoddi4+0x282>

08000980 <__aeabi_idiv0>:
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop

08000984 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000988:	2200      	movs	r2, #0
 800098a:	2120      	movs	r1, #32
 800098c:	4802      	ldr	r0, [pc, #8]	@ (8000998 <ILI9341_Select+0x14>)
 800098e:	f002 f811 	bl	80029b4 <HAL_GPIO_WritePin>
}
 8000992:	bf00      	nop
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40020800 	.word	0x40020800

0800099c <ILI9341_Unselect>:

void ILI9341_Unselect() {
 800099c:	b580      	push	{r7, lr}
 800099e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 80009a0:	2201      	movs	r2, #1
 80009a2:	2120      	movs	r1, #32
 80009a4:	4802      	ldr	r0, [pc, #8]	@ (80009b0 <ILI9341_Unselect+0x14>)
 80009a6:	f002 f805 	bl	80029b4 <HAL_GPIO_WritePin>
}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40020800 	.word	0x40020800

080009b4 <ILI9341_Reset>:

static void ILI9341_Reset() {
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 80009b8:	2200      	movs	r2, #0
 80009ba:	2110      	movs	r1, #16
 80009bc:	4806      	ldr	r0, [pc, #24]	@ (80009d8 <ILI9341_Reset+0x24>)
 80009be:	f001 fff9 	bl	80029b4 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 80009c2:	2005      	movs	r0, #5
 80009c4:	f001 f9c8 	bl	8001d58 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 80009c8:	2201      	movs	r2, #1
 80009ca:	2110      	movs	r1, #16
 80009cc:	4802      	ldr	r0, [pc, #8]	@ (80009d8 <ILI9341_Reset+0x24>)
 80009ce:	f001 fff1 	bl	80029b4 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	40020800 	.word	0x40020800

080009dc <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 80009dc:	b580      	push	{r7, lr}
 80009de:	b082      	sub	sp, #8
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	4603      	mov	r3, r0
 80009e4:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2101      	movs	r1, #1
 80009ea:	4807      	ldr	r0, [pc, #28]	@ (8000a08 <ILI9341_WriteCommand+0x2c>)
 80009ec:	f001 ffe2 	bl	80029b4 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 80009f0:	1df9      	adds	r1, r7, #7
 80009f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009f6:	2201      	movs	r2, #1
 80009f8:	4804      	ldr	r0, [pc, #16]	@ (8000a0c <ILI9341_WriteCommand+0x30>)
 80009fa:	f003 fc18 	bl	800422e <HAL_SPI_Transmit>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40020400 	.word	0x40020400
 8000a0c:	2000052c 	.word	0x2000052c

08000a10 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
 8000a18:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000a1a:	2201      	movs	r2, #1
 8000a1c:	2101      	movs	r1, #1
 8000a1e:	4811      	ldr	r0, [pc, #68]	@ (8000a64 <ILI9341_WriteData+0x54>)
 8000a20:	f001 ffc8 	bl	80029b4 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000a24:	e015      	b.n	8000a52 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000a2c:	bf28      	it	cs
 8000a2e:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000a32:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000a34:	89fa      	ldrh	r2, [r7, #14]
 8000a36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a3a:	6879      	ldr	r1, [r7, #4]
 8000a3c:	480a      	ldr	r0, [pc, #40]	@ (8000a68 <ILI9341_WriteData+0x58>)
 8000a3e:	f003 fbf6 	bl	800422e <HAL_SPI_Transmit>
        buff += chunk_size;
 8000a42:	89fb      	ldrh	r3, [r7, #14]
 8000a44:	687a      	ldr	r2, [r7, #4]
 8000a46:	4413      	add	r3, r2
 8000a48:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000a4a:	89fb      	ldrh	r3, [r7, #14]
 8000a4c:	683a      	ldr	r2, [r7, #0]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000a52:	683b      	ldr	r3, [r7, #0]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d1e6      	bne.n	8000a26 <ILI9341_WriteData+0x16>
    }
}
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020400 	.word	0x40020400
 8000a68:	2000052c 	.word	0x2000052c

08000a6c <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000a6c:	b590      	push	{r4, r7, lr}
 8000a6e:	b085      	sub	sp, #20
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4604      	mov	r4, r0
 8000a74:	4608      	mov	r0, r1
 8000a76:	4611      	mov	r1, r2
 8000a78:	461a      	mov	r2, r3
 8000a7a:	4623      	mov	r3, r4
 8000a7c:	80fb      	strh	r3, [r7, #6]
 8000a7e:	4603      	mov	r3, r0
 8000a80:	80bb      	strh	r3, [r7, #4]
 8000a82:	460b      	mov	r3, r1
 8000a84:	807b      	strh	r3, [r7, #2]
 8000a86:	4613      	mov	r3, r2
 8000a88:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000a8a:	202a      	movs	r0, #42	@ 0x2a
 8000a8c:	f7ff ffa6 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000a90:	88fb      	ldrh	r3, [r7, #6]
 8000a92:	0a1b      	lsrs	r3, r3, #8
 8000a94:	b29b      	uxth	r3, r3
 8000a96:	b2db      	uxtb	r3, r3
 8000a98:	733b      	strb	r3, [r7, #12]
 8000a9a:	88fb      	ldrh	r3, [r7, #6]
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	737b      	strb	r3, [r7, #13]
 8000aa0:	887b      	ldrh	r3, [r7, #2]
 8000aa2:	0a1b      	lsrs	r3, r3, #8
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	73bb      	strb	r3, [r7, #14]
 8000aaa:	887b      	ldrh	r3, [r7, #2]
 8000aac:	b2db      	uxtb	r3, r3
 8000aae:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8000ab0:	f107 030c 	add.w	r3, r7, #12
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff ffaa 	bl	8000a10 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 8000abc:	202b      	movs	r0, #43	@ 0x2b
 8000abe:	f7ff ff8d 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8000ac2:	88bb      	ldrh	r3, [r7, #4]
 8000ac4:	0a1b      	lsrs	r3, r3, #8
 8000ac6:	b29b      	uxth	r3, r3
 8000ac8:	b2db      	uxtb	r3, r3
 8000aca:	723b      	strb	r3, [r7, #8]
 8000acc:	88bb      	ldrh	r3, [r7, #4]
 8000ace:	b2db      	uxtb	r3, r3
 8000ad0:	727b      	strb	r3, [r7, #9]
 8000ad2:	883b      	ldrh	r3, [r7, #0]
 8000ad4:	0a1b      	lsrs	r3, r3, #8
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	b2db      	uxtb	r3, r3
 8000ada:	72bb      	strb	r3, [r7, #10]
 8000adc:	883b      	ldrh	r3, [r7, #0]
 8000ade:	b2db      	uxtb	r3, r3
 8000ae0:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8000ae2:	f107 0308 	add.w	r3, r7, #8
 8000ae6:	2104      	movs	r1, #4
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f7ff ff91 	bl	8000a10 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 8000aee:	202c      	movs	r0, #44	@ 0x2c
 8000af0:	f7ff ff74 	bl	80009dc <ILI9341_WriteCommand>
}
 8000af4:	bf00      	nop
 8000af6:	3714      	adds	r7, #20
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd90      	pop	{r4, r7, pc}

08000afc <ILI9341_Init>:

void ILI9341_Init() {
 8000afc:	b590      	push	{r4, r7, lr}
 8000afe:	b09b      	sub	sp, #108	@ 0x6c
 8000b00:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8000b02:	f7ff ff3f 	bl	8000984 <ILI9341_Select>
    ILI9341_Reset();
 8000b06:	f7ff ff55 	bl	80009b4 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 8000b0a:	2001      	movs	r0, #1
 8000b0c:	f7ff ff66 	bl	80009dc <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8000b10:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b14:	f001 f920 	bl	8001d58 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8000b18:	20cb      	movs	r0, #203	@ 0xcb
 8000b1a:	f7ff ff5f 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 8000b1e:	4a87      	ldr	r2, [pc, #540]	@ (8000d3c <ILI9341_Init+0x240>)
 8000b20:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b24:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b28:	6018      	str	r0, [r3, #0]
 8000b2a:	3304      	adds	r3, #4
 8000b2c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000b2e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8000b32:	2105      	movs	r1, #5
 8000b34:	4618      	mov	r0, r3
 8000b36:	f7ff ff6b 	bl	8000a10 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 8000b3a:	20cf      	movs	r0, #207	@ 0xcf
 8000b3c:	f7ff ff4e 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8000b40:	4a7f      	ldr	r2, [pc, #508]	@ (8000d40 <ILI9341_Init+0x244>)
 8000b42:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b46:	6812      	ldr	r2, [r2, #0]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	8019      	strh	r1, [r3, #0]
 8000b4c:	3302      	adds	r3, #2
 8000b4e:	0c12      	lsrs	r2, r2, #16
 8000b50:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000b52:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000b56:	2103      	movs	r1, #3
 8000b58:	4618      	mov	r0, r3
 8000b5a:	f7ff ff59 	bl	8000a10 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 8000b5e:	20e8      	movs	r0, #232	@ 0xe8
 8000b60:	f7ff ff3c 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 8000b64:	4a77      	ldr	r2, [pc, #476]	@ (8000d44 <ILI9341_Init+0x248>)
 8000b66:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b6a:	6812      	ldr	r2, [r2, #0]
 8000b6c:	4611      	mov	r1, r2
 8000b6e:	8019      	strh	r1, [r3, #0]
 8000b70:	3302      	adds	r3, #2
 8000b72:	0c12      	lsrs	r2, r2, #16
 8000b74:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000b76:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000b7a:	2103      	movs	r1, #3
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ff47 	bl	8000a10 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 8000b82:	20ea      	movs	r0, #234	@ 0xea
 8000b84:	f7ff ff2a 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 8000b88:	2300      	movs	r3, #0
 8000b8a:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 8000b8e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b92:	2102      	movs	r1, #2
 8000b94:	4618      	mov	r0, r3
 8000b96:	f7ff ff3b 	bl	8000a10 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 8000b9a:	20ed      	movs	r0, #237	@ 0xed
 8000b9c:	f7ff ff1e 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 8000ba0:	4b69      	ldr	r3, [pc, #420]	@ (8000d48 <ILI9341_Init+0x24c>)
 8000ba2:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 8000ba4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8000ba8:	2104      	movs	r1, #4
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff30 	bl	8000a10 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8000bb0:	20f7      	movs	r0, #247	@ 0xf7
 8000bb2:	f7ff ff13 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8000bb6:	2320      	movs	r3, #32
 8000bb8:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 8000bbc:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000bc0:	2101      	movs	r1, #1
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f7ff ff24 	bl	8000a10 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8000bc8:	20c0      	movs	r0, #192	@ 0xc0
 8000bca:	f7ff ff07 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 8000bce:	2323      	movs	r3, #35	@ 0x23
 8000bd0:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8000bd4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000bd8:	2101      	movs	r1, #1
 8000bda:	4618      	mov	r0, r3
 8000bdc:	f7ff ff18 	bl	8000a10 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8000be0:	20c1      	movs	r0, #193	@ 0xc1
 8000be2:	f7ff fefb 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8000be6:	2310      	movs	r3, #16
 8000be8:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 8000bec:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f7ff ff0c 	bl	8000a10 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8000bf8:	20c5      	movs	r0, #197	@ 0xc5
 8000bfa:	f7ff feef 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 8000bfe:	f642 033e 	movw	r3, #10302	@ 0x283e
 8000c02:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8000c06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000c0a:	2102      	movs	r1, #2
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff feff 	bl	8000a10 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8000c12:	20c7      	movs	r0, #199	@ 0xc7
 8000c14:	f7ff fee2 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8000c18:	2386      	movs	r3, #134	@ 0x86
 8000c1a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 8000c1e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000c22:	2101      	movs	r1, #1
 8000c24:	4618      	mov	r0, r3
 8000c26:	f7ff fef3 	bl	8000a10 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 8000c2a:	2036      	movs	r0, #54	@ 0x36
 8000c2c:	f7ff fed6 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8000c30:	2348      	movs	r3, #72	@ 0x48
 8000c32:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8000c36:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8000c3a:	2101      	movs	r1, #1
 8000c3c:	4618      	mov	r0, r3
 8000c3e:	f7ff fee7 	bl	8000a10 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8000c42:	203a      	movs	r0, #58	@ 0x3a
 8000c44:	f7ff feca 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8000c48:	2355      	movs	r3, #85	@ 0x55
 8000c4a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 8000c4e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8000c52:	2101      	movs	r1, #1
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fedb 	bl	8000a10 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 8000c5a:	20b1      	movs	r0, #177	@ 0xb1
 8000c5c:	f7ff febe 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 8000c60:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000c64:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 8000c66:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000c6a:	2102      	movs	r1, #2
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f7ff fecf 	bl	8000a10 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 8000c72:	20b6      	movs	r0, #182	@ 0xb6
 8000c74:	f7ff feb2 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 8000c78:	4a34      	ldr	r2, [pc, #208]	@ (8000d4c <ILI9341_Init+0x250>)
 8000c7a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c7e:	6812      	ldr	r2, [r2, #0]
 8000c80:	4611      	mov	r1, r2
 8000c82:	8019      	strh	r1, [r3, #0]
 8000c84:	3302      	adds	r3, #2
 8000c86:	0c12      	lsrs	r2, r2, #16
 8000c88:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000c8a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c8e:	2103      	movs	r1, #3
 8000c90:	4618      	mov	r0, r3
 8000c92:	f7ff febd 	bl	8000a10 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 8000c96:	20f2      	movs	r0, #242	@ 0xf2
 8000c98:	f7ff fea0 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 8000ca2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ca6:	2101      	movs	r1, #1
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff feb1 	bl	8000a10 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 8000cae:	2026      	movs	r0, #38	@ 0x26
 8000cb0:	f7ff fe94 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8000cb4:	2301      	movs	r3, #1
 8000cb6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 8000cba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cbe:	2101      	movs	r1, #1
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff fea5 	bl	8000a10 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8000cc6:	20e0      	movs	r0, #224	@ 0xe0
 8000cc8:	f7ff fe88 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 8000ccc:	4b20      	ldr	r3, [pc, #128]	@ (8000d50 <ILI9341_Init+0x254>)
 8000cce:	f107 0414 	add.w	r4, r7, #20
 8000cd2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cd4:	c407      	stmia	r4!, {r0, r1, r2}
 8000cd6:	8023      	strh	r3, [r4, #0]
 8000cd8:	3402      	adds	r4, #2
 8000cda:	0c1b      	lsrs	r3, r3, #16
 8000cdc:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 8000cde:	f107 0314 	add.w	r3, r7, #20
 8000ce2:	210f      	movs	r1, #15
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f7ff fe93 	bl	8000a10 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 8000cea:	20e1      	movs	r0, #225	@ 0xe1
 8000cec:	f7ff fe76 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8000cf0:	4b18      	ldr	r3, [pc, #96]	@ (8000d54 <ILI9341_Init+0x258>)
 8000cf2:	1d3c      	adds	r4, r7, #4
 8000cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf6:	c407      	stmia	r4!, {r0, r1, r2}
 8000cf8:	8023      	strh	r3, [r4, #0]
 8000cfa:	3402      	adds	r4, #2
 8000cfc:	0c1b      	lsrs	r3, r3, #16
 8000cfe:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8000d00:	1d3b      	adds	r3, r7, #4
 8000d02:	210f      	movs	r1, #15
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fe83 	bl	8000a10 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 8000d0a:	2011      	movs	r0, #17
 8000d0c:	f7ff fe66 	bl	80009dc <ILI9341_WriteCommand>
    HAL_Delay(120);
 8000d10:	2078      	movs	r0, #120	@ 0x78
 8000d12:	f001 f821 	bl	8001d58 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8000d16:	2029      	movs	r0, #41	@ 0x29
 8000d18:	f7ff fe60 	bl	80009dc <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 8000d1c:	2036      	movs	r0, #54	@ 0x36
 8000d1e:	f7ff fe5d 	bl	80009dc <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8000d22:	2328      	movs	r3, #40	@ 0x28
 8000d24:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8000d26:	463b      	mov	r3, r7
 8000d28:	2101      	movs	r1, #1
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f7ff fe70 	bl	8000a10 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8000d30:	f7ff fe34 	bl	800099c <ILI9341_Unselect>
}
 8000d34:	bf00      	nop
 8000d36:	376c      	adds	r7, #108	@ 0x6c
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	0800cef0 	.word	0x0800cef0
 8000d40:	0800cef8 	.word	0x0800cef8
 8000d44:	0800cefc 	.word	0x0800cefc
 8000d48:	81120364 	.word	0x81120364
 8000d4c:	0800cf00 	.word	0x0800cf00
 8000d50:	0800cf04 	.word	0x0800cf04
 8000d54:	0800cf14 	.word	0x0800cf14

08000d58 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	80fb      	strh	r3, [r7, #6]
 8000d62:	460b      	mov	r3, r1
 8000d64:	80bb      	strh	r3, [r7, #4]
 8000d66:	4613      	mov	r3, r2
 8000d68:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000d70:	d21f      	bcs.n	8000db2 <ILI9341_DrawPixel+0x5a>
 8000d72:	88bb      	ldrh	r3, [r7, #4]
 8000d74:	2bef      	cmp	r3, #239	@ 0xef
 8000d76:	d81c      	bhi.n	8000db2 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 8000d78:	f7ff fe04 	bl	8000984 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 8000d7c:	88fb      	ldrh	r3, [r7, #6]
 8000d7e:	3301      	adds	r3, #1
 8000d80:	b29a      	uxth	r2, r3
 8000d82:	88bb      	ldrh	r3, [r7, #4]
 8000d84:	3301      	adds	r3, #1
 8000d86:	b29b      	uxth	r3, r3
 8000d88:	88b9      	ldrh	r1, [r7, #4]
 8000d8a:	88f8      	ldrh	r0, [r7, #6]
 8000d8c:	f7ff fe6e 	bl	8000a6c <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 8000d90:	887b      	ldrh	r3, [r7, #2]
 8000d92:	0a1b      	lsrs	r3, r3, #8
 8000d94:	b29b      	uxth	r3, r3
 8000d96:	b2db      	uxtb	r3, r3
 8000d98:	733b      	strb	r3, [r7, #12]
 8000d9a:	887b      	ldrh	r3, [r7, #2]
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 8000da0:	f107 030c 	add.w	r3, r7, #12
 8000da4:	2102      	movs	r1, #2
 8000da6:	4618      	mov	r0, r3
 8000da8:	f7ff fe32 	bl	8000a10 <ILI9341_WriteData>

    ILI9341_Unselect();
 8000dac:	f7ff fdf6 	bl	800099c <ILI9341_Unselect>
 8000db0:	e000      	b.n	8000db4 <ILI9341_DrawPixel+0x5c>
        return;
 8000db2:	bf00      	nop
}
 8000db4:	3710      	adds	r7, #16
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
	...

08000dbc <ILI9341_FillRectangle>:
    }

    ILI9341_Unselect();
}

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000dbc:	b590      	push	{r4, r7, lr}
 8000dbe:	b085      	sub	sp, #20
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	4604      	mov	r4, r0
 8000dc4:	4608      	mov	r0, r1
 8000dc6:	4611      	mov	r1, r2
 8000dc8:	461a      	mov	r2, r3
 8000dca:	4623      	mov	r3, r4
 8000dcc:	80fb      	strh	r3, [r7, #6]
 8000dce:	4603      	mov	r3, r0
 8000dd0:	80bb      	strh	r3, [r7, #4]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	807b      	strh	r3, [r7, #2]
 8000dd6:	4613      	mov	r3, r2
 8000dd8:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000dda:	88fb      	ldrh	r3, [r7, #6]
 8000ddc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000de0:	d252      	bcs.n	8000e88 <ILI9341_FillRectangle+0xcc>
 8000de2:	88bb      	ldrh	r3, [r7, #4]
 8000de4:	2bef      	cmp	r3, #239	@ 0xef
 8000de6:	d84f      	bhi.n	8000e88 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000de8:	88fa      	ldrh	r2, [r7, #6]
 8000dea:	887b      	ldrh	r3, [r7, #2]
 8000dec:	4413      	add	r3, r2
 8000dee:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000df2:	dd03      	ble.n	8000dfc <ILI9341_FillRectangle+0x40>
 8000df4:	88fb      	ldrh	r3, [r7, #6]
 8000df6:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000dfa:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000dfc:	88ba      	ldrh	r2, [r7, #4]
 8000dfe:	883b      	ldrh	r3, [r7, #0]
 8000e00:	4413      	add	r3, r2
 8000e02:	2bf0      	cmp	r3, #240	@ 0xf0
 8000e04:	dd03      	ble.n	8000e0e <ILI9341_FillRectangle+0x52>
 8000e06:	88bb      	ldrh	r3, [r7, #4]
 8000e08:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000e0c:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 8000e0e:	f7ff fdb9 	bl	8000984 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 8000e12:	88fa      	ldrh	r2, [r7, #6]
 8000e14:	887b      	ldrh	r3, [r7, #2]
 8000e16:	4413      	add	r3, r2
 8000e18:	b29b      	uxth	r3, r3
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	b29c      	uxth	r4, r3
 8000e1e:	88ba      	ldrh	r2, [r7, #4]
 8000e20:	883b      	ldrh	r3, [r7, #0]
 8000e22:	4413      	add	r3, r2
 8000e24:	b29b      	uxth	r3, r3
 8000e26:	3b01      	subs	r3, #1
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	88b9      	ldrh	r1, [r7, #4]
 8000e2c:	88f8      	ldrh	r0, [r7, #6]
 8000e2e:	4622      	mov	r2, r4
 8000e30:	f7ff fe1c 	bl	8000a6c <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 8000e34:	8c3b      	ldrh	r3, [r7, #32]
 8000e36:	0a1b      	lsrs	r3, r3, #8
 8000e38:	b29b      	uxth	r3, r3
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	733b      	strb	r3, [r7, #12]
 8000e3e:	8c3b      	ldrh	r3, [r7, #32]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000e44:	2201      	movs	r2, #1
 8000e46:	2101      	movs	r1, #1
 8000e48:	4811      	ldr	r0, [pc, #68]	@ (8000e90 <ILI9341_FillRectangle+0xd4>)
 8000e4a:	f001 fdb3 	bl	80029b4 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8000e4e:	883b      	ldrh	r3, [r7, #0]
 8000e50:	80bb      	strh	r3, [r7, #4]
 8000e52:	e013      	b.n	8000e7c <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 8000e54:	887b      	ldrh	r3, [r7, #2]
 8000e56:	80fb      	strh	r3, [r7, #6]
 8000e58:	e00a      	b.n	8000e70 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8000e5a:	f107 010c 	add.w	r1, r7, #12
 8000e5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e62:	2202      	movs	r2, #2
 8000e64:	480b      	ldr	r0, [pc, #44]	@ (8000e94 <ILI9341_FillRectangle+0xd8>)
 8000e66:	f003 f9e2 	bl	800422e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8000e6a:	88fb      	ldrh	r3, [r7, #6]
 8000e6c:	3b01      	subs	r3, #1
 8000e6e:	80fb      	strh	r3, [r7, #6]
 8000e70:	88fb      	ldrh	r3, [r7, #6]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d1f1      	bne.n	8000e5a <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 8000e76:	88bb      	ldrh	r3, [r7, #4]
 8000e78:	3b01      	subs	r3, #1
 8000e7a:	80bb      	strh	r3, [r7, #4]
 8000e7c:	88bb      	ldrh	r3, [r7, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d1e8      	bne.n	8000e54 <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 8000e82:	f7ff fd8b 	bl	800099c <ILI9341_Unselect>
 8000e86:	e000      	b.n	8000e8a <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8000e88:	bf00      	nop
}
 8000e8a:	3714      	adds	r7, #20
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	bd90      	pop	{r4, r7, pc}
 8000e90:	40020400 	.word	0x40020400
 8000e94:	2000052c 	.word	0x2000052c

08000e98 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b084      	sub	sp, #16
 8000e9c:	af02      	add	r7, sp, #8
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 8000ea2:	88fb      	ldrh	r3, [r7, #6]
 8000ea4:	9300      	str	r3, [sp, #0]
 8000ea6:	23f0      	movs	r3, #240	@ 0xf0
 8000ea8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000eac:	2100      	movs	r1, #0
 8000eae:	2000      	movs	r0, #0
 8000eb0:	f7ff ff84 	bl	8000dbc <ILI9341_FillRectangle>
}
 8000eb4:	bf00      	nop
 8000eb6:	3708      	adds	r7, #8
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}

08000ebc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ec0:	f000 ff08 	bl	8001cd4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ec4:	f000 f888 	bl	8000fd8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ec8:	f000 f990 	bl	80011ec <MX_GPIO_Init>
  MX_DMA_Init();
 8000ecc:	f000 f96e 	bl	80011ac <MX_DMA_Init>
  MX_CRC_Init();
 8000ed0:	f000 f8ec 	bl	80010ac <MX_CRC_Init>
  MX_I2S2_Init();
 8000ed4:	f000 f906 	bl	80010e4 <MX_I2S2_Init>
  MX_PDM2PCM_Init();
 8000ed8:	f007 fbf6 	bl	80086c8 <MX_PDM2PCM_Init>
  MX_SPI1_Init();
 8000edc:	f000 f930 	bl	8001140 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

	/* Display driver initialize */
	ILI9341_Init();
 8000ee0:	f7ff fe0c 	bl	8000afc <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	f7ff ffd7 	bl	8000e98 <ILI9341_FillScreen>
#ifdef TEST
	ILI9341_DrawImage(0, 0, 240, 240, (uint16_t*) test_img_240x240);
#endif

	/* DMA initialize */
	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*) rx_buff, RX_BUFFER_SIZE);
 8000eea:	2280      	movs	r2, #128	@ 0x80
 8000eec:	4923      	ldr	r1, [pc, #140]	@ (8000f7c <main+0xc0>)
 8000eee:	4824      	ldr	r0, [pc, #144]	@ (8000f80 <main+0xc4>)
 8000ef0:	f001 feba 	bl	8002c68 <HAL_I2S_Receive_DMA>

	/* FFT initialize */
	arm_rfft_fast_init_f32(&fft_audio_instance, FFT_LENGTH);
 8000ef4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000ef8:	4822      	ldr	r0, [pc, #136]	@ (8000f84 <main+0xc8>)
 8000efa:	f009 fba7 	bl	800a64c <arm_rfft_fast_init_f32>

	/* Init Hann multipliers */
	init_hann_window(hann_table);
 8000efe:	4822      	ldr	r0, [pc, #136]	@ (8000f88 <main+0xcc>)
 8000f00:	f000 fa58 	bl	80013b4 <init_hann_window>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000f04:	f003 fe94 	bl	8004c30 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of NormalizedMutex */
  NormalizedMutexHandle = osMutexNew(&NormalizedMutex_attributes);
 8000f08:	4820      	ldr	r0, [pc, #128]	@ (8000f8c <main+0xd0>)
 8000f0a:	f004 f854 	bl	8004fb6 <osMutexNew>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	4a1f      	ldr	r2, [pc, #124]	@ (8000f90 <main+0xd4>)
 8000f12:	6013      	str	r3, [r2, #0]

  /* creation of FFTMagMutex */
  FFTMagMutexHandle = osMutexNew(&FFTMagMutex_attributes);
 8000f14:	481f      	ldr	r0, [pc, #124]	@ (8000f94 <main+0xd8>)
 8000f16:	f004 f84e 	bl	8004fb6 <osMutexNew>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8000f98 <main+0xdc>)
 8000f1e:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of AudioCapture */
  AudioCaptureHandle = osThreadNew(AudioCaptureTask, NULL, &AudioCapture_attributes);
 8000f20:	4a1e      	ldr	r2, [pc, #120]	@ (8000f9c <main+0xe0>)
 8000f22:	2100      	movs	r1, #0
 8000f24:	481e      	ldr	r0, [pc, #120]	@ (8000fa0 <main+0xe4>)
 8000f26:	f003 fecd 	bl	8004cc4 <osThreadNew>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa4 <main+0xe8>)
 8000f2e:	6013      	str	r3, [r2, #0]

  /* creation of FFTProcessing */
  FFTProcessingHandle = osThreadNew(FFTProcessingTask, NULL, &FFTProcessing_attributes);
 8000f30:	4a1d      	ldr	r2, [pc, #116]	@ (8000fa8 <main+0xec>)
 8000f32:	2100      	movs	r1, #0
 8000f34:	481d      	ldr	r0, [pc, #116]	@ (8000fac <main+0xf0>)
 8000f36:	f003 fec5 	bl	8004cc4 <osThreadNew>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb0 <main+0xf4>)
 8000f3e:	6013      	str	r3, [r2, #0]

  /* creation of DisplayOutput */
  DisplayOutputHandle = osThreadNew(DisplayOutputTask, NULL, &DisplayOutput_attributes);
 8000f40:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb4 <main+0xf8>)
 8000f42:	2100      	movs	r1, #0
 8000f44:	481c      	ldr	r0, [pc, #112]	@ (8000fb8 <main+0xfc>)
 8000f46:	f003 febd 	bl	8004cc4 <osThreadNew>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	4a1b      	ldr	r2, [pc, #108]	@ (8000fbc <main+0x100>)
 8000f4e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* creation of AudioCallbackReady */
  AudioCallbackReadyHandle = osEventFlagsNew(&AudioCallbackReady_attributes);
 8000f50:	481b      	ldr	r0, [pc, #108]	@ (8000fc0 <main+0x104>)
 8000f52:	f003 ff49 	bl	8004de8 <osEventFlagsNew>
 8000f56:	4603      	mov	r3, r0
 8000f58:	4a1a      	ldr	r2, [pc, #104]	@ (8000fc4 <main+0x108>)
 8000f5a:	6013      	str	r3, [r2, #0]

  /* creation of FFTReady */
  FFTReadyHandle = osEventFlagsNew(&FFTReady_attributes);
 8000f5c:	481a      	ldr	r0, [pc, #104]	@ (8000fc8 <main+0x10c>)
 8000f5e:	f003 ff43 	bl	8004de8 <osEventFlagsNew>
 8000f62:	4603      	mov	r3, r0
 8000f64:	4a19      	ldr	r2, [pc, #100]	@ (8000fcc <main+0x110>)
 8000f66:	6013      	str	r3, [r2, #0]

  /* creation of AudioBuffReady */
  AudioBuffReadyHandle = osEventFlagsNew(&AudioBuffReady_attributes);
 8000f68:	4819      	ldr	r0, [pc, #100]	@ (8000fd0 <main+0x114>)
 8000f6a:	f003 ff3d 	bl	8004de8 <osEventFlagsNew>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	4a18      	ldr	r2, [pc, #96]	@ (8000fd4 <main+0x118>)
 8000f72:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000f74:	f003 fe80 	bl	8004c78 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000f78:	bf00      	nop
 8000f7a:	e7fd      	b.n	8000f78 <main+0xbc>
 8000f7c:	200005bc 	.word	0x200005bc
 8000f80:	20000484 	.word	0x20000484
 8000f84:	200005a4 	.word	0x200005a4
 8000f88:	200016bc 	.word	0x200016bc
 8000f8c:	0800d024 	.word	0x0800d024
 8000f90:	20000590 	.word	0x20000590
 8000f94:	0800d034 	.word	0x0800d034
 8000f98:	20000594 	.word	0x20000594
 8000f9c:	0800cfb8 	.word	0x0800cfb8
 8000fa0:	080015e1 	.word	0x080015e1
 8000fa4:	20000584 	.word	0x20000584
 8000fa8:	0800cfdc 	.word	0x0800cfdc
 8000fac:	080016a1 	.word	0x080016a1
 8000fb0:	20000588 	.word	0x20000588
 8000fb4:	0800d000 	.word	0x0800d000
 8000fb8:	0800172d 	.word	0x0800172d
 8000fbc:	2000058c 	.word	0x2000058c
 8000fc0:	0800d044 	.word	0x0800d044
 8000fc4:	20000598 	.word	0x20000598
 8000fc8:	0800d054 	.word	0x0800d054
 8000fcc:	2000059c 	.word	0x2000059c
 8000fd0:	0800d064 	.word	0x0800d064
 8000fd4:	200005a0 	.word	0x200005a0

08000fd8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b094      	sub	sp, #80	@ 0x50
 8000fdc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fde:	f107 0320 	add.w	r3, r7, #32
 8000fe2:	2230      	movs	r2, #48	@ 0x30
 8000fe4:	2100      	movs	r1, #0
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f00a fc38 	bl	800b85c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fec:	f107 030c 	add.w	r3, r7, #12
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
 8000ffa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	60bb      	str	r3, [r7, #8]
 8001000:	4b28      	ldr	r3, [pc, #160]	@ (80010a4 <SystemClock_Config+0xcc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	4a27      	ldr	r2, [pc, #156]	@ (80010a4 <SystemClock_Config+0xcc>)
 8001006:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800100a:	6413      	str	r3, [r2, #64]	@ 0x40
 800100c:	4b25      	ldr	r3, [pc, #148]	@ (80010a4 <SystemClock_Config+0xcc>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001014:	60bb      	str	r3, [r7, #8]
 8001016:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	4b22      	ldr	r3, [pc, #136]	@ (80010a8 <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4a21      	ldr	r2, [pc, #132]	@ (80010a8 <SystemClock_Config+0xd0>)
 8001022:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001026:	6013      	str	r3, [r2, #0]
 8001028:	4b1f      	ldr	r3, [pc, #124]	@ (80010a8 <SystemClock_Config+0xd0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001030:	607b      	str	r3, [r7, #4]
 8001032:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001034:	2301      	movs	r3, #1
 8001036:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001038:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800103c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001042:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001046:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001048:	2308      	movs	r3, #8
 800104a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800104c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001050:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001056:	2307      	movs	r3, #7
 8001058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0320 	add.w	r3, r7, #32
 800105e:	4618      	mov	r0, r3
 8001060:	f002 fa64 	bl	800352c <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800106a:	f000 fbf9 	bl	8001860 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001072:	2302      	movs	r3, #2
 8001074:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800107e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001080:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001084:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001086:	f107 030c 	add.w	r3, r7, #12
 800108a:	2105      	movs	r1, #5
 800108c:	4618      	mov	r0, r3
 800108e:	f002 fcc5 	bl	8003a1c <HAL_RCC_ClockConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001098:	f000 fbe2 	bl	8001860 <Error_Handler>
  }
}
 800109c:	bf00      	nop
 800109e:	3750      	adds	r7, #80	@ 0x50
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	40023800 	.word	0x40023800
 80010a8:	40007000 	.word	0x40007000

080010ac <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80010b0:	4b0a      	ldr	r3, [pc, #40]	@ (80010dc <MX_CRC_Init+0x30>)
 80010b2:	4a0b      	ldr	r2, [pc, #44]	@ (80010e0 <MX_CRC_Init+0x34>)
 80010b4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80010b6:	4809      	ldr	r0, [pc, #36]	@ (80010dc <MX_CRC_Init+0x30>)
 80010b8:	f000 ff54 	bl	8001f64 <HAL_CRC_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80010c2:	f000 fbcd 	bl	8001860 <Error_Handler>
  }
  __HAL_CRC_DR_RESET(&hcrc);
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <MX_CRC_Init+0x30>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	689a      	ldr	r2, [r3, #8]
 80010cc:	4b03      	ldr	r3, [pc, #12]	@ (80010dc <MX_CRC_Init+0x30>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f042 0201 	orr.w	r2, r2, #1
 80010d4:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	2000047c 	.word	0x2000047c
 80010e0:	40023000 	.word	0x40023000

080010e4 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80010e8:	4b13      	ldr	r3, [pc, #76]	@ (8001138 <MX_I2S2_Init+0x54>)
 80010ea:	4a14      	ldr	r2, [pc, #80]	@ (800113c <MX_I2S2_Init+0x58>)
 80010ec:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80010ee:	4b12      	ldr	r3, [pc, #72]	@ (8001138 <MX_I2S2_Init+0x54>)
 80010f0:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80010f4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80010f6:	4b10      	ldr	r3, [pc, #64]	@ (8001138 <MX_I2S2_Init+0x54>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80010fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001138 <MX_I2S2_Init+0x54>)
 80010fe:	2200      	movs	r2, #0
 8001100:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001102:	4b0d      	ldr	r3, [pc, #52]	@ (8001138 <MX_I2S2_Init+0x54>)
 8001104:	2200      	movs	r2, #0
 8001106:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8001108:	4b0b      	ldr	r3, [pc, #44]	@ (8001138 <MX_I2S2_Init+0x54>)
 800110a:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800110e:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001110:	4b09      	ldr	r3, [pc, #36]	@ (8001138 <MX_I2S2_Init+0x54>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001116:	4b08      	ldr	r3, [pc, #32]	@ (8001138 <MX_I2S2_Init+0x54>)
 8001118:	2200      	movs	r2, #0
 800111a:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800111c:	4b06      	ldr	r3, [pc, #24]	@ (8001138 <MX_I2S2_Init+0x54>)
 800111e:	2200      	movs	r2, #0
 8001120:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8001122:	4805      	ldr	r0, [pc, #20]	@ (8001138 <MX_I2S2_Init+0x54>)
 8001124:	f001 fc60 	bl	80029e8 <HAL_I2S_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800112e:	f000 fb97 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	20000484 	.word	0x20000484
 800113c:	40003800 	.word	0x40003800

08001140 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001144:	4b17      	ldr	r3, [pc, #92]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001146:	4a18      	ldr	r2, [pc, #96]	@ (80011a8 <MX_SPI1_Init+0x68>)
 8001148:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800114a:	4b16      	ldr	r3, [pc, #88]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800114c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001150:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001152:	4b14      	ldr	r3, [pc, #80]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001154:	2200      	movs	r2, #0
 8001156:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001158:	4b12      	ldr	r3, [pc, #72]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800115a:	2200      	movs	r2, #0
 800115c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800115e:	4b11      	ldr	r3, [pc, #68]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001160:	2200      	movs	r2, #0
 8001162:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001166:	2200      	movs	r2, #0
 8001168:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800116a:	4b0e      	ldr	r3, [pc, #56]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800116c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001170:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001172:	4b0c      	ldr	r3, [pc, #48]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001174:	2210      	movs	r2, #16
 8001176:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001178:	4b0a      	ldr	r3, [pc, #40]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800117a:	2200      	movs	r2, #0
 800117c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800117e:	4b09      	ldr	r3, [pc, #36]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001180:	2200      	movs	r2, #0
 8001182:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001186:	2200      	movs	r2, #0
 8001188:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800118a:	4b06      	ldr	r3, [pc, #24]	@ (80011a4 <MX_SPI1_Init+0x64>)
 800118c:	220a      	movs	r2, #10
 800118e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	@ (80011a4 <MX_SPI1_Init+0x64>)
 8001192:	f002 ffc3 	bl	800411c <HAL_SPI_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800119c:	f000 fb60 	bl	8001860 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	2000052c 	.word	0x2000052c
 80011a8:	40013000 	.word	0x40013000

080011ac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
 80011b6:	4b0c      	ldr	r3, [pc, #48]	@ (80011e8 <MX_DMA_Init+0x3c>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ba:	4a0b      	ldr	r2, [pc, #44]	@ (80011e8 <MX_DMA_Init+0x3c>)
 80011bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80011c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c2:	4b09      	ldr	r3, [pc, #36]	@ (80011e8 <MX_DMA_Init+0x3c>)
 80011c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 80011ce:	2200      	movs	r2, #0
 80011d0:	2105      	movs	r1, #5
 80011d2:	200e      	movs	r0, #14
 80011d4:	f000 fe9c 	bl	8001f10 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80011d8:	200e      	movs	r0, #14
 80011da:	f000 feb5 	bl	8001f48 <HAL_NVIC_EnableIRQ>

}
 80011de:	bf00      	nop
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	40023800 	.word	0x40023800

080011ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b08a      	sub	sp, #40	@ 0x28
 80011f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f2:	f107 0314 	add.w	r3, r7, #20
 80011f6:	2200      	movs	r2, #0
 80011f8:	601a      	str	r2, [r3, #0]
 80011fa:	605a      	str	r2, [r3, #4]
 80011fc:	609a      	str	r2, [r3, #8]
 80011fe:	60da      	str	r2, [r3, #12]
 8001200:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	613b      	str	r3, [r7, #16]
 8001206:	4b4e      	ldr	r3, [pc, #312]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800120a:	4a4d      	ldr	r2, [pc, #308]	@ (8001340 <MX_GPIO_Init+0x154>)
 800120c:	f043 0304 	orr.w	r3, r3, #4
 8001210:	6313      	str	r3, [r2, #48]	@ 0x30
 8001212:	4b4b      	ldr	r3, [pc, #300]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	f003 0304 	and.w	r3, r3, #4
 800121a:	613b      	str	r3, [r7, #16]
 800121c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800121e:	2300      	movs	r3, #0
 8001220:	60fb      	str	r3, [r7, #12]
 8001222:	4b47      	ldr	r3, [pc, #284]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001226:	4a46      	ldr	r2, [pc, #280]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001228:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800122c:	6313      	str	r3, [r2, #48]	@ 0x30
 800122e:	4b44      	ldr	r3, [pc, #272]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001232:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001236:	60fb      	str	r3, [r7, #12]
 8001238:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	60bb      	str	r3, [r7, #8]
 800123e:	4b40      	ldr	r3, [pc, #256]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001242:	4a3f      	ldr	r2, [pc, #252]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6313      	str	r3, [r2, #48]	@ 0x30
 800124a:	4b3d      	ldr	r3, [pc, #244]	@ (8001340 <MX_GPIO_Init+0x154>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	60bb      	str	r3, [r7, #8]
 8001254:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001256:	2300      	movs	r3, #0
 8001258:	607b      	str	r3, [r7, #4]
 800125a:	4b39      	ldr	r3, [pc, #228]	@ (8001340 <MX_GPIO_Init+0x154>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125e:	4a38      	ldr	r2, [pc, #224]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001260:	f043 0302 	orr.w	r3, r3, #2
 8001264:	6313      	str	r3, [r2, #48]	@ 0x30
 8001266:	4b36      	ldr	r3, [pc, #216]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800126a:	f003 0302 	and.w	r3, r3, #2
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001272:	2300      	movs	r3, #0
 8001274:	603b      	str	r3, [r7, #0]
 8001276:	4b32      	ldr	r3, [pc, #200]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127a:	4a31      	ldr	r2, [pc, #196]	@ (8001340 <MX_GPIO_Init+0x154>)
 800127c:	f043 0308 	orr.w	r3, r3, #8
 8001280:	6313      	str	r3, [r2, #48]	@ 0x30
 8001282:	4b2f      	ldr	r3, [pc, #188]	@ (8001340 <MX_GPIO_Init+0x154>)
 8001284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001286:	f003 0308 	and.w	r3, r3, #8
 800128a:	603b      	str	r3, [r7, #0]
 800128c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SPI1_RES_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 800128e:	2200      	movs	r2, #0
 8001290:	2130      	movs	r1, #48	@ 0x30
 8001292:	482c      	ldr	r0, [pc, #176]	@ (8001344 <MX_GPIO_Init+0x158>)
 8001294:	f001 fb8e 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, GPIO_PIN_RESET);
 8001298:	2200      	movs	r2, #0
 800129a:	2101      	movs	r1, #1
 800129c:	482a      	ldr	r0, [pc, #168]	@ (8001348 <MX_GPIO_Init+0x15c>)
 800129e:	f001 fb89 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin, GPIO_PIN_RESET);
 80012a2:	2200      	movs	r2, #0
 80012a4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80012a8:	4828      	ldr	r0, [pc, #160]	@ (800134c <MX_GPIO_Init+0x160>)
 80012aa:	f001 fb83 	bl	80029b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80012ae:	2301      	movs	r3, #1
 80012b0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80012b2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80012b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b8:	2300      	movs	r3, #0
 80012ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	4619      	mov	r1, r3
 80012c2:	4823      	ldr	r0, [pc, #140]	@ (8001350 <MX_GPIO_Init+0x164>)
 80012c4:	f001 f9da 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI1_RES_Pin SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_RES_Pin|SPI1_CS_Pin;
 80012c8:	2330      	movs	r3, #48	@ 0x30
 80012ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012cc:	2301      	movs	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d0:	2300      	movs	r3, #0
 80012d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d4:	2300      	movs	r3, #0
 80012d6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012d8:	f107 0314 	add.w	r3, r7, #20
 80012dc:	4619      	mov	r1, r3
 80012de:	4819      	ldr	r0, [pc, #100]	@ (8001344 <MX_GPIO_Init+0x158>)
 80012e0:	f001 f9cc 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_DC_Pin */
  GPIO_InitStruct.Pin = SPI1_DC_Pin;
 80012e4:	2301      	movs	r3, #1
 80012e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012e8:	2301      	movs	r3, #1
 80012ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f0:	2300      	movs	r3, #0
 80012f2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4813      	ldr	r0, [pc, #76]	@ (8001348 <MX_GPIO_Init+0x15c>)
 80012fc:	f001 f9be 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001300:	2304      	movs	r3, #4
 8001302:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001304:	2300      	movs	r3, #0
 8001306:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001308:	2300      	movs	r3, #0
 800130a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	@ (8001348 <MX_GPIO_Init+0x15c>)
 8001314:	f001 f9b2 	bl	800267c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin;
 8001318:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800131c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800132a:	f107 0314 	add.w	r3, r7, #20
 800132e:	4619      	mov	r1, r3
 8001330:	4806      	ldr	r0, [pc, #24]	@ (800134c <MX_GPIO_Init+0x160>)
 8001332:	f001 f9a3 	bl	800267c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001336:	bf00      	nop
 8001338:	3728      	adds	r7, #40	@ 0x28
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40023800 	.word	0x40023800
 8001344:	40020800 	.word	0x40020800
 8001348:	40020400 	.word	0x40020400
 800134c:	40020c00 	.word	0x40020c00
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
	/* Only when the interrupt is triggered by I2S connected to the microphone */
	if (hi2s->Instance == SPI2) {
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a06      	ldr	r2, [pc, #24]	@ (800137c <HAL_I2S_RxHalfCpltCallback+0x28>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d105      	bne.n	8001372 <HAL_I2S_RxHalfCpltCallback+0x1e>
		osEventFlagsSet(AudioCallbackReadyHandle, AUDIO_FLAG_HALF);
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2101      	movs	r1, #1
 800136c:	4618      	mov	r0, r3
 800136e:	f003 fd7b 	bl	8004e68 <osEventFlagsSet>
	}
}
 8001372:	bf00      	nop
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	40003800 	.word	0x40003800
 8001380:	20000598 	.word	0x20000598

08001384 <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
	/* Only when the interrupt is triggered by I2S connected to the microphone */
	if (hi2s->Instance == SPI2) {
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	4a06      	ldr	r2, [pc, #24]	@ (80013ac <HAL_I2S_RxCpltCallback+0x28>)
 8001392:	4293      	cmp	r3, r2
 8001394:	d105      	bne.n	80013a2 <HAL_I2S_RxCpltCallback+0x1e>
		osEventFlagsSet(AudioCallbackReadyHandle, AUDIO_FLAG_FULL);
 8001396:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <HAL_I2S_RxCpltCallback+0x2c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	2102      	movs	r1, #2
 800139c:	4618      	mov	r0, r3
 800139e:	f003 fd63 	bl	8004e68 <osEventFlagsSet>
	}
}
 80013a2:	bf00      	nop
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	40003800 	.word	0x40003800
 80013b0:	20000598 	.word	0x20000598

080013b4 <init_hann_window>:

void init_hann_window(float32_t *hann_table) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
 80013c0:	e023      	b.n	800140a <init_hann_window+0x56>
		hann_table[i] = 0.5f
				* (1.0f - cosf(2.0f * PI * i / (NORMALIZED_BUFFER_SIZE - 1)));
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	ee07 3a90 	vmov	s15, r3
 80013c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013cc:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 800141c <init_hann_window+0x68>
 80013d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013d4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001420 <init_hann_window+0x6c>
 80013d8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80013dc:	eeb0 0a47 	vmov.f32	s0, s14
 80013e0:	f00a fbd6 	bl	800bb90 <cosf>
 80013e4:	eef0 7a40 	vmov.f32	s15, s0
 80013e8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80013ec:	ee77 7a67 	vsub.f32	s15, s14, s15
		hann_table[i] = 0.5f
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	009b      	lsls	r3, r3, #2
 80013f4:	687a      	ldr	r2, [r7, #4]
 80013f6:	4413      	add	r3, r2
				* (1.0f - cosf(2.0f * PI * i / (NORMALIZED_BUFFER_SIZE - 1)));
 80013f8:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80013fc:	ee67 7a87 	vmul.f32	s15, s15, s14
		hann_table[i] = 0.5f
 8001400:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3301      	adds	r3, #1
 8001408:	60fb      	str	r3, [r7, #12]
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001410:	d3d7      	bcc.n	80013c2 <init_hann_window+0xe>
	}
}
 8001412:	bf00      	nop
 8001414:	bf00      	nop
 8001416:	3710      	adds	r7, #16
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40c90fdb 	.word	0x40c90fdb
 8001420:	447fc000 	.word	0x447fc000

08001424 <pdm_to_pcm>:

void pdm_to_pcm(const uint16_t *pdm_buff, uint16_t *pcm_buff,
		const Buffer_offset buffer_offset) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	4613      	mov	r3, r2
 8001430:	71fb      	strb	r3, [r7, #7]
	// pdm_buff - source PDM
	// pdm_buff - destination PCM
	static uint16_t pdm_swap_buff[RX_BUFFER_SIZE / 2] = { 0 };

	/* PDM swap endianness */
	for (size_t i = 0; i < RX_BUFFER_SIZE / 2; i++) {
 8001432:	2300      	movs	r3, #0
 8001434:	617b      	str	r3, [r7, #20]
 8001436:	e01f      	b.n	8001478 <pdm_to_pcm+0x54>
		size_t index = i + (RX_BUFFER_SIZE / 2) * buffer_offset;
 8001438:	79fb      	ldrb	r3, [r7, #7]
 800143a:	019b      	lsls	r3, r3, #6
 800143c:	461a      	mov	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	4413      	add	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
		pdm_swap_buff[i] = SWAP_ENDIANESS(pdm_buff[index]);
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	005b      	lsls	r3, r3, #1
 8001448:	68fa      	ldr	r2, [r7, #12]
 800144a:	4413      	add	r3, r2
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	b21b      	sxth	r3, r3
 8001450:	021b      	lsls	r3, r3, #8
 8001452:	b21a      	sxth	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	005b      	lsls	r3, r3, #1
 8001458:	68f9      	ldr	r1, [r7, #12]
 800145a:	440b      	add	r3, r1
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	0a1b      	lsrs	r3, r3, #8
 8001460:	b29b      	uxth	r3, r3
 8001462:	b21b      	sxth	r3, r3
 8001464:	4313      	orrs	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	b299      	uxth	r1, r3
 800146a:	4a09      	ldr	r2, [pc, #36]	@ (8001490 <pdm_to_pcm+0x6c>)
 800146c:	697b      	ldr	r3, [r7, #20]
 800146e:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (size_t i = 0; i < RX_BUFFER_SIZE / 2; i++) {
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	3301      	adds	r3, #1
 8001476:	617b      	str	r3, [r7, #20]
 8001478:	697b      	ldr	r3, [r7, #20]
 800147a:	2b3f      	cmp	r3, #63	@ 0x3f
 800147c:	d9dc      	bls.n	8001438 <pdm_to_pcm+0x14>
	}

	/* PDM to PCM filter */
	PDM_Filter(pdm_swap_buff, pcm_buff, &PDM1_filter_handler);
 800147e:	4a05      	ldr	r2, [pc, #20]	@ (8001494 <pdm_to_pcm+0x70>)
 8001480:	68b9      	ldr	r1, [r7, #8]
 8001482:	4803      	ldr	r0, [pc, #12]	@ (8001490 <pdm_to_pcm+0x6c>)
 8001484:	f009 f830 	bl	800a4e8 <PDM_Filter>
}
 8001488:	bf00      	nop
 800148a:	3718      	adds	r7, #24
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20002ec0 	.word	0x20002ec0
 8001494:	2000a91c 	.word	0x2000a91c

08001498 <normalize_buff>:

void normalize_buff(const int16_t *pcm_buff, float32_t *normalized_buff,
		const size_t buff_index) {
 8001498:	b580      	push	{r7, lr}
 800149a:	b088      	sub	sp, #32
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
	// pcm_buff - source PCM
	// normalized_buff - destination normalized pcm
	for (size_t i = 0; i < DEC_BUFFER_SIZE; i++) {
 80014a4:	2300      	movs	r3, #0
 80014a6:	61fb      	str	r3, [r7, #28]
 80014a8:	e042      	b.n	8001530 <normalize_buff+0x98>
		int16_t int_val = (int16_t) pcm_buff[buff_index + i];
 80014aa:	687a      	ldr	r2, [r7, #4]
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	4413      	add	r3, r2
 80014b0:	005b      	lsls	r3, r3, #1
 80014b2:	68fa      	ldr	r2, [r7, #12]
 80014b4:	4413      	add	r3, r2
 80014b6:	881b      	ldrh	r3, [r3, #0]
 80014b8:	82fb      	strh	r3, [r7, #22]
		float32_t float_val = (float32_t) int_val / (float32_t) INT16_MAX;
 80014ba:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80014be:	ee07 3a90 	vmov	s15, r3
 80014c2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80014c6:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001550 <normalize_buff+0xb8>
 80014ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80014ce:	edc7 7a06 	vstr	s15, [r7, #24]
		if ((i > 0) && (float_val > 0.2 || float_val < -0.2)) {
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d020      	beq.n	800151a <normalize_buff+0x82>
 80014d8:	69b8      	ldr	r0, [r7, #24]
 80014da:	f7fe ffdd 	bl	8000498 <__aeabi_f2d>
 80014de:	a318      	add	r3, pc, #96	@ (adr r3, 8001540 <normalize_buff+0xa8>)
 80014e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014e4:	f7ff f8ae 	bl	8000644 <__aeabi_dcmpgt>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10a      	bne.n	8001504 <normalize_buff+0x6c>
 80014ee:	69b8      	ldr	r0, [r7, #24]
 80014f0:	f7fe ffd2 	bl	8000498 <__aeabi_f2d>
 80014f4:	a314      	add	r3, pc, #80	@ (adr r3, 8001548 <normalize_buff+0xb0>)
 80014f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014fa:	f7ff f885 	bl	8000608 <__aeabi_dcmplt>
 80014fe:	4603      	mov	r3, r0
 8001500:	2b00      	cmp	r3, #0
 8001502:	d00a      	beq.n	800151a <normalize_buff+0x82>
			float_val = normalized_buff[buff_index + i - 1];
 8001504:	687a      	ldr	r2, [r7, #4]
 8001506:	69fb      	ldr	r3, [r7, #28]
 8001508:	4413      	add	r3, r2
 800150a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800150e:	3b01      	subs	r3, #1
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	68ba      	ldr	r2, [r7, #8]
 8001514:	4413      	add	r3, r2
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	61bb      	str	r3, [r7, #24]
		}
		normalized_buff[buff_index + i] = float_val;
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	4413      	add	r3, r2
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < DEC_BUFFER_SIZE; i++) {
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	d9b9      	bls.n	80014aa <normalize_buff+0x12>
	}
}
 8001536:	bf00      	nop
 8001538:	bf00      	nop
 800153a:	3720      	adds	r7, #32
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	9999999a 	.word	0x9999999a
 8001544:	3fc99999 	.word	0x3fc99999
 8001548:	9999999a 	.word	0x9999999a
 800154c:	bfc99999 	.word	0xbfc99999
 8001550:	46fffe00 	.word	0x46fffe00

08001554 <apply_hann_window>:

void apply_hann_window(const float32_t *normalized_buff,
		const float32_t *hann_table, float32_t *windowed_buff) {
 8001554:	b480      	push	{r7}
 8001556:	b087      	sub	sp, #28
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
	/* Hann window is applied to reduce spectral leakage */
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]
 8001564:	e016      	b.n	8001594 <apply_hann_window+0x40>
		windowed_buff[i] = normalized_buff[i] * hann_table[i];
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	68fa      	ldr	r2, [r7, #12]
 800156c:	4413      	add	r3, r2
 800156e:	ed93 7a00 	vldr	s14, [r3]
 8001572:	697b      	ldr	r3, [r7, #20]
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	68ba      	ldr	r2, [r7, #8]
 8001578:	4413      	add	r3, r2
 800157a:	edd3 7a00 	vldr	s15, [r3]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	687a      	ldr	r2, [r7, #4]
 8001584:	4413      	add	r3, r2
 8001586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800158a:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	617b      	str	r3, [r7, #20]
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159a:	d3e4      	bcc.n	8001566 <apply_hann_window+0x12>
	}
}
 800159c:	bf00      	nop
 800159e:	bf00      	nop
 80015a0:	371c      	adds	r7, #28
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
	...

080015ac <fft_compute>:

void fft_compute(float32_t *windowed_buff, float32_t *fft_mag_buff) {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
	static float32_t fft_out_buff[FFT_BUFFER_SIZE] = { 0 };
	/* Compute FFT */
	arm_rfft_fast_f32(&fft_audio_instance, windowed_buff, fft_out_buff, 0);
 80015b6:	2300      	movs	r3, #0
 80015b8:	4a07      	ldr	r2, [pc, #28]	@ (80015d8 <fft_compute+0x2c>)
 80015ba:	6879      	ldr	r1, [r7, #4]
 80015bc:	4807      	ldr	r0, [pc, #28]	@ (80015dc <fft_compute+0x30>)
 80015be:	f009 f92f 	bl	800a820 <arm_rfft_fast_f32>

	/* Calculate magnitude from real and imaginary part of FFT */
	arm_cmplx_mag_f32(fft_out_buff, fft_mag_buff, FFT_MAG_BUFFER_SIZE);
 80015c2:	f240 2201 	movw	r2, #513	@ 0x201
 80015c6:	6839      	ldr	r1, [r7, #0]
 80015c8:	4803      	ldr	r0, [pc, #12]	@ (80015d8 <fft_compute+0x2c>)
 80015ca:	f009 fd05 	bl	800afd8 <arm_cmplx_mag_f32>
}
 80015ce:	bf00      	nop
 80015d0:	3708      	adds	r7, #8
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	20002f40 	.word	0x20002f40
 80015dc:	200005a4 	.word	0x200005a4

080015e0 <AudioCaptureTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_AudioCaptureTask */
void AudioCaptureTask(void *argument)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b086      	sub	sp, #24
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint16_t audio_task_counter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	82fb      	strh	r3, [r7, #22]
	static uint16_t dec_buff[DEC_BUFFER_SIZE] = { 0 }; /* Audio buffer after decimation */
	static int16_t pcm_buff[PCM_BUFFER_SIZE] = { 0 }; /* PCM audio buffer */
	Buffer_offset buffer_offset = BUFFER_OFFSET_NONE;
 80015ec:	2300      	movs	r3, #0
 80015ee:	757b      	strb	r3, [r7, #21]

	/* Infinite loop */
	for (;;) {
		uint32_t flags = osEventFlagsWait(AudioCallbackReadyHandle,
 80015f0:	4b24      	ldr	r3, [pc, #144]	@ (8001684 <AudioCaptureTask+0xa4>)
 80015f2:	6818      	ldr	r0, [r3, #0]
 80015f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015f8:	2200      	movs	r2, #0
 80015fa:	2103      	movs	r1, #3
 80015fc:	f003 fc76 	bl	8004eec <osEventFlagsWait>
 8001600:	6138      	str	r0, [r7, #16]
		AUDIO_FLAG_HALF | AUDIO_FLAG_FULL,
		osFlagsWaitAny, osWaitForever);

		if (flags & AUDIO_FLAG_HALF) {
 8001602:	693b      	ldr	r3, [r7, #16]
 8001604:	f003 0301 	and.w	r3, r3, #1
 8001608:	2b00      	cmp	r3, #0
 800160a:	d002      	beq.n	8001612 <AudioCaptureTask+0x32>
			buffer_offset = BUFFER_OFFSET_HALF;
 800160c:	2301      	movs	r3, #1
 800160e:	757b      	strb	r3, [r7, #21]
 8001610:	e006      	b.n	8001620 <AudioCaptureTask+0x40>
		} else if (flags & AUDIO_FLAG_FULL) {
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d001      	beq.n	8001620 <AudioCaptureTask+0x40>
			buffer_offset = BUFFER_OFFSET_NONE;
 800161c:	2300      	movs	r3, #0
 800161e:	757b      	strb	r3, [r7, #21]
		}

		/* Convert PDM sound to PCM sound */
		pdm_to_pcm(rx_buff, dec_buff, buffer_offset);
 8001620:	7d7b      	ldrb	r3, [r7, #21]
 8001622:	461a      	mov	r2, r3
 8001624:	4918      	ldr	r1, [pc, #96]	@ (8001688 <AudioCaptureTask+0xa8>)
 8001626:	4819      	ldr	r0, [pc, #100]	@ (800168c <AudioCaptureTask+0xac>)
 8001628:	f7ff fefc 	bl	8001424 <pdm_to_pcm>

		const size_t buff_index = audio_task_counter * DEC_BUFFER_SIZE;
 800162c:	8afb      	ldrh	r3, [r7, #22]
 800162e:	011b      	lsls	r3, r3, #4
 8001630:	60fb      	str	r3, [r7, #12]

		/* Copy converted data to transmit buffer */
		memcpy(&pcm_buff[buff_index], dec_buff,
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	005b      	lsls	r3, r3, #1
 8001636:	4a16      	ldr	r2, [pc, #88]	@ (8001690 <AudioCaptureTask+0xb0>)
 8001638:	4413      	add	r3, r2
 800163a:	2220      	movs	r2, #32
 800163c:	4912      	ldr	r1, [pc, #72]	@ (8001688 <AudioCaptureTask+0xa8>)
 800163e:	4618      	mov	r0, r3
 8001640:	f00a f99e 	bl	800b980 <memcpy>
		DEC_BUFFER_SIZE * 2);

		/* Normalize PCM buffer */
		osMutexAcquire(NormalizedMutexHandle, osWaitForever);
 8001644:	4b13      	ldr	r3, [pc, #76]	@ (8001694 <AudioCaptureTask+0xb4>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800164c:	4618      	mov	r0, r3
 800164e:	f003 fd38 	bl	80050c2 <osMutexAcquire>
		normalize_buff(pcm_buff, normalized_buff, buff_index);
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	4910      	ldr	r1, [pc, #64]	@ (8001698 <AudioCaptureTask+0xb8>)
 8001656:	480e      	ldr	r0, [pc, #56]	@ (8001690 <AudioCaptureTask+0xb0>)
 8001658:	f7ff ff1e 	bl	8001498 <normalize_buff>
		osMutexRelease(NormalizedMutexHandle);
 800165c:	4b0d      	ldr	r3, [pc, #52]	@ (8001694 <AudioCaptureTask+0xb4>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4618      	mov	r0, r3
 8001662:	f003 fd79 	bl	8005158 <osMutexRelease>

		audio_task_counter++;
 8001666:	8afb      	ldrh	r3, [r7, #22]
 8001668:	3301      	adds	r3, #1
 800166a:	82fb      	strh	r3, [r7, #22]

		/* If buffer is full set flag */
		if (audio_task_counter == MAX_AUDIO_TASK_COUNTER) {
 800166c:	8afb      	ldrh	r3, [r7, #22]
 800166e:	2b40      	cmp	r3, #64	@ 0x40
 8001670:	d1be      	bne.n	80015f0 <AudioCaptureTask+0x10>
			osEventFlagsSet(AudioBuffReadyHandle, AUDIO_FLAG_COMPL);
 8001672:	4b0a      	ldr	r3, [pc, #40]	@ (800169c <AudioCaptureTask+0xbc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	2104      	movs	r1, #4
 8001678:	4618      	mov	r0, r3
 800167a:	f003 fbf5 	bl	8004e68 <osEventFlagsSet>
			audio_task_counter = 0;
 800167e:	2300      	movs	r3, #0
 8001680:	82fb      	strh	r3, [r7, #22]
	for (;;) {
 8001682:	e7b5      	b.n	80015f0 <AudioCaptureTask+0x10>
 8001684:	20000598 	.word	0x20000598
 8001688:	20003f48 	.word	0x20003f48
 800168c:	200005bc 	.word	0x200005bc
 8001690:	20003f68 	.word	0x20003f68
 8001694:	20000590 	.word	0x20000590
 8001698:	200006bc 	.word	0x200006bc
 800169c:	200005a0 	.word	0x200005a0

080016a0 <FFTProcessingTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FFTProcessingTask */
void FFTProcessingTask(void *argument)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN FFTProcessingTask */
	static float32_t windowed_buff[NORMALIZED_BUFFER_SIZE] = { 0 }; /* Normalized and windowed buffer */
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(AudioBuffReadyHandle,
 80016a8:	4b18      	ldr	r3, [pc, #96]	@ (800170c <FFTProcessingTask+0x6c>)
 80016aa:	6818      	ldr	r0, [r3, #0]
 80016ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80016b0:	2200      	movs	r2, #0
 80016b2:	2104      	movs	r1, #4
 80016b4:	f003 fc1a 	bl	8004eec <osEventFlagsWait>
		AUDIO_FLAG_COMPL,
		osFlagsWaitAny, osWaitForever);

		/* Apply Hann window */
		osMutexAcquire(NormalizedMutexHandle, osWaitForever);
 80016b8:	4b15      	ldr	r3, [pc, #84]	@ (8001710 <FFTProcessingTask+0x70>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 fcfe 	bl	80050c2 <osMutexAcquire>
		apply_hann_window(normalized_buff, hann_table, windowed_buff);
 80016c6:	4a13      	ldr	r2, [pc, #76]	@ (8001714 <FFTProcessingTask+0x74>)
 80016c8:	4913      	ldr	r1, [pc, #76]	@ (8001718 <FFTProcessingTask+0x78>)
 80016ca:	4814      	ldr	r0, [pc, #80]	@ (800171c <FFTProcessingTask+0x7c>)
 80016cc:	f7ff ff42 	bl	8001554 <apply_hann_window>
		osMutexRelease(NormalizedMutexHandle);
 80016d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001710 <FFTProcessingTask+0x70>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f003 fd3f 	bl	8005158 <osMutexRelease>

		/* Perform FFT */
		osMutexAcquire(FFTMagMutexHandle, osWaitForever);
 80016da:	4b11      	ldr	r3, [pc, #68]	@ (8001720 <FFTProcessingTask+0x80>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80016e2:	4618      	mov	r0, r3
 80016e4:	f003 fced 	bl	80050c2 <osMutexAcquire>
		fft_compute(windowed_buff, fft_mag_buff);
 80016e8:	490e      	ldr	r1, [pc, #56]	@ (8001724 <FFTProcessingTask+0x84>)
 80016ea:	480a      	ldr	r0, [pc, #40]	@ (8001714 <FFTProcessingTask+0x74>)
 80016ec:	f7ff ff5e 	bl	80015ac <fft_compute>
		osMutexRelease(FFTMagMutexHandle);
 80016f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001720 <FFTProcessingTask+0x80>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4618      	mov	r0, r3
 80016f6:	f003 fd2f 	bl	8005158 <osMutexRelease>

		osEventFlagsSet(FFTReadyHandle, FFT_FLAG_COMPL);
 80016fa:	4b0b      	ldr	r3, [pc, #44]	@ (8001728 <FFTProcessingTask+0x88>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	2108      	movs	r1, #8
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fbb1 	bl	8004e68 <osEventFlagsSet>
		osEventFlagsWait(AudioBuffReadyHandle,
 8001706:	bf00      	nop
 8001708:	e7ce      	b.n	80016a8 <FFTProcessingTask+0x8>
 800170a:	bf00      	nop
 800170c:	200005a0 	.word	0x200005a0
 8001710:	20000590 	.word	0x20000590
 8001714:	20004768 	.word	0x20004768
 8001718:	200016bc 	.word	0x200016bc
 800171c:	200006bc 	.word	0x200006bc
 8001720:	20000594 	.word	0x20000594
 8001724:	200026bc 	.word	0x200026bc
 8001728:	2000059c 	.word	0x2000059c

0800172c <DisplayOutputTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DisplayOutputTask */
void DisplayOutputTask(void *argument)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DisplayOutputTask */
	static int32_t fft_db_buff[ILI9341_HEIGHT] = { 0 };
	static int32_t fft_prev_db_buff[ILI9341_HEIGHT] = { 0 };
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(FFTReadyHandle,
 8001734:	4b3c      	ldr	r3, [pc, #240]	@ (8001828 <DisplayOutputTask+0xfc>)
 8001736:	6818      	ldr	r0, [r3, #0]
 8001738:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800173c:	2200      	movs	r2, #0
 800173e:	2108      	movs	r1, #8
 8001740:	f003 fbd4 	bl	8004eec <osEventFlagsWait>
		FFT_FLAG_COMPL,
		osFlagsWaitAny, osWaitForever);

		osMutexAcquire(FFTMagMutexHandle, osWaitForever);
 8001744:	4b39      	ldr	r3, [pc, #228]	@ (800182c <DisplayOutputTask+0x100>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800174c:	4618      	mov	r0, r3
 800174e:	f003 fcb8 	bl	80050c2 <osMutexAcquire>
		for (size_t i = 0; i < ILI9341_HEIGHT; i++) {
 8001752:	2300      	movs	r3, #0
 8001754:	61fb      	str	r3, [r7, #28]
 8001756:	e05e      	b.n	8001816 <DisplayOutputTask+0xea>
			/* FFT Magnitude to decibel scale */
			float32_t avg_val = (fft_mag_buff[i * 2] + fft_mag_buff[i * 2 + 1]) / 2;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	4a34      	ldr	r2, [pc, #208]	@ (8001830 <DisplayOutputTask+0x104>)
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	ed93 7a00 	vldr	s14, [r3]
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	005b      	lsls	r3, r3, #1
 800176a:	3301      	adds	r3, #1
 800176c:	4a30      	ldr	r2, [pc, #192]	@ (8001830 <DisplayOutputTask+0x104>)
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	edd3 7a00 	vldr	s15, [r3]
 8001776:	ee37 7a27 	vadd.f32	s14, s14, s15
 800177a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800177e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001782:	edc7 7a06 	vstr	s15, [r7, #24]
			int32_t log_val = (int32_t) (20 * log10f(avg_val));
 8001786:	ed97 0a06 	vldr	s0, [r7, #24]
 800178a:	f00a f95d 	bl	800ba48 <log10f>
 800178e:	eef0 7a40 	vmov.f32	s15, s0
 8001792:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001796:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800179e:	ee17 3a90 	vmov	r3, s15
 80017a2:	617b      	str	r3, [r7, #20]
			int32_t scaled_val = (log_val + OFFSET_Y) * SCALE_FACTOR;
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3328      	adds	r3, #40	@ 0x28
 80017a8:	005b      	lsls	r3, r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
			fft_db_buff[i] = scaled_val;
 80017ac:	4921      	ldr	r1, [pc, #132]	@ (8001834 <DisplayOutputTask+0x108>)
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/* Compare with previous result to reduce drawing */
			if (fft_prev_db_buff[i] != fft_db_buff[i]) {
 80017b6:	4a20      	ldr	r2, [pc, #128]	@ (8001838 <DisplayOutputTask+0x10c>)
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80017be:	491d      	ldr	r1, [pc, #116]	@ (8001834 <DisplayOutputTask+0x108>)
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017c6:	429a      	cmp	r2, r3
 80017c8:	d01a      	beq.n	8001800 <DisplayOutputTask+0xd4>
				size_t x = ILI9341_WIDTH - i;
 80017ca:	69fb      	ldr	r3, [r7, #28]
 80017cc:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80017d0:	60fb      	str	r3, [r7, #12]
				ILI9341_DrawPixel(x, fft_prev_db_buff[i], ILI9341_BLACK);
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	b298      	uxth	r0, r3
 80017d6:	4a18      	ldr	r2, [pc, #96]	@ (8001838 <DisplayOutputTask+0x10c>)
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	b29b      	uxth	r3, r3
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	f7ff fab8 	bl	8000d58 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(x, fft_db_buff[i], ILI9341_WHITE);
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	b298      	uxth	r0, r3
 80017ec:	4a11      	ldr	r2, [pc, #68]	@ (8001834 <DisplayOutputTask+0x108>)
 80017ee:	69fb      	ldr	r3, [r7, #28]
 80017f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f4:	b29b      	uxth	r3, r3
 80017f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80017fa:	4619      	mov	r1, r3
 80017fc:	f7ff faac 	bl	8000d58 <ILI9341_DrawPixel>
			}
			fft_prev_db_buff[i] = fft_db_buff[i];
 8001800:	4a0c      	ldr	r2, [pc, #48]	@ (8001834 <DisplayOutputTask+0x108>)
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001808:	490b      	ldr	r1, [pc, #44]	@ (8001838 <DisplayOutputTask+0x10c>)
 800180a:	69fb      	ldr	r3, [r7, #28]
 800180c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (size_t i = 0; i < ILI9341_HEIGHT; i++) {
 8001810:	69fb      	ldr	r3, [r7, #28]
 8001812:	3301      	adds	r3, #1
 8001814:	61fb      	str	r3, [r7, #28]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	2bef      	cmp	r3, #239	@ 0xef
 800181a:	d99d      	bls.n	8001758 <DisplayOutputTask+0x2c>
		}
		osMutexRelease(FFTMagMutexHandle);
 800181c:	4b03      	ldr	r3, [pc, #12]	@ (800182c <DisplayOutputTask+0x100>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4618      	mov	r0, r3
 8001822:	f003 fc99 	bl	8005158 <osMutexRelease>
		osEventFlagsWait(FFTReadyHandle,
 8001826:	e785      	b.n	8001734 <DisplayOutputTask+0x8>
 8001828:	2000059c 	.word	0x2000059c
 800182c:	20000594 	.word	0x20000594
 8001830:	200026bc 	.word	0x200026bc
 8001834:	20005768 	.word	0x20005768
 8001838:	20005b28 	.word	0x20005b28

0800183c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM5)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a04      	ldr	r2, [pc, #16]	@ (800185c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d101      	bne.n	8001852 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800184e:	f000 fa63 	bl	8001d18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001852:	bf00      	nop
 8001854:	3708      	adds	r7, #8
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40000c00 	.word	0x40000c00

08001860 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001864:	b672      	cpsid	i
}
 8001866:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001868:	bf00      	nop
 800186a:	e7fd      	b.n	8001868 <Error_Handler+0x8>

0800186c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	607b      	str	r3, [r7, #4]
 8001876:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_MspInit+0x54>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800187a:	4a11      	ldr	r2, [pc, #68]	@ (80018c0 <HAL_MspInit+0x54>)
 800187c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001880:	6453      	str	r3, [r2, #68]	@ 0x44
 8001882:	4b0f      	ldr	r3, [pc, #60]	@ (80018c0 <HAL_MspInit+0x54>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001886:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800188a:	607b      	str	r3, [r7, #4]
 800188c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	603b      	str	r3, [r7, #0]
 8001892:	4b0b      	ldr	r3, [pc, #44]	@ (80018c0 <HAL_MspInit+0x54>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	4a0a      	ldr	r2, [pc, #40]	@ (80018c0 <HAL_MspInit+0x54>)
 8001898:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800189c:	6413      	str	r3, [r2, #64]	@ 0x40
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_MspInit+0x54>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a6:	603b      	str	r3, [r7, #0]
 80018a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018aa:	2200      	movs	r2, #0
 80018ac:	210f      	movs	r1, #15
 80018ae:	f06f 0001 	mvn.w	r0, #1
 80018b2:	f000 fb2d 	bl	8001f10 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018b6:	bf00      	nop
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	bf00      	nop
 80018c0:	40023800 	.word	0x40023800

080018c4 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b085      	sub	sp, #20
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001900 <HAL_CRC_MspInit+0x3c>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d10d      	bne.n	80018f2 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80018d6:	2300      	movs	r3, #0
 80018d8:	60fb      	str	r3, [r7, #12]
 80018da:	4b0a      	ldr	r3, [pc, #40]	@ (8001904 <HAL_CRC_MspInit+0x40>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	4a09      	ldr	r2, [pc, #36]	@ (8001904 <HAL_CRC_MspInit+0x40>)
 80018e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80018e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e6:	4b07      	ldr	r3, [pc, #28]	@ (8001904 <HAL_CRC_MspInit+0x40>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 80018f2:	bf00      	nop
 80018f4:	3714      	adds	r7, #20
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40023000 	.word	0x40023000
 8001904:	40023800 	.word	0x40023800

08001908 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b08e      	sub	sp, #56	@ 0x38
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001920:	f107 0314 	add.w	r3, r7, #20
 8001924:	2200      	movs	r2, #0
 8001926:	601a      	str	r2, [r3, #0]
 8001928:	605a      	str	r2, [r3, #4]
 800192a:	609a      	str	r2, [r3, #8]
 800192c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a4a      	ldr	r2, [pc, #296]	@ (8001a5c <HAL_I2S_MspInit+0x154>)
 8001934:	4293      	cmp	r3, r2
 8001936:	f040 808c 	bne.w	8001a52 <HAL_I2S_MspInit+0x14a>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800193a:	2301      	movs	r3, #1
 800193c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800193e:	23c0      	movs	r3, #192	@ 0xc0
 8001940:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001942:	2306      	movs	r3, #6
 8001944:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001946:	f107 0314 	add.w	r3, r7, #20
 800194a:	4618      	mov	r0, r3
 800194c:	f002 faa4 	bl	8003e98 <HAL_RCCEx_PeriphCLKConfig>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 8001956:	f7ff ff83 	bl	8001860 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800195a:	2300      	movs	r3, #0
 800195c:	613b      	str	r3, [r7, #16]
 800195e:	4b40      	ldr	r3, [pc, #256]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 8001960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001962:	4a3f      	ldr	r2, [pc, #252]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 8001964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001968:	6413      	str	r3, [r2, #64]	@ 0x40
 800196a:	4b3d      	ldr	r3, [pc, #244]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 800196c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800196e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001972:	613b      	str	r3, [r7, #16]
 8001974:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	4b39      	ldr	r3, [pc, #228]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 800197c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800197e:	4a38      	ldr	r2, [pc, #224]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 8001980:	f043 0304 	orr.w	r3, r3, #4
 8001984:	6313      	str	r3, [r2, #48]	@ 0x30
 8001986:	4b36      	ldr	r3, [pc, #216]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198a:	f003 0304 	and.w	r3, r3, #4
 800198e:	60fb      	str	r3, [r7, #12]
 8001990:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60bb      	str	r3, [r7, #8]
 8001996:	4b32      	ldr	r3, [pc, #200]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	4a31      	ldr	r2, [pc, #196]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 800199c:	f043 0302 	orr.w	r3, r3, #2
 80019a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019a2:	4b2f      	ldr	r3, [pc, #188]	@ (8001a60 <HAL_I2S_MspInit+0x158>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a6:	f003 0302 	and.w	r3, r3, #2
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80019ae:	2308      	movs	r3, #8
 80019b0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019be:	2305      	movs	r3, #5
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80019c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019c6:	4619      	mov	r1, r3
 80019c8:	4826      	ldr	r0, [pc, #152]	@ (8001a64 <HAL_I2S_MspInit+0x15c>)
 80019ca:	f000 fe57 	bl	800267c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|WS_Pin;
 80019ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80019d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d4:	2302      	movs	r3, #2
 80019d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019e0:	2305      	movs	r3, #5
 80019e2:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019e8:	4619      	mov	r1, r3
 80019ea:	481f      	ldr	r0, [pc, #124]	@ (8001a68 <HAL_I2S_MspInit+0x160>)
 80019ec:	f000 fe46 	bl	800267c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 80019f2:	4a1f      	ldr	r2, [pc, #124]	@ (8001a70 <HAL_I2S_MspInit+0x168>)
 80019f4:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80019f6:	4b1d      	ldr	r3, [pc, #116]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019fc:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a02:	4b1a      	ldr	r3, [pc, #104]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a08:	4b18      	ldr	r3, [pc, #96]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a0a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001a0e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001a10:	4b16      	ldr	r3, [pc, #88]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001a16:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001a18:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a1e:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001a20:	4b12      	ldr	r3, [pc, #72]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a22:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001a26:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001a28:	4b10      	ldr	r3, [pc, #64]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a2a:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001a2e:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a30:	4b0e      	ldr	r3, [pc, #56]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001a36:	480d      	ldr	r0, [pc, #52]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a38:	f000 fab0 	bl	8001f9c <HAL_DMA_Init>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8001a42:	f7ff ff0d 	bl	8001860 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4a08      	ldr	r2, [pc, #32]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a4a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001a4c:	4a07      	ldr	r2, [pc, #28]	@ (8001a6c <HAL_I2S_MspInit+0x164>)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001a52:	bf00      	nop
 8001a54:	3738      	adds	r7, #56	@ 0x38
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40003800 	.word	0x40003800
 8001a60:	40023800 	.word	0x40023800
 8001a64:	40020800 	.word	0x40020800
 8001a68:	40020400 	.word	0x40020400
 8001a6c:	200004cc 	.word	0x200004cc
 8001a70:	40026058 	.word	0x40026058

08001a74 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	@ 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a19      	ldr	r2, [pc, #100]	@ (8001af8 <HAL_SPI_MspInit+0x84>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d12b      	bne.n	8001aee <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b18      	ldr	r3, [pc, #96]	@ (8001afc <HAL_SPI_MspInit+0x88>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a9e:	4a17      	ldr	r2, [pc, #92]	@ (8001afc <HAL_SPI_MspInit+0x88>)
 8001aa0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001aa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aa6:	4b15      	ldr	r3, [pc, #84]	@ (8001afc <HAL_SPI_MspInit+0x88>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aaa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b11      	ldr	r3, [pc, #68]	@ (8001afc <HAL_SPI_MspInit+0x88>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	4a10      	ldr	r2, [pc, #64]	@ (8001afc <HAL_SPI_MspInit+0x88>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8001afc <HAL_SPI_MspInit+0x88>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001ace:	23a0      	movs	r3, #160	@ 0xa0
 8001ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad2:	2302      	movs	r3, #2
 8001ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ada:	2303      	movs	r3, #3
 8001adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ade:	2305      	movs	r3, #5
 8001ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae2:	f107 0314 	add.w	r3, r7, #20
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <HAL_SPI_MspInit+0x8c>)
 8001aea:	f000 fdc7 	bl	800267c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001aee:	bf00      	nop
 8001af0:	3728      	adds	r7, #40	@ 0x28
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40013000 	.word	0x40013000
 8001afc:	40023800 	.word	0x40023800
 8001b00:	40020000 	.word	0x40020000

08001b04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b08e      	sub	sp, #56	@ 0x38
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
 8001b18:	4b33      	ldr	r3, [pc, #204]	@ (8001be8 <HAL_InitTick+0xe4>)
 8001b1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1c:	4a32      	ldr	r2, [pc, #200]	@ (8001be8 <HAL_InitTick+0xe4>)
 8001b1e:	f043 0308 	orr.w	r3, r3, #8
 8001b22:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b24:	4b30      	ldr	r3, [pc, #192]	@ (8001be8 <HAL_InitTick+0xe4>)
 8001b26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	60fb      	str	r3, [r7, #12]
 8001b2e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b30:	f107 0210 	add.w	r2, r7, #16
 8001b34:	f107 0314 	add.w	r3, r7, #20
 8001b38:	4611      	mov	r1, r2
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f002 f97a 	bl	8003e34 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b44:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d103      	bne.n	8001b52 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b4a:	f002 f95f 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8001b4e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b50:	e004      	b.n	8001b5c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b52:	f002 f95b 	bl	8003e0c <HAL_RCC_GetPCLK1Freq>
 8001b56:	4603      	mov	r3, r0
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b5e:	4a23      	ldr	r2, [pc, #140]	@ (8001bec <HAL_InitTick+0xe8>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	0c9b      	lsrs	r3, r3, #18
 8001b66:	3b01      	subs	r3, #1
 8001b68:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 8001b6a:	4b21      	ldr	r3, [pc, #132]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001b6c:	4a21      	ldr	r2, [pc, #132]	@ (8001bf4 <HAL_InitTick+0xf0>)
 8001b6e:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 8001b70:	4b1f      	ldr	r3, [pc, #124]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001b72:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b76:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 8001b78:	4a1d      	ldr	r2, [pc, #116]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001b7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b7c:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 8001b7e:	4b1c      	ldr	r3, [pc, #112]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b84:	4b1a      	ldr	r3, [pc, #104]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b8a:	4b19      	ldr	r3, [pc, #100]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 8001b90:	4817      	ldr	r0, [pc, #92]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001b92:	f002 fd6d 	bl	8004670 <HAL_TIM_Base_Init>
 8001b96:	4603      	mov	r3, r0
 8001b98:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d11b      	bne.n	8001bdc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 8001ba4:	4812      	ldr	r0, [pc, #72]	@ (8001bf0 <HAL_InitTick+0xec>)
 8001ba6:	f002 fdbd 	bl	8004724 <HAL_TIM_Base_Start_IT>
 8001baa:	4603      	mov	r3, r0
 8001bac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001bb0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001bb8:	2032      	movs	r0, #50	@ 0x32
 8001bba:	f000 f9c5 	bl	8001f48 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	2b0f      	cmp	r3, #15
 8001bc2:	d808      	bhi.n	8001bd6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	6879      	ldr	r1, [r7, #4]
 8001bc8:	2032      	movs	r0, #50	@ 0x32
 8001bca:	f000 f9a1 	bl	8001f10 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001bce:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf8 <HAL_InitTick+0xf4>)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6013      	str	r3, [r2, #0]
 8001bd4:	e002      	b.n	8001bdc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bdc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3738      	adds	r7, #56	@ 0x38
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	40023800 	.word	0x40023800
 8001bec:	431bde83 	.word	0x431bde83
 8001bf0:	20005ee8 	.word	0x20005ee8
 8001bf4:	40000c00 	.word	0x40000c00
 8001bf8:	20000004 	.word	0x20000004

08001bfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c00:	bf00      	nop
 8001c02:	e7fd      	b.n	8001c00 <NMI_Handler+0x4>

08001c04 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c08:	bf00      	nop
 8001c0a:	e7fd      	b.n	8001c08 <HardFault_Handler+0x4>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c10:	bf00      	nop
 8001c12:	e7fd      	b.n	8001c10 <MemManage_Handler+0x4>

08001c14 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c14:	b480      	push	{r7}
 8001c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c18:	bf00      	nop
 8001c1a:	e7fd      	b.n	8001c18 <BusFault_Handler+0x4>

08001c1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c20:	bf00      	nop
 8001c22:	e7fd      	b.n	8001c20 <UsageFault_Handler+0x4>

08001c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c28:	bf00      	nop
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
	...

08001c34 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001c38:	4802      	ldr	r0, [pc, #8]	@ (8001c44 <DMA1_Stream3_IRQHandler+0x10>)
 8001c3a:	f000 fab5 	bl	80021a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200004cc 	.word	0x200004cc

08001c48 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001c4c:	4802      	ldr	r0, [pc, #8]	@ (8001c58 <TIM5_IRQHandler+0x10>)
 8001c4e:	f002 fdd9 	bl	8004804 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20005ee8 	.word	0x20005ee8

08001c5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c60:	4b06      	ldr	r3, [pc, #24]	@ (8001c7c <SystemInit+0x20>)
 8001c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001c66:	4a05      	ldr	r2, [pc, #20]	@ (8001c7c <SystemInit+0x20>)
 8001c68:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001c6c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c70:	bf00      	nop
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr
 8001c7a:	bf00      	nop
 8001c7c:	e000ed00 	.word	0xe000ed00

08001c80 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001c80:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001cb8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001c84:	f7ff ffea 	bl	8001c5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c88:	480c      	ldr	r0, [pc, #48]	@ (8001cbc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c8a:	490d      	ldr	r1, [pc, #52]	@ (8001cc0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c8c:	4a0d      	ldr	r2, [pc, #52]	@ (8001cc4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c90:	e002      	b.n	8001c98 <LoopCopyDataInit>

08001c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c96:	3304      	adds	r3, #4

08001c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c9c:	d3f9      	bcc.n	8001c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c9e:	4a0a      	ldr	r2, [pc, #40]	@ (8001cc8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001ca0:	4c0a      	ldr	r4, [pc, #40]	@ (8001ccc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ca4:	e001      	b.n	8001caa <LoopFillZerobss>

08001ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ca8:	3204      	adds	r2, #4

08001caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001cac:	d3fb      	bcc.n	8001ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001cae:	f009 fe41 	bl	800b934 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001cb2:	f7ff f903 	bl	8000ebc <main>
  bx  lr    
 8001cb6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001cb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001cbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001cc0:	20000460 	.word	0x20000460
  ldr r2, =_sidata
 8001cc4:	0802a930 	.word	0x0802a930
  ldr r2, =_sbss
 8001cc8:	20000460 	.word	0x20000460
  ldr r4, =_ebss
 8001ccc:	2000aab0 	.word	0x2000aab0

08001cd0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cd0:	e7fe      	b.n	8001cd0 <ADC_IRQHandler>
	...

08001cd4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001cd8:	4b0e      	ldr	r3, [pc, #56]	@ (8001d14 <HAL_Init+0x40>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a0d      	ldr	r2, [pc, #52]	@ (8001d14 <HAL_Init+0x40>)
 8001cde:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ce2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8001d14 <HAL_Init+0x40>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a0a      	ldr	r2, [pc, #40]	@ (8001d14 <HAL_Init+0x40>)
 8001cea:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001cee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cf0:	4b08      	ldr	r3, [pc, #32]	@ (8001d14 <HAL_Init+0x40>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a07      	ldr	r2, [pc, #28]	@ (8001d14 <HAL_Init+0x40>)
 8001cf6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001cfa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cfc:	2003      	movs	r0, #3
 8001cfe:	f000 f8fc 	bl	8001efa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001d02:	200f      	movs	r0, #15
 8001d04:	f7ff fefe 	bl	8001b04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001d08:	f7ff fdb0 	bl	800186c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001d0c:	2300      	movs	r3, #0
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023c00 	.word	0x40023c00

08001d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d1c:	4b06      	ldr	r3, [pc, #24]	@ (8001d38 <HAL_IncTick+0x20>)
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	461a      	mov	r2, r3
 8001d22:	4b06      	ldr	r3, [pc, #24]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4413      	add	r3, r2
 8001d28:	4a04      	ldr	r2, [pc, #16]	@ (8001d3c <HAL_IncTick+0x24>)
 8001d2a:	6013      	str	r3, [r2, #0]
}
 8001d2c:	bf00      	nop
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
 8001d36:	bf00      	nop
 8001d38:	20000008 	.word	0x20000008
 8001d3c:	20005f30 	.word	0x20005f30

08001d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  return uwTick;
 8001d44:	4b03      	ldr	r3, [pc, #12]	@ (8001d54 <HAL_GetTick+0x14>)
 8001d46:	681b      	ldr	r3, [r3, #0]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	20005f30 	.word	0x20005f30

08001d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d60:	f7ff ffee 	bl	8001d40 <HAL_GetTick>
 8001d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001d70:	d005      	beq.n	8001d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d72:	4b0a      	ldr	r3, [pc, #40]	@ (8001d9c <HAL_Delay+0x44>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	461a      	mov	r2, r3
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4413      	add	r3, r2
 8001d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d7e:	bf00      	nop
 8001d80:	f7ff ffde 	bl	8001d40 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	68bb      	ldr	r3, [r7, #8]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	68fa      	ldr	r2, [r7, #12]
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d8f7      	bhi.n	8001d80 <HAL_Delay+0x28>
  {
  }
}
 8001d90:	bf00      	nop
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20000008 	.word	0x20000008

08001da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001db6:	68ba      	ldr	r2, [r7, #8]
 8001db8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dc8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001dcc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dd2:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd4:	68bb      	ldr	r3, [r7, #8]
 8001dd6:	60d3      	str	r3, [r2, #12]
}
 8001dd8:	bf00      	nop
 8001dda:	3714      	adds	r7, #20
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de2:	4770      	bx	lr
 8001de4:	e000ed00 	.word	0xe000ed00

08001de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001de8:	b480      	push	{r7}
 8001dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001dec:	4b04      	ldr	r3, [pc, #16]	@ (8001e00 <__NVIC_GetPriorityGrouping+0x18>)
 8001dee:	68db      	ldr	r3, [r3, #12]
 8001df0:	0a1b      	lsrs	r3, r3, #8
 8001df2:	f003 0307 	and.w	r3, r3, #7
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	db0b      	blt.n	8001e2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	f003 021f 	and.w	r2, r3, #31
 8001e1c:	4907      	ldr	r1, [pc, #28]	@ (8001e3c <__NVIC_EnableIRQ+0x38>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	095b      	lsrs	r3, r3, #5
 8001e24:	2001      	movs	r0, #1
 8001e26:	fa00 f202 	lsl.w	r2, r0, r2
 8001e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	e000e100 	.word	0xe000e100

08001e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	4603      	mov	r3, r0
 8001e48:	6039      	str	r1, [r7, #0]
 8001e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	db0a      	blt.n	8001e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	490c      	ldr	r1, [pc, #48]	@ (8001e8c <__NVIC_SetPriority+0x4c>)
 8001e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e5e:	0112      	lsls	r2, r2, #4
 8001e60:	b2d2      	uxtb	r2, r2
 8001e62:	440b      	add	r3, r1
 8001e64:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e68:	e00a      	b.n	8001e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4908      	ldr	r1, [pc, #32]	@ (8001e90 <__NVIC_SetPriority+0x50>)
 8001e70:	79fb      	ldrb	r3, [r7, #7]
 8001e72:	f003 030f 	and.w	r3, r3, #15
 8001e76:	3b04      	subs	r3, #4
 8001e78:	0112      	lsls	r2, r2, #4
 8001e7a:	b2d2      	uxtb	r2, r2
 8001e7c:	440b      	add	r3, r1
 8001e7e:	761a      	strb	r2, [r3, #24]
}
 8001e80:	bf00      	nop
 8001e82:	370c      	adds	r7, #12
 8001e84:	46bd      	mov	sp, r7
 8001e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8a:	4770      	bx	lr
 8001e8c:	e000e100 	.word	0xe000e100
 8001e90:	e000ed00 	.word	0xe000ed00

08001e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e94:	b480      	push	{r7}
 8001e96:	b089      	sub	sp, #36	@ 0x24
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f003 0307 	and.w	r3, r3, #7
 8001ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ea8:	69fb      	ldr	r3, [r7, #28]
 8001eaa:	f1c3 0307 	rsb	r3, r3, #7
 8001eae:	2b04      	cmp	r3, #4
 8001eb0:	bf28      	it	cs
 8001eb2:	2304      	movcs	r3, #4
 8001eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eb6:	69fb      	ldr	r3, [r7, #28]
 8001eb8:	3304      	adds	r3, #4
 8001eba:	2b06      	cmp	r3, #6
 8001ebc:	d902      	bls.n	8001ec4 <NVIC_EncodePriority+0x30>
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	3b03      	subs	r3, #3
 8001ec2:	e000      	b.n	8001ec6 <NVIC_EncodePriority+0x32>
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ec8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001ecc:	69bb      	ldr	r3, [r7, #24]
 8001ece:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed2:	43da      	mvns	r2, r3
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	401a      	ands	r2, r3
 8001ed8:	697b      	ldr	r3, [r7, #20]
 8001eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001edc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ee0:	697b      	ldr	r3, [r7, #20]
 8001ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ee6:	43d9      	mvns	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	4313      	orrs	r3, r2
         );
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3724      	adds	r7, #36	@ 0x24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr

08001efa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b082      	sub	sp, #8
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f02:	6878      	ldr	r0, [r7, #4]
 8001f04:	f7ff ff4c 	bl	8001da0 <__NVIC_SetPriorityGrouping>
}
 8001f08:	bf00      	nop
 8001f0a:	3708      	adds	r7, #8
 8001f0c:	46bd      	mov	sp, r7
 8001f0e:	bd80      	pop	{r7, pc}

08001f10 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f22:	f7ff ff61 	bl	8001de8 <__NVIC_GetPriorityGrouping>
 8001f26:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	68b9      	ldr	r1, [r7, #8]
 8001f2c:	6978      	ldr	r0, [r7, #20]
 8001f2e:	f7ff ffb1 	bl	8001e94 <NVIC_EncodePriority>
 8001f32:	4602      	mov	r2, r0
 8001f34:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f38:	4611      	mov	r1, r2
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff ff80 	bl	8001e40 <__NVIC_SetPriority>
}
 8001f40:	bf00      	nop
 8001f42:	3718      	adds	r7, #24
 8001f44:	46bd      	mov	sp, r7
 8001f46:	bd80      	pop	{r7, pc}

08001f48 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b082      	sub	sp, #8
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	4603      	mov	r3, r0
 8001f50:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7ff ff54 	bl	8001e04 <__NVIC_EnableIRQ>
}
 8001f5c:	bf00      	nop
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d101      	bne.n	8001f76 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e00e      	b.n	8001f94 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	795b      	ldrb	r3, [r3, #5]
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d105      	bne.n	8001f8c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff fc9c 	bl	80018c4 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001f92:	2300      	movs	r3, #0
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001fa8:	f7ff feca 	bl	8001d40 <HAL_GetTick>
 8001fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d101      	bne.n	8001fb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e099      	b.n	80020ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2202      	movs	r2, #2
 8001fbc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0201 	bic.w	r2, r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fd8:	e00f      	b.n	8001ffa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001fda:	f7ff feb1 	bl	8001d40 <HAL_GetTick>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	1ad3      	subs	r3, r2, r3
 8001fe4:	2b05      	cmp	r3, #5
 8001fe6:	d908      	bls.n	8001ffa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	2220      	movs	r2, #32
 8001fec:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e078      	b.n	80020ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f003 0301 	and.w	r3, r3, #1
 8002004:	2b00      	cmp	r3, #0
 8002006:	d1e8      	bne.n	8001fda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002010:	697a      	ldr	r2, [r7, #20]
 8002012:	4b38      	ldr	r3, [pc, #224]	@ (80020f4 <HAL_DMA_Init+0x158>)
 8002014:	4013      	ands	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685a      	ldr	r2, [r3, #4]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002026:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	699b      	ldr	r3, [r3, #24]
 8002038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002050:	2b04      	cmp	r3, #4
 8002052:	d107      	bne.n	8002064 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205c:	4313      	orrs	r3, r2
 800205e:	697a      	ldr	r2, [r7, #20]
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	697a      	ldr	r2, [r7, #20]
 800206a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	f023 0307 	bic.w	r3, r3, #7
 800207a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002080:	697a      	ldr	r2, [r7, #20]
 8002082:	4313      	orrs	r3, r2
 8002084:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208a:	2b04      	cmp	r3, #4
 800208c:	d117      	bne.n	80020be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209c:	2b00      	cmp	r3, #0
 800209e:	d00e      	beq.n	80020be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 fa6f 	bl	8002584 <DMA_CheckFifoParam>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d008      	beq.n	80020be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2240      	movs	r2, #64	@ 0x40
 80020b0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	2201      	movs	r2, #1
 80020b6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80020ba:	2301      	movs	r3, #1
 80020bc:	e016      	b.n	80020ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f000 fa26 	bl	8002518 <DMA_CalcBaseAndBitshift>
 80020cc:	4603      	mov	r3, r0
 80020ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020d4:	223f      	movs	r2, #63	@ 0x3f
 80020d6:	409a      	lsls	r2, r3
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2201      	movs	r2, #1
 80020e6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3718      	adds	r7, #24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	f010803f 	.word	0xf010803f

080020f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b086      	sub	sp, #24
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	60f8      	str	r0, [r7, #12]
 8002100:	60b9      	str	r1, [r7, #8]
 8002102:	607a      	str	r2, [r7, #4]
 8002104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002106:	2300      	movs	r3, #0
 8002108:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800210e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002116:	2b01      	cmp	r3, #1
 8002118:	d101      	bne.n	800211e <HAL_DMA_Start_IT+0x26>
 800211a:	2302      	movs	r3, #2
 800211c:	e040      	b.n	80021a0 <HAL_DMA_Start_IT+0xa8>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2201      	movs	r2, #1
 8002122:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d12f      	bne.n	8002192 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	2202      	movs	r2, #2
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	2200      	movs	r2, #0
 800213e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68b9      	ldr	r1, [r7, #8]
 8002146:	68f8      	ldr	r0, [r7, #12]
 8002148:	f000 f9b8 	bl	80024bc <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002150:	223f      	movs	r2, #63	@ 0x3f
 8002152:	409a      	lsls	r2, r3
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f042 0216 	orr.w	r2, r2, #22
 8002166:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216c:	2b00      	cmp	r3, #0
 800216e:	d007      	beq.n	8002180 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f042 0208 	orr.w	r2, r2, #8
 800217e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f042 0201 	orr.w	r2, r2, #1
 800218e:	601a      	str	r2, [r3, #0]
 8002190:	e005      	b.n	800219e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800219a:	2302      	movs	r3, #2
 800219c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800219e:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b086      	sub	sp, #24
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80021b0:	2300      	movs	r3, #0
 80021b2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80021b4:	4b8e      	ldr	r3, [pc, #568]	@ (80023f0 <HAL_DMA_IRQHandler+0x248>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a8e      	ldr	r2, [pc, #568]	@ (80023f4 <HAL_DMA_IRQHandler+0x24c>)
 80021ba:	fba2 2303 	umull	r2, r3, r2, r3
 80021be:	0a9b      	lsrs	r3, r3, #10
 80021c0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021c6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021d2:	2208      	movs	r2, #8
 80021d4:	409a      	lsls	r2, r3
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	4013      	ands	r3, r2
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d01a      	beq.n	8002214 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d013      	beq.n	8002214 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0204 	bic.w	r2, r2, #4
 80021fa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002200:	2208      	movs	r2, #8
 8002202:	409a      	lsls	r2, r3
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800220c:	f043 0201 	orr.w	r2, r3, #1
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002218:	2201      	movs	r2, #1
 800221a:	409a      	lsls	r2, r3
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d012      	beq.n	800224a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800222e:	2b00      	cmp	r3, #0
 8002230:	d00b      	beq.n	800224a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002236:	2201      	movs	r2, #1
 8002238:	409a      	lsls	r2, r3
 800223a:	693b      	ldr	r3, [r7, #16]
 800223c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002242:	f043 0202 	orr.w	r2, r3, #2
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800224e:	2204      	movs	r2, #4
 8002250:	409a      	lsls	r2, r3
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0302 	and.w	r3, r3, #2
 8002264:	2b00      	cmp	r3, #0
 8002266:	d00b      	beq.n	8002280 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800226c:	2204      	movs	r2, #4
 800226e:	409a      	lsls	r2, r3
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002278:	f043 0204 	orr.w	r2, r3, #4
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002284:	2210      	movs	r2, #16
 8002286:	409a      	lsls	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4013      	ands	r3, r2
 800228c:	2b00      	cmp	r3, #0
 800228e:	d043      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b00      	cmp	r3, #0
 800229c:	d03c      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022a2:	2210      	movs	r2, #16
 80022a4:	409a      	lsls	r2, r3
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d018      	beq.n	80022ea <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d108      	bne.n	80022d8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022d2:	6878      	ldr	r0, [r7, #4]
 80022d4:	4798      	blx	r3
 80022d6:	e01f      	b.n	8002318 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01b      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	4798      	blx	r3
 80022e8:	e016      	b.n	8002318 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d107      	bne.n	8002308 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0208 	bic.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230c:	2b00      	cmp	r3, #0
 800230e:	d003      	beq.n	8002318 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002314:	6878      	ldr	r0, [r7, #4]
 8002316:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800231c:	2220      	movs	r2, #32
 800231e:	409a      	lsls	r2, r3
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	4013      	ands	r3, r2
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 808f 	beq.w	8002448 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0310 	and.w	r3, r3, #16
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8087 	beq.w	8002448 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800233e:	2220      	movs	r2, #32
 8002340:	409a      	lsls	r2, r3
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800234c:	b2db      	uxtb	r3, r3
 800234e:	2b05      	cmp	r3, #5
 8002350:	d136      	bne.n	80023c0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f022 0216 	bic.w	r2, r2, #22
 8002360:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	695a      	ldr	r2, [r3, #20]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002370:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	2b00      	cmp	r3, #0
 8002378:	d103      	bne.n	8002382 <HAL_DMA_IRQHandler+0x1da>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800237e:	2b00      	cmp	r3, #0
 8002380:	d007      	beq.n	8002392 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681a      	ldr	r2, [r3, #0]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f022 0208 	bic.w	r2, r2, #8
 8002390:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002396:	223f      	movs	r2, #63	@ 0x3f
 8002398:	409a      	lsls	r2, r3
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2201      	movs	r2, #1
 80023a2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d07e      	beq.n	80024b4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	4798      	blx	r3
        }
        return;
 80023be:	e079      	b.n	80024b4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01d      	beq.n	800240a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10d      	bne.n	80023f8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d031      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023e8:	6878      	ldr	r0, [r7, #4]
 80023ea:	4798      	blx	r3
 80023ec:	e02c      	b.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
 80023ee:	bf00      	nop
 80023f0:	20000000 	.word	0x20000000
 80023f4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d023      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	4798      	blx	r3
 8002408:	e01e      	b.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002414:	2b00      	cmp	r3, #0
 8002416:	d10f      	bne.n	8002438 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f022 0210 	bic.w	r2, r2, #16
 8002426:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2200      	movs	r2, #0
 8002434:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800243c:	2b00      	cmp	r3, #0
 800243e:	d003      	beq.n	8002448 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800244c:	2b00      	cmp	r3, #0
 800244e:	d032      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d022      	beq.n	80024a2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2205      	movs	r2, #5
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f022 0201 	bic.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	3301      	adds	r3, #1
 8002478:	60bb      	str	r3, [r7, #8]
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	429a      	cmp	r2, r3
 800247e:	d307      	bcc.n	8002490 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0301 	and.w	r3, r3, #1
 800248a:	2b00      	cmp	r3, #0
 800248c:	d1f2      	bne.n	8002474 <HAL_DMA_IRQHandler+0x2cc>
 800248e:	e000      	b.n	8002492 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002490:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	2201      	movs	r2, #1
 8002496:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	2200      	movs	r2, #0
 800249e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d005      	beq.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	4798      	blx	r3
 80024b2:	e000      	b.n	80024b6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80024b4:	bf00      	nop
    }
  }
}
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}

080024bc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80024bc:	b480      	push	{r7}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	60f8      	str	r0, [r7, #12]
 80024c4:	60b9      	str	r1, [r7, #8]
 80024c6:	607a      	str	r2, [r7, #4]
 80024c8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80024d8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	2b40      	cmp	r3, #64	@ 0x40
 80024e8:	d108      	bne.n	80024fc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024fa:	e007      	b.n	800250c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	68ba      	ldr	r2, [r7, #8]
 8002502:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	687a      	ldr	r2, [r7, #4]
 800250a:	60da      	str	r2, [r3, #12]
}
 800250c:	bf00      	nop
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002518:	b480      	push	{r7}
 800251a:	b085      	sub	sp, #20
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	b2db      	uxtb	r3, r3
 8002526:	3b10      	subs	r3, #16
 8002528:	4a14      	ldr	r2, [pc, #80]	@ (800257c <DMA_CalcBaseAndBitshift+0x64>)
 800252a:	fba2 2303 	umull	r2, r3, r2, r3
 800252e:	091b      	lsrs	r3, r3, #4
 8002530:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002532:	4a13      	ldr	r2, [pc, #76]	@ (8002580 <DMA_CalcBaseAndBitshift+0x68>)
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	4413      	add	r3, r2
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	2b03      	cmp	r3, #3
 8002544:	d909      	bls.n	800255a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800254e:	f023 0303 	bic.w	r3, r3, #3
 8002552:	1d1a      	adds	r2, r3, #4
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	659a      	str	r2, [r3, #88]	@ 0x58
 8002558:	e007      	b.n	800256a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800256e:	4618      	mov	r0, r3
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	aaaaaaab 	.word	0xaaaaaaab
 8002580:	0800d08c 	.word	0x0800d08c

08002584 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800258c:	2300      	movs	r3, #0
 800258e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002594:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	699b      	ldr	r3, [r3, #24]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d11f      	bne.n	80025de <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	2b03      	cmp	r3, #3
 80025a2:	d856      	bhi.n	8002652 <DMA_CheckFifoParam+0xce>
 80025a4:	a201      	add	r2, pc, #4	@ (adr r2, 80025ac <DMA_CheckFifoParam+0x28>)
 80025a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025aa:	bf00      	nop
 80025ac:	080025bd 	.word	0x080025bd
 80025b0:	080025cf 	.word	0x080025cf
 80025b4:	080025bd 	.word	0x080025bd
 80025b8:	08002653 	.word	0x08002653
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025c0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d046      	beq.n	8002656 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025cc:	e043      	b.n	8002656 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80025d6:	d140      	bne.n	800265a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025dc:	e03d      	b.n	800265a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80025e6:	d121      	bne.n	800262c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d837      	bhi.n	800265e <DMA_CheckFifoParam+0xda>
 80025ee:	a201      	add	r2, pc, #4	@ (adr r2, 80025f4 <DMA_CheckFifoParam+0x70>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002605 	.word	0x08002605
 80025f8:	0800260b 	.word	0x0800260b
 80025fc:	08002605 	.word	0x08002605
 8002600:	0800261d 	.word	0x0800261d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	73fb      	strb	r3, [r7, #15]
      break;
 8002608:	e030      	b.n	800266c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800260e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d025      	beq.n	8002662 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002616:	2301      	movs	r3, #1
 8002618:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800261a:	e022      	b.n	8002662 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002620:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002624:	d11f      	bne.n	8002666 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800262a:	e01c      	b.n	8002666 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b02      	cmp	r3, #2
 8002630:	d903      	bls.n	800263a <DMA_CheckFifoParam+0xb6>
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	2b03      	cmp	r3, #3
 8002636:	d003      	beq.n	8002640 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002638:	e018      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800263a:	2301      	movs	r3, #1
 800263c:	73fb      	strb	r3, [r7, #15]
      break;
 800263e:	e015      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002644:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00e      	beq.n	800266a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800264c:	2301      	movs	r3, #1
 800264e:	73fb      	strb	r3, [r7, #15]
      break;
 8002650:	e00b      	b.n	800266a <DMA_CheckFifoParam+0xe6>
      break;
 8002652:	bf00      	nop
 8002654:	e00a      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 8002656:	bf00      	nop
 8002658:	e008      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 800265a:	bf00      	nop
 800265c:	e006      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 800265e:	bf00      	nop
 8002660:	e004      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 8002662:	bf00      	nop
 8002664:	e002      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;   
 8002666:	bf00      	nop
 8002668:	e000      	b.n	800266c <DMA_CheckFifoParam+0xe8>
      break;
 800266a:	bf00      	nop
    }
  } 
  
  return status; 
 800266c:	7bfb      	ldrb	r3, [r7, #15]
}
 800266e:	4618      	mov	r0, r3
 8002670:	3714      	adds	r7, #20
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
 800267a:	bf00      	nop

0800267c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800267c:	b480      	push	{r7}
 800267e:	b089      	sub	sp, #36	@ 0x24
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002686:	2300      	movs	r3, #0
 8002688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800268a:	2300      	movs	r3, #0
 800268c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800268e:	2300      	movs	r3, #0
 8002690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002692:	2300      	movs	r3, #0
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	e16b      	b.n	8002970 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002698:	2201      	movs	r2, #1
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	fa02 f303 	lsl.w	r3, r2, r3
 80026a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	697a      	ldr	r2, [r7, #20]
 80026a8:	4013      	ands	r3, r2
 80026aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80026ac:	693a      	ldr	r2, [r7, #16]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	f040 815a 	bne.w	800296a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	685b      	ldr	r3, [r3, #4]
 80026ba:	f003 0303 	and.w	r3, r3, #3
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d005      	beq.n	80026ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026ca:	2b02      	cmp	r3, #2
 80026cc:	d130      	bne.n	8002730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	689b      	ldr	r3, [r3, #8]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	005b      	lsls	r3, r3, #1
 80026d8:	2203      	movs	r2, #3
 80026da:	fa02 f303 	lsl.w	r3, r2, r3
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	005b      	lsls	r3, r3, #1
 80026ee:	fa02 f303 	lsl.w	r3, r2, r3
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	69ba      	ldr	r2, [r7, #24]
 80026fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002704:	2201      	movs	r2, #1
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	fa02 f303 	lsl.w	r3, r2, r3
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	091b      	lsrs	r3, r3, #4
 800271a:	f003 0201 	and.w	r2, r3, #1
 800271e:	69fb      	ldr	r3, [r7, #28]
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 0303 	and.w	r3, r3, #3
 8002738:	2b03      	cmp	r3, #3
 800273a:	d017      	beq.n	800276c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	2203      	movs	r2, #3
 8002748:	fa02 f303 	lsl.w	r3, r2, r3
 800274c:	43db      	mvns	r3, r3
 800274e:	69ba      	ldr	r2, [r7, #24]
 8002750:	4013      	ands	r3, r2
 8002752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	689a      	ldr	r2, [r3, #8]
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	fa02 f303 	lsl.w	r3, r2, r3
 8002760:	69ba      	ldr	r2, [r7, #24]
 8002762:	4313      	orrs	r3, r2
 8002764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f003 0303 	and.w	r3, r3, #3
 8002774:	2b02      	cmp	r3, #2
 8002776:	d123      	bne.n	80027c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	08da      	lsrs	r2, r3, #3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	3208      	adds	r2, #8
 8002780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	f003 0307 	and.w	r3, r3, #7
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	220f      	movs	r2, #15
 8002790:	fa02 f303 	lsl.w	r3, r2, r3
 8002794:	43db      	mvns	r3, r3
 8002796:	69ba      	ldr	r2, [r7, #24]
 8002798:	4013      	ands	r3, r2
 800279a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	691a      	ldr	r2, [r3, #16]
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	fa02 f303 	lsl.w	r3, r2, r3
 80027ac:	69ba      	ldr	r2, [r7, #24]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80027b2:	69fb      	ldr	r3, [r7, #28]
 80027b4:	08da      	lsrs	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	3208      	adds	r2, #8
 80027ba:	69b9      	ldr	r1, [r7, #24]
 80027bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027c6:	69fb      	ldr	r3, [r7, #28]
 80027c8:	005b      	lsls	r3, r3, #1
 80027ca:	2203      	movs	r2, #3
 80027cc:	fa02 f303 	lsl.w	r3, r2, r3
 80027d0:	43db      	mvns	r3, r3
 80027d2:	69ba      	ldr	r2, [r7, #24]
 80027d4:	4013      	ands	r3, r2
 80027d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	f003 0203 	and.w	r2, r3, #3
 80027e0:	69fb      	ldr	r3, [r7, #28]
 80027e2:	005b      	lsls	r3, r3, #1
 80027e4:	fa02 f303 	lsl.w	r3, r2, r3
 80027e8:	69ba      	ldr	r2, [r7, #24]
 80027ea:	4313      	orrs	r3, r2
 80027ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685b      	ldr	r3, [r3, #4]
 80027f8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	f000 80b4 	beq.w	800296a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002802:	2300      	movs	r3, #0
 8002804:	60fb      	str	r3, [r7, #12]
 8002806:	4b60      	ldr	r3, [pc, #384]	@ (8002988 <HAL_GPIO_Init+0x30c>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800280a:	4a5f      	ldr	r2, [pc, #380]	@ (8002988 <HAL_GPIO_Init+0x30c>)
 800280c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002810:	6453      	str	r3, [r2, #68]	@ 0x44
 8002812:	4b5d      	ldr	r3, [pc, #372]	@ (8002988 <HAL_GPIO_Init+0x30c>)
 8002814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002816:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800281e:	4a5b      	ldr	r2, [pc, #364]	@ (800298c <HAL_GPIO_Init+0x310>)
 8002820:	69fb      	ldr	r3, [r7, #28]
 8002822:	089b      	lsrs	r3, r3, #2
 8002824:	3302      	adds	r3, #2
 8002826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800282a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	f003 0303 	and.w	r3, r3, #3
 8002832:	009b      	lsls	r3, r3, #2
 8002834:	220f      	movs	r2, #15
 8002836:	fa02 f303 	lsl.w	r3, r2, r3
 800283a:	43db      	mvns	r3, r3
 800283c:	69ba      	ldr	r2, [r7, #24]
 800283e:	4013      	ands	r3, r2
 8002840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a52      	ldr	r2, [pc, #328]	@ (8002990 <HAL_GPIO_Init+0x314>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d02b      	beq.n	80028a2 <HAL_GPIO_Init+0x226>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	4a51      	ldr	r2, [pc, #324]	@ (8002994 <HAL_GPIO_Init+0x318>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d025      	beq.n	800289e <HAL_GPIO_Init+0x222>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a50      	ldr	r2, [pc, #320]	@ (8002998 <HAL_GPIO_Init+0x31c>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d01f      	beq.n	800289a <HAL_GPIO_Init+0x21e>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a4f      	ldr	r2, [pc, #316]	@ (800299c <HAL_GPIO_Init+0x320>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d019      	beq.n	8002896 <HAL_GPIO_Init+0x21a>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a4e      	ldr	r2, [pc, #312]	@ (80029a0 <HAL_GPIO_Init+0x324>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d013      	beq.n	8002892 <HAL_GPIO_Init+0x216>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4a4d      	ldr	r2, [pc, #308]	@ (80029a4 <HAL_GPIO_Init+0x328>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d00d      	beq.n	800288e <HAL_GPIO_Init+0x212>
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	4a4c      	ldr	r2, [pc, #304]	@ (80029a8 <HAL_GPIO_Init+0x32c>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d007      	beq.n	800288a <HAL_GPIO_Init+0x20e>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	4a4b      	ldr	r2, [pc, #300]	@ (80029ac <HAL_GPIO_Init+0x330>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <HAL_GPIO_Init+0x20a>
 8002882:	2307      	movs	r3, #7
 8002884:	e00e      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 8002886:	2308      	movs	r3, #8
 8002888:	e00c      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 800288a:	2306      	movs	r3, #6
 800288c:	e00a      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 800288e:	2305      	movs	r3, #5
 8002890:	e008      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 8002892:	2304      	movs	r3, #4
 8002894:	e006      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 8002896:	2303      	movs	r3, #3
 8002898:	e004      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 800289a:	2302      	movs	r3, #2
 800289c:	e002      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 800289e:	2301      	movs	r3, #1
 80028a0:	e000      	b.n	80028a4 <HAL_GPIO_Init+0x228>
 80028a2:	2300      	movs	r3, #0
 80028a4:	69fa      	ldr	r2, [r7, #28]
 80028a6:	f002 0203 	and.w	r2, r2, #3
 80028aa:	0092      	lsls	r2, r2, #2
 80028ac:	4093      	lsls	r3, r2
 80028ae:	69ba      	ldr	r2, [r7, #24]
 80028b0:	4313      	orrs	r3, r2
 80028b2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80028b4:	4935      	ldr	r1, [pc, #212]	@ (800298c <HAL_GPIO_Init+0x310>)
 80028b6:	69fb      	ldr	r3, [r7, #28]
 80028b8:	089b      	lsrs	r3, r3, #2
 80028ba:	3302      	adds	r3, #2
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028c2:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	43db      	mvns	r3, r3
 80028cc:	69ba      	ldr	r2, [r7, #24]
 80028ce:	4013      	ands	r3, r2
 80028d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d003      	beq.n	80028e6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4313      	orrs	r3, r2
 80028e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028e6:	4a32      	ldr	r2, [pc, #200]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028ec:	4b30      	ldr	r3, [pc, #192]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 80028ee:	68db      	ldr	r3, [r3, #12]
 80028f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	43db      	mvns	r3, r3
 80028f6:	69ba      	ldr	r2, [r7, #24]
 80028f8:	4013      	ands	r3, r2
 80028fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d003      	beq.n	8002910 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	4313      	orrs	r3, r2
 800290e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002910:	4a27      	ldr	r2, [pc, #156]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 8002912:	69bb      	ldr	r3, [r7, #24]
 8002914:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002916:	4b26      	ldr	r3, [pc, #152]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 8002918:	685b      	ldr	r3, [r3, #4]
 800291a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	43db      	mvns	r3, r3
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	4013      	ands	r3, r2
 8002924:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d003      	beq.n	800293a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800293a:	4a1d      	ldr	r2, [pc, #116]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 800293c:	69bb      	ldr	r3, [r7, #24]
 800293e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002940:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002946:	693b      	ldr	r3, [r7, #16]
 8002948:	43db      	mvns	r3, r3
 800294a:	69ba      	ldr	r2, [r7, #24]
 800294c:	4013      	ands	r3, r2
 800294e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d003      	beq.n	8002964 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	4313      	orrs	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002964:	4a12      	ldr	r2, [pc, #72]	@ (80029b0 <HAL_GPIO_Init+0x334>)
 8002966:	69bb      	ldr	r3, [r7, #24]
 8002968:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	3301      	adds	r3, #1
 800296e:	61fb      	str	r3, [r7, #28]
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	2b0f      	cmp	r3, #15
 8002974:	f67f ae90 	bls.w	8002698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002978:	bf00      	nop
 800297a:	bf00      	nop
 800297c:	3724      	adds	r7, #36	@ 0x24
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
 8002986:	bf00      	nop
 8002988:	40023800 	.word	0x40023800
 800298c:	40013800 	.word	0x40013800
 8002990:	40020000 	.word	0x40020000
 8002994:	40020400 	.word	0x40020400
 8002998:	40020800 	.word	0x40020800
 800299c:	40020c00 	.word	0x40020c00
 80029a0:	40021000 	.word	0x40021000
 80029a4:	40021400 	.word	0x40021400
 80029a8:	40021800 	.word	0x40021800
 80029ac:	40021c00 	.word	0x40021c00
 80029b0:	40013c00 	.word	0x40013c00

080029b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	460b      	mov	r3, r1
 80029be:	807b      	strh	r3, [r7, #2]
 80029c0:	4613      	mov	r3, r2
 80029c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029c4:	787b      	ldrb	r3, [r7, #1]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ca:	887a      	ldrh	r2, [r7, #2]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029d0:	e003      	b.n	80029da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029d2:	887b      	ldrh	r3, [r7, #2]
 80029d4:	041a      	lsls	r2, r3, #16
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	619a      	str	r2, [r3, #24]
}
 80029da:	bf00      	nop
 80029dc:	370c      	adds	r7, #12
 80029de:	46bd      	mov	sp, r7
 80029e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e4:	4770      	bx	lr
	...

080029e8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b088      	sub	sp, #32
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e128      	b.n	8002c4c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d109      	bne.n	8002a1a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2200      	movs	r2, #0
 8002a0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a90      	ldr	r2, [pc, #576]	@ (8002c54 <HAL_I2S_Init+0x26c>)
 8002a12:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8002a14:	6878      	ldr	r0, [r7, #4]
 8002a16:	f7fe ff77 	bl	8001908 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2202      	movs	r2, #2
 8002a1e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	69db      	ldr	r3, [r3, #28]
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	6812      	ldr	r2, [r2, #0]
 8002a2c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002a30:	f023 030f 	bic.w	r3, r3, #15
 8002a34:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	695b      	ldr	r3, [r3, #20]
 8002a42:	2b02      	cmp	r3, #2
 8002a44:	d060      	beq.n	8002b08 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	68db      	ldr	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8002a4e:	2310      	movs	r3, #16
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e001      	b.n	8002a58 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002a54:	2320      	movs	r3, #32
 8002a56:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d802      	bhi.n	8002a66 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002a66:	2001      	movs	r0, #1
 8002a68:	f001 faf8 	bl	800405c <HAL_RCCEx_GetPeriphCLKFreq>
 8002a6c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a76:	d125      	bne.n	8002ac4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d010      	beq.n	8002aa2 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	68fa      	ldr	r2, [r7, #12]
 8002a86:	fbb2 f2f3 	udiv	r2, r2, r3
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	005b      	lsls	r3, r3, #1
 8002a92:	461a      	mov	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a9c:	3305      	adds	r3, #5
 8002a9e:	613b      	str	r3, [r7, #16]
 8002aa0:	e01f      	b.n	8002ae2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	68fa      	ldr	r2, [r7, #12]
 8002aa8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	695b      	ldr	r3, [r3, #20]
 8002aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abe:	3305      	adds	r3, #5
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	e00e      	b.n	8002ae2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002ac4:	68fa      	ldr	r2, [r7, #12]
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	fbb2 f2f3 	udiv	r2, r2, r3
 8002acc:	4613      	mov	r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	005b      	lsls	r3, r3, #1
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	695b      	ldr	r3, [r3, #20]
 8002ada:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ade:	3305      	adds	r3, #5
 8002ae0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4a5c      	ldr	r2, [pc, #368]	@ (8002c58 <HAL_I2S_Init+0x270>)
 8002ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8002aea:	08db      	lsrs	r3, r3, #3
 8002aec:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0301 	and.w	r3, r3, #1
 8002af4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002af6:	693a      	ldr	r2, [r7, #16]
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	085b      	lsrs	r3, r3, #1
 8002afe:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002b00:	69bb      	ldr	r3, [r7, #24]
 8002b02:	021b      	lsls	r3, r3, #8
 8002b04:	61bb      	str	r3, [r7, #24]
 8002b06:	e003      	b.n	8002b10 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002b08:	2302      	movs	r3, #2
 8002b0a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8002b10:	69fb      	ldr	r3, [r7, #28]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d902      	bls.n	8002b1c <HAL_I2S_Init+0x134>
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	2bff      	cmp	r3, #255	@ 0xff
 8002b1a:	d907      	bls.n	8002b2c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b20:	f043 0210 	orr.w	r2, r3, #16
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e08f      	b.n	8002c4c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	691a      	ldr	r2, [r3, #16]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	ea42 0103 	orr.w	r1, r2, r3
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	69fa      	ldr	r2, [r7, #28]
 8002b3c:	430a      	orrs	r2, r1
 8002b3e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002b4a:	f023 030f 	bic.w	r3, r3, #15
 8002b4e:	687a      	ldr	r2, [r7, #4]
 8002b50:	6851      	ldr	r1, [r2, #4]
 8002b52:	687a      	ldr	r2, [r7, #4]
 8002b54:	6892      	ldr	r2, [r2, #8]
 8002b56:	4311      	orrs	r1, r2
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	68d2      	ldr	r2, [r2, #12]
 8002b5c:	4311      	orrs	r1, r2
 8002b5e:	687a      	ldr	r2, [r7, #4]
 8002b60:	6992      	ldr	r2, [r2, #24]
 8002b62:	430a      	orrs	r2, r1
 8002b64:	431a      	orrs	r2, r3
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b6e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d161      	bne.n	8002c3c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	4a38      	ldr	r2, [pc, #224]	@ (8002c5c <HAL_I2S_Init+0x274>)
 8002b7c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a37      	ldr	r2, [pc, #220]	@ (8002c60 <HAL_I2S_Init+0x278>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d101      	bne.n	8002b8c <HAL_I2S_Init+0x1a4>
 8002b88:	4b36      	ldr	r3, [pc, #216]	@ (8002c64 <HAL_I2S_Init+0x27c>)
 8002b8a:	e001      	b.n	8002b90 <HAL_I2S_Init+0x1a8>
 8002b8c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	687a      	ldr	r2, [r7, #4]
 8002b94:	6812      	ldr	r2, [r2, #0]
 8002b96:	4932      	ldr	r1, [pc, #200]	@ (8002c60 <HAL_I2S_Init+0x278>)
 8002b98:	428a      	cmp	r2, r1
 8002b9a:	d101      	bne.n	8002ba0 <HAL_I2S_Init+0x1b8>
 8002b9c:	4a31      	ldr	r2, [pc, #196]	@ (8002c64 <HAL_I2S_Init+0x27c>)
 8002b9e:	e001      	b.n	8002ba4 <HAL_I2S_Init+0x1bc>
 8002ba0:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8002ba4:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8002ba8:	f023 030f 	bic.w	r3, r3, #15
 8002bac:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c60 <HAL_I2S_Init+0x278>)
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d101      	bne.n	8002bbc <HAL_I2S_Init+0x1d4>
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	@ (8002c64 <HAL_I2S_Init+0x27c>)
 8002bba:	e001      	b.n	8002bc0 <HAL_I2S_Init+0x1d8>
 8002bbc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bc0:	2202      	movs	r2, #2
 8002bc2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a25      	ldr	r2, [pc, #148]	@ (8002c60 <HAL_I2S_Init+0x278>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d101      	bne.n	8002bd2 <HAL_I2S_Init+0x1ea>
 8002bce:	4b25      	ldr	r3, [pc, #148]	@ (8002c64 <HAL_I2S_Init+0x27c>)
 8002bd0:	e001      	b.n	8002bd6 <HAL_I2S_Init+0x1ee>
 8002bd2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002be2:	d003      	beq.n	8002bec <HAL_I2S_Init+0x204>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d103      	bne.n	8002bf4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002bec:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bf0:	613b      	str	r3, [r7, #16]
 8002bf2:	e001      	b.n	8002bf8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c02:	4313      	orrs	r3, r2
 8002c04:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c0c:	4313      	orrs	r3, r2
 8002c0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	699b      	ldr	r3, [r3, #24]
 8002c14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002c16:	4313      	orrs	r3, r2
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	897b      	ldrh	r3, [r7, #10]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002c24:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	4a0d      	ldr	r2, [pc, #52]	@ (8002c60 <HAL_I2S_Init+0x278>)
 8002c2c:	4293      	cmp	r3, r2
 8002c2e:	d101      	bne.n	8002c34 <HAL_I2S_Init+0x24c>
 8002c30:	4b0c      	ldr	r3, [pc, #48]	@ (8002c64 <HAL_I2S_Init+0x27c>)
 8002c32:	e001      	b.n	8002c38 <HAL_I2S_Init+0x250>
 8002c34:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8002c38:	897a      	ldrh	r2, [r7, #10]
 8002c3a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3720      	adds	r7, #32
 8002c50:	46bd      	mov	sp, r7
 8002c52:	bd80      	pop	{r7, pc}
 8002c54:	08002f65 	.word	0x08002f65
 8002c58:	cccccccd 	.word	0xcccccccd
 8002c5c:	08003079 	.word	0x08003079
 8002c60:	40003800 	.word	0x40003800
 8002c64:	40003400 	.word	0x40003400

08002c68 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	4613      	mov	r3, r2
 8002c74:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d002      	beq.n	8002c82 <HAL_I2S_Receive_DMA+0x1a>
 8002c7c:	88fb      	ldrh	r3, [r7, #6]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d101      	bne.n	8002c86 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	e09d      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c8c:	b2db      	uxtb	r3, r3
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8002c92:	2302      	movs	r3, #2
 8002c94:	e095      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c9c:	b2db      	uxtb	r3, r3
 8002c9e:	2b01      	cmp	r3, #1
 8002ca0:	d101      	bne.n	8002ca6 <HAL_I2S_Receive_DMA+0x3e>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e08d      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x15a>
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	2204      	movs	r2, #4
 8002cb2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	68ba      	ldr	r2, [r7, #8]
 8002cc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	69db      	ldr	r3, [r3, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	2b03      	cmp	r3, #3
 8002cd2:	d002      	beq.n	8002cda <HAL_I2S_Receive_DMA+0x72>
 8002cd4:	697b      	ldr	r3, [r7, #20]
 8002cd6:	2b05      	cmp	r3, #5
 8002cd8:	d10a      	bne.n	8002cf0 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 8002cda:	88fb      	ldrh	r3, [r7, #6]
 8002cdc:	005b      	lsls	r3, r3, #1
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 8002ce4:	88fb      	ldrh	r3, [r7, #6]
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	b29a      	uxth	r2, r3
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	865a      	strh	r2, [r3, #50]	@ 0x32
 8002cee:	e005      	b.n	8002cfc <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	88fa      	ldrh	r2, [r7, #6]
 8002cf4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	88fa      	ldrh	r2, [r7, #6]
 8002cfa:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d00:	4a32      	ldr	r2, [pc, #200]	@ (8002dcc <HAL_I2S_Receive_DMA+0x164>)
 8002d02:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d08:	4a31      	ldr	r2, [pc, #196]	@ (8002dd0 <HAL_I2S_Receive_DMA+0x168>)
 8002d0a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d10:	4a30      	ldr	r2, [pc, #192]	@ (8002dd4 <HAL_I2S_Receive_DMA+0x16c>)
 8002d12:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	69db      	ldr	r3, [r3, #28]
 8002d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d22:	d10a      	bne.n	8002d3a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d24:	2300      	movs	r3, #0
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68db      	ldr	r3, [r3, #12]
 8002d2e:	613b      	str	r3, [r7, #16]
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	613b      	str	r3, [r7, #16]
 8002d38:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	330c      	adds	r3, #12
 8002d44:	4619      	mov	r1, r3
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d4a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8002d50:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8002d52:	f7ff f9d1 	bl	80020f8 <HAL_DMA_Start_IT>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d00f      	beq.n	8002d7c <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	f043 0208 	orr.w	r2, r3, #8
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8002d78:	2301      	movs	r3, #1
 8002d7a:	e022      	b.n	8002dc2 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f003 0301 	and.w	r3, r3, #1
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d107      	bne.n	8002da2 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	685a      	ldr	r2, [r3, #4]
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f042 0201 	orr.w	r2, r2, #1
 8002da0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	69db      	ldr	r3, [r3, #28]
 8002da8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d107      	bne.n	8002dc0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	69da      	ldr	r2, [r3, #28]
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002dbe:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3718      	adds	r7, #24
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	08002e43 	.word	0x08002e43
 8002dd0:	08002e01 	.word	0x08002e01
 8002dd4:	08002e5f 	.word	0x08002e5f

08002dd8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b083      	sub	sp, #12
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002de0:	bf00      	nop
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002df4:	bf00      	nop
 8002df6:	370c      	adds	r7, #12
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfe:	4770      	bx	lr

08002e00 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b084      	sub	sp, #16
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	69db      	ldr	r3, [r3, #28]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10e      	bne.n	8002e34 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	685a      	ldr	r2, [r3, #4]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f022 0201 	bic.w	r2, r2, #1
 8002e24:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2200      	movs	r2, #0
 8002e2a:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2201      	movs	r2, #1
 8002e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8002e34:	68f8      	ldr	r0, [r7, #12]
 8002e36:	f7fe faa5 	bl	8001384 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e3a:	bf00      	nop
 8002e3c:	3710      	adds	r7, #16
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b084      	sub	sp, #16
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8002e50:	68f8      	ldr	r0, [r7, #12]
 8002e52:	f7fe fa7f 	bl	8001354 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002e56:	bf00      	nop
 8002e58:	3710      	adds	r7, #16
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}

08002e5e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002e5e:	b580      	push	{r7, lr}
 8002e60:	b084      	sub	sp, #16
 8002e62:	af00      	add	r7, sp, #0
 8002e64:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e6a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 0203 	bic.w	r2, r2, #3
 8002e7a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2200      	movs	r2, #0
 8002e80:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2200      	movs	r2, #0
 8002e86:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e94:	f043 0208 	orr.w	r2, r3, #8
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002e9c:	68f8      	ldr	r0, [r7, #12]
 8002e9e:	f7ff ffa5 	bl	8002dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002ea2:	bf00      	nop
 8002ea4:	3710      	adds	r7, #16
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd80      	pop	{r7, pc}

08002eaa <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002eaa:	b580      	push	{r7, lr}
 8002eac:	b082      	sub	sp, #8
 8002eae:	af00      	add	r7, sp, #0
 8002eb0:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	881a      	ldrh	r2, [r3, #0]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec2:	1c9a      	adds	r2, r3, #2
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d10e      	bne.n	8002efe <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8002eee:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff6d 	bl	8002dd8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002efe:	bf00      	nop
 8002f00:	3708      	adds	r7, #8
 8002f02:	46bd      	mov	sp, r7
 8002f04:	bd80      	pop	{r7, pc}

08002f06 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002f06:	b580      	push	{r7, lr}
 8002f08:	b082      	sub	sp, #8
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	68da      	ldr	r2, [r3, #12]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f18:	b292      	uxth	r2, r2
 8002f1a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f20:	1c9a      	adds	r2, r3, #2
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	3b01      	subs	r3, #1
 8002f2e:	b29a      	uxth	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8002f38:	b29b      	uxth	r3, r3
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10e      	bne.n	8002f5c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	685a      	ldr	r2, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002f4c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7fe fa14 	bl	8001384 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002f5c:	bf00      	nop
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b086      	sub	sp, #24
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d13a      	bne.n	8002ff6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002f80:	697b      	ldr	r3, [r7, #20]
 8002f82:	f003 0301 	and.w	r3, r3, #1
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d109      	bne.n	8002f9e <I2S_IRQHandler+0x3a>
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f94:	2b40      	cmp	r3, #64	@ 0x40
 8002f96:	d102      	bne.n	8002f9e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f7ff ffb4 	bl	8002f06 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002fa4:	2b40      	cmp	r3, #64	@ 0x40
 8002fa6:	d126      	bne.n	8002ff6 <I2S_IRQHandler+0x92>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 0320 	and.w	r3, r3, #32
 8002fb2:	2b20      	cmp	r3, #32
 8002fb4:	d11f      	bne.n	8002ff6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	685a      	ldr	r2, [r3, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002fc4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	613b      	str	r3, [r7, #16]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	68db      	ldr	r3, [r3, #12]
 8002fd0:	613b      	str	r3, [r7, #16]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe8:	f043 0202 	orr.w	r2, r3, #2
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fefb 	bl	8002dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b03      	cmp	r3, #3
 8003000:	d136      	bne.n	8003070 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b02      	cmp	r3, #2
 800300a:	d109      	bne.n	8003020 <I2S_IRQHandler+0xbc>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003016:	2b80      	cmp	r3, #128	@ 0x80
 8003018:	d102      	bne.n	8003020 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800301a:	6878      	ldr	r0, [r7, #4]
 800301c:	f7ff ff45 	bl	8002eaa <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b08      	cmp	r3, #8
 8003028:	d122      	bne.n	8003070 <I2S_IRQHandler+0x10c>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 0320 	and.w	r3, r3, #32
 8003034:	2b20      	cmp	r3, #32
 8003036:	d11b      	bne.n	8003070 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	685a      	ldr	r2, [r3, #4]
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003046:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003048:	2300      	movs	r3, #0
 800304a:	60fb      	str	r3, [r7, #12]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689b      	ldr	r3, [r3, #8]
 8003052:	60fb      	str	r3, [r7, #12]
 8003054:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2201      	movs	r2, #1
 800305a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f043 0204 	orr.w	r2, r3, #4
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7ff febe 	bl	8002dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003070:	bf00      	nop
 8003072:	3718      	adds	r7, #24
 8003074:	46bd      	mov	sp, r7
 8003076:	bd80      	pop	{r7, pc}

08003078 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	b088      	sub	sp, #32
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a92      	ldr	r2, [pc, #584]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d101      	bne.n	8003096 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003092:	4b92      	ldr	r3, [pc, #584]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003094:	e001      	b.n	800309a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003096:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a8b      	ldr	r2, [pc, #556]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d101      	bne.n	80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80030b0:	4b8a      	ldr	r3, [pc, #552]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80030b2:	e001      	b.n	80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80030b4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80030c4:	d004      	beq.n	80030d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f040 8099 	bne.w	8003202 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d107      	bne.n	80030ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d002      	beq.n	80030ea <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f925 	bl	8003334 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	f003 0301 	and.w	r3, r3, #1
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d002      	beq.n	8003104 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 f9c8 	bl	8003494 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003104:	69bb      	ldr	r3, [r7, #24]
 8003106:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800310a:	2b40      	cmp	r3, #64	@ 0x40
 800310c:	d13a      	bne.n	8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	f003 0320 	and.w	r3, r3, #32
 8003114:	2b00      	cmp	r3, #0
 8003116:	d035      	beq.n	8003184 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	4a6e      	ldr	r2, [pc, #440]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d101      	bne.n	8003126 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003122:	4b6e      	ldr	r3, [pc, #440]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003124:	e001      	b.n	800312a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003126:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4969      	ldr	r1, [pc, #420]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003132:	428b      	cmp	r3, r1
 8003134:	d101      	bne.n	800313a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003136:	4b69      	ldr	r3, [pc, #420]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003138:	e001      	b.n	800313e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800313a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800313e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003142:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003152:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003154:	2300      	movs	r3, #0
 8003156:	60fb      	str	r3, [r7, #12]
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	60fb      	str	r3, [r7, #12]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003176:	f043 0202 	orr.w	r2, r3, #2
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff fe34 	bl	8002dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003184:	69fb      	ldr	r3, [r7, #28]
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	2b08      	cmp	r3, #8
 800318c:	f040 80c3 	bne.w	8003316 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 0320 	and.w	r3, r3, #32
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80bd 	beq.w	8003316 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80031aa:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a49      	ldr	r2, [pc, #292]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d101      	bne.n	80031ba <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80031b6:	4b49      	ldr	r3, [pc, #292]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031b8:	e001      	b.n	80031be <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80031ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031be:	685a      	ldr	r2, [r3, #4]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4944      	ldr	r1, [pc, #272]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80031c6:	428b      	cmp	r3, r1
 80031c8:	d101      	bne.n	80031ce <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80031ca:	4b44      	ldr	r3, [pc, #272]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80031cc:	e001      	b.n	80031d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80031ce:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80031d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80031d6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80031d8:	2300      	movs	r3, #0
 80031da:	60bb      	str	r3, [r7, #8]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	60bb      	str	r3, [r7, #8]
 80031e4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f2:	f043 0204 	orr.w	r2, r3, #4
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f7ff fdf6 	bl	8002dec <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003200:	e089      	b.n	8003316 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	d107      	bne.n	800321c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800320c:	693b      	ldr	r3, [r7, #16]
 800320e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003212:	2b00      	cmp	r3, #0
 8003214:	d002      	beq.n	800321c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f8be 	bl	8003398 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0301 	and.w	r3, r3, #1
 8003222:	2b01      	cmp	r3, #1
 8003224:	d107      	bne.n	8003236 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800322c:	2b00      	cmp	r3, #0
 800322e:	d002      	beq.n	8003236 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f8fd 	bl	8003430 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003236:	69fb      	ldr	r3, [r7, #28]
 8003238:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800323c:	2b40      	cmp	r3, #64	@ 0x40
 800323e:	d12f      	bne.n	80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d02a      	beq.n	80032a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003258:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a1e      	ldr	r2, [pc, #120]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003260:	4293      	cmp	r3, r2
 8003262:	d101      	bne.n	8003268 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003264:	4b1d      	ldr	r3, [pc, #116]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003266:	e001      	b.n	800326c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003268:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800326c:	685a      	ldr	r2, [r3, #4]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4919      	ldr	r1, [pc, #100]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003274:	428b      	cmp	r3, r1
 8003276:	d101      	bne.n	800327c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003278:	4b18      	ldr	r3, [pc, #96]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800327a:	e001      	b.n	8003280 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800327c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003280:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003284:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2201      	movs	r2, #1
 800328a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f043 0202 	orr.w	r2, r3, #2
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7ff fda6 	bl	8002dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b08      	cmp	r3, #8
 80032a8:	d136      	bne.n	8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d031      	beq.n	8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a07      	ldr	r2, [pc, #28]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d101      	bne.n	80032c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80032be:	4b07      	ldr	r3, [pc, #28]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032c0:	e001      	b.n	80032c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80032c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032c6:	685a      	ldr	r2, [r3, #4]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4902      	ldr	r1, [pc, #8]	@ (80032d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80032ce:	428b      	cmp	r3, r1
 80032d0:	d106      	bne.n	80032e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80032d2:	4b02      	ldr	r3, [pc, #8]	@ (80032dc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80032d4:	e006      	b.n	80032e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80032d6:	bf00      	nop
 80032d8:	40003800 	.word	0x40003800
 80032dc:	40003400 	.word	0x40003400
 80032e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80032e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80032e8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	685a      	ldr	r2, [r3, #4]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80032f8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fd6c 	bl	8002dec <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003314:	e000      	b.n	8003318 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003316:	bf00      	nop
}
 8003318:	bf00      	nop
 800331a:	3720      	adds	r7, #32
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003328:	bf00      	nop
 800332a:	370c      	adds	r7, #12
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr

08003334 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003340:	1c99      	adds	r1, r3, #2
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6251      	str	r1, [r2, #36]	@ 0x24
 8003346:	881a      	ldrh	r2, [r3, #0]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003352:	b29b      	uxth	r3, r3
 8003354:	3b01      	subs	r3, #1
 8003356:	b29a      	uxth	r2, r3
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003360:	b29b      	uxth	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d113      	bne.n	800338e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003374:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800337a:	b29b      	uxth	r3, r3
 800337c:	2b00      	cmp	r3, #0
 800337e:	d106      	bne.n	800338e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2201      	movs	r2, #1
 8003384:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003388:	6878      	ldr	r0, [r7, #4]
 800338a:	f7ff ffc9 	bl	8003320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b082      	sub	sp, #8
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a4:	1c99      	adds	r1, r3, #2
 80033a6:	687a      	ldr	r2, [r7, #4]
 80033a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80033aa:	8819      	ldrh	r1, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a1d      	ldr	r2, [pc, #116]	@ (8003428 <I2SEx_TxISR_I2SExt+0x90>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d101      	bne.n	80033ba <I2SEx_TxISR_I2SExt+0x22>
 80033b6:	4b1d      	ldr	r3, [pc, #116]	@ (800342c <I2SEx_TxISR_I2SExt+0x94>)
 80033b8:	e001      	b.n	80033be <I2SEx_TxISR_I2SExt+0x26>
 80033ba:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033be:	460a      	mov	r2, r1
 80033c0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	3b01      	subs	r3, #1
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d121      	bne.n	800341e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a12      	ldr	r2, [pc, #72]	@ (8003428 <I2SEx_TxISR_I2SExt+0x90>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d101      	bne.n	80033e8 <I2SEx_TxISR_I2SExt+0x50>
 80033e4:	4b11      	ldr	r3, [pc, #68]	@ (800342c <I2SEx_TxISR_I2SExt+0x94>)
 80033e6:	e001      	b.n	80033ec <I2SEx_TxISR_I2SExt+0x54>
 80033e8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	490d      	ldr	r1, [pc, #52]	@ (8003428 <I2SEx_TxISR_I2SExt+0x90>)
 80033f4:	428b      	cmp	r3, r1
 80033f6:	d101      	bne.n	80033fc <I2SEx_TxISR_I2SExt+0x64>
 80033f8:	4b0c      	ldr	r3, [pc, #48]	@ (800342c <I2SEx_TxISR_I2SExt+0x94>)
 80033fa:	e001      	b.n	8003400 <I2SEx_TxISR_I2SExt+0x68>
 80033fc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003400:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003404:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800340a:	b29b      	uxth	r3, r3
 800340c:	2b00      	cmp	r3, #0
 800340e:	d106      	bne.n	800341e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2201      	movs	r2, #1
 8003414:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003418:	6878      	ldr	r0, [r7, #4]
 800341a:	f7ff ff81 	bl	8003320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40003800 	.word	0x40003800
 800342c:	40003400 	.word	0x40003400

08003430 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b082      	sub	sp, #8
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	68d8      	ldr	r0, [r3, #12]
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003442:	1c99      	adds	r1, r3, #2
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003448:	b282      	uxth	r2, r0
 800344a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003450:	b29b      	uxth	r3, r3
 8003452:	3b01      	subs	r3, #1
 8003454:	b29a      	uxth	r2, r3
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d113      	bne.n	800348c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003472:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff4a 	bl	8003320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800348c:	bf00      	nop
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}

08003494 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a20      	ldr	r2, [pc, #128]	@ (8003524 <I2SEx_RxISR_I2SExt+0x90>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <I2SEx_RxISR_I2SExt+0x16>
 80034a6:	4b20      	ldr	r3, [pc, #128]	@ (8003528 <I2SEx_RxISR_I2SExt+0x94>)
 80034a8:	e001      	b.n	80034ae <I2SEx_RxISR_I2SExt+0x1a>
 80034aa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034ae:	68d8      	ldr	r0, [r3, #12]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034b4:	1c99      	adds	r1, r3, #2
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80034ba:	b282      	uxth	r2, r0
 80034bc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	3b01      	subs	r3, #1
 80034c6:	b29a      	uxth	r2, r3
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80034d0:	b29b      	uxth	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d121      	bne.n	800351a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	4a12      	ldr	r2, [pc, #72]	@ (8003524 <I2SEx_RxISR_I2SExt+0x90>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d101      	bne.n	80034e4 <I2SEx_RxISR_I2SExt+0x50>
 80034e0:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <I2SEx_RxISR_I2SExt+0x94>)
 80034e2:	e001      	b.n	80034e8 <I2SEx_RxISR_I2SExt+0x54>
 80034e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034e8:	685a      	ldr	r2, [r3, #4]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	490d      	ldr	r1, [pc, #52]	@ (8003524 <I2SEx_RxISR_I2SExt+0x90>)
 80034f0:	428b      	cmp	r3, r1
 80034f2:	d101      	bne.n	80034f8 <I2SEx_RxISR_I2SExt+0x64>
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <I2SEx_RxISR_I2SExt+0x94>)
 80034f6:	e001      	b.n	80034fc <I2SEx_RxISR_I2SExt+0x68>
 80034f8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034fc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003500:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003506:	b29b      	uxth	r3, r3
 8003508:	2b00      	cmp	r3, #0
 800350a:	d106      	bne.n	800351a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003514:	6878      	ldr	r0, [r7, #4]
 8003516:	f7ff ff03 	bl	8003320 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800351a:	bf00      	nop
 800351c:	3708      	adds	r7, #8
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	40003800 	.word	0x40003800
 8003528:	40003400 	.word	0x40003400

0800352c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b086      	sub	sp, #24
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d101      	bne.n	800353e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e267      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d075      	beq.n	8003636 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800354a:	4b88      	ldr	r3, [pc, #544]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 030c 	and.w	r3, r3, #12
 8003552:	2b04      	cmp	r3, #4
 8003554:	d00c      	beq.n	8003570 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003556:	4b85      	ldr	r3, [pc, #532]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003558:	689b      	ldr	r3, [r3, #8]
 800355a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800355e:	2b08      	cmp	r3, #8
 8003560:	d112      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003562:	4b82      	ldr	r3, [pc, #520]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800356a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800356e:	d10b      	bne.n	8003588 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003570:	4b7e      	ldr	r3, [pc, #504]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d05b      	beq.n	8003634 <HAL_RCC_OscConfig+0x108>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d157      	bne.n	8003634 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e242      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003590:	d106      	bne.n	80035a0 <HAL_RCC_OscConfig+0x74>
 8003592:	4b76      	ldr	r3, [pc, #472]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	4a75      	ldr	r2, [pc, #468]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003598:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800359c:	6013      	str	r3, [r2, #0]
 800359e:	e01d      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCC_OscConfig+0x98>
 80035aa:	4b70      	ldr	r3, [pc, #448]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a6f      	ldr	r2, [pc, #444]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035b0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80035b4:	6013      	str	r3, [r2, #0]
 80035b6:	4b6d      	ldr	r3, [pc, #436]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a6c      	ldr	r2, [pc, #432]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035c0:	6013      	str	r3, [r2, #0]
 80035c2:	e00b      	b.n	80035dc <HAL_RCC_OscConfig+0xb0>
 80035c4:	4b69      	ldr	r3, [pc, #420]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a68      	ldr	r2, [pc, #416]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035ca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035ce:	6013      	str	r3, [r2, #0]
 80035d0:	4b66      	ldr	r3, [pc, #408]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a65      	ldr	r2, [pc, #404]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80035d6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d013      	beq.n	800360c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035e4:	f7fe fbac 	bl	8001d40 <HAL_GetTick>
 80035e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ea:	e008      	b.n	80035fe <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035ec:	f7fe fba8 	bl	8001d40 <HAL_GetTick>
 80035f0:	4602      	mov	r2, r0
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	1ad3      	subs	r3, r2, r3
 80035f6:	2b64      	cmp	r3, #100	@ 0x64
 80035f8:	d901      	bls.n	80035fe <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e207      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035fe:	4b5b      	ldr	r3, [pc, #364]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003606:	2b00      	cmp	r3, #0
 8003608:	d0f0      	beq.n	80035ec <HAL_RCC_OscConfig+0xc0>
 800360a:	e014      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360c:	f7fe fb98 	bl	8001d40 <HAL_GetTick>
 8003610:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003612:	e008      	b.n	8003626 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003614:	f7fe fb94 	bl	8001d40 <HAL_GetTick>
 8003618:	4602      	mov	r2, r0
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	1ad3      	subs	r3, r2, r3
 800361e:	2b64      	cmp	r3, #100	@ 0x64
 8003620:	d901      	bls.n	8003626 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003622:	2303      	movs	r3, #3
 8003624:	e1f3      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003626:	4b51      	ldr	r3, [pc, #324]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d1f0      	bne.n	8003614 <HAL_RCC_OscConfig+0xe8>
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003634:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d063      	beq.n	800370a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003642:	4b4a      	ldr	r3, [pc, #296]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	f003 030c 	and.w	r3, r3, #12
 800364a:	2b00      	cmp	r3, #0
 800364c:	d00b      	beq.n	8003666 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800364e:	4b47      	ldr	r3, [pc, #284]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003656:	2b08      	cmp	r3, #8
 8003658:	d11c      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800365a:	4b44      	ldr	r3, [pc, #272]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 800365c:	685b      	ldr	r3, [r3, #4]
 800365e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d116      	bne.n	8003694 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003666:	4b41      	ldr	r3, [pc, #260]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d005      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	68db      	ldr	r3, [r3, #12]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d001      	beq.n	800367e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e1c7      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800367e:	4b3b      	ldr	r3, [pc, #236]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4937      	ldr	r1, [pc, #220]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 800368e:	4313      	orrs	r3, r2
 8003690:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003692:	e03a      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d020      	beq.n	80036de <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800369c:	4b34      	ldr	r3, [pc, #208]	@ (8003770 <HAL_RCC_OscConfig+0x244>)
 800369e:	2201      	movs	r2, #1
 80036a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a2:	f7fe fb4d 	bl	8001d40 <HAL_GetTick>
 80036a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036a8:	e008      	b.n	80036bc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036aa:	f7fe fb49 	bl	8001d40 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d901      	bls.n	80036bc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80036b8:	2303      	movs	r3, #3
 80036ba:	e1a8      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036bc:	4b2b      	ldr	r3, [pc, #172]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0f0      	beq.n	80036aa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036c8:	4b28      	ldr	r3, [pc, #160]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	00db      	lsls	r3, r3, #3
 80036d6:	4925      	ldr	r1, [pc, #148]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	600b      	str	r3, [r1, #0]
 80036dc:	e015      	b.n	800370a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036de:	4b24      	ldr	r3, [pc, #144]	@ (8003770 <HAL_RCC_OscConfig+0x244>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036e4:	f7fe fb2c 	bl	8001d40 <HAL_GetTick>
 80036e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ea:	e008      	b.n	80036fe <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036ec:	f7fe fb28 	bl	8001d40 <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d901      	bls.n	80036fe <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036fa:	2303      	movs	r3, #3
 80036fc:	e187      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036fe:	4b1b      	ldr	r3, [pc, #108]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f003 0302 	and.w	r3, r3, #2
 8003706:	2b00      	cmp	r3, #0
 8003708:	d1f0      	bne.n	80036ec <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d036      	beq.n	8003784 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d016      	beq.n	800374c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800371e:	4b15      	ldr	r3, [pc, #84]	@ (8003774 <HAL_RCC_OscConfig+0x248>)
 8003720:	2201      	movs	r2, #1
 8003722:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003724:	f7fe fb0c 	bl	8001d40 <HAL_GetTick>
 8003728:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800372a:	e008      	b.n	800373e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372c:	f7fe fb08 	bl	8001d40 <HAL_GetTick>
 8003730:	4602      	mov	r2, r0
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	1ad3      	subs	r3, r2, r3
 8003736:	2b02      	cmp	r3, #2
 8003738:	d901      	bls.n	800373e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800373a:	2303      	movs	r3, #3
 800373c:	e167      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800373e:	4b0b      	ldr	r3, [pc, #44]	@ (800376c <HAL_RCC_OscConfig+0x240>)
 8003740:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003742:	f003 0302 	and.w	r3, r3, #2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d0f0      	beq.n	800372c <HAL_RCC_OscConfig+0x200>
 800374a:	e01b      	b.n	8003784 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800374c:	4b09      	ldr	r3, [pc, #36]	@ (8003774 <HAL_RCC_OscConfig+0x248>)
 800374e:	2200      	movs	r2, #0
 8003750:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003752:	f7fe faf5 	bl	8001d40 <HAL_GetTick>
 8003756:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003758:	e00e      	b.n	8003778 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800375a:	f7fe faf1 	bl	8001d40 <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	2b02      	cmp	r3, #2
 8003766:	d907      	bls.n	8003778 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003768:	2303      	movs	r3, #3
 800376a:	e150      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800376c:	40023800 	.word	0x40023800
 8003770:	42470000 	.word	0x42470000
 8003774:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003778:	4b88      	ldr	r3, [pc, #544]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800377a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800377c:	f003 0302 	and.w	r3, r3, #2
 8003780:	2b00      	cmp	r3, #0
 8003782:	d1ea      	bne.n	800375a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0304 	and.w	r3, r3, #4
 800378c:	2b00      	cmp	r3, #0
 800378e:	f000 8097 	beq.w	80038c0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003792:	2300      	movs	r3, #0
 8003794:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003796:	4b81      	ldr	r3, [pc, #516]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003798:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800379a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d10f      	bne.n	80037c2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80037a2:	2300      	movs	r3, #0
 80037a4:	60bb      	str	r3, [r7, #8]
 80037a6:	4b7d      	ldr	r3, [pc, #500]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80037a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037aa:	4a7c      	ldr	r2, [pc, #496]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80037ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80037b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80037b2:	4b7a      	ldr	r3, [pc, #488]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80037b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037be:	2301      	movs	r3, #1
 80037c0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c2:	4b77      	ldr	r3, [pc, #476]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d118      	bne.n	8003800 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037ce:	4b74      	ldr	r3, [pc, #464]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a73      	ldr	r2, [pc, #460]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037da:	f7fe fab1 	bl	8001d40 <HAL_GetTick>
 80037de:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e0:	e008      	b.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037e2:	f7fe faad 	bl	8001d40 <HAL_GetTick>
 80037e6:	4602      	mov	r2, r0
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	1ad3      	subs	r3, r2, r3
 80037ec:	2b02      	cmp	r3, #2
 80037ee:	d901      	bls.n	80037f4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037f0:	2303      	movs	r3, #3
 80037f2:	e10c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037f4:	4b6a      	ldr	r3, [pc, #424]	@ (80039a0 <HAL_RCC_OscConfig+0x474>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d0f0      	beq.n	80037e2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	2b01      	cmp	r3, #1
 8003806:	d106      	bne.n	8003816 <HAL_RCC_OscConfig+0x2ea>
 8003808:	4b64      	ldr	r3, [pc, #400]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380c:	4a63      	ldr	r2, [pc, #396]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800380e:	f043 0301 	orr.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	@ 0x70
 8003814:	e01c      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	2b05      	cmp	r3, #5
 800381c:	d10c      	bne.n	8003838 <HAL_RCC_OscConfig+0x30c>
 800381e:	4b5f      	ldr	r3, [pc, #380]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003820:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003822:	4a5e      	ldr	r2, [pc, #376]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6713      	str	r3, [r2, #112]	@ 0x70
 800382a:	4b5c      	ldr	r3, [pc, #368]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800382c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382e:	4a5b      	ldr	r2, [pc, #364]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003830:	f043 0301 	orr.w	r3, r3, #1
 8003834:	6713      	str	r3, [r2, #112]	@ 0x70
 8003836:	e00b      	b.n	8003850 <HAL_RCC_OscConfig+0x324>
 8003838:	4b58      	ldr	r3, [pc, #352]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800383a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800383c:	4a57      	ldr	r2, [pc, #348]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800383e:	f023 0301 	bic.w	r3, r3, #1
 8003842:	6713      	str	r3, [r2, #112]	@ 0x70
 8003844:	4b55      	ldr	r3, [pc, #340]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003846:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003848:	4a54      	ldr	r2, [pc, #336]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 800384a:	f023 0304 	bic.w	r3, r3, #4
 800384e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d015      	beq.n	8003884 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003858:	f7fe fa72 	bl	8001d40 <HAL_GetTick>
 800385c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800385e:	e00a      	b.n	8003876 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003860:	f7fe fa6e 	bl	8001d40 <HAL_GetTick>
 8003864:	4602      	mov	r2, r0
 8003866:	693b      	ldr	r3, [r7, #16]
 8003868:	1ad3      	subs	r3, r2, r3
 800386a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386e:	4293      	cmp	r3, r2
 8003870:	d901      	bls.n	8003876 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003872:	2303      	movs	r3, #3
 8003874:	e0cb      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003876:	4b49      	ldr	r3, [pc, #292]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0ee      	beq.n	8003860 <HAL_RCC_OscConfig+0x334>
 8003882:	e014      	b.n	80038ae <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003884:	f7fe fa5c 	bl	8001d40 <HAL_GetTick>
 8003888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800388a:	e00a      	b.n	80038a2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800388c:	f7fe fa58 	bl	8001d40 <HAL_GetTick>
 8003890:	4602      	mov	r2, r0
 8003892:	693b      	ldr	r3, [r7, #16]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	f241 3288 	movw	r2, #5000	@ 0x1388
 800389a:	4293      	cmp	r3, r2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e0b5      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038a2:	4b3e      	ldr	r3, [pc, #248]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1ee      	bne.n	800388c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80038ae:	7dfb      	ldrb	r3, [r7, #23]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d105      	bne.n	80038c0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038b4:	4b39      	ldr	r3, [pc, #228]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038b8:	4a38      	ldr	r2, [pc, #224]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038be:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80a1 	beq.w	8003a0c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80038ca:	4b34      	ldr	r3, [pc, #208]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 80038cc:	689b      	ldr	r3, [r3, #8]
 80038ce:	f003 030c 	and.w	r3, r3, #12
 80038d2:	2b08      	cmp	r3, #8
 80038d4:	d05c      	beq.n	8003990 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	699b      	ldr	r3, [r3, #24]
 80038da:	2b02      	cmp	r3, #2
 80038dc:	d141      	bne.n	8003962 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038de:	4b31      	ldr	r3, [pc, #196]	@ (80039a4 <HAL_RCC_OscConfig+0x478>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038e4:	f7fe fa2c 	bl	8001d40 <HAL_GetTick>
 80038e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ea:	e008      	b.n	80038fe <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038ec:	f7fe fa28 	bl	8001d40 <HAL_GetTick>
 80038f0:	4602      	mov	r2, r0
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	1ad3      	subs	r3, r2, r3
 80038f6:	2b02      	cmp	r3, #2
 80038f8:	d901      	bls.n	80038fe <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038fa:	2303      	movs	r3, #3
 80038fc:	e087      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038fe:	4b27      	ldr	r3, [pc, #156]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d1f0      	bne.n	80038ec <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	69da      	ldr	r2, [r3, #28]
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6a1b      	ldr	r3, [r3, #32]
 8003912:	431a      	orrs	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003918:	019b      	lsls	r3, r3, #6
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003920:	085b      	lsrs	r3, r3, #1
 8003922:	3b01      	subs	r3, #1
 8003924:	041b      	lsls	r3, r3, #16
 8003926:	431a      	orrs	r2, r3
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	061b      	lsls	r3, r3, #24
 800392e:	491b      	ldr	r1, [pc, #108]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003934:	4b1b      	ldr	r3, [pc, #108]	@ (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003936:	2201      	movs	r2, #1
 8003938:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800393a:	f7fe fa01 	bl	8001d40 <HAL_GetTick>
 800393e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003940:	e008      	b.n	8003954 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003942:	f7fe f9fd 	bl	8001d40 <HAL_GetTick>
 8003946:	4602      	mov	r2, r0
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	1ad3      	subs	r3, r2, r3
 800394c:	2b02      	cmp	r3, #2
 800394e:	d901      	bls.n	8003954 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e05c      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003954:	4b11      	ldr	r3, [pc, #68]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d0f0      	beq.n	8003942 <HAL_RCC_OscConfig+0x416>
 8003960:	e054      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003962:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <HAL_RCC_OscConfig+0x478>)
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003968:	f7fe f9ea 	bl	8001d40 <HAL_GetTick>
 800396c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800396e:	e008      	b.n	8003982 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003970:	f7fe f9e6 	bl	8001d40 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d901      	bls.n	8003982 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e045      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003982:	4b06      	ldr	r3, [pc, #24]	@ (800399c <HAL_RCC_OscConfig+0x470>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d1f0      	bne.n	8003970 <HAL_RCC_OscConfig+0x444>
 800398e:	e03d      	b.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	699b      	ldr	r3, [r3, #24]
 8003994:	2b01      	cmp	r3, #1
 8003996:	d107      	bne.n	80039a8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003998:	2301      	movs	r3, #1
 800399a:	e038      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
 800399c:	40023800 	.word	0x40023800
 80039a0:	40007000 	.word	0x40007000
 80039a4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x4ec>)
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	699b      	ldr	r3, [r3, #24]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d028      	beq.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d121      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d11a      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039d8:	4013      	ands	r3, r2
 80039da:	687a      	ldr	r2, [r7, #4]
 80039dc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039de:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039e0:	4293      	cmp	r3, r2
 80039e2:	d111      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039ee:	085b      	lsrs	r3, r3, #1
 80039f0:	3b01      	subs	r3, #1
 80039f2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d107      	bne.n	8003a08 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a02:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a04:	429a      	cmp	r2, r3
 8003a06:	d001      	beq.n	8003a0c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a08:	2301      	movs	r3, #1
 8003a0a:	e000      	b.n	8003a0e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a0c:	2300      	movs	r3, #0
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40023800 	.word	0x40023800

08003a1c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d101      	bne.n	8003a30 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e0cc      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a30:	4b68      	ldr	r3, [pc, #416]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0307 	and.w	r3, r3, #7
 8003a38:	683a      	ldr	r2, [r7, #0]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d90c      	bls.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3e:	4b65      	ldr	r3, [pc, #404]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a40:	683a      	ldr	r2, [r7, #0]
 8003a42:	b2d2      	uxtb	r2, r2
 8003a44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a46:	4b63      	ldr	r3, [pc, #396]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f003 0307 	and.w	r3, r3, #7
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d001      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e0b8      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0302 	and.w	r3, r3, #2
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d020      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0304 	and.w	r3, r3, #4
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d005      	beq.n	8003a7c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a70:	4b59      	ldr	r3, [pc, #356]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	4a58      	ldr	r2, [pc, #352]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a7a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d005      	beq.n	8003a94 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a88:	4b53      	ldr	r3, [pc, #332]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	4a52      	ldr	r2, [pc, #328]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a92:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a94:	4b50      	ldr	r3, [pc, #320]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	494d      	ldr	r1, [pc, #308]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 0301 	and.w	r3, r3, #1
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d044      	beq.n	8003b3c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aba:	4b47      	ldr	r3, [pc, #284]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d119      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e07f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d003      	beq.n	8003ada <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003ad6:	2b03      	cmp	r3, #3
 8003ad8:	d107      	bne.n	8003aea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ada:	4b3f      	ldr	r3, [pc, #252]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d109      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aea:	4b3b      	ldr	r3, [pc, #236]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d101      	bne.n	8003afa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003af6:	2301      	movs	r3, #1
 8003af8:	e067      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003afa:	4b37      	ldr	r3, [pc, #220]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f023 0203 	bic.w	r2, r3, #3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	4934      	ldr	r1, [pc, #208]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b0c:	f7fe f918 	bl	8001d40 <HAL_GetTick>
 8003b10:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b12:	e00a      	b.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b14:	f7fe f914 	bl	8001d40 <HAL_GetTick>
 8003b18:	4602      	mov	r2, r0
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	1ad3      	subs	r3, r2, r3
 8003b1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d901      	bls.n	8003b2a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b26:	2303      	movs	r3, #3
 8003b28:	e04f      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b2c:	689b      	ldr	r3, [r3, #8]
 8003b2e:	f003 020c 	and.w	r2, r3, #12
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	009b      	lsls	r3, r3, #2
 8003b38:	429a      	cmp	r2, r3
 8003b3a:	d1eb      	bne.n	8003b14 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b3c:	4b25      	ldr	r3, [pc, #148]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f003 0307 	and.w	r3, r3, #7
 8003b44:	683a      	ldr	r2, [r7, #0]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d20c      	bcs.n	8003b64 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b4a:	4b22      	ldr	r3, [pc, #136]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b4c:	683a      	ldr	r2, [r7, #0]
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b52:	4b20      	ldr	r3, [pc, #128]	@ (8003bd4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0307 	and.w	r3, r3, #7
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d001      	beq.n	8003b64 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e032      	b.n	8003bca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d008      	beq.n	8003b82 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b70:	4b19      	ldr	r3, [pc, #100]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b72:	689b      	ldr	r3, [r3, #8]
 8003b74:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	68db      	ldr	r3, [r3, #12]
 8003b7c:	4916      	ldr	r1, [pc, #88]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d009      	beq.n	8003ba2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b8e:	4b12      	ldr	r3, [pc, #72]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	00db      	lsls	r3, r3, #3
 8003b9c:	490e      	ldr	r1, [pc, #56]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003ba2:	f000 f821 	bl	8003be8 <HAL_RCC_GetSysClockFreq>
 8003ba6:	4602      	mov	r2, r0
 8003ba8:	4b0b      	ldr	r3, [pc, #44]	@ (8003bd8 <HAL_RCC_ClockConfig+0x1bc>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	091b      	lsrs	r3, r3, #4
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	490a      	ldr	r1, [pc, #40]	@ (8003bdc <HAL_RCC_ClockConfig+0x1c0>)
 8003bb4:	5ccb      	ldrb	r3, [r1, r3]
 8003bb6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bba:	4a09      	ldr	r2, [pc, #36]	@ (8003be0 <HAL_RCC_ClockConfig+0x1c4>)
 8003bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003bbe:	4b09      	ldr	r3, [pc, #36]	@ (8003be4 <HAL_RCC_ClockConfig+0x1c8>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	f7fd ff9e 	bl	8001b04 <HAL_InitTick>

  return HAL_OK;
 8003bc8:	2300      	movs	r3, #0
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40023c00 	.word	0x40023c00
 8003bd8:	40023800 	.word	0x40023800
 8003bdc:	0800d074 	.word	0x0800d074
 8003be0:	20000000 	.word	0x20000000
 8003be4:	20000004 	.word	0x20000004

08003be8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bec:	b094      	sub	sp, #80	@ 0x50
 8003bee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c00:	4b79      	ldr	r3, [pc, #484]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f003 030c 	and.w	r3, r3, #12
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d00d      	beq.n	8003c28 <HAL_RCC_GetSysClockFreq+0x40>
 8003c0c:	2b08      	cmp	r3, #8
 8003c0e:	f200 80e1 	bhi.w	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d002      	beq.n	8003c1c <HAL_RCC_GetSysClockFreq+0x34>
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d003      	beq.n	8003c22 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c1a:	e0db      	b.n	8003dd4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c1c:	4b73      	ldr	r3, [pc, #460]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c20:	e0db      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c22:	4b73      	ldr	r3, [pc, #460]	@ (8003df0 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c24:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c26:	e0d8      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c28:	4b6f      	ldr	r3, [pc, #444]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c30:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c32:	4b6d      	ldr	r3, [pc, #436]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d063      	beq.n	8003d06 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	099b      	lsrs	r3, r3, #6
 8003c44:	2200      	movs	r2, #0
 8003c46:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003c48:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003c4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c50:	633b      	str	r3, [r7, #48]	@ 0x30
 8003c52:	2300      	movs	r3, #0
 8003c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c56:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003c5a:	4622      	mov	r2, r4
 8003c5c:	462b      	mov	r3, r5
 8003c5e:	f04f 0000 	mov.w	r0, #0
 8003c62:	f04f 0100 	mov.w	r1, #0
 8003c66:	0159      	lsls	r1, r3, #5
 8003c68:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c6c:	0150      	lsls	r0, r2, #5
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4621      	mov	r1, r4
 8003c74:	1a51      	subs	r1, r2, r1
 8003c76:	6139      	str	r1, [r7, #16]
 8003c78:	4629      	mov	r1, r5
 8003c7a:	eb63 0301 	sbc.w	r3, r3, r1
 8003c7e:	617b      	str	r3, [r7, #20]
 8003c80:	f04f 0200 	mov.w	r2, #0
 8003c84:	f04f 0300 	mov.w	r3, #0
 8003c88:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003c8c:	4659      	mov	r1, fp
 8003c8e:	018b      	lsls	r3, r1, #6
 8003c90:	4651      	mov	r1, sl
 8003c92:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c96:	4651      	mov	r1, sl
 8003c98:	018a      	lsls	r2, r1, #6
 8003c9a:	4651      	mov	r1, sl
 8003c9c:	ebb2 0801 	subs.w	r8, r2, r1
 8003ca0:	4659      	mov	r1, fp
 8003ca2:	eb63 0901 	sbc.w	r9, r3, r1
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cba:	4690      	mov	r8, r2
 8003cbc:	4699      	mov	r9, r3
 8003cbe:	4623      	mov	r3, r4
 8003cc0:	eb18 0303 	adds.w	r3, r8, r3
 8003cc4:	60bb      	str	r3, [r7, #8]
 8003cc6:	462b      	mov	r3, r5
 8003cc8:	eb49 0303 	adc.w	r3, r9, r3
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	f04f 0200 	mov.w	r2, #0
 8003cd2:	f04f 0300 	mov.w	r3, #0
 8003cd6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003cda:	4629      	mov	r1, r5
 8003cdc:	024b      	lsls	r3, r1, #9
 8003cde:	4621      	mov	r1, r4
 8003ce0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003ce4:	4621      	mov	r1, r4
 8003ce6:	024a      	lsls	r2, r1, #9
 8003ce8:	4610      	mov	r0, r2
 8003cea:	4619      	mov	r1, r3
 8003cec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003cee:	2200      	movs	r2, #0
 8003cf0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cf2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003cf4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cf8:	f7fc fcae 	bl	8000658 <__aeabi_uldivmod>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4613      	mov	r3, r2
 8003d02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d04:	e058      	b.n	8003db8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d06:	4b38      	ldr	r3, [pc, #224]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	099b      	lsrs	r3, r3, #6
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	4618      	mov	r0, r3
 8003d10:	4611      	mov	r1, r2
 8003d12:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d16:	623b      	str	r3, [r7, #32]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d1c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d20:	4642      	mov	r2, r8
 8003d22:	464b      	mov	r3, r9
 8003d24:	f04f 0000 	mov.w	r0, #0
 8003d28:	f04f 0100 	mov.w	r1, #0
 8003d2c:	0159      	lsls	r1, r3, #5
 8003d2e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d32:	0150      	lsls	r0, r2, #5
 8003d34:	4602      	mov	r2, r0
 8003d36:	460b      	mov	r3, r1
 8003d38:	4641      	mov	r1, r8
 8003d3a:	ebb2 0a01 	subs.w	sl, r2, r1
 8003d3e:	4649      	mov	r1, r9
 8003d40:	eb63 0b01 	sbc.w	fp, r3, r1
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003d50:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003d54:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003d58:	ebb2 040a 	subs.w	r4, r2, sl
 8003d5c:	eb63 050b 	sbc.w	r5, r3, fp
 8003d60:	f04f 0200 	mov.w	r2, #0
 8003d64:	f04f 0300 	mov.w	r3, #0
 8003d68:	00eb      	lsls	r3, r5, #3
 8003d6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d6e:	00e2      	lsls	r2, r4, #3
 8003d70:	4614      	mov	r4, r2
 8003d72:	461d      	mov	r5, r3
 8003d74:	4643      	mov	r3, r8
 8003d76:	18e3      	adds	r3, r4, r3
 8003d78:	603b      	str	r3, [r7, #0]
 8003d7a:	464b      	mov	r3, r9
 8003d7c:	eb45 0303 	adc.w	r3, r5, r3
 8003d80:	607b      	str	r3, [r7, #4]
 8003d82:	f04f 0200 	mov.w	r2, #0
 8003d86:	f04f 0300 	mov.w	r3, #0
 8003d8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d8e:	4629      	mov	r1, r5
 8003d90:	028b      	lsls	r3, r1, #10
 8003d92:	4621      	mov	r1, r4
 8003d94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d98:	4621      	mov	r1, r4
 8003d9a:	028a      	lsls	r2, r1, #10
 8003d9c:	4610      	mov	r0, r2
 8003d9e:	4619      	mov	r1, r3
 8003da0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003da2:	2200      	movs	r2, #0
 8003da4:	61bb      	str	r3, [r7, #24]
 8003da6:	61fa      	str	r2, [r7, #28]
 8003da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dac:	f7fc fc54 	bl	8000658 <__aeabi_uldivmod>
 8003db0:	4602      	mov	r2, r0
 8003db2:	460b      	mov	r3, r1
 8003db4:	4613      	mov	r3, r2
 8003db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003db8:	4b0b      	ldr	r3, [pc, #44]	@ (8003de8 <HAL_RCC_GetSysClockFreq+0x200>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	0c1b      	lsrs	r3, r3, #16
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	3301      	adds	r3, #1
 8003dc4:	005b      	lsls	r3, r3, #1
 8003dc6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003dc8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003dcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dd0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd2:	e002      	b.n	8003dda <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dd4:	4b05      	ldr	r3, [pc, #20]	@ (8003dec <HAL_RCC_GetSysClockFreq+0x204>)
 8003dd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003dd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dda:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3750      	adds	r7, #80	@ 0x50
 8003de0:	46bd      	mov	sp, r7
 8003de2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	00f42400 	.word	0x00f42400
 8003df0:	007a1200 	.word	0x007a1200

08003df4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003df4:	b480      	push	{r7}
 8003df6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003df8:	4b03      	ldr	r3, [pc, #12]	@ (8003e08 <HAL_RCC_GetHCLKFreq+0x14>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	20000000 	.word	0x20000000

08003e0c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e10:	f7ff fff0 	bl	8003df4 <HAL_RCC_GetHCLKFreq>
 8003e14:	4602      	mov	r2, r0
 8003e16:	4b05      	ldr	r3, [pc, #20]	@ (8003e2c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	0a9b      	lsrs	r3, r3, #10
 8003e1c:	f003 0307 	and.w	r3, r3, #7
 8003e20:	4903      	ldr	r1, [pc, #12]	@ (8003e30 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e22:	5ccb      	ldrb	r3, [r1, r3]
 8003e24:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	40023800 	.word	0x40023800
 8003e30:	0800d084 	.word	0x0800d084

08003e34 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	220f      	movs	r2, #15
 8003e42:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003e44:	4b12      	ldr	r3, [pc, #72]	@ (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 0203 	and.w	r2, r3, #3
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003e50:	4b0f      	ldr	r3, [pc, #60]	@ (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003e5c:	4b0c      	ldr	r3, [pc, #48]	@ (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003e68:	4b09      	ldr	r3, [pc, #36]	@ (8003e90 <HAL_RCC_GetClockConfig+0x5c>)
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	08db      	lsrs	r3, r3, #3
 8003e6e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003e76:	4b07      	ldr	r3, [pc, #28]	@ (8003e94 <HAL_RCC_GetClockConfig+0x60>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f003 0207 	and.w	r2, r3, #7
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	601a      	str	r2, [r3, #0]
}
 8003e82:	bf00      	nop
 8003e84:	370c      	adds	r7, #12
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40023c00 	.word	0x40023c00

08003e98 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b086      	sub	sp, #24
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d105      	bne.n	8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d035      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003ec0:	4b62      	ldr	r3, [pc, #392]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003ec6:	f7fd ff3b 	bl	8001d40 <HAL_GetTick>
 8003eca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ecc:	e008      	b.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003ece:	f7fd ff37 	bl	8001d40 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d901      	bls.n	8003ee0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003edc:	2303      	movs	r3, #3
 8003ede:	e0b0      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003ee0:	4b5b      	ldr	r3, [pc, #364]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d1f0      	bne.n	8003ece <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	019a      	lsls	r2, r3, #6
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	071b      	lsls	r3, r3, #28
 8003ef8:	4955      	ldr	r1, [pc, #340]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003efa:	4313      	orrs	r3, r2
 8003efc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003f00:	4b52      	ldr	r3, [pc, #328]	@ (800404c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003f02:	2201      	movs	r2, #1
 8003f04:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003f06:	f7fd ff1b 	bl	8001d40 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003f0e:	f7fd ff17 	bl	8001d40 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e090      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003f20:	4b4b      	ldr	r3, [pc, #300]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d0f0      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	f000 8083 	beq.w	8004040 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	4b44      	ldr	r3, [pc, #272]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f42:	4a43      	ldr	r2, [pc, #268]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	@ 0x40
 8003f4a:	4b41      	ldr	r3, [pc, #260]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003f52:	60fb      	str	r3, [r7, #12]
 8003f54:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003f56:	4b3f      	ldr	r3, [pc, #252]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4a3e      	ldr	r2, [pc, #248]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f5c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f60:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003f62:	f7fd feed 	bl	8001d40 <HAL_GetTick>
 8003f66:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f68:	e008      	b.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f6a:	f7fd fee9 	bl	8001d40 <HAL_GetTick>
 8003f6e:	4602      	mov	r2, r0
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	1ad3      	subs	r3, r2, r3
 8003f74:	2b02      	cmp	r3, #2
 8003f76:	d901      	bls.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e062      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8003f7c:	4b35      	ldr	r3, [pc, #212]	@ (8004054 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d0f0      	beq.n	8003f6a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003f88:	4b31      	ldr	r3, [pc, #196]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003f8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003f8c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f90:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d02f      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d028      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003fa6:	4b2a      	ldr	r3, [pc, #168]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003faa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fae:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003fb0:	4b29      	ldr	r3, [pc, #164]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003fb2:	2201      	movs	r2, #1
 8003fb4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003fb6:	4b28      	ldr	r3, [pc, #160]	@ (8004058 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003fbc:	4a24      	ldr	r2, [pc, #144]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003fc2:	4b23      	ldr	r3, [pc, #140]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d114      	bne.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003fce:	f7fd feb7 	bl	8001d40 <HAL_GetTick>
 8003fd2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fd4:	e00a      	b.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003fd6:	f7fd feb3 	bl	8001d40 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	697b      	ldr	r3, [r7, #20]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d901      	bls.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003fe8:	2303      	movs	r3, #3
 8003fea:	e02a      	b.n	8004042 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003fec:	4b18      	ldr	r3, [pc, #96]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003fee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d0ee      	beq.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	68db      	ldr	r3, [r3, #12]
 8003ffc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004000:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004004:	d10d      	bne.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004006:	4b12      	ldr	r3, [pc, #72]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	68db      	ldr	r3, [r3, #12]
 8004012:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004016:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800401a:	490d      	ldr	r1, [pc, #52]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800401c:	4313      	orrs	r3, r2
 800401e:	608b      	str	r3, [r1, #8]
 8004020:	e005      	b.n	800402e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004022:	4b0b      	ldr	r3, [pc, #44]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004024:	689b      	ldr	r3, [r3, #8]
 8004026:	4a0a      	ldr	r2, [pc, #40]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004028:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800402c:	6093      	str	r3, [r2, #8]
 800402e:	4b08      	ldr	r3, [pc, #32]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004030:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800403a:	4905      	ldr	r1, [pc, #20]	@ (8004050 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800403c:	4313      	orrs	r3, r2
 800403e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3718      	adds	r7, #24
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	42470068 	.word	0x42470068
 8004050:	40023800 	.word	0x40023800
 8004054:	40007000 	.word	0x40007000
 8004058:	42470e40 	.word	0x42470e40

0800405c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004064:	2300      	movs	r3, #0
 8004066:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004068:	2300      	movs	r3, #0
 800406a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b01      	cmp	r3, #1
 8004078:	d13f      	bne.n	80040fa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800407a:	4b24      	ldr	r3, [pc, #144]	@ (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004082:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d006      	beq.n	8004098 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004090:	d12f      	bne.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004092:	4b1f      	ldr	r3, [pc, #124]	@ (8004110 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004094:	617b      	str	r3, [r7, #20]
          break;
 8004096:	e02f      	b.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004098:	4b1c      	ldr	r3, [pc, #112]	@ (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80040a0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80040a4:	d108      	bne.n	80040b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040a6:	4b19      	ldr	r3, [pc, #100]	@ (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040ae:	4a19      	ldr	r2, [pc, #100]	@ (8004114 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80040b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b4:	613b      	str	r3, [r7, #16]
 80040b6:	e007      	b.n	80040c8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80040b8:	4b14      	ldr	r3, [pc, #80]	@ (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040ba:	685b      	ldr	r3, [r3, #4]
 80040bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040c0:	4a15      	ldr	r2, [pc, #84]	@ (8004118 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80040c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040c6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80040c8:	4b10      	ldr	r3, [pc, #64]	@ (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040ce:	099b      	lsrs	r3, r3, #6
 80040d0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	fb02 f303 	mul.w	r3, r2, r3
 80040da:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80040dc:	4b0b      	ldr	r3, [pc, #44]	@ (800410c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80040de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80040e2:	0f1b      	lsrs	r3, r3, #28
 80040e4:	f003 0307 	and.w	r3, r3, #7
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	617b      	str	r3, [r7, #20]
          break;
 80040f0:	e002      	b.n	80040f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
          break;
 80040f6:	bf00      	nop
        }
      }
      break;
 80040f8:	e000      	b.n	80040fc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80040fa:	bf00      	nop
    }
  }
  return frequency;
 80040fc:	697b      	ldr	r3, [r7, #20]
}
 80040fe:	4618      	mov	r0, r3
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	40023800 	.word	0x40023800
 8004110:	00bb8000 	.word	0x00bb8000
 8004114:	007a1200 	.word	0x007a1200
 8004118:	00f42400 	.word	0x00f42400

0800411c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800411c:	b580      	push	{r7, lr}
 800411e:	b082      	sub	sp, #8
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d101      	bne.n	800412e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07b      	b.n	8004226 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	2b00      	cmp	r3, #0
 8004134:	d108      	bne.n	8004148 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800413e:	d009      	beq.n	8004154 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	61da      	str	r2, [r3, #28]
 8004146:	e005      	b.n	8004154 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2200      	movs	r2, #0
 800414c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fc80 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2202      	movs	r2, #2
 8004178:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800418a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689b      	ldr	r3, [r3, #8]
 8004198:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800419c:	431a      	orrs	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	691b      	ldr	r3, [r3, #16]
 80041ac:	f003 0302 	and.w	r3, r3, #2
 80041b0:	431a      	orrs	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	695b      	ldr	r3, [r3, #20]
 80041b6:	f003 0301 	and.w	r3, r3, #1
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80041ce:	431a      	orrs	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6a1b      	ldr	r3, [r3, #32]
 80041d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d8:	ea42 0103 	orr.w	r1, r2, r3
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041e0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	430a      	orrs	r2, r1
 80041ea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0104 	and.w	r1, r3, #4
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041fa:	f003 0210 	and.w	r2, r3, #16
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	430a      	orrs	r2, r1
 8004204:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	69da      	ldr	r2, [r3, #28]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004214:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2200      	movs	r2, #0
 800421a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	2201      	movs	r2, #1
 8004220:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004224:	2300      	movs	r3, #0
}
 8004226:	4618      	mov	r0, r3
 8004228:	3708      	adds	r7, #8
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}

0800422e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800422e:	b580      	push	{r7, lr}
 8004230:	b088      	sub	sp, #32
 8004232:	af00      	add	r7, sp, #0
 8004234:	60f8      	str	r0, [r7, #12]
 8004236:	60b9      	str	r1, [r7, #8]
 8004238:	603b      	str	r3, [r7, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800423e:	f7fd fd7f 	bl	8001d40 <HAL_GetTick>
 8004242:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004244:	88fb      	ldrh	r3, [r7, #6]
 8004246:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800424e:	b2db      	uxtb	r3, r3
 8004250:	2b01      	cmp	r3, #1
 8004252:	d001      	beq.n	8004258 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004254:	2302      	movs	r3, #2
 8004256:	e12a      	b.n	80044ae <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d002      	beq.n	8004264 <HAL_SPI_Transmit+0x36>
 800425e:	88fb      	ldrh	r3, [r7, #6]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d101      	bne.n	8004268 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004264:	2301      	movs	r3, #1
 8004266:	e122      	b.n	80044ae <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_SPI_Transmit+0x48>
 8004272:	2302      	movs	r3, #2
 8004274:	e11b      	b.n	80044ae <HAL_SPI_Transmit+0x280>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2203      	movs	r2, #3
 8004282:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	2200      	movs	r2, #0
 800428a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	68ba      	ldr	r2, [r7, #8]
 8004290:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	88fa      	ldrh	r2, [r7, #6]
 8004296:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2200      	movs	r2, #0
 80042a2:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	2200      	movs	r2, #0
 80042a8:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	2200      	movs	r2, #0
 80042ae:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2200      	movs	r2, #0
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c4:	d10f      	bne.n	80042e6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042d4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80042e4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f0:	2b40      	cmp	r3, #64	@ 0x40
 80042f2:	d007      	beq.n	8004304 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004302:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	68db      	ldr	r3, [r3, #12]
 8004308:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800430c:	d152      	bne.n	80043b4 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	2b00      	cmp	r3, #0
 8004314:	d002      	beq.n	800431c <HAL_SPI_Transmit+0xee>
 8004316:	8b7b      	ldrh	r3, [r7, #26]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d145      	bne.n	80043a8 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004320:	881a      	ldrh	r2, [r3, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800432c:	1c9a      	adds	r2, r3, #2
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29a      	uxth	r2, r3
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004340:	e032      	b.n	80043a8 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	f003 0302 	and.w	r3, r3, #2
 800434c:	2b02      	cmp	r3, #2
 800434e:	d112      	bne.n	8004376 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004354:	881a      	ldrh	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004360:	1c9a      	adds	r2, r3, #2
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800436a:	b29b      	uxth	r3, r3
 800436c:	3b01      	subs	r3, #1
 800436e:	b29a      	uxth	r2, r3
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004374:	e018      	b.n	80043a8 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004376:	f7fd fce3 	bl	8001d40 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	69fb      	ldr	r3, [r7, #28]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	683a      	ldr	r2, [r7, #0]
 8004382:	429a      	cmp	r2, r3
 8004384:	d803      	bhi.n	800438e <HAL_SPI_Transmit+0x160>
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800438c:	d102      	bne.n	8004394 <HAL_SPI_Transmit+0x166>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e082      	b.n	80044ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d1c7      	bne.n	8004342 <HAL_SPI_Transmit+0x114>
 80043b2:	e053      	b.n	800445c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d002      	beq.n	80043c2 <HAL_SPI_Transmit+0x194>
 80043bc:	8b7b      	ldrh	r3, [r7, #26]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d147      	bne.n	8004452 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	330c      	adds	r3, #12
 80043cc:	7812      	ldrb	r2, [r2, #0]
 80043ce:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043d4:	1c5a      	adds	r2, r3, #1
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043de:	b29b      	uxth	r3, r3
 80043e0:	3b01      	subs	r3, #1
 80043e2:	b29a      	uxth	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80043e8:	e033      	b.n	8004452 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	689b      	ldr	r3, [r3, #8]
 80043f0:	f003 0302 	and.w	r3, r3, #2
 80043f4:	2b02      	cmp	r3, #2
 80043f6:	d113      	bne.n	8004420 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	330c      	adds	r3, #12
 8004402:	7812      	ldrb	r2, [r2, #0]
 8004404:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800440a:	1c5a      	adds	r2, r3, #1
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004414:	b29b      	uxth	r3, r3
 8004416:	3b01      	subs	r3, #1
 8004418:	b29a      	uxth	r2, r3
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	86da      	strh	r2, [r3, #54]	@ 0x36
 800441e:	e018      	b.n	8004452 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004420:	f7fd fc8e 	bl	8001d40 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	429a      	cmp	r2, r3
 800442e:	d803      	bhi.n	8004438 <HAL_SPI_Transmit+0x20a>
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004436:	d102      	bne.n	800443e <HAL_SPI_Transmit+0x210>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d109      	bne.n	8004452 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800444e:	2303      	movs	r3, #3
 8004450:	e02d      	b.n	80044ae <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004456:	b29b      	uxth	r3, r3
 8004458:	2b00      	cmp	r3, #0
 800445a:	d1c6      	bne.n	80043ea <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800445c:	69fa      	ldr	r2, [r7, #28]
 800445e:	6839      	ldr	r1, [r7, #0]
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f000 f8b1 	bl	80045c8 <SPI_EndRxTxTransaction>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d002      	beq.n	8004472 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2220      	movs	r2, #32
 8004470:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d10a      	bne.n	8004490 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800447a:	2300      	movs	r3, #0
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	617b      	str	r3, [r7, #20]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	617b      	str	r3, [r7, #20]
 800448e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	2200      	movs	r2, #0
 800449c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d001      	beq.n	80044ac <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80044ac:	2300      	movs	r3, #0
  }
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3720      	adds	r7, #32
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
	...

080044b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b088      	sub	sp, #32
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	603b      	str	r3, [r7, #0]
 80044c4:	4613      	mov	r3, r2
 80044c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80044c8:	f7fd fc3a 	bl	8001d40 <HAL_GetTick>
 80044cc:	4602      	mov	r2, r0
 80044ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80044d0:	1a9b      	subs	r3, r3, r2
 80044d2:	683a      	ldr	r2, [r7, #0]
 80044d4:	4413      	add	r3, r2
 80044d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80044d8:	f7fd fc32 	bl	8001d40 <HAL_GetTick>
 80044dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80044de:	4b39      	ldr	r3, [pc, #228]	@ (80045c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	015b      	lsls	r3, r3, #5
 80044e4:	0d1b      	lsrs	r3, r3, #20
 80044e6:	69fa      	ldr	r2, [r7, #28]
 80044e8:	fb02 f303 	mul.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80044ee:	e055      	b.n	800459c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80044f6:	d051      	beq.n	800459c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80044f8:	f7fd fc22 	bl	8001d40 <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	69fa      	ldr	r2, [r7, #28]
 8004504:	429a      	cmp	r2, r3
 8004506:	d902      	bls.n	800450e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	2b00      	cmp	r3, #0
 800450c:	d13d      	bne.n	800458a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	685a      	ldr	r2, [r3, #4]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800451c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004526:	d111      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004530:	d004      	beq.n	800453c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800453a:	d107      	bne.n	800454c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800454a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004554:	d10f      	bne.n	8004576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004564:	601a      	str	r2, [r3, #0]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e018      	b.n	80045bc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d102      	bne.n	8004596 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004590:	2300      	movs	r3, #0
 8004592:	61fb      	str	r3, [r7, #28]
 8004594:	e002      	b.n	800459c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	3b01      	subs	r3, #1
 800459a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	4013      	ands	r3, r2
 80045a6:	68ba      	ldr	r2, [r7, #8]
 80045a8:	429a      	cmp	r2, r3
 80045aa:	bf0c      	ite	eq
 80045ac:	2301      	moveq	r3, #1
 80045ae:	2300      	movne	r3, #0
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	461a      	mov	r2, r3
 80045b4:	79fb      	ldrb	r3, [r7, #7]
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d19a      	bne.n	80044f0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3720      	adds	r7, #32
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	20000000 	.word	0x20000000

080045c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b088      	sub	sp, #32
 80045cc:	af02      	add	r7, sp, #8
 80045ce:	60f8      	str	r0, [r7, #12]
 80045d0:	60b9      	str	r1, [r7, #8]
 80045d2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	68bb      	ldr	r3, [r7, #8]
 80045da:	2201      	movs	r2, #1
 80045dc:	2102      	movs	r1, #2
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f7ff ff6a 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80045ee:	f043 0220 	orr.w	r2, r3, #32
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e032      	b.n	8004660 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80045fa:	4b1b      	ldr	r3, [pc, #108]	@ (8004668 <SPI_EndRxTxTransaction+0xa0>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a1b      	ldr	r2, [pc, #108]	@ (800466c <SPI_EndRxTxTransaction+0xa4>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	0d5b      	lsrs	r3, r3, #21
 8004606:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800460a:	fb02 f303 	mul.w	r3, r2, r3
 800460e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004618:	d112      	bne.n	8004640 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	68bb      	ldr	r3, [r7, #8]
 8004620:	2200      	movs	r2, #0
 8004622:	2180      	movs	r1, #128	@ 0x80
 8004624:	68f8      	ldr	r0, [r7, #12]
 8004626:	f7ff ff47 	bl	80044b8 <SPI_WaitFlagStateUntilTimeout>
 800462a:	4603      	mov	r3, r0
 800462c:	2b00      	cmp	r3, #0
 800462e:	d016      	beq.n	800465e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004634:	f043 0220 	orr.w	r2, r3, #32
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e00f      	b.n	8004660 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d00a      	beq.n	800465c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	3b01      	subs	r3, #1
 800464a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	689b      	ldr	r3, [r3, #8]
 8004652:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004656:	2b80      	cmp	r3, #128	@ 0x80
 8004658:	d0f2      	beq.n	8004640 <SPI_EndRxTxTransaction+0x78>
 800465a:	e000      	b.n	800465e <SPI_EndRxTxTransaction+0x96>
        break;
 800465c:	bf00      	nop
  }

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3718      	adds	r7, #24
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000000 	.word	0x20000000
 800466c:	165e9f81 	.word	0x165e9f81

08004670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b082      	sub	sp, #8
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d101      	bne.n	8004682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	e041      	b.n	8004706 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004688:	b2db      	uxtb	r3, r3
 800468a:	2b00      	cmp	r3, #0
 800468c:	d106      	bne.n	800469c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	f000 f839 	bl	800470e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	2202      	movs	r2, #2
 80046a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681a      	ldr	r2, [r3, #0]
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3304      	adds	r3, #4
 80046ac:	4619      	mov	r1, r3
 80046ae:	4610      	mov	r0, r2
 80046b0:	f000 f9c0 	bl	8004a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2201      	movs	r2, #1
 80046b8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004704:	2300      	movs	r3, #0
}
 8004706:	4618      	mov	r0, r3
 8004708:	3708      	adds	r7, #8
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004716:	bf00      	nop
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
	...

08004724 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b01      	cmp	r3, #1
 8004736:	d001      	beq.n	800473c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004738:	2301      	movs	r3, #1
 800473a:	e04e      	b.n	80047da <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68da      	ldr	r2, [r3, #12]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a23      	ldr	r2, [pc, #140]	@ (80047e8 <HAL_TIM_Base_Start_IT+0xc4>)
 800475a:	4293      	cmp	r3, r2
 800475c:	d022      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004766:	d01d      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a1f      	ldr	r2, [pc, #124]	@ (80047ec <HAL_TIM_Base_Start_IT+0xc8>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d018      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	4a1e      	ldr	r2, [pc, #120]	@ (80047f0 <HAL_TIM_Base_Start_IT+0xcc>)
 8004778:	4293      	cmp	r3, r2
 800477a:	d013      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4a1c      	ldr	r2, [pc, #112]	@ (80047f4 <HAL_TIM_Base_Start_IT+0xd0>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d00e      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a1b      	ldr	r2, [pc, #108]	@ (80047f8 <HAL_TIM_Base_Start_IT+0xd4>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d009      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a19      	ldr	r2, [pc, #100]	@ (80047fc <HAL_TIM_Base_Start_IT+0xd8>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d004      	beq.n	80047a4 <HAL_TIM_Base_Start_IT+0x80>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a18      	ldr	r2, [pc, #96]	@ (8004800 <HAL_TIM_Base_Start_IT+0xdc>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d111      	bne.n	80047c8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	689b      	ldr	r3, [r3, #8]
 80047aa:	f003 0307 	and.w	r3, r3, #7
 80047ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2b06      	cmp	r3, #6
 80047b4:	d010      	beq.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f042 0201 	orr.w	r2, r2, #1
 80047c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047c6:	e007      	b.n	80047d8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f042 0201 	orr.w	r2, r2, #1
 80047d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr
 80047e6:	bf00      	nop
 80047e8:	40010000 	.word	0x40010000
 80047ec:	40000400 	.word	0x40000400
 80047f0:	40000800 	.word	0x40000800
 80047f4:	40000c00 	.word	0x40000c00
 80047f8:	40010400 	.word	0x40010400
 80047fc:	40014000 	.word	0x40014000
 8004800:	40001800 	.word	0x40001800

08004804 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	691b      	ldr	r3, [r3, #16]
 800481a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	f003 0302 	and.w	r3, r3, #2
 8004822:	2b00      	cmp	r3, #0
 8004824:	d020      	beq.n	8004868 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f003 0302 	and.w	r3, r3, #2
 800482c:	2b00      	cmp	r3, #0
 800482e:	d01b      	beq.n	8004868 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	f06f 0202 	mvn.w	r2, #2
 8004838:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2201      	movs	r2, #1
 800483e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b00      	cmp	r3, #0
 800484c:	d003      	beq.n	8004856 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f000 f8d2 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 8004854:	e005      	b.n	8004862 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f000 f8c4 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	f000 f8d5 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d020      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0304 	and.w	r3, r3, #4
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01b      	beq.n	80048b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0204 	mvn.w	r2, #4
 8004884:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2202      	movs	r2, #2
 800488a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	699b      	ldr	r3, [r3, #24]
 8004892:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f000 f8ac 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 80048a0:	e005      	b.n	80048ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f89e 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 f8af 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	f003 0308 	and.w	r3, r3, #8
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d020      	beq.n	8004900 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f06f 0208 	mvn.w	r2, #8
 80048d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2204      	movs	r2, #4
 80048d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	69db      	ldr	r3, [r3, #28]
 80048de:	f003 0303 	and.w	r3, r3, #3
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d003      	beq.n	80048ee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f886 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 80048ec:	e005      	b.n	80048fa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f000 f878 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f889 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	f003 0310 	and.w	r3, r3, #16
 8004906:	2b00      	cmp	r3, #0
 8004908:	d020      	beq.n	800494c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	f003 0310 	and.w	r3, r3, #16
 8004910:	2b00      	cmp	r3, #0
 8004912:	d01b      	beq.n	800494c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0210 	mvn.w	r2, #16
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2208      	movs	r2, #8
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f860 	bl	80049f8 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f852 	bl	80049e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f000 f863 	bl	8004a0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00c      	beq.n	8004970 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	f003 0301 	and.w	r3, r3, #1
 800495c:	2b00      	cmp	r3, #0
 800495e:	d007      	beq.n	8004970 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f06f 0201 	mvn.w	r2, #1
 8004968:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f7fc ff66 	bl	800183c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00c      	beq.n	8004994 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004980:	2b00      	cmp	r3, #0
 8004982:	d007      	beq.n	8004994 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800498c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f900 	bl	8004b94 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800499a:	2b00      	cmp	r3, #0
 800499c:	d00c      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d007      	beq.n	80049b8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80049b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049b2:	6878      	ldr	r0, [r7, #4]
 80049b4:	f000 f834 	bl	8004a20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	f003 0320 	and.w	r3, r3, #32
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d00c      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f003 0320 	and.w	r3, r3, #32
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d007      	beq.n	80049dc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f06f 0220 	mvn.w	r2, #32
 80049d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f8d2 	bl	8004b80 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80049dc:	bf00      	nop
 80049de:	3710      	adds	r7, #16
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}

080049e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b083      	sub	sp, #12
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80049ec:	bf00      	nop
 80049ee:	370c      	adds	r7, #12
 80049f0:	46bd      	mov	sp, r7
 80049f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f6:	4770      	bx	lr

080049f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049f8:	b480      	push	{r7}
 80049fa:	b083      	sub	sp, #12
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004a00:	bf00      	nop
 8004a02:	370c      	adds	r7, #12
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b083      	sub	sp, #12
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004a14:	bf00      	nop
 8004a16:	370c      	adds	r7, #12
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1e:	4770      	bx	lr

08004a20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b083      	sub	sp, #12
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004a28:	bf00      	nop
 8004a2a:	370c      	adds	r7, #12
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a32:	4770      	bx	lr

08004a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a43      	ldr	r2, [pc, #268]	@ (8004b54 <TIM_Base_SetConfig+0x120>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d013      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a52:	d00f      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a40      	ldr	r2, [pc, #256]	@ (8004b58 <TIM_Base_SetConfig+0x124>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d00b      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8004b5c <TIM_Base_SetConfig+0x128>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d007      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	4a3e      	ldr	r2, [pc, #248]	@ (8004b60 <TIM_Base_SetConfig+0x12c>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d003      	beq.n	8004a74 <TIM_Base_SetConfig+0x40>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8004b64 <TIM_Base_SetConfig+0x130>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	d108      	bne.n	8004a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	68fa      	ldr	r2, [r7, #12]
 8004a82:	4313      	orrs	r3, r2
 8004a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	4a32      	ldr	r2, [pc, #200]	@ (8004b54 <TIM_Base_SetConfig+0x120>)
 8004a8a:	4293      	cmp	r3, r2
 8004a8c:	d02b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a94:	d027      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	4a2f      	ldr	r2, [pc, #188]	@ (8004b58 <TIM_Base_SetConfig+0x124>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d023      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8004b5c <TIM_Base_SetConfig+0x128>)
 8004aa2:	4293      	cmp	r3, r2
 8004aa4:	d01f      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8004b60 <TIM_Base_SetConfig+0x12c>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d01b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8004b64 <TIM_Base_SetConfig+0x130>)
 8004ab2:	4293      	cmp	r3, r2
 8004ab4:	d017      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8004b68 <TIM_Base_SetConfig+0x134>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d013      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8004b6c <TIM_Base_SetConfig+0x138>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d00f      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	4a29      	ldr	r2, [pc, #164]	@ (8004b70 <TIM_Base_SetConfig+0x13c>)
 8004aca:	4293      	cmp	r3, r2
 8004acc:	d00b      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	4a28      	ldr	r2, [pc, #160]	@ (8004b74 <TIM_Base_SetConfig+0x140>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d007      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a27      	ldr	r2, [pc, #156]	@ (8004b78 <TIM_Base_SetConfig+0x144>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_Base_SetConfig+0xb2>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a26      	ldr	r2, [pc, #152]	@ (8004b7c <TIM_Base_SetConfig+0x148>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d108      	bne.n	8004af8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004aee:	683b      	ldr	r3, [r7, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	68fa      	ldr	r2, [r7, #12]
 8004af4:	4313      	orrs	r3, r2
 8004af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	695b      	ldr	r3, [r3, #20]
 8004b02:	4313      	orrs	r3, r2
 8004b04:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	689a      	ldr	r2, [r3, #8]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	4a0e      	ldr	r2, [pc, #56]	@ (8004b54 <TIM_Base_SetConfig+0x120>)
 8004b1a:	4293      	cmp	r3, r2
 8004b1c:	d003      	beq.n	8004b26 <TIM_Base_SetConfig+0xf2>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	4a10      	ldr	r2, [pc, #64]	@ (8004b64 <TIM_Base_SetConfig+0x130>)
 8004b22:	4293      	cmp	r3, r2
 8004b24:	d103      	bne.n	8004b2e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	691a      	ldr	r2, [r3, #16]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f043 0204 	orr.w	r2, r3, #4
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	601a      	str	r2, [r3, #0]
}
 8004b46:	bf00      	nop
 8004b48:	3714      	adds	r7, #20
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	40010000 	.word	0x40010000
 8004b58:	40000400 	.word	0x40000400
 8004b5c:	40000800 	.word	0x40000800
 8004b60:	40000c00 	.word	0x40000c00
 8004b64:	40010400 	.word	0x40010400
 8004b68:	40014000 	.word	0x40014000
 8004b6c:	40014400 	.word	0x40014400
 8004b70:	40014800 	.word	0x40014800
 8004b74:	40001800 	.word	0x40001800
 8004b78:	40001c00 	.word	0x40001c00
 8004b7c:	40002000 	.word	0x40002000

08004b80 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b80:	b480      	push	{r7}
 8004b82:	b083      	sub	sp, #12
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b88:	bf00      	nop
 8004b8a:	370c      	adds	r7, #12
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr

08004b94 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b94:	b480      	push	{r7}
 8004b96:	b083      	sub	sp, #12
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b9c:	bf00      	nop
 8004b9e:	370c      	adds	r7, #12
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <__NVIC_SetPriority>:
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	db0a      	blt.n	8004bd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	490c      	ldr	r1, [pc, #48]	@ (8004bf4 <__NVIC_SetPriority+0x4c>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004bd0:	e00a      	b.n	8004be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4908      	ldr	r1, [pc, #32]	@ (8004bf8 <__NVIC_SetPriority+0x50>)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	3b04      	subs	r3, #4
 8004be0:	0112      	lsls	r2, r2, #4
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	440b      	add	r3, r1
 8004be6:	761a      	strb	r2, [r3, #24]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bf2:	4770      	bx	lr
 8004bf4:	e000e100 	.word	0xe000e100
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004c00:	4b05      	ldr	r3, [pc, #20]	@ (8004c18 <SysTick_Handler+0x1c>)
 8004c02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004c04:	f002 fbae 	bl	8007364 <xTaskGetSchedulerState>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b01      	cmp	r3, #1
 8004c0c:	d001      	beq.n	8004c12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004c0e:	f003 fadb 	bl	80081c8 <xPortSysTickHandler>
  }
}
 8004c12:	bf00      	nop
 8004c14:	bd80      	pop	{r7, pc}
 8004c16:	bf00      	nop
 8004c18:	e000e010 	.word	0xe000e010

08004c1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004c20:	2100      	movs	r1, #0
 8004c22:	f06f 0004 	mvn.w	r0, #4
 8004c26:	f7ff ffbf 	bl	8004ba8 <__NVIC_SetPriority>
#endif
}
 8004c2a:	bf00      	nop
 8004c2c:	bd80      	pop	{r7, pc}
	...

08004c30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004c30:	b480      	push	{r7}
 8004c32:	b083      	sub	sp, #12
 8004c34:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c36:	f3ef 8305 	mrs	r3, IPSR
 8004c3a:	603b      	str	r3, [r7, #0]
  return(result);
 8004c3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004c42:	f06f 0305 	mvn.w	r3, #5
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	e00c      	b.n	8004c64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004c4a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c74 <osKernelInitialize+0x44>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d105      	bne.n	8004c5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004c52:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <osKernelInitialize+0x44>)
 8004c54:	2201      	movs	r2, #1
 8004c56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	e002      	b.n	8004c64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c64:	687b      	ldr	r3, [r7, #4]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	370c      	adds	r7, #12
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c70:	4770      	bx	lr
 8004c72:	bf00      	nop
 8004c74:	20005f34 	.word	0x20005f34

08004c78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c7e:	f3ef 8305 	mrs	r3, IPSR
 8004c82:	603b      	str	r3, [r7, #0]
  return(result);
 8004c84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d003      	beq.n	8004c92 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c8a:	f06f 0305 	mvn.w	r3, #5
 8004c8e:	607b      	str	r3, [r7, #4]
 8004c90:	e010      	b.n	8004cb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c92:	4b0b      	ldr	r3, [pc, #44]	@ (8004cc0 <osKernelStart+0x48>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d109      	bne.n	8004cae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c9a:	f7ff ffbf 	bl	8004c1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c9e:	4b08      	ldr	r3, [pc, #32]	@ (8004cc0 <osKernelStart+0x48>)
 8004ca0:	2202      	movs	r2, #2
 8004ca2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ca4:	f001 fe48 	bl	8006938 <vTaskStartScheduler>
      stat = osOK;
 8004ca8:	2300      	movs	r3, #0
 8004caa:	607b      	str	r3, [r7, #4]
 8004cac:	e002      	b.n	8004cb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004cae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004cb4:	687b      	ldr	r3, [r7, #4]
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3708      	adds	r7, #8
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}
 8004cbe:	bf00      	nop
 8004cc0:	20005f34 	.word	0x20005f34

08004cc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b08e      	sub	sp, #56	@ 0x38
 8004cc8:	af04      	add	r7, sp, #16
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	60b9      	str	r1, [r7, #8]
 8004cce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cd4:	f3ef 8305 	mrs	r3, IPSR
 8004cd8:	617b      	str	r3, [r7, #20]
  return(result);
 8004cda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d17e      	bne.n	8004dde <osThreadNew+0x11a>
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d07b      	beq.n	8004dde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004ce6:	2380      	movs	r3, #128	@ 0x80
 8004ce8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004cea:	2318      	movs	r3, #24
 8004cec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004cf2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d045      	beq.n	8004d8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d002      	beq.n	8004d0c <osThreadNew+0x48>
        name = attr->name;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	699b      	ldr	r3, [r3, #24]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d002      	beq.n	8004d1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d008      	beq.n	8004d32 <osThreadNew+0x6e>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b38      	cmp	r3, #56	@ 0x38
 8004d24:	d805      	bhi.n	8004d32 <osThreadNew+0x6e>
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <osThreadNew+0x72>
        return (NULL);
 8004d32:	2300      	movs	r3, #0
 8004d34:	e054      	b.n	8004de0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	695b      	ldr	r3, [r3, #20]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d003      	beq.n	8004d46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	089b      	lsrs	r3, r3, #2
 8004d44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	689b      	ldr	r3, [r3, #8]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d00e      	beq.n	8004d6c <osThreadNew+0xa8>
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68db      	ldr	r3, [r3, #12]
 8004d52:	2ba7      	cmp	r3, #167	@ 0xa7
 8004d54:	d90a      	bls.n	8004d6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d006      	beq.n	8004d6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d002      	beq.n	8004d6c <osThreadNew+0xa8>
        mem = 1;
 8004d66:	2301      	movs	r3, #1
 8004d68:	61bb      	str	r3, [r7, #24]
 8004d6a:	e010      	b.n	8004d8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d10c      	bne.n	8004d8e <osThreadNew+0xca>
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d108      	bne.n	8004d8e <osThreadNew+0xca>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	691b      	ldr	r3, [r3, #16]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d104      	bne.n	8004d8e <osThreadNew+0xca>
          mem = 0;
 8004d84:	2300      	movs	r3, #0
 8004d86:	61bb      	str	r3, [r7, #24]
 8004d88:	e001      	b.n	8004d8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d110      	bne.n	8004db6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d9c:	9202      	str	r2, [sp, #8]
 8004d9e:	9301      	str	r3, [sp, #4]
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	9300      	str	r3, [sp, #0]
 8004da4:	68bb      	ldr	r3, [r7, #8]
 8004da6:	6a3a      	ldr	r2, [r7, #32]
 8004da8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f001 fc06 	bl	80065bc <xTaskCreateStatic>
 8004db0:	4603      	mov	r3, r0
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	e013      	b.n	8004dde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004db6:	69bb      	ldr	r3, [r7, #24]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d110      	bne.n	8004dde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	b29a      	uxth	r2, r3
 8004dc0:	f107 0310 	add.w	r3, r7, #16
 8004dc4:	9301      	str	r3, [sp, #4]
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	9300      	str	r3, [sp, #0]
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004dce:	68f8      	ldr	r0, [r7, #12]
 8004dd0:	f001 fc54 	bl	800667c <xTaskCreate>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d001      	beq.n	8004dde <osThreadNew+0x11a>
            hTask = NULL;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004dde:	693b      	ldr	r3, [r7, #16]
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	3728      	adds	r7, #40	@ 0x28
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}

08004de8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004df4:	f3ef 8305 	mrs	r3, IPSR
 8004df8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dfa:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d12d      	bne.n	8004e5c <osEventFlagsNew+0x74>
    mem = -1;
 8004e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e04:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d015      	beq.n	8004e38 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d006      	beq.n	8004e22 <osEventFlagsNew+0x3a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	68db      	ldr	r3, [r3, #12]
 8004e18:	2b1f      	cmp	r3, #31
 8004e1a:	d902      	bls.n	8004e22 <osEventFlagsNew+0x3a>
        mem = 1;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	613b      	str	r3, [r7, #16]
 8004e20:	e00c      	b.n	8004e3c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d108      	bne.n	8004e3c <osEventFlagsNew+0x54>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	68db      	ldr	r3, [r3, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <osEventFlagsNew+0x54>
          mem = 0;
 8004e32:	2300      	movs	r3, #0
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e001      	b.n	8004e3c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004e3c:	693b      	ldr	r3, [r7, #16]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d106      	bne.n	8004e50 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	4618      	mov	r0, r3
 8004e48:	f000 f9f8 	bl	800523c <xEventGroupCreateStatic>
 8004e4c:	6178      	str	r0, [r7, #20]
 8004e4e:	e005      	b.n	8004e5c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d102      	bne.n	8004e5c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004e56:	f000 fa2a 	bl	80052ae <xEventGroupCreate>
 8004e5a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004e5c:	697b      	ldr	r3, [r7, #20]
}
 8004e5e:	4618      	mov	r0, r3
 8004e60:	3718      	adds	r7, #24
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bd80      	pop	{r7, pc}
	...

08004e68 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b086      	sub	sp, #24
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d003      	beq.n	8004e84 <osEventFlagsSet+0x1c>
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e82:	d303      	bcc.n	8004e8c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8004e84:	f06f 0303 	mvn.w	r3, #3
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e028      	b.n	8004ede <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e8c:	f3ef 8305 	mrs	r3, IPSR
 8004e90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e92:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d01d      	beq.n	8004ed4 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004e9c:	f107 0308 	add.w	r3, r7, #8
 8004ea0:	461a      	mov	r2, r3
 8004ea2:	6839      	ldr	r1, [r7, #0]
 8004ea4:	6938      	ldr	r0, [r7, #16]
 8004ea6:	f000 fbab 	bl	8005600 <xEventGroupSetBitsFromISR>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d103      	bne.n	8004eb8 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8004eb0:	f06f 0302 	mvn.w	r3, #2
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	e012      	b.n	8004ede <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d00d      	beq.n	8004ede <osEventFlagsSet+0x76>
 8004ec2:	4b09      	ldr	r3, [pc, #36]	@ (8004ee8 <osEventFlagsSet+0x80>)
 8004ec4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	f3bf 8f4f 	dsb	sy
 8004ece:	f3bf 8f6f 	isb	sy
 8004ed2:	e004      	b.n	8004ede <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	6938      	ldr	r0, [r7, #16]
 8004ed8:	f000 fad6 	bl	8005488 <xEventGroupSetBits>
 8004edc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004ede:	697b      	ldr	r3, [r7, #20]
}
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	3718      	adds	r7, #24
 8004ee4:	46bd      	mov	sp, r7
 8004ee6:	bd80      	pop	{r7, pc}
 8004ee8:	e000ed04 	.word	0xe000ed04

08004eec <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004eec:	b580      	push	{r7, lr}
 8004eee:	b08c      	sub	sp, #48	@ 0x30
 8004ef0:	af02      	add	r7, sp, #8
 8004ef2:	60f8      	str	r0, [r7, #12]
 8004ef4:	60b9      	str	r1, [r7, #8]
 8004ef6:	607a      	str	r2, [r7, #4]
 8004ef8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <osEventFlagsWait+0x20>
 8004f04:	68bb      	ldr	r3, [r7, #8]
 8004f06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004f0a:	d303      	bcc.n	8004f14 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 8004f0c:	f06f 0303 	mvn.w	r3, #3
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e04b      	b.n	8004fac <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f14:	f3ef 8305 	mrs	r3, IPSR
 8004f18:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1a:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d003      	beq.n	8004f28 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8004f20:	f06f 0305 	mvn.w	r3, #5
 8004f24:	61fb      	str	r3, [r7, #28]
 8004f26:	e041      	b.n	8004fac <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d002      	beq.n	8004f38 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8004f32:	2301      	movs	r3, #1
 8004f34:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f36:	e001      	b.n	8004f3c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8004f38:	2300      	movs	r3, #0
 8004f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8004f46:	2300      	movs	r3, #0
 8004f48:	623b      	str	r3, [r7, #32]
 8004f4a:	e001      	b.n	8004f50 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f56:	6a3a      	ldr	r2, [r7, #32]
 8004f58:	68b9      	ldr	r1, [r7, #8]
 8004f5a:	69b8      	ldr	r0, [r7, #24]
 8004f5c:	f000 f9c2 	bl	80052e4 <xEventGroupWaitBits>
 8004f60:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f003 0301 	and.w	r3, r3, #1
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d010      	beq.n	8004f8e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4013      	ands	r3, r2
 8004f72:	68ba      	ldr	r2, [r7, #8]
 8004f74:	429a      	cmp	r2, r3
 8004f76:	d019      	beq.n	8004fac <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 8004f7e:	f06f 0301 	mvn.w	r3, #1
 8004f82:	61fb      	str	r3, [r7, #28]
 8004f84:	e012      	b.n	8004fac <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004f86:	f06f 0302 	mvn.w	r3, #2
 8004f8a:	61fb      	str	r3, [r7, #28]
 8004f8c:	e00e      	b.n	8004fac <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004f8e:	68ba      	ldr	r2, [r7, #8]
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4013      	ands	r3, r2
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d109      	bne.n	8004fac <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d003      	beq.n	8004fa6 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 8004f9e:	f06f 0301 	mvn.w	r3, #1
 8004fa2:	61fb      	str	r3, [r7, #28]
 8004fa4:	e002      	b.n	8004fac <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004fa6:	f06f 0302 	mvn.w	r3, #2
 8004faa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004fac:	69fb      	ldr	r3, [r7, #28]
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3728      	adds	r7, #40	@ 0x28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b088      	sub	sp, #32
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc2:	f3ef 8305 	mrs	r3, IPSR
 8004fc6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004fc8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d174      	bne.n	80050b8 <osMutexNew+0x102>
    if (attr != NULL) {
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <osMutexNew+0x26>
      type = attr->attr_bits;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	685b      	ldr	r3, [r3, #4]
 8004fd8:	61bb      	str	r3, [r7, #24]
 8004fda:	e001      	b.n	8004fe0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004fe0:	69bb      	ldr	r3, [r7, #24]
 8004fe2:	f003 0301 	and.w	r3, r3, #1
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d002      	beq.n	8004ff0 <osMutexNew+0x3a>
      rmtx = 1U;
 8004fea:	2301      	movs	r3, #1
 8004fec:	617b      	str	r3, [r7, #20]
 8004fee:	e001      	b.n	8004ff4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004ff4:	69bb      	ldr	r3, [r7, #24]
 8004ff6:	f003 0308 	and.w	r3, r3, #8
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d15c      	bne.n	80050b8 <osMutexNew+0x102>
      mem = -1;
 8004ffe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005002:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d015      	beq.n	8005036 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d006      	beq.n	8005020 <osMutexNew+0x6a>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	2b4f      	cmp	r3, #79	@ 0x4f
 8005018:	d902      	bls.n	8005020 <osMutexNew+0x6a>
          mem = 1;
 800501a:	2301      	movs	r3, #1
 800501c:	613b      	str	r3, [r7, #16]
 800501e:	e00c      	b.n	800503a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d108      	bne.n	800503a <osMutexNew+0x84>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d104      	bne.n	800503a <osMutexNew+0x84>
            mem = 0;
 8005030:	2300      	movs	r3, #0
 8005032:	613b      	str	r3, [r7, #16]
 8005034:	e001      	b.n	800503a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005036:	2300      	movs	r3, #0
 8005038:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d112      	bne.n	8005066 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d007      	beq.n	8005056 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	4619      	mov	r1, r3
 800504c:	2004      	movs	r0, #4
 800504e:	f000 fd16 	bl	8005a7e <xQueueCreateMutexStatic>
 8005052:	61f8      	str	r0, [r7, #28]
 8005054:	e016      	b.n	8005084 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	689b      	ldr	r3, [r3, #8]
 800505a:	4619      	mov	r1, r3
 800505c:	2001      	movs	r0, #1
 800505e:	f000 fd0e 	bl	8005a7e <xQueueCreateMutexStatic>
 8005062:	61f8      	str	r0, [r7, #28]
 8005064:	e00e      	b.n	8005084 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d10b      	bne.n	8005084 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d004      	beq.n	800507c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005072:	2004      	movs	r0, #4
 8005074:	f000 fceb 	bl	8005a4e <xQueueCreateMutex>
 8005078:	61f8      	str	r0, [r7, #28]
 800507a:	e003      	b.n	8005084 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800507c:	2001      	movs	r0, #1
 800507e:	f000 fce6 	bl	8005a4e <xQueueCreateMutex>
 8005082:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00c      	beq.n	80050a4 <osMutexNew+0xee>
        if (attr != NULL) {
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d003      	beq.n	8005098 <osMutexNew+0xe2>
          name = attr->name;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	60fb      	str	r3, [r7, #12]
 8005096:	e001      	b.n	800509c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800509c:	68f9      	ldr	r1, [r7, #12]
 800509e:	69f8      	ldr	r0, [r7, #28]
 80050a0:	f001 fa2e 	bl	8006500 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80050a4:	69fb      	ldr	r3, [r7, #28]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d006      	beq.n	80050b8 <osMutexNew+0x102>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d003      	beq.n	80050b8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f043 0301 	orr.w	r3, r3, #1
 80050b6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80050b8:	69fb      	ldr	r3, [r7, #28]
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3720      	adds	r7, #32
 80050be:	46bd      	mov	sp, r7
 80050c0:	bd80      	pop	{r7, pc}

080050c2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80050c2:	b580      	push	{r7, lr}
 80050c4:	b086      	sub	sp, #24
 80050c6:	af00      	add	r7, sp, #0
 80050c8:	6078      	str	r0, [r7, #4]
 80050ca:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f023 0301 	bic.w	r3, r3, #1
 80050d2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	f003 0301 	and.w	r3, r3, #1
 80050da:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80050dc:	2300      	movs	r3, #0
 80050de:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e0:	f3ef 8305 	mrs	r3, IPSR
 80050e4:	60bb      	str	r3, [r7, #8]
  return(result);
 80050e6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d003      	beq.n	80050f4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80050ec:	f06f 0305 	mvn.w	r3, #5
 80050f0:	617b      	str	r3, [r7, #20]
 80050f2:	e02c      	b.n	800514e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d103      	bne.n	8005102 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80050fa:	f06f 0303 	mvn.w	r3, #3
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	e025      	b.n	800514e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d011      	beq.n	800512c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	6938      	ldr	r0, [r7, #16]
 800510c:	f000 fd07 	bl	8005b1e <xQueueTakeMutexRecursive>
 8005110:	4603      	mov	r3, r0
 8005112:	2b01      	cmp	r3, #1
 8005114:	d01b      	beq.n	800514e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d003      	beq.n	8005124 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800511c:	f06f 0301 	mvn.w	r3, #1
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e014      	b.n	800514e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005124:	f06f 0302 	mvn.w	r3, #2
 8005128:	617b      	str	r3, [r7, #20]
 800512a:	e010      	b.n	800514e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800512c:	6839      	ldr	r1, [r7, #0]
 800512e:	6938      	ldr	r0, [r7, #16]
 8005130:	f000 ffae 	bl	8006090 <xQueueSemaphoreTake>
 8005134:	4603      	mov	r3, r0
 8005136:	2b01      	cmp	r3, #1
 8005138:	d009      	beq.n	800514e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	2b00      	cmp	r3, #0
 800513e:	d003      	beq.n	8005148 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005140:	f06f 0301 	mvn.w	r3, #1
 8005144:	617b      	str	r3, [r7, #20]
 8005146:	e002      	b.n	800514e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005148:	f06f 0302 	mvn.w	r3, #2
 800514c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800514e:	697b      	ldr	r3, [r7, #20]
}
 8005150:	4618      	mov	r0, r3
 8005152:	3718      	adds	r7, #24
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}

08005158 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005158:	b580      	push	{r7, lr}
 800515a:	b086      	sub	sp, #24
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f023 0301 	bic.w	r3, r3, #1
 8005166:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005170:	2300      	movs	r3, #0
 8005172:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005174:	f3ef 8305 	mrs	r3, IPSR
 8005178:	60bb      	str	r3, [r7, #8]
  return(result);
 800517a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800517c:	2b00      	cmp	r3, #0
 800517e:	d003      	beq.n	8005188 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005180:	f06f 0305 	mvn.w	r3, #5
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e01f      	b.n	80051c8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d103      	bne.n	8005196 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800518e:	f06f 0303 	mvn.w	r3, #3
 8005192:	617b      	str	r3, [r7, #20]
 8005194:	e018      	b.n	80051c8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d009      	beq.n	80051b0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800519c:	6938      	ldr	r0, [r7, #16]
 800519e:	f000 fc89 	bl	8005ab4 <xQueueGiveMutexRecursive>
 80051a2:	4603      	mov	r3, r0
 80051a4:	2b01      	cmp	r3, #1
 80051a6:	d00f      	beq.n	80051c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80051a8:	f06f 0302 	mvn.w	r3, #2
 80051ac:	617b      	str	r3, [r7, #20]
 80051ae:	e00b      	b.n	80051c8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 80051b0:	2300      	movs	r3, #0
 80051b2:	2200      	movs	r2, #0
 80051b4:	2100      	movs	r1, #0
 80051b6:	6938      	ldr	r0, [r7, #16]
 80051b8:	f000 fce8 	bl	8005b8c <xQueueGenericSend>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d002      	beq.n	80051c8 <osMutexRelease+0x70>
        stat = osErrorResource;
 80051c2:	f06f 0302 	mvn.w	r3, #2
 80051c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80051c8:	697b      	ldr	r3, [r7, #20]
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3718      	adds	r7, #24
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	4a07      	ldr	r2, [pc, #28]	@ (8005200 <vApplicationGetIdleTaskMemory+0x2c>)
 80051e4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	4a06      	ldr	r2, [pc, #24]	@ (8005204 <vApplicationGetIdleTaskMemory+0x30>)
 80051ea:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2280      	movs	r2, #128	@ 0x80
 80051f0:	601a      	str	r2, [r3, #0]
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
 80051fe:	bf00      	nop
 8005200:	20005f38 	.word	0x20005f38
 8005204:	20005fe0 	.word	0x20005fe0

08005208 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	4a07      	ldr	r2, [pc, #28]	@ (8005234 <vApplicationGetTimerTaskMemory+0x2c>)
 8005218:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	4a06      	ldr	r2, [pc, #24]	@ (8005238 <vApplicationGetTimerTaskMemory+0x30>)
 800521e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005226:	601a      	str	r2, [r3, #0]
}
 8005228:	bf00      	nop
 800522a:	3714      	adds	r7, #20
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	200061e0 	.word	0x200061e0
 8005238:	20006288 	.word	0x20006288

0800523c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800523c:	b580      	push	{r7, lr}
 800523e:	b086      	sub	sp, #24
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10b      	bne.n	8005262 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800524a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800524e:	f383 8811 	msr	BASEPRI, r3
 8005252:	f3bf 8f6f 	isb	sy
 8005256:	f3bf 8f4f 	dsb	sy
 800525a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800525c:	bf00      	nop
 800525e:	bf00      	nop
 8005260:	e7fd      	b.n	800525e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005262:	2320      	movs	r3, #32
 8005264:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	2b20      	cmp	r3, #32
 800526a:	d00b      	beq.n	8005284 <xEventGroupCreateStatic+0x48>
	__asm volatile
 800526c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005270:	f383 8811 	msr	BASEPRI, r3
 8005274:	f3bf 8f6f 	isb	sy
 8005278:	f3bf 8f4f 	dsb	sy
 800527c:	60fb      	str	r3, [r7, #12]
}
 800527e:	bf00      	nop
 8005280:	bf00      	nop
 8005282:	e7fd      	b.n	8005280 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00a      	beq.n	80052a4 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 800528e:	697b      	ldr	r3, [r7, #20]
 8005290:	2200      	movs	r2, #0
 8005292:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	3304      	adds	r3, #4
 8005298:	4618      	mov	r0, r3
 800529a:	f000 f9c5 	bl	8005628 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2201      	movs	r2, #1
 80052a2:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 80052a4:	697b      	ldr	r3, [r7, #20]
	}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3718      	adds	r7, #24
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b082      	sub	sp, #8
 80052b2:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 80052b4:	2020      	movs	r0, #32
 80052b6:	f003 f819 	bl	80082ec <pvPortMalloc>
 80052ba:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00a      	beq.n	80052d8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4618      	mov	r0, r3
 80052ce:	f000 f9ab 	bl	8005628 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	2200      	movs	r2, #0
 80052d6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 80052d8:	687b      	ldr	r3, [r7, #4]
	}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}
	...

080052e4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b090      	sub	sp, #64	@ 0x40
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	60f8      	str	r0, [r7, #12]
 80052ec:	60b9      	str	r1, [r7, #8]
 80052ee:	607a      	str	r2, [r7, #4]
 80052f0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 80052f6:	2300      	movs	r3, #0
 80052f8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10b      	bne.n	800531c <xEventGroupWaitBits+0x38>
	__asm volatile
 8005304:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005308:	f383 8811 	msr	BASEPRI, r3
 800530c:	f3bf 8f6f 	isb	sy
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	623b      	str	r3, [r7, #32]
}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	e7fd      	b.n	8005318 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800531c:	68bb      	ldr	r3, [r7, #8]
 800531e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005322:	d30b      	bcc.n	800533c <xEventGroupWaitBits+0x58>
	__asm volatile
 8005324:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005328:	f383 8811 	msr	BASEPRI, r3
 800532c:	f3bf 8f6f 	isb	sy
 8005330:	f3bf 8f4f 	dsb	sy
 8005334:	61fb      	str	r3, [r7, #28]
}
 8005336:	bf00      	nop
 8005338:	bf00      	nop
 800533a:	e7fd      	b.n	8005338 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	2b00      	cmp	r3, #0
 8005340:	d10b      	bne.n	800535a <xEventGroupWaitBits+0x76>
	__asm volatile
 8005342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005346:	f383 8811 	msr	BASEPRI, r3
 800534a:	f3bf 8f6f 	isb	sy
 800534e:	f3bf 8f4f 	dsb	sy
 8005352:	61bb      	str	r3, [r7, #24]
}
 8005354:	bf00      	nop
 8005356:	bf00      	nop
 8005358:	e7fd      	b.n	8005356 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800535a:	f002 f803 	bl	8007364 <xTaskGetSchedulerState>
 800535e:	4603      	mov	r3, r0
 8005360:	2b00      	cmp	r3, #0
 8005362:	d102      	bne.n	800536a <xEventGroupWaitBits+0x86>
 8005364:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005366:	2b00      	cmp	r3, #0
 8005368:	d101      	bne.n	800536e <xEventGroupWaitBits+0x8a>
 800536a:	2301      	movs	r3, #1
 800536c:	e000      	b.n	8005370 <xEventGroupWaitBits+0x8c>
 800536e:	2300      	movs	r3, #0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10b      	bne.n	800538c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	617b      	str	r3, [r7, #20]
}
 8005386:	bf00      	nop
 8005388:	bf00      	nop
 800538a:	e7fd      	b.n	8005388 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 800538c:	f001 fb44 	bl	8006a18 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005390:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005396:	683a      	ldr	r2, [r7, #0]
 8005398:	68b9      	ldr	r1, [r7, #8]
 800539a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800539c:	f000 f90d 	bl	80055ba <prvTestWaitCondition>
 80053a0:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 80053a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d00e      	beq.n	80053c6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80053a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80053ac:	2300      	movs	r3, #0
 80053ae:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d028      	beq.n	8005408 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80053b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68bb      	ldr	r3, [r7, #8]
 80053bc:	43db      	mvns	r3, r3
 80053be:	401a      	ands	r2, r3
 80053c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053c2:	601a      	str	r2, [r3, #0]
 80053c4:	e020      	b.n	8005408 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80053c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d104      	bne.n	80053d6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80053cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 80053d0:	2301      	movs	r3, #1
 80053d2:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d4:	e018      	b.n	8005408 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d003      	beq.n	80053e4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80053dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053e2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80053ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80053f0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80053f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053f4:	1d18      	adds	r0, r3, #4
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053fa:	4313      	orrs	r3, r2
 80053fc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053fe:	4619      	mov	r1, r3
 8005400:	f001 fd0c 	bl	8006e1c <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005404:	2300      	movs	r3, #0
 8005406:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005408:	f001 fb14 	bl	8006a34 <xTaskResumeAll>
 800540c:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800540e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005410:	2b00      	cmp	r3, #0
 8005412:	d031      	beq.n	8005478 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8005414:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005416:	2b00      	cmp	r3, #0
 8005418:	d107      	bne.n	800542a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 800541a:	4b1a      	ldr	r3, [pc, #104]	@ (8005484 <xEventGroupWaitBits+0x1a0>)
 800541c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	f3bf 8f4f 	dsb	sy
 8005426:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800542a:	f002 f915 	bl	8007658 <uxTaskResetEventItemValue>
 800542e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005430:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005432:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005436:	2b00      	cmp	r3, #0
 8005438:	d11a      	bne.n	8005470 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 800543a:	f002 fe35 	bl	80080a8 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800543e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005444:	683a      	ldr	r2, [r7, #0]
 8005446:	68b9      	ldr	r1, [r7, #8]
 8005448:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800544a:	f000 f8b6 	bl	80055ba <prvTestWaitCondition>
 800544e:	4603      	mov	r3, r0
 8005450:	2b00      	cmp	r3, #0
 8005452:	d009      	beq.n	8005468 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d006      	beq.n	8005468 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800545a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	43db      	mvns	r3, r3
 8005462:	401a      	ands	r2, r3
 8005464:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005466:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 800546c:	f002 fe4e 	bl	800810c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005470:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005472:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005476:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005478:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800547a:	4618      	mov	r0, r3
 800547c:	3740      	adds	r7, #64	@ 0x40
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
 8005482:	bf00      	nop
 8005484:	e000ed04 	.word	0xe000ed04

08005488 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b08e      	sub	sp, #56	@ 0x38
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
 8005490:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005492:	2300      	movs	r3, #0
 8005494:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 800549a:	2300      	movs	r3, #0
 800549c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d10b      	bne.n	80054bc <xEventGroupSetBits+0x34>
	__asm volatile
 80054a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054a8:	f383 8811 	msr	BASEPRI, r3
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	f3bf 8f4f 	dsb	sy
 80054b4:	613b      	str	r3, [r7, #16]
}
 80054b6:	bf00      	nop
 80054b8:	bf00      	nop
 80054ba:	e7fd      	b.n	80054b8 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80054c2:	d30b      	bcc.n	80054dc <xEventGroupSetBits+0x54>
	__asm volatile
 80054c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054c8:	f383 8811 	msr	BASEPRI, r3
 80054cc:	f3bf 8f6f 	isb	sy
 80054d0:	f3bf 8f4f 	dsb	sy
 80054d4:	60fb      	str	r3, [r7, #12]
}
 80054d6:	bf00      	nop
 80054d8:	bf00      	nop
 80054da:	e7fd      	b.n	80054d8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	3304      	adds	r3, #4
 80054e0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	3308      	adds	r3, #8
 80054e6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80054e8:	f001 fa96 	bl	8006a18 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 80054ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 80054f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	431a      	orrs	r2, r3
 80054fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054fc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 80054fe:	e03c      	b.n	800557a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005500:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005506:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800550c:	2300      	movs	r3, #0
 800550e:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005510:	69bb      	ldr	r3, [r7, #24]
 8005512:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005516:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005518:	69bb      	ldr	r3, [r7, #24]
 800551a:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800551e:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d108      	bne.n	800553c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800552a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800552c:	681a      	ldr	r2, [r3, #0]
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	4013      	ands	r3, r2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d00b      	beq.n	800554e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8005536:	2301      	movs	r3, #1
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800553a:	e008      	b.n	800554e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	69bb      	ldr	r3, [r7, #24]
 8005542:	4013      	ands	r3, r2
 8005544:	69ba      	ldr	r2, [r7, #24]
 8005546:	429a      	cmp	r2, r3
 8005548:	d101      	bne.n	800554e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800554a:	2301      	movs	r3, #1
 800554c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800554e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005550:	2b00      	cmp	r3, #0
 8005552:	d010      	beq.n	8005576 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800555a:	2b00      	cmp	r3, #0
 800555c:	d003      	beq.n	8005566 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800555e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	4313      	orrs	r3, r2
 8005564:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800556e:	4619      	mov	r1, r3
 8005570:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005572:	f001 fd21 	bl	8006fb8 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 800557a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800557c:	6a3b      	ldr	r3, [r7, #32]
 800557e:	429a      	cmp	r2, r3
 8005580:	d1be      	bne.n	8005500 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005588:	43db      	mvns	r3, r3
 800558a:	401a      	ands	r2, r3
 800558c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800558e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005590:	f001 fa50 	bl	8006a34 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005596:	681b      	ldr	r3, [r3, #0]
}
 8005598:	4618      	mov	r0, r3
 800559a:	3738      	adds	r7, #56	@ 0x38
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b082      	sub	sp, #8
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 80055aa:	6839      	ldr	r1, [r7, #0]
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7ff ff6b 	bl	8005488 <xEventGroupSetBits>
}
 80055b2:	bf00      	nop
 80055b4:	3708      	adds	r7, #8
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}

080055ba <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80055ba:	b480      	push	{r7}
 80055bc:	b087      	sub	sp, #28
 80055be:	af00      	add	r7, sp, #0
 80055c0:	60f8      	str	r0, [r7, #12]
 80055c2:	60b9      	str	r1, [r7, #8]
 80055c4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d107      	bne.n	80055e0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80055d0:	68fa      	ldr	r2, [r7, #12]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	4013      	ands	r3, r2
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d00a      	beq.n	80055f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055da:	2301      	movs	r3, #1
 80055dc:	617b      	str	r3, [r7, #20]
 80055de:	e007      	b.n	80055f0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80055e0:	68fa      	ldr	r2, [r7, #12]
 80055e2:	68bb      	ldr	r3, [r7, #8]
 80055e4:	4013      	ands	r3, r2
 80055e6:	68ba      	ldr	r2, [r7, #8]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d101      	bne.n	80055f0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80055ec:	2301      	movs	r3, #1
 80055ee:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80055f0:	697b      	ldr	r3, [r7, #20]
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	371c      	adds	r7, #28
 80055f6:	46bd      	mov	sp, r7
 80055f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fc:	4770      	bx	lr
	...

08005600 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005600:	b580      	push	{r7, lr}
 8005602:	b086      	sub	sp, #24
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	68f9      	ldr	r1, [r7, #12]
 8005612:	4804      	ldr	r0, [pc, #16]	@ (8005624 <xEventGroupSetBitsFromISR+0x24>)
 8005614:	f002 fbfa 	bl	8007e0c <xTimerPendFunctionCallFromISR>
 8005618:	6178      	str	r0, [r7, #20]

		return xReturn;
 800561a:	697b      	ldr	r3, [r7, #20]
	}
 800561c:	4618      	mov	r0, r3
 800561e:	3718      	adds	r7, #24
 8005620:	46bd      	mov	sp, r7
 8005622:	bd80      	pop	{r7, pc}
 8005624:	080055a1 	.word	0x080055a1

08005628 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005628:	b480      	push	{r7}
 800562a:	b083      	sub	sp, #12
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f103 0208 	add.w	r2, r3, #8
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005640:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f103 0208 	add.w	r2, r3, #8
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	f103 0208 	add.w	r2, r3, #8
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800565c:	bf00      	nop
 800565e:	370c      	adds	r7, #12
 8005660:	46bd      	mov	sp, r7
 8005662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005666:	4770      	bx	lr

08005668 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2200      	movs	r2, #0
 8005674:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005676:	bf00      	nop
 8005678:	370c      	adds	r7, #12
 800567a:	46bd      	mov	sp, r7
 800567c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005680:	4770      	bx	lr

08005682 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005682:	b480      	push	{r7}
 8005684:	b085      	sub	sp, #20
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	68fa      	ldr	r2, [r7, #12]
 8005696:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689a      	ldr	r2, [r3, #8]
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	687a      	ldr	r2, [r7, #4]
 80056b2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	1c5a      	adds	r2, r3, #1
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
}
 80056be:	bf00      	nop
 80056c0:	3714      	adds	r7, #20
 80056c2:	46bd      	mov	sp, r7
 80056c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c8:	4770      	bx	lr

080056ca <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056ca:	b480      	push	{r7}
 80056cc:	b085      	sub	sp, #20
 80056ce:	af00      	add	r7, sp, #0
 80056d0:	6078      	str	r0, [r7, #4]
 80056d2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80056e0:	d103      	bne.n	80056ea <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	60fb      	str	r3, [r7, #12]
 80056e8:	e00c      	b.n	8005704 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	3308      	adds	r3, #8
 80056ee:	60fb      	str	r3, [r7, #12]
 80056f0:	e002      	b.n	80056f8 <vListInsert+0x2e>
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	685b      	ldr	r3, [r3, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	68ba      	ldr	r2, [r7, #8]
 8005700:	429a      	cmp	r2, r3
 8005702:	d2f6      	bcs.n	80056f2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	683a      	ldr	r2, [r7, #0]
 8005712:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	683a      	ldr	r2, [r7, #0]
 800571e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	687a      	ldr	r2, [r7, #4]
 8005724:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	1c5a      	adds	r2, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	601a      	str	r2, [r3, #0]
}
 8005730:	bf00      	nop
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	691b      	ldr	r3, [r3, #16]
 8005748:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	685b      	ldr	r3, [r3, #4]
 800574e:	687a      	ldr	r2, [r7, #4]
 8005750:	6892      	ldr	r2, [r2, #8]
 8005752:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	687a      	ldr	r2, [r7, #4]
 800575a:	6852      	ldr	r2, [r2, #4]
 800575c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	429a      	cmp	r2, r3
 8005766:	d103      	bne.n	8005770 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	689a      	ldr	r2, [r3, #8]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	2200      	movs	r2, #0
 8005774:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	1e5a      	subs	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
}
 8005784:	4618      	mov	r0, r3
 8005786:	3714      	adds	r7, #20
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr

08005790 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
 8005798:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d10b      	bne.n	80057bc <xQueueGenericReset+0x2c>
	__asm volatile
 80057a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057a8:	f383 8811 	msr	BASEPRI, r3
 80057ac:	f3bf 8f6f 	isb	sy
 80057b0:	f3bf 8f4f 	dsb	sy
 80057b4:	60bb      	str	r3, [r7, #8]
}
 80057b6:	bf00      	nop
 80057b8:	bf00      	nop
 80057ba:	e7fd      	b.n	80057b8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80057bc:	f002 fc74 	bl	80080a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681a      	ldr	r2, [r3, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057c8:	68f9      	ldr	r1, [r7, #12]
 80057ca:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057cc:	fb01 f303 	mul.w	r3, r1, r3
 80057d0:	441a      	add	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2200      	movs	r2, #0
 80057da:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	681a      	ldr	r2, [r3, #0]
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681a      	ldr	r2, [r3, #0]
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ec:	3b01      	subs	r3, #1
 80057ee:	68f9      	ldr	r1, [r7, #12]
 80057f0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80057f2:	fb01 f303 	mul.w	r3, r1, r3
 80057f6:	441a      	add	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	22ff      	movs	r2, #255	@ 0xff
 8005800:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	22ff      	movs	r2, #255	@ 0xff
 8005808:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d114      	bne.n	800583c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	691b      	ldr	r3, [r3, #16]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d01a      	beq.n	8005850 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	3310      	adds	r3, #16
 800581e:	4618      	mov	r0, r3
 8005820:	f001 fb66 	bl	8006ef0 <xTaskRemoveFromEventList>
 8005824:	4603      	mov	r3, r0
 8005826:	2b00      	cmp	r3, #0
 8005828:	d012      	beq.n	8005850 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800582a:	4b0d      	ldr	r3, [pc, #52]	@ (8005860 <xQueueGenericReset+0xd0>)
 800582c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	f3bf 8f4f 	dsb	sy
 8005836:	f3bf 8f6f 	isb	sy
 800583a:	e009      	b.n	8005850 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	3310      	adds	r3, #16
 8005840:	4618      	mov	r0, r3
 8005842:	f7ff fef1 	bl	8005628 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	3324      	adds	r3, #36	@ 0x24
 800584a:	4618      	mov	r0, r3
 800584c:	f7ff feec 	bl	8005628 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005850:	f002 fc5c 	bl	800810c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005854:	2301      	movs	r3, #1
}
 8005856:	4618      	mov	r0, r3
 8005858:	3710      	adds	r7, #16
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	e000ed04 	.word	0xe000ed04

08005864 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005864:	b580      	push	{r7, lr}
 8005866:	b08e      	sub	sp, #56	@ 0x38
 8005868:	af02      	add	r7, sp, #8
 800586a:	60f8      	str	r0, [r7, #12]
 800586c:	60b9      	str	r1, [r7, #8]
 800586e:	607a      	str	r2, [r7, #4]
 8005870:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d10b      	bne.n	8005890 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800588a:	bf00      	nop
 800588c:	bf00      	nop
 800588e:	e7fd      	b.n	800588c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d10b      	bne.n	80058ae <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589a:	f383 8811 	msr	BASEPRI, r3
 800589e:	f3bf 8f6f 	isb	sy
 80058a2:	f3bf 8f4f 	dsb	sy
 80058a6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80058a8:	bf00      	nop
 80058aa:	bf00      	nop
 80058ac:	e7fd      	b.n	80058aa <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d002      	beq.n	80058ba <xQueueGenericCreateStatic+0x56>
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d001      	beq.n	80058be <xQueueGenericCreateStatic+0x5a>
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <xQueueGenericCreateStatic+0x5c>
 80058be:	2300      	movs	r3, #0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d10b      	bne.n	80058dc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80058c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c8:	f383 8811 	msr	BASEPRI, r3
 80058cc:	f3bf 8f6f 	isb	sy
 80058d0:	f3bf 8f4f 	dsb	sy
 80058d4:	623b      	str	r3, [r7, #32]
}
 80058d6:	bf00      	nop
 80058d8:	bf00      	nop
 80058da:	e7fd      	b.n	80058d8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d102      	bne.n	80058e8 <xQueueGenericCreateStatic+0x84>
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <xQueueGenericCreateStatic+0x88>
 80058e8:	2301      	movs	r3, #1
 80058ea:	e000      	b.n	80058ee <xQueueGenericCreateStatic+0x8a>
 80058ec:	2300      	movs	r3, #0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10b      	bne.n	800590a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80058f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058f6:	f383 8811 	msr	BASEPRI, r3
 80058fa:	f3bf 8f6f 	isb	sy
 80058fe:	f3bf 8f4f 	dsb	sy
 8005902:	61fb      	str	r3, [r7, #28]
}
 8005904:	bf00      	nop
 8005906:	bf00      	nop
 8005908:	e7fd      	b.n	8005906 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800590a:	2350      	movs	r3, #80	@ 0x50
 800590c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	2b50      	cmp	r3, #80	@ 0x50
 8005912:	d00b      	beq.n	800592c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005918:	f383 8811 	msr	BASEPRI, r3
 800591c:	f3bf 8f6f 	isb	sy
 8005920:	f3bf 8f4f 	dsb	sy
 8005924:	61bb      	str	r3, [r7, #24]
}
 8005926:	bf00      	nop
 8005928:	bf00      	nop
 800592a:	e7fd      	b.n	8005928 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800592c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005932:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d00d      	beq.n	8005954 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800593a:	2201      	movs	r2, #1
 800593c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005940:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	4613      	mov	r3, r2
 800594a:	687a      	ldr	r2, [r7, #4]
 800594c:	68b9      	ldr	r1, [r7, #8]
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f000 f840 	bl	80059d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005954:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005956:	4618      	mov	r0, r3
 8005958:	3730      	adds	r7, #48	@ 0x30
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800595e:	b580      	push	{r7, lr}
 8005960:	b08a      	sub	sp, #40	@ 0x28
 8005962:	af02      	add	r7, sp, #8
 8005964:	60f8      	str	r0, [r7, #12]
 8005966:	60b9      	str	r1, [r7, #8]
 8005968:	4613      	mov	r3, r2
 800596a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d10b      	bne.n	800598a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005972:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	613b      	str	r3, [r7, #16]
}
 8005984:	bf00      	nop
 8005986:	bf00      	nop
 8005988:	e7fd      	b.n	8005986 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	fb02 f303 	mul.w	r3, r2, r3
 8005992:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005994:	69fb      	ldr	r3, [r7, #28]
 8005996:	3350      	adds	r3, #80	@ 0x50
 8005998:	4618      	mov	r0, r3
 800599a:	f002 fca7 	bl	80082ec <pvPortMalloc>
 800599e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059a0:	69bb      	ldr	r3, [r7, #24]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d011      	beq.n	80059ca <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059a6:	69bb      	ldr	r3, [r7, #24]
 80059a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	3350      	adds	r3, #80	@ 0x50
 80059ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80059b0:	69bb      	ldr	r3, [r7, #24]
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80059b8:	79fa      	ldrb	r2, [r7, #7]
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	4613      	mov	r3, r2
 80059c0:	697a      	ldr	r2, [r7, #20]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f805 	bl	80059d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059ca:	69bb      	ldr	r3, [r7, #24]
	}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3720      	adds	r7, #32
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b084      	sub	sp, #16
 80059d8:	af00      	add	r7, sp, #0
 80059da:	60f8      	str	r0, [r7, #12]
 80059dc:	60b9      	str	r1, [r7, #8]
 80059de:	607a      	str	r2, [r7, #4]
 80059e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d103      	bne.n	80059f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80059e8:	69bb      	ldr	r3, [r7, #24]
 80059ea:	69ba      	ldr	r2, [r7, #24]
 80059ec:	601a      	str	r2, [r3, #0]
 80059ee:	e002      	b.n	80059f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80059f0:	69bb      	ldr	r3, [r7, #24]
 80059f2:	687a      	ldr	r2, [r7, #4]
 80059f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059fc:	69bb      	ldr	r3, [r7, #24]
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a02:	2101      	movs	r1, #1
 8005a04:	69b8      	ldr	r0, [r7, #24]
 8005a06:	f7ff fec3 	bl	8005790 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a0a:	69bb      	ldr	r3, [r7, #24]
 8005a0c:	78fa      	ldrb	r2, [r7, #3]
 8005a0e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a12:	bf00      	nop
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}

08005a1a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8005a1a:	b580      	push	{r7, lr}
 8005a1c:	b082      	sub	sp, #8
 8005a1e:	af00      	add	r7, sp, #0
 8005a20:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d00e      	beq.n	8005a46 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2200      	movs	r2, #0
 8005a38:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2200      	movs	r2, #0
 8005a3e:	2100      	movs	r1, #0
 8005a40:	6878      	ldr	r0, [r7, #4]
 8005a42:	f000 f8a3 	bl	8005b8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005a46:	bf00      	nop
 8005a48:	3708      	adds	r7, #8
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	4603      	mov	r3, r0
 8005a56:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	617b      	str	r3, [r7, #20]
 8005a5c:	2300      	movs	r3, #0
 8005a5e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	461a      	mov	r2, r3
 8005a64:	6939      	ldr	r1, [r7, #16]
 8005a66:	6978      	ldr	r0, [r7, #20]
 8005a68:	f7ff ff79 	bl	800595e <xQueueGenericCreate>
 8005a6c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005a6e:	68f8      	ldr	r0, [r7, #12]
 8005a70:	f7ff ffd3 	bl	8005a1a <prvInitialiseMutex>

		return xNewQueue;
 8005a74:	68fb      	ldr	r3, [r7, #12]
	}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}

08005a7e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005a7e:	b580      	push	{r7, lr}
 8005a80:	b088      	sub	sp, #32
 8005a82:	af02      	add	r7, sp, #8
 8005a84:	4603      	mov	r3, r0
 8005a86:	6039      	str	r1, [r7, #0]
 8005a88:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	2300      	movs	r3, #0
 8005a90:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005a92:	79fb      	ldrb	r3, [r7, #7]
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2200      	movs	r2, #0
 8005a9a:	6939      	ldr	r1, [r7, #16]
 8005a9c:	6978      	ldr	r0, [r7, #20]
 8005a9e:	f7ff fee1 	bl	8005864 <xQueueGenericCreateStatic>
 8005aa2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005aa4:	68f8      	ldr	r0, [r7, #12]
 8005aa6:	f7ff ffb8 	bl	8005a1a <prvInitialiseMutex>

		return xNewQueue;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
	}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}

08005ab4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005ab4:	b590      	push	{r4, r7, lr}
 8005ab6:	b087      	sub	sp, #28
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005ac0:	693b      	ldr	r3, [r7, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d10b      	bne.n	8005ade <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 8005ac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aca:	f383 8811 	msr	BASEPRI, r3
 8005ace:	f3bf 8f6f 	isb	sy
 8005ad2:	f3bf 8f4f 	dsb	sy
 8005ad6:	60fb      	str	r3, [r7, #12]
}
 8005ad8:	bf00      	nop
 8005ada:	bf00      	nop
 8005adc:	e7fd      	b.n	8005ada <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	689c      	ldr	r4, [r3, #8]
 8005ae2:	f001 fc2f 	bl	8007344 <xTaskGetCurrentTaskHandle>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	429c      	cmp	r4, r3
 8005aea:	d111      	bne.n	8005b10 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	68db      	ldr	r3, [r3, #12]
 8005af0:	1e5a      	subs	r2, r3, #1
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005af6:	693b      	ldr	r3, [r7, #16]
 8005af8:	68db      	ldr	r3, [r3, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d105      	bne.n	8005b0a <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005afe:	2300      	movs	r3, #0
 8005b00:	2200      	movs	r2, #0
 8005b02:	2100      	movs	r1, #0
 8005b04:	6938      	ldr	r0, [r7, #16]
 8005b06:	f000 f841 	bl	8005b8c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	617b      	str	r3, [r7, #20]
 8005b0e:	e001      	b.n	8005b14 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8005b10:	2300      	movs	r3, #0
 8005b12:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8005b14:	697b      	ldr	r3, [r7, #20]
	}
 8005b16:	4618      	mov	r0, r3
 8005b18:	371c      	adds	r7, #28
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	bd90      	pop	{r4, r7, pc}

08005b1e <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8005b1e:	b590      	push	{r4, r7, lr}
 8005b20:	b087      	sub	sp, #28
 8005b22:	af00      	add	r7, sp, #0
 8005b24:	6078      	str	r0, [r7, #4]
 8005b26:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d10b      	bne.n	8005b4a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8005b32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b36:	f383 8811 	msr	BASEPRI, r3
 8005b3a:	f3bf 8f6f 	isb	sy
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	60fb      	str	r3, [r7, #12]
}
 8005b44:	bf00      	nop
 8005b46:	bf00      	nop
 8005b48:	e7fd      	b.n	8005b46 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005b4a:	693b      	ldr	r3, [r7, #16]
 8005b4c:	689c      	ldr	r4, [r3, #8]
 8005b4e:	f001 fbf9 	bl	8007344 <xTaskGetCurrentTaskHandle>
 8005b52:	4603      	mov	r3, r0
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d107      	bne.n	8005b68 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	68db      	ldr	r3, [r3, #12]
 8005b5c:	1c5a      	adds	r2, r3, #1
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8005b62:	2301      	movs	r3, #1
 8005b64:	617b      	str	r3, [r7, #20]
 8005b66:	e00c      	b.n	8005b82 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005b68:	6839      	ldr	r1, [r7, #0]
 8005b6a:	6938      	ldr	r0, [r7, #16]
 8005b6c:	f000 fa90 	bl	8006090 <xQueueSemaphoreTake>
 8005b70:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d004      	beq.n	8005b82 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005b78:	693b      	ldr	r3, [r7, #16]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	1c5a      	adds	r2, r3, #1
 8005b7e:	693b      	ldr	r3, [r7, #16]
 8005b80:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005b82:	697b      	ldr	r3, [r7, #20]
	}
 8005b84:	4618      	mov	r0, r3
 8005b86:	371c      	adds	r7, #28
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd90      	pop	{r4, r7, pc}

08005b8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b08e      	sub	sp, #56	@ 0x38
 8005b90:	af00      	add	r7, sp, #0
 8005b92:	60f8      	str	r0, [r7, #12]
 8005b94:	60b9      	str	r1, [r7, #8]
 8005b96:	607a      	str	r2, [r7, #4]
 8005b98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b9a:	2300      	movs	r3, #0
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xQueueGenericSend+0x34>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <xQueueGenericSend+0x42>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <xQueueGenericSend+0x46>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <xQueueGenericSend+0x48>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <xQueueGenericSend+0x64>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d103      	bne.n	8005bfe <xQueueGenericSend+0x72>
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <xQueueGenericSend+0x76>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <xQueueGenericSend+0x78>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <xQueueGenericSend+0x94>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c20:	f001 fba0 	bl	8007364 <xTaskGetSchedulerState>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <xQueueGenericSend+0xa4>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d101      	bne.n	8005c34 <xQueueGenericSend+0xa8>
 8005c30:	2301      	movs	r3, #1
 8005c32:	e000      	b.n	8005c36 <xQueueGenericSend+0xaa>
 8005c34:	2300      	movs	r3, #0
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d10b      	bne.n	8005c52 <xQueueGenericSend+0xc6>
	__asm volatile
 8005c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c3e:	f383 8811 	msr	BASEPRI, r3
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	f3bf 8f4f 	dsb	sy
 8005c4a:	61fb      	str	r3, [r7, #28]
}
 8005c4c:	bf00      	nop
 8005c4e:	bf00      	nop
 8005c50:	e7fd      	b.n	8005c4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005c52:	f002 fa29 	bl	80080a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d302      	bcc.n	8005c68 <xQueueGenericSend+0xdc>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b02      	cmp	r3, #2
 8005c66:	d129      	bne.n	8005cbc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c68:	683a      	ldr	r2, [r7, #0]
 8005c6a:	68b9      	ldr	r1, [r7, #8]
 8005c6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c6e:	f000 fb37 	bl	80062e0 <prvCopyDataToQueue>
 8005c72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d010      	beq.n	8005c9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7e:	3324      	adds	r3, #36	@ 0x24
 8005c80:	4618      	mov	r0, r3
 8005c82:	f001 f935 	bl	8006ef0 <xTaskRemoveFromEventList>
 8005c86:	4603      	mov	r3, r0
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d013      	beq.n	8005cb4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d8c <xQueueGenericSend+0x200>)
 8005c8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c92:	601a      	str	r2, [r3, #0]
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	e00a      	b.n	8005cb4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d007      	beq.n	8005cb4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005ca4:	4b39      	ldr	r3, [pc, #228]	@ (8005d8c <xQueueGenericSend+0x200>)
 8005ca6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005caa:	601a      	str	r2, [r3, #0]
 8005cac:	f3bf 8f4f 	dsb	sy
 8005cb0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005cb4:	f002 fa2a 	bl	800810c <vPortExitCritical>
				return pdPASS;
 8005cb8:	2301      	movs	r3, #1
 8005cba:	e063      	b.n	8005d84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d103      	bne.n	8005cca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005cc2:	f002 fa23 	bl	800810c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	e05c      	b.n	8005d84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005cca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d106      	bne.n	8005cde <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005cd0:	f107 0314 	add.w	r3, r7, #20
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f001 f9d3 	bl	8007080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005cde:	f002 fa15 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ce2:	f000 fe99 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ce6:	f002 f9df 	bl	80080a8 <vPortEnterCritical>
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005cf0:	b25b      	sxtb	r3, r3
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005cf6:	d103      	bne.n	8005d00 <xQueueGenericSend+0x174>
 8005cf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005d00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005d06:	b25b      	sxtb	r3, r3
 8005d08:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005d0c:	d103      	bne.n	8005d16 <xQueueGenericSend+0x18a>
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d10:	2200      	movs	r2, #0
 8005d12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005d16:	f002 f9f9 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005d1a:	1d3a      	adds	r2, r7, #4
 8005d1c:	f107 0314 	add.w	r3, r7, #20
 8005d20:	4611      	mov	r1, r2
 8005d22:	4618      	mov	r0, r3
 8005d24:	f001 f9c2 	bl	80070ac <xTaskCheckForTimeOut>
 8005d28:	4603      	mov	r3, r0
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d124      	bne.n	8005d78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005d2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d30:	f000 fbce 	bl	80064d0 <prvIsQueueFull>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d018      	beq.n	8005d6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d3c:	3310      	adds	r3, #16
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	4611      	mov	r1, r2
 8005d42:	4618      	mov	r0, r3
 8005d44:	f001 f844 	bl	8006dd0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005d48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d4a:	f000 fb59 	bl	8006400 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005d4e:	f000 fe71 	bl	8006a34 <xTaskResumeAll>
 8005d52:	4603      	mov	r3, r0
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f47f af7c 	bne.w	8005c52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005d5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005d8c <xQueueGenericSend+0x200>)
 8005d5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d60:	601a      	str	r2, [r3, #0]
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	f3bf 8f6f 	isb	sy
 8005d6a:	e772      	b.n	8005c52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d6e:	f000 fb47 	bl	8006400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d72:	f000 fe5f 	bl	8006a34 <xTaskResumeAll>
 8005d76:	e76c      	b.n	8005c52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d7a:	f000 fb41 	bl	8006400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d7e:	f000 fe59 	bl	8006a34 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3738      	adds	r7, #56	@ 0x38
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}
 8005d8c:	e000ed04 	.word	0xe000ed04

08005d90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b090      	sub	sp, #64	@ 0x40
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	60f8      	str	r0, [r7, #12]
 8005d98:	60b9      	str	r1, [r7, #8]
 8005d9a:	607a      	str	r2, [r7, #4]
 8005d9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005da2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10b      	bne.n	8005dc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d103      	bne.n	8005dce <xQueueGenericSendFromISR+0x3e>
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d101      	bne.n	8005dd2 <xQueueGenericSendFromISR+0x42>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	e000      	b.n	8005dd4 <xQueueGenericSendFromISR+0x44>
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d10b      	bne.n	8005df0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005dd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ddc:	f383 8811 	msr	BASEPRI, r3
 8005de0:	f3bf 8f6f 	isb	sy
 8005de4:	f3bf 8f4f 	dsb	sy
 8005de8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005dea:	bf00      	nop
 8005dec:	bf00      	nop
 8005dee:	e7fd      	b.n	8005dec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	d103      	bne.n	8005dfe <xQueueGenericSendFromISR+0x6e>
 8005df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d101      	bne.n	8005e02 <xQueueGenericSendFromISR+0x72>
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e000      	b.n	8005e04 <xQueueGenericSendFromISR+0x74>
 8005e02:	2300      	movs	r3, #0
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d10b      	bne.n	8005e20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005e08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e0c:	f383 8811 	msr	BASEPRI, r3
 8005e10:	f3bf 8f6f 	isb	sy
 8005e14:	f3bf 8f4f 	dsb	sy
 8005e18:	623b      	str	r3, [r7, #32]
}
 8005e1a:	bf00      	nop
 8005e1c:	bf00      	nop
 8005e1e:	e7fd      	b.n	8005e1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005e20:	f002 fa22 	bl	8008268 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005e24:	f3ef 8211 	mrs	r2, BASEPRI
 8005e28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2c:	f383 8811 	msr	BASEPRI, r3
 8005e30:	f3bf 8f6f 	isb	sy
 8005e34:	f3bf 8f4f 	dsb	sy
 8005e38:	61fa      	str	r2, [r7, #28]
 8005e3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005e3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005e3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005e40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005e44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005e48:	429a      	cmp	r2, r3
 8005e4a:	d302      	bcc.n	8005e52 <xQueueGenericSendFromISR+0xc2>
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	2b02      	cmp	r3, #2
 8005e50:	d12f      	bne.n	8005eb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005e52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	68b9      	ldr	r1, [r7, #8]
 8005e66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e68:	f000 fa3a 	bl	80062e0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005e74:	d112      	bne.n	8005e9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d016      	beq.n	8005eac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	3324      	adds	r3, #36	@ 0x24
 8005e82:	4618      	mov	r0, r3
 8005e84:	f001 f834 	bl	8006ef0 <xTaskRemoveFromEventList>
 8005e88:	4603      	mov	r3, r0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d00e      	beq.n	8005eac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00b      	beq.n	8005eac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	2201      	movs	r2, #1
 8005e98:	601a      	str	r2, [r3, #0]
 8005e9a:	e007      	b.n	8005eac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ea0:	3301      	adds	r3, #1
 8005ea2:	b2db      	uxtb	r3, r3
 8005ea4:	b25a      	sxtb	r2, r3
 8005ea6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ea8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005eac:	2301      	movs	r3, #1
 8005eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005eb0:	e001      	b.n	8005eb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005ec0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	3740      	adds	r7, #64	@ 0x40
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	bd80      	pop	{r7, pc}

08005ecc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b08c      	sub	sp, #48	@ 0x30
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	60f8      	str	r0, [r7, #12]
 8005ed4:	60b9      	str	r1, [r7, #8]
 8005ed6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005ed8:	2300      	movs	r3, #0
 8005eda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ee0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10b      	bne.n	8005efe <xQueueReceive+0x32>
	__asm volatile
 8005ee6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	623b      	str	r3, [r7, #32]
}
 8005ef8:	bf00      	nop
 8005efa:	bf00      	nop
 8005efc:	e7fd      	b.n	8005efa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d103      	bne.n	8005f0c <xQueueReceive+0x40>
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d101      	bne.n	8005f10 <xQueueReceive+0x44>
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	e000      	b.n	8005f12 <xQueueReceive+0x46>
 8005f10:	2300      	movs	r3, #0
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d10b      	bne.n	8005f2e <xQueueReceive+0x62>
	__asm volatile
 8005f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f1a:	f383 8811 	msr	BASEPRI, r3
 8005f1e:	f3bf 8f6f 	isb	sy
 8005f22:	f3bf 8f4f 	dsb	sy
 8005f26:	61fb      	str	r3, [r7, #28]
}
 8005f28:	bf00      	nop
 8005f2a:	bf00      	nop
 8005f2c:	e7fd      	b.n	8005f2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005f2e:	f001 fa19 	bl	8007364 <xTaskGetSchedulerState>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d102      	bne.n	8005f3e <xQueueReceive+0x72>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d101      	bne.n	8005f42 <xQueueReceive+0x76>
 8005f3e:	2301      	movs	r3, #1
 8005f40:	e000      	b.n	8005f44 <xQueueReceive+0x78>
 8005f42:	2300      	movs	r3, #0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <xQueueReceive+0x94>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	61bb      	str	r3, [r7, #24]
}
 8005f5a:	bf00      	nop
 8005f5c:	bf00      	nop
 8005f5e:	e7fd      	b.n	8005f5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f60:	f002 f8a2 	bl	80080a8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d01f      	beq.n	8005fb0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f74:	f000 fa1e 	bl	80063b4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f7a:	1e5a      	subs	r2, r3, #1
 8005f7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d00f      	beq.n	8005fa8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8a:	3310      	adds	r3, #16
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 ffaf 	bl	8006ef0 <xTaskRemoveFromEventList>
 8005f92:	4603      	mov	r3, r0
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d007      	beq.n	8005fa8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f98:	4b3c      	ldr	r3, [pc, #240]	@ (800608c <xQueueReceive+0x1c0>)
 8005f9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	f3bf 8f4f 	dsb	sy
 8005fa4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005fa8:	f002 f8b0 	bl	800810c <vPortExitCritical>
				return pdPASS;
 8005fac:	2301      	movs	r3, #1
 8005fae:	e069      	b.n	8006084 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d103      	bne.n	8005fbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005fb6:	f002 f8a9 	bl	800810c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	e062      	b.n	8006084 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d106      	bne.n	8005fd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005fc4:	f107 0310 	add.w	r3, r7, #16
 8005fc8:	4618      	mov	r0, r3
 8005fca:	f001 f859 	bl	8007080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005fd2:	f002 f89b 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005fd6:	f000 fd1f 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005fda:	f002 f865 	bl	80080a8 <vPortEnterCritical>
 8005fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005fe4:	b25b      	sxtb	r3, r3
 8005fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fea:	d103      	bne.n	8005ff4 <xQueueReceive+0x128>
 8005fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fee:	2200      	movs	r2, #0
 8005ff0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ffa:	b25b      	sxtb	r3, r3
 8005ffc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006000:	d103      	bne.n	800600a <xQueueReceive+0x13e>
 8006002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800600a:	f002 f87f 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800600e:	1d3a      	adds	r2, r7, #4
 8006010:	f107 0310 	add.w	r3, r7, #16
 8006014:	4611      	mov	r1, r2
 8006016:	4618      	mov	r0, r3
 8006018:	f001 f848 	bl	80070ac <xTaskCheckForTimeOut>
 800601c:	4603      	mov	r3, r0
 800601e:	2b00      	cmp	r3, #0
 8006020:	d123      	bne.n	800606a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006024:	f000 fa3e 	bl	80064a4 <prvIsQueueEmpty>
 8006028:	4603      	mov	r3, r0
 800602a:	2b00      	cmp	r3, #0
 800602c:	d017      	beq.n	800605e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800602e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006030:	3324      	adds	r3, #36	@ 0x24
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4611      	mov	r1, r2
 8006036:	4618      	mov	r0, r3
 8006038:	f000 feca 	bl	8006dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800603c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800603e:	f000 f9df 	bl	8006400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006042:	f000 fcf7 	bl	8006a34 <xTaskResumeAll>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d189      	bne.n	8005f60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800604c:	4b0f      	ldr	r3, [pc, #60]	@ (800608c <xQueueReceive+0x1c0>)
 800604e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006052:	601a      	str	r2, [r3, #0]
 8006054:	f3bf 8f4f 	dsb	sy
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	e780      	b.n	8005f60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800605e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006060:	f000 f9ce 	bl	8006400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006064:	f000 fce6 	bl	8006a34 <xTaskResumeAll>
 8006068:	e77a      	b.n	8005f60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800606a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800606c:	f000 f9c8 	bl	8006400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006070:	f000 fce0 	bl	8006a34 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006074:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006076:	f000 fa15 	bl	80064a4 <prvIsQueueEmpty>
 800607a:	4603      	mov	r3, r0
 800607c:	2b00      	cmp	r3, #0
 800607e:	f43f af6f 	beq.w	8005f60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006082:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006084:	4618      	mov	r0, r3
 8006086:	3730      	adds	r7, #48	@ 0x30
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	e000ed04 	.word	0xe000ed04

08006090 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006090:	b580      	push	{r7, lr}
 8006092:	b08e      	sub	sp, #56	@ 0x38
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800609a:	2300      	movs	r3, #0
 800609c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80060a2:	2300      	movs	r3, #0
 80060a4:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80060a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d10b      	bne.n	80060c4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 80060ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b0:	f383 8811 	msr	BASEPRI, r3
 80060b4:	f3bf 8f6f 	isb	sy
 80060b8:	f3bf 8f4f 	dsb	sy
 80060bc:	623b      	str	r3, [r7, #32]
}
 80060be:	bf00      	nop
 80060c0:	bf00      	nop
 80060c2:	e7fd      	b.n	80060c0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80060c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d00b      	beq.n	80060e4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	61fb      	str	r3, [r7, #28]
}
 80060de:	bf00      	nop
 80060e0:	bf00      	nop
 80060e2:	e7fd      	b.n	80060e0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80060e4:	f001 f93e 	bl	8007364 <xTaskGetSchedulerState>
 80060e8:	4603      	mov	r3, r0
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d102      	bne.n	80060f4 <xQueueSemaphoreTake+0x64>
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	2b00      	cmp	r3, #0
 80060f2:	d101      	bne.n	80060f8 <xQueueSemaphoreTake+0x68>
 80060f4:	2301      	movs	r3, #1
 80060f6:	e000      	b.n	80060fa <xQueueSemaphoreTake+0x6a>
 80060f8:	2300      	movs	r3, #0
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10b      	bne.n	8006116 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	61bb      	str	r3, [r7, #24]
}
 8006110:	bf00      	nop
 8006112:	bf00      	nop
 8006114:	e7fd      	b.n	8006112 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006116:	f001 ffc7 	bl	80080a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800611a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800611c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800611e:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006122:	2b00      	cmp	r3, #0
 8006124:	d024      	beq.n	8006170 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	1e5a      	subs	r2, r3, #1
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800612e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d104      	bne.n	8006140 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006136:	f001 faa7 	bl	8007688 <pvTaskIncrementMutexHeldCount>
 800613a:	4602      	mov	r2, r0
 800613c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800613e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d00f      	beq.n	8006168 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006148:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800614a:	3310      	adds	r3, #16
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fecf 	bl	8006ef0 <xTaskRemoveFromEventList>
 8006152:	4603      	mov	r3, r0
 8006154:	2b00      	cmp	r3, #0
 8006156:	d007      	beq.n	8006168 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006158:	4b54      	ldr	r3, [pc, #336]	@ (80062ac <xQueueSemaphoreTake+0x21c>)
 800615a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800615e:	601a      	str	r2, [r3, #0]
 8006160:	f3bf 8f4f 	dsb	sy
 8006164:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006168:	f001 ffd0 	bl	800810c <vPortExitCritical>
				return pdPASS;
 800616c:	2301      	movs	r3, #1
 800616e:	e098      	b.n	80062a2 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d112      	bne.n	800619c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006176:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006178:	2b00      	cmp	r3, #0
 800617a:	d00b      	beq.n	8006194 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006180:	f383 8811 	msr	BASEPRI, r3
 8006184:	f3bf 8f6f 	isb	sy
 8006188:	f3bf 8f4f 	dsb	sy
 800618c:	617b      	str	r3, [r7, #20]
}
 800618e:	bf00      	nop
 8006190:	bf00      	nop
 8006192:	e7fd      	b.n	8006190 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006194:	f001 ffba 	bl	800810c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006198:	2300      	movs	r3, #0
 800619a:	e082      	b.n	80062a2 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800619c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d106      	bne.n	80061b0 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80061a2:	f107 030c 	add.w	r3, r7, #12
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 ff6a 	bl	8007080 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80061ac:	2301      	movs	r3, #1
 80061ae:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80061b0:	f001 ffac 	bl	800810c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80061b4:	f000 fc30 	bl	8006a18 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80061b8:	f001 ff76 	bl	80080a8 <vPortEnterCritical>
 80061bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80061c2:	b25b      	sxtb	r3, r3
 80061c4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061c8:	d103      	bne.n	80061d2 <xQueueSemaphoreTake+0x142>
 80061ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061cc:	2200      	movs	r2, #0
 80061ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80061d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80061d8:	b25b      	sxtb	r3, r3
 80061da:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80061de:	d103      	bne.n	80061e8 <xQueueSemaphoreTake+0x158>
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	2200      	movs	r2, #0
 80061e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80061e8:	f001 ff90 	bl	800810c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80061ec:	463a      	mov	r2, r7
 80061ee:	f107 030c 	add.w	r3, r7, #12
 80061f2:	4611      	mov	r1, r2
 80061f4:	4618      	mov	r0, r3
 80061f6:	f000 ff59 	bl	80070ac <xTaskCheckForTimeOut>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d132      	bne.n	8006266 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006200:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006202:	f000 f94f 	bl	80064a4 <prvIsQueueEmpty>
 8006206:	4603      	mov	r3, r0
 8006208:	2b00      	cmp	r3, #0
 800620a:	d026      	beq.n	800625a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d109      	bne.n	8006228 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006214:	f001 ff48 	bl	80080a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	4618      	mov	r0, r3
 800621e:	f001 f8bf 	bl	80073a0 <xTaskPriorityInherit>
 8006222:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006224:	f001 ff72 	bl	800810c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800622a:	3324      	adds	r3, #36	@ 0x24
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	4611      	mov	r1, r2
 8006230:	4618      	mov	r0, r3
 8006232:	f000 fdcd 	bl	8006dd0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006236:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006238:	f000 f8e2 	bl	8006400 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800623c:	f000 fbfa 	bl	8006a34 <xTaskResumeAll>
 8006240:	4603      	mov	r3, r0
 8006242:	2b00      	cmp	r3, #0
 8006244:	f47f af67 	bne.w	8006116 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006248:	4b18      	ldr	r3, [pc, #96]	@ (80062ac <xQueueSemaphoreTake+0x21c>)
 800624a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800624e:	601a      	str	r2, [r3, #0]
 8006250:	f3bf 8f4f 	dsb	sy
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	e75d      	b.n	8006116 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800625a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800625c:	f000 f8d0 	bl	8006400 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006260:	f000 fbe8 	bl	8006a34 <xTaskResumeAll>
 8006264:	e757      	b.n	8006116 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006266:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006268:	f000 f8ca 	bl	8006400 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800626c:	f000 fbe2 	bl	8006a34 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006270:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006272:	f000 f917 	bl	80064a4 <prvIsQueueEmpty>
 8006276:	4603      	mov	r3, r0
 8006278:	2b00      	cmp	r3, #0
 800627a:	f43f af4c 	beq.w	8006116 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800627e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006280:	2b00      	cmp	r3, #0
 8006282:	d00d      	beq.n	80062a0 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006284:	f001 ff10 	bl	80080a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006288:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800628a:	f000 f811 	bl	80062b0 <prvGetDisinheritPriorityAfterTimeout>
 800628e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006290:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006292:	689b      	ldr	r3, [r3, #8]
 8006294:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006296:	4618      	mov	r0, r3
 8006298:	f001 f95a 	bl	8007550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800629c:	f001 ff36 	bl	800810c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80062a0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3738      	adds	r7, #56	@ 0x38
 80062a6:	46bd      	mov	sp, r7
 80062a8:	bd80      	pop	{r7, pc}
 80062aa:	bf00      	nop
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80062b0:	b480      	push	{r7}
 80062b2:	b085      	sub	sp, #20
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d006      	beq.n	80062ce <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 80062ca:	60fb      	str	r3, [r7, #12]
 80062cc:	e001      	b.n	80062d2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80062ce:	2300      	movs	r3, #0
 80062d0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80062d2:	68fb      	ldr	r3, [r7, #12]
	}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80062ec:	2300      	movs	r3, #0
 80062ee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062f4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d10d      	bne.n	800631a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d14d      	bne.n	80063a2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	4618      	mov	r0, r3
 800630c:	f001 f8b0 	bl	8007470 <xTaskPriorityDisinherit>
 8006310:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	609a      	str	r2, [r3, #8]
 8006318:	e043      	b.n	80063a2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d119      	bne.n	8006354 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6858      	ldr	r0, [r3, #4]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006328:	461a      	mov	r2, r3
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	f005 fb28 	bl	800b980 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	685a      	ldr	r2, [r3, #4]
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006338:	441a      	add	r2, r3
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	685a      	ldr	r2, [r3, #4]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	689b      	ldr	r3, [r3, #8]
 8006346:	429a      	cmp	r2, r3
 8006348:	d32b      	bcc.n	80063a2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681a      	ldr	r2, [r3, #0]
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	605a      	str	r2, [r3, #4]
 8006352:	e026      	b.n	80063a2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	68d8      	ldr	r0, [r3, #12]
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800635c:	461a      	mov	r2, r3
 800635e:	68b9      	ldr	r1, [r7, #8]
 8006360:	f005 fb0e 	bl	800b980 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	68da      	ldr	r2, [r3, #12]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800636c:	425b      	negs	r3, r3
 800636e:	441a      	add	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	68da      	ldr	r2, [r3, #12]
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	429a      	cmp	r2, r3
 800637e:	d207      	bcs.n	8006390 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	689a      	ldr	r2, [r3, #8]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006388:	425b      	negs	r3, r3
 800638a:	441a      	add	r2, r3
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2b02      	cmp	r3, #2
 8006394:	d105      	bne.n	80063a2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d002      	beq.n	80063a2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	3b01      	subs	r3, #1
 80063a0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	1c5a      	adds	r2, r3, #1
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80063aa:	697b      	ldr	r3, [r7, #20]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3718      	adds	r7, #24
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b082      	sub	sp, #8
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d018      	beq.n	80063f8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	68da      	ldr	r2, [r3, #12]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063ce:	441a      	add	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	68da      	ldr	r2, [r3, #12]
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d303      	bcc.n	80063e8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68d9      	ldr	r1, [r3, #12]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f0:	461a      	mov	r2, r3
 80063f2:	6838      	ldr	r0, [r7, #0]
 80063f4:	f005 fac4 	bl	800b980 <memcpy>
	}
}
 80063f8:	bf00      	nop
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006408:	f001 fe4e 	bl	80080a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006412:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006414:	e011      	b.n	800643a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800641a:	2b00      	cmp	r3, #0
 800641c:	d012      	beq.n	8006444 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	3324      	adds	r3, #36	@ 0x24
 8006422:	4618      	mov	r0, r3
 8006424:	f000 fd64 	bl	8006ef0 <xTaskRemoveFromEventList>
 8006428:	4603      	mov	r3, r0
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800642e:	f000 fea1 	bl	8007174 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006432:	7bfb      	ldrb	r3, [r7, #15]
 8006434:	3b01      	subs	r3, #1
 8006436:	b2db      	uxtb	r3, r3
 8006438:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800643a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800643e:	2b00      	cmp	r3, #0
 8006440:	dce9      	bgt.n	8006416 <prvUnlockQueue+0x16>
 8006442:	e000      	b.n	8006446 <prvUnlockQueue+0x46>
					break;
 8006444:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	22ff      	movs	r2, #255	@ 0xff
 800644a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800644e:	f001 fe5d 	bl	800810c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006452:	f001 fe29 	bl	80080a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800645c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800645e:	e011      	b.n	8006484 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	691b      	ldr	r3, [r3, #16]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d012      	beq.n	800648e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	3310      	adds	r3, #16
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fd3f 	bl	8006ef0 <xTaskRemoveFromEventList>
 8006472:	4603      	mov	r3, r0
 8006474:	2b00      	cmp	r3, #0
 8006476:	d001      	beq.n	800647c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006478:	f000 fe7c 	bl	8007174 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800647c:	7bbb      	ldrb	r3, [r7, #14]
 800647e:	3b01      	subs	r3, #1
 8006480:	b2db      	uxtb	r3, r3
 8006482:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006484:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006488:	2b00      	cmp	r3, #0
 800648a:	dce9      	bgt.n	8006460 <prvUnlockQueue+0x60>
 800648c:	e000      	b.n	8006490 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800648e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	22ff      	movs	r2, #255	@ 0xff
 8006494:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006498:	f001 fe38 	bl	800810c <vPortExitCritical>
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064ac:	f001 fdfc 	bl	80080a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d102      	bne.n	80064be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80064b8:	2301      	movs	r3, #1
 80064ba:	60fb      	str	r3, [r7, #12]
 80064bc:	e001      	b.n	80064c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80064be:	2300      	movs	r3, #0
 80064c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064c2:	f001 fe23 	bl	800810c <vPortExitCritical>

	return xReturn;
 80064c6:	68fb      	ldr	r3, [r7, #12]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3710      	adds	r7, #16
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b084      	sub	sp, #16
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80064d8:	f001 fde6 	bl	80080a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d102      	bne.n	80064ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80064e8:	2301      	movs	r3, #1
 80064ea:	60fb      	str	r3, [r7, #12]
 80064ec:	e001      	b.n	80064f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80064ee:	2300      	movs	r3, #0
 80064f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80064f2:	f001 fe0b 	bl	800810c <vPortExitCritical>

	return xReturn;
 80064f6:	68fb      	ldr	r3, [r7, #12]
}
 80064f8:	4618      	mov	r0, r3
 80064fa:	3710      	adds	r7, #16
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bd80      	pop	{r7, pc}

08006500 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006500:	b480      	push	{r7}
 8006502:	b085      	sub	sp, #20
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800650a:	2300      	movs	r3, #0
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	e014      	b.n	800653a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006510:	4a0f      	ldr	r2, [pc, #60]	@ (8006550 <vQueueAddToRegistry+0x50>)
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10b      	bne.n	8006534 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800651c:	490c      	ldr	r1, [pc, #48]	@ (8006550 <vQueueAddToRegistry+0x50>)
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006526:	4a0a      	ldr	r2, [pc, #40]	@ (8006550 <vQueueAddToRegistry+0x50>)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	00db      	lsls	r3, r3, #3
 800652c:	4413      	add	r3, r2
 800652e:	687a      	ldr	r2, [r7, #4]
 8006530:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006532:	e006      	b.n	8006542 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2b07      	cmp	r3, #7
 800653e:	d9e7      	bls.n	8006510 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006540:	bf00      	nop
 8006542:	bf00      	nop
 8006544:	3714      	adds	r7, #20
 8006546:	46bd      	mov	sp, r7
 8006548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654c:	4770      	bx	lr
 800654e:	bf00      	nop
 8006550:	20006688 	.word	0x20006688

08006554 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006554:	b580      	push	{r7, lr}
 8006556:	b086      	sub	sp, #24
 8006558:	af00      	add	r7, sp, #0
 800655a:	60f8      	str	r0, [r7, #12]
 800655c:	60b9      	str	r1, [r7, #8]
 800655e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006564:	f001 fda0 	bl	80080a8 <vPortEnterCritical>
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800656e:	b25b      	sxtb	r3, r3
 8006570:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006574:	d103      	bne.n	800657e <vQueueWaitForMessageRestricted+0x2a>
 8006576:	697b      	ldr	r3, [r7, #20]
 8006578:	2200      	movs	r2, #0
 800657a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006584:	b25b      	sxtb	r3, r3
 8006586:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800658a:	d103      	bne.n	8006594 <vQueueWaitForMessageRestricted+0x40>
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	2200      	movs	r2, #0
 8006590:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006594:	f001 fdba 	bl	800810c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800659c:	2b00      	cmp	r3, #0
 800659e:	d106      	bne.n	80065ae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	3324      	adds	r3, #36	@ 0x24
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	68b9      	ldr	r1, [r7, #8]
 80065a8:	4618      	mov	r0, r3
 80065aa:	f000 fc75 	bl	8006e98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80065ae:	6978      	ldr	r0, [r7, #20]
 80065b0:	f7ff ff26 	bl	8006400 <prvUnlockQueue>
	}
 80065b4:	bf00      	nop
 80065b6:	3718      	adds	r7, #24
 80065b8:	46bd      	mov	sp, r7
 80065ba:	bd80      	pop	{r7, pc}

080065bc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80065bc:	b580      	push	{r7, lr}
 80065be:	b08e      	sub	sp, #56	@ 0x38
 80065c0:	af04      	add	r7, sp, #16
 80065c2:	60f8      	str	r0, [r7, #12]
 80065c4:	60b9      	str	r1, [r7, #8]
 80065c6:	607a      	str	r2, [r7, #4]
 80065c8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80065ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d10b      	bne.n	80065e8 <xTaskCreateStatic+0x2c>
	__asm volatile
 80065d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065d4:	f383 8811 	msr	BASEPRI, r3
 80065d8:	f3bf 8f6f 	isb	sy
 80065dc:	f3bf 8f4f 	dsb	sy
 80065e0:	623b      	str	r3, [r7, #32]
}
 80065e2:	bf00      	nop
 80065e4:	bf00      	nop
 80065e6:	e7fd      	b.n	80065e4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80065e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10b      	bne.n	8006606 <xTaskCreateStatic+0x4a>
	__asm volatile
 80065ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f2:	f383 8811 	msr	BASEPRI, r3
 80065f6:	f3bf 8f6f 	isb	sy
 80065fa:	f3bf 8f4f 	dsb	sy
 80065fe:	61fb      	str	r3, [r7, #28]
}
 8006600:	bf00      	nop
 8006602:	bf00      	nop
 8006604:	e7fd      	b.n	8006602 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006606:	23a8      	movs	r3, #168	@ 0xa8
 8006608:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	2ba8      	cmp	r3, #168	@ 0xa8
 800660e:	d00b      	beq.n	8006628 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006610:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006614:	f383 8811 	msr	BASEPRI, r3
 8006618:	f3bf 8f6f 	isb	sy
 800661c:	f3bf 8f4f 	dsb	sy
 8006620:	61bb      	str	r3, [r7, #24]
}
 8006622:	bf00      	nop
 8006624:	bf00      	nop
 8006626:	e7fd      	b.n	8006624 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006628:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800662a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662c:	2b00      	cmp	r3, #0
 800662e:	d01e      	beq.n	800666e <xTaskCreateStatic+0xb2>
 8006630:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006632:	2b00      	cmp	r3, #0
 8006634:	d01b      	beq.n	800666e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006638:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800663a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800663c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800663e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006642:	2202      	movs	r2, #2
 8006644:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006648:	2300      	movs	r3, #0
 800664a:	9303      	str	r3, [sp, #12]
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	9302      	str	r3, [sp, #8]
 8006650:	f107 0314 	add.w	r3, r7, #20
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006658:	9300      	str	r3, [sp, #0]
 800665a:	683b      	ldr	r3, [r7, #0]
 800665c:	687a      	ldr	r2, [r7, #4]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	68f8      	ldr	r0, [r7, #12]
 8006662:	f000 f851 	bl	8006708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006666:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006668:	f000 f8f6 	bl	8006858 <prvAddNewTaskToReadyList>
 800666c:	e001      	b.n	8006672 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006672:	697b      	ldr	r3, [r7, #20]
	}
 8006674:	4618      	mov	r0, r3
 8006676:	3728      	adds	r7, #40	@ 0x28
 8006678:	46bd      	mov	sp, r7
 800667a:	bd80      	pop	{r7, pc}

0800667c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800667c:	b580      	push	{r7, lr}
 800667e:	b08c      	sub	sp, #48	@ 0x30
 8006680:	af04      	add	r7, sp, #16
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	603b      	str	r3, [r7, #0]
 8006688:	4613      	mov	r3, r2
 800668a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800668c:	88fb      	ldrh	r3, [r7, #6]
 800668e:	009b      	lsls	r3, r3, #2
 8006690:	4618      	mov	r0, r3
 8006692:	f001 fe2b 	bl	80082ec <pvPortMalloc>
 8006696:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d00e      	beq.n	80066bc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800669e:	20a8      	movs	r0, #168	@ 0xa8
 80066a0:	f001 fe24 	bl	80082ec <pvPortMalloc>
 80066a4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066a6:	69fb      	ldr	r3, [r7, #28]
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d003      	beq.n	80066b4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80066ac:	69fb      	ldr	r3, [r7, #28]
 80066ae:	697a      	ldr	r2, [r7, #20]
 80066b0:	631a      	str	r2, [r3, #48]	@ 0x30
 80066b2:	e005      	b.n	80066c0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80066b4:	6978      	ldr	r0, [r7, #20]
 80066b6:	f001 fee7 	bl	8008488 <vPortFree>
 80066ba:	e001      	b.n	80066c0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80066bc:	2300      	movs	r3, #0
 80066be:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d017      	beq.n	80066f6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80066c6:	69fb      	ldr	r3, [r7, #28]
 80066c8:	2200      	movs	r2, #0
 80066ca:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80066ce:	88fa      	ldrh	r2, [r7, #6]
 80066d0:	2300      	movs	r3, #0
 80066d2:	9303      	str	r3, [sp, #12]
 80066d4:	69fb      	ldr	r3, [r7, #28]
 80066d6:	9302      	str	r3, [sp, #8]
 80066d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066da:	9301      	str	r3, [sp, #4]
 80066dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	683b      	ldr	r3, [r7, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f80f 	bl	8006708 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066ea:	69f8      	ldr	r0, [r7, #28]
 80066ec:	f000 f8b4 	bl	8006858 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80066f0:	2301      	movs	r3, #1
 80066f2:	61bb      	str	r3, [r7, #24]
 80066f4:	e002      	b.n	80066fc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80066f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80066fa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80066fc:	69bb      	ldr	r3, [r7, #24]
	}
 80066fe:	4618      	mov	r0, r3
 8006700:	3720      	adds	r7, #32
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
	...

08006708 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006708:	b580      	push	{r7, lr}
 800670a:	b088      	sub	sp, #32
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
 8006714:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006718:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	009b      	lsls	r3, r3, #2
 800671e:	461a      	mov	r2, r3
 8006720:	21a5      	movs	r1, #165	@ 0xa5
 8006722:	f005 f89b 	bl	800b85c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006728:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006730:	3b01      	subs	r3, #1
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	4413      	add	r3, r2
 8006736:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006738:	69bb      	ldr	r3, [r7, #24]
 800673a:	f023 0307 	bic.w	r3, r3, #7
 800673e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006740:	69bb      	ldr	r3, [r7, #24]
 8006742:	f003 0307 	and.w	r3, r3, #7
 8006746:	2b00      	cmp	r3, #0
 8006748:	d00b      	beq.n	8006762 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800674a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674e:	f383 8811 	msr	BASEPRI, r3
 8006752:	f3bf 8f6f 	isb	sy
 8006756:	f3bf 8f4f 	dsb	sy
 800675a:	617b      	str	r3, [r7, #20]
}
 800675c:	bf00      	nop
 800675e:	bf00      	nop
 8006760:	e7fd      	b.n	800675e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	2b00      	cmp	r3, #0
 8006766:	d01f      	beq.n	80067a8 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006768:	2300      	movs	r3, #0
 800676a:	61fb      	str	r3, [r7, #28]
 800676c:	e012      	b.n	8006794 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	69fb      	ldr	r3, [r7, #28]
 8006772:	4413      	add	r3, r2
 8006774:	7819      	ldrb	r1, [r3, #0]
 8006776:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006778:	69fb      	ldr	r3, [r7, #28]
 800677a:	4413      	add	r3, r2
 800677c:	3334      	adds	r3, #52	@ 0x34
 800677e:	460a      	mov	r2, r1
 8006780:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	69fb      	ldr	r3, [r7, #28]
 8006786:	4413      	add	r3, r2
 8006788:	781b      	ldrb	r3, [r3, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d006      	beq.n	800679c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800678e:	69fb      	ldr	r3, [r7, #28]
 8006790:	3301      	adds	r3, #1
 8006792:	61fb      	str	r3, [r7, #28]
 8006794:	69fb      	ldr	r3, [r7, #28]
 8006796:	2b0f      	cmp	r3, #15
 8006798:	d9e9      	bls.n	800676e <prvInitialiseNewTask+0x66>
 800679a:	e000      	b.n	800679e <prvInitialiseNewTask+0x96>
			{
				break;
 800679c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800679e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067a6:	e003      	b.n	80067b0 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80067a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067aa:	2200      	movs	r2, #0
 80067ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80067b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067b2:	2b37      	cmp	r3, #55	@ 0x37
 80067b4:	d901      	bls.n	80067ba <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80067b6:	2337      	movs	r3, #55	@ 0x37
 80067b8:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80067ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067bc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067be:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80067c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80067c4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80067c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067c8:	2200      	movs	r2, #0
 80067ca:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80067cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ce:	3304      	adds	r3, #4
 80067d0:	4618      	mov	r0, r3
 80067d2:	f7fe ff49 	bl	8005668 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80067d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067d8:	3318      	adds	r3, #24
 80067da:	4618      	mov	r0, r3
 80067dc:	f7fe ff44 	bl	8005668 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80067e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067e2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80067ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80067f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067f4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	2200      	movs	r2, #0
 80067fa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80067fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006800:	2200      	movs	r2, #0
 8006802:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006808:	3354      	adds	r3, #84	@ 0x54
 800680a:	224c      	movs	r2, #76	@ 0x4c
 800680c:	2100      	movs	r1, #0
 800680e:	4618      	mov	r0, r3
 8006810:	f005 f824 	bl	800b85c <memset>
 8006814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006816:	4a0d      	ldr	r2, [pc, #52]	@ (800684c <prvInitialiseNewTask+0x144>)
 8006818:	659a      	str	r2, [r3, #88]	@ 0x58
 800681a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681c:	4a0c      	ldr	r2, [pc, #48]	@ (8006850 <prvInitialiseNewTask+0x148>)
 800681e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006822:	4a0c      	ldr	r2, [pc, #48]	@ (8006854 <prvInitialiseNewTask+0x14c>)
 8006824:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	68f9      	ldr	r1, [r7, #12]
 800682a:	69b8      	ldr	r0, [r7, #24]
 800682c:	f001 fb0e 	bl	8007e4c <pxPortInitialiseStack>
 8006830:	4602      	mov	r2, r0
 8006832:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006834:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800683c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800683e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006840:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006842:	bf00      	nop
 8006844:	3720      	adds	r7, #32
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}
 800684a:	bf00      	nop
 800684c:	2000a970 	.word	0x2000a970
 8006850:	2000a9d8 	.word	0x2000a9d8
 8006854:	2000aa40 	.word	0x2000aa40

08006858 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b082      	sub	sp, #8
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006860:	f001 fc22 	bl	80080a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006864:	4b2d      	ldr	r3, [pc, #180]	@ (800691c <prvAddNewTaskToReadyList+0xc4>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	3301      	adds	r3, #1
 800686a:	4a2c      	ldr	r2, [pc, #176]	@ (800691c <prvAddNewTaskToReadyList+0xc4>)
 800686c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800686e:	4b2c      	ldr	r3, [pc, #176]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d109      	bne.n	800688a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006876:	4a2a      	ldr	r2, [pc, #168]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800687c:	4b27      	ldr	r3, [pc, #156]	@ (800691c <prvAddNewTaskToReadyList+0xc4>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	2b01      	cmp	r3, #1
 8006882:	d110      	bne.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006884:	f000 fc9a 	bl	80071bc <prvInitialiseTaskLists>
 8006888:	e00d      	b.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800688a:	4b26      	ldr	r3, [pc, #152]	@ (8006924 <prvAddNewTaskToReadyList+0xcc>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d109      	bne.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006892:	4b23      	ldr	r3, [pc, #140]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800689c:	429a      	cmp	r2, r3
 800689e:	d802      	bhi.n	80068a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068a0:	4a1f      	ldr	r2, [pc, #124]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068a6:	4b20      	ldr	r3, [pc, #128]	@ (8006928 <prvAddNewTaskToReadyList+0xd0>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3301      	adds	r3, #1
 80068ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006928 <prvAddNewTaskToReadyList+0xd0>)
 80068ae:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80068b0:	4b1d      	ldr	r3, [pc, #116]	@ (8006928 <prvAddNewTaskToReadyList+0xd0>)
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068bc:	4b1b      	ldr	r3, [pc, #108]	@ (800692c <prvAddNewTaskToReadyList+0xd4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	d903      	bls.n	80068cc <prvAddNewTaskToReadyList+0x74>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068c8:	4a18      	ldr	r2, [pc, #96]	@ (800692c <prvAddNewTaskToReadyList+0xd4>)
 80068ca:	6013      	str	r3, [r2, #0]
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068d0:	4613      	mov	r3, r2
 80068d2:	009b      	lsls	r3, r3, #2
 80068d4:	4413      	add	r3, r2
 80068d6:	009b      	lsls	r3, r3, #2
 80068d8:	4a15      	ldr	r2, [pc, #84]	@ (8006930 <prvAddNewTaskToReadyList+0xd8>)
 80068da:	441a      	add	r2, r3
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	3304      	adds	r3, #4
 80068e0:	4619      	mov	r1, r3
 80068e2:	4610      	mov	r0, r2
 80068e4:	f7fe fecd 	bl	8005682 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80068e8:	f001 fc10 	bl	800810c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80068ec:	4b0d      	ldr	r3, [pc, #52]	@ (8006924 <prvAddNewTaskToReadyList+0xcc>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d00e      	beq.n	8006912 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80068f4:	4b0a      	ldr	r3, [pc, #40]	@ (8006920 <prvAddNewTaskToReadyList+0xc8>)
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068fe:	429a      	cmp	r2, r3
 8006900:	d207      	bcs.n	8006912 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006902:	4b0c      	ldr	r3, [pc, #48]	@ (8006934 <prvAddNewTaskToReadyList+0xdc>)
 8006904:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006908:	601a      	str	r2, [r3, #0]
 800690a:	f3bf 8f4f 	dsb	sy
 800690e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006912:	bf00      	nop
 8006914:	3708      	adds	r7, #8
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}
 800691a:	bf00      	nop
 800691c:	20006b9c 	.word	0x20006b9c
 8006920:	200066c8 	.word	0x200066c8
 8006924:	20006ba8 	.word	0x20006ba8
 8006928:	20006bb8 	.word	0x20006bb8
 800692c:	20006ba4 	.word	0x20006ba4
 8006930:	200066cc 	.word	0x200066cc
 8006934:	e000ed04 	.word	0xe000ed04

08006938 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b08a      	sub	sp, #40	@ 0x28
 800693c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800693e:	2300      	movs	r3, #0
 8006940:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006942:	2300      	movs	r3, #0
 8006944:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006946:	463a      	mov	r2, r7
 8006948:	1d39      	adds	r1, r7, #4
 800694a:	f107 0308 	add.w	r3, r7, #8
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe fc40 	bl	80051d4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68ba      	ldr	r2, [r7, #8]
 800695a:	9202      	str	r2, [sp, #8]
 800695c:	9301      	str	r3, [sp, #4]
 800695e:	2300      	movs	r3, #0
 8006960:	9300      	str	r3, [sp, #0]
 8006962:	2300      	movs	r3, #0
 8006964:	460a      	mov	r2, r1
 8006966:	4924      	ldr	r1, [pc, #144]	@ (80069f8 <vTaskStartScheduler+0xc0>)
 8006968:	4824      	ldr	r0, [pc, #144]	@ (80069fc <vTaskStartScheduler+0xc4>)
 800696a:	f7ff fe27 	bl	80065bc <xTaskCreateStatic>
 800696e:	4603      	mov	r3, r0
 8006970:	4a23      	ldr	r2, [pc, #140]	@ (8006a00 <vTaskStartScheduler+0xc8>)
 8006972:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006974:	4b22      	ldr	r3, [pc, #136]	@ (8006a00 <vTaskStartScheduler+0xc8>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d002      	beq.n	8006982 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800697c:	2301      	movs	r3, #1
 800697e:	617b      	str	r3, [r7, #20]
 8006980:	e001      	b.n	8006986 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006982:	2300      	movs	r3, #0
 8006984:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006986:	697b      	ldr	r3, [r7, #20]
 8006988:	2b01      	cmp	r3, #1
 800698a:	d102      	bne.n	8006992 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800698c:	f000 fee4 	bl	8007758 <xTimerCreateTimerTask>
 8006990:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006992:	697b      	ldr	r3, [r7, #20]
 8006994:	2b01      	cmp	r3, #1
 8006996:	d11b      	bne.n	80069d0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006998:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800699c:	f383 8811 	msr	BASEPRI, r3
 80069a0:	f3bf 8f6f 	isb	sy
 80069a4:	f3bf 8f4f 	dsb	sy
 80069a8:	613b      	str	r3, [r7, #16]
}
 80069aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069ac:	4b15      	ldr	r3, [pc, #84]	@ (8006a04 <vTaskStartScheduler+0xcc>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	3354      	adds	r3, #84	@ 0x54
 80069b2:	4a15      	ldr	r2, [pc, #84]	@ (8006a08 <vTaskStartScheduler+0xd0>)
 80069b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80069b6:	4b15      	ldr	r3, [pc, #84]	@ (8006a0c <vTaskStartScheduler+0xd4>)
 80069b8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80069bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80069be:	4b14      	ldr	r3, [pc, #80]	@ (8006a10 <vTaskStartScheduler+0xd8>)
 80069c0:	2201      	movs	r2, #1
 80069c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80069c4:	4b13      	ldr	r3, [pc, #76]	@ (8006a14 <vTaskStartScheduler+0xdc>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80069ca:	f001 fac9 	bl	8007f60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80069ce:	e00f      	b.n	80069f0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80069d6:	d10b      	bne.n	80069f0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80069d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069dc:	f383 8811 	msr	BASEPRI, r3
 80069e0:	f3bf 8f6f 	isb	sy
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	60fb      	str	r3, [r7, #12]
}
 80069ea:	bf00      	nop
 80069ec:	bf00      	nop
 80069ee:	e7fd      	b.n	80069ec <vTaskStartScheduler+0xb4>
}
 80069f0:	bf00      	nop
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	0800cfa0 	.word	0x0800cfa0
 80069fc:	0800718d 	.word	0x0800718d
 8006a00:	20006bc0 	.word	0x20006bc0
 8006a04:	200066c8 	.word	0x200066c8
 8006a08:	20000410 	.word	0x20000410
 8006a0c:	20006bbc 	.word	0x20006bbc
 8006a10:	20006ba8 	.word	0x20006ba8
 8006a14:	20006ba0 	.word	0x20006ba0

08006a18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006a18:	b480      	push	{r7}
 8006a1a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006a1c:	4b04      	ldr	r3, [pc, #16]	@ (8006a30 <vTaskSuspendAll+0x18>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	3301      	adds	r3, #1
 8006a22:	4a03      	ldr	r2, [pc, #12]	@ (8006a30 <vTaskSuspendAll+0x18>)
 8006a24:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006a26:	bf00      	nop
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	20006bc4 	.word	0x20006bc4

08006a34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006a42:	4b42      	ldr	r3, [pc, #264]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d10b      	bne.n	8006a62 <xTaskResumeAll+0x2e>
	__asm volatile
 8006a4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a4e:	f383 8811 	msr	BASEPRI, r3
 8006a52:	f3bf 8f6f 	isb	sy
 8006a56:	f3bf 8f4f 	dsb	sy
 8006a5a:	603b      	str	r3, [r7, #0]
}
 8006a5c:	bf00      	nop
 8006a5e:	bf00      	nop
 8006a60:	e7fd      	b.n	8006a5e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006a62:	f001 fb21 	bl	80080a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006a66:	4b39      	ldr	r3, [pc, #228]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	4a37      	ldr	r2, [pc, #220]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a6e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a70:	4b36      	ldr	r3, [pc, #216]	@ (8006b4c <xTaskResumeAll+0x118>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d162      	bne.n	8006b3e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006a78:	4b35      	ldr	r3, [pc, #212]	@ (8006b50 <xTaskResumeAll+0x11c>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d05e      	beq.n	8006b3e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006a80:	e02f      	b.n	8006ae2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a82:	4b34      	ldr	r3, [pc, #208]	@ (8006b54 <xTaskResumeAll+0x120>)
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	3318      	adds	r3, #24
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fe fe54 	bl	800573c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	3304      	adds	r3, #4
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fe fe4f 	bl	800573c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006aa2:	4b2d      	ldr	r3, [pc, #180]	@ (8006b58 <xTaskResumeAll+0x124>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d903      	bls.n	8006ab2 <xTaskResumeAll+0x7e>
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aae:	4a2a      	ldr	r2, [pc, #168]	@ (8006b58 <xTaskResumeAll+0x124>)
 8006ab0:	6013      	str	r3, [r2, #0]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ab6:	4613      	mov	r3, r2
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	009b      	lsls	r3, r3, #2
 8006abe:	4a27      	ldr	r2, [pc, #156]	@ (8006b5c <xTaskResumeAll+0x128>)
 8006ac0:	441a      	add	r2, r3
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3304      	adds	r3, #4
 8006ac6:	4619      	mov	r1, r3
 8006ac8:	4610      	mov	r0, r2
 8006aca:	f7fe fdda 	bl	8005682 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ad2:	4b23      	ldr	r3, [pc, #140]	@ (8006b60 <xTaskResumeAll+0x12c>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d302      	bcc.n	8006ae2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006adc:	4b21      	ldr	r3, [pc, #132]	@ (8006b64 <xTaskResumeAll+0x130>)
 8006ade:	2201      	movs	r2, #1
 8006ae0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ae2:	4b1c      	ldr	r3, [pc, #112]	@ (8006b54 <xTaskResumeAll+0x120>)
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d1cb      	bne.n	8006a82 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d001      	beq.n	8006af4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006af0:	f000 fc08 	bl	8007304 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006af4:	4b1c      	ldr	r3, [pc, #112]	@ (8006b68 <xTaskResumeAll+0x134>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d010      	beq.n	8006b22 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006b00:	f000 f846 	bl	8006b90 <xTaskIncrementTick>
 8006b04:	4603      	mov	r3, r0
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d002      	beq.n	8006b10 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006b0a:	4b16      	ldr	r3, [pc, #88]	@ (8006b64 <xTaskResumeAll+0x130>)
 8006b0c:	2201      	movs	r2, #1
 8006b0e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	3b01      	subs	r3, #1
 8006b14:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d1f1      	bne.n	8006b00 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006b1c:	4b12      	ldr	r3, [pc, #72]	@ (8006b68 <xTaskResumeAll+0x134>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006b22:	4b10      	ldr	r3, [pc, #64]	@ (8006b64 <xTaskResumeAll+0x130>)
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d009      	beq.n	8006b3e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006b2a:	2301      	movs	r3, #1
 8006b2c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8006b6c <xTaskResumeAll+0x138>)
 8006b30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b34:	601a      	str	r2, [r3, #0]
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006b3e:	f001 fae5 	bl	800810c <vPortExitCritical>

	return xAlreadyYielded;
 8006b42:	68bb      	ldr	r3, [r7, #8]
}
 8006b44:	4618      	mov	r0, r3
 8006b46:	3710      	adds	r7, #16
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	20006bc4 	.word	0x20006bc4
 8006b50:	20006b9c 	.word	0x20006b9c
 8006b54:	20006b5c 	.word	0x20006b5c
 8006b58:	20006ba4 	.word	0x20006ba4
 8006b5c:	200066cc 	.word	0x200066cc
 8006b60:	200066c8 	.word	0x200066c8
 8006b64:	20006bb0 	.word	0x20006bb0
 8006b68:	20006bac 	.word	0x20006bac
 8006b6c:	e000ed04 	.word	0xe000ed04

08006b70 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006b70:	b480      	push	{r7}
 8006b72:	b083      	sub	sp, #12
 8006b74:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006b76:	4b05      	ldr	r3, [pc, #20]	@ (8006b8c <xTaskGetTickCount+0x1c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006b7c:	687b      	ldr	r3, [r7, #4]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	370c      	adds	r7, #12
 8006b82:	46bd      	mov	sp, r7
 8006b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b88:	4770      	bx	lr
 8006b8a:	bf00      	nop
 8006b8c:	20006ba0 	.word	0x20006ba0

08006b90 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b086      	sub	sp, #24
 8006b94:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006b96:	2300      	movs	r3, #0
 8006b98:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b9a:	4b4f      	ldr	r3, [pc, #316]	@ (8006cd8 <xTaskIncrementTick+0x148>)
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	f040 8090 	bne.w	8006cc4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ba4:	4b4d      	ldr	r3, [pc, #308]	@ (8006cdc <xTaskIncrementTick+0x14c>)
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	3301      	adds	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006bac:	4a4b      	ldr	r2, [pc, #300]	@ (8006cdc <xTaskIncrementTick+0x14c>)
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d121      	bne.n	8006bfc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006bb8:	4b49      	ldr	r3, [pc, #292]	@ (8006ce0 <xTaskIncrementTick+0x150>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00b      	beq.n	8006bda <xTaskIncrementTick+0x4a>
	__asm volatile
 8006bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bc6:	f383 8811 	msr	BASEPRI, r3
 8006bca:	f3bf 8f6f 	isb	sy
 8006bce:	f3bf 8f4f 	dsb	sy
 8006bd2:	603b      	str	r3, [r7, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	bf00      	nop
 8006bd8:	e7fd      	b.n	8006bd6 <xTaskIncrementTick+0x46>
 8006bda:	4b41      	ldr	r3, [pc, #260]	@ (8006ce0 <xTaskIncrementTick+0x150>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	60fb      	str	r3, [r7, #12]
 8006be0:	4b40      	ldr	r3, [pc, #256]	@ (8006ce4 <xTaskIncrementTick+0x154>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ce0 <xTaskIncrementTick+0x150>)
 8006be6:	6013      	str	r3, [r2, #0]
 8006be8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ce4 <xTaskIncrementTick+0x154>)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	6013      	str	r3, [r2, #0]
 8006bee:	4b3e      	ldr	r3, [pc, #248]	@ (8006ce8 <xTaskIncrementTick+0x158>)
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	3301      	adds	r3, #1
 8006bf4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ce8 <xTaskIncrementTick+0x158>)
 8006bf6:	6013      	str	r3, [r2, #0]
 8006bf8:	f000 fb84 	bl	8007304 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006bfc:	4b3b      	ldr	r3, [pc, #236]	@ (8006cec <xTaskIncrementTick+0x15c>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	693a      	ldr	r2, [r7, #16]
 8006c02:	429a      	cmp	r2, r3
 8006c04:	d349      	bcc.n	8006c9a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c06:	4b36      	ldr	r3, [pc, #216]	@ (8006ce0 <xTaskIncrementTick+0x150>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d104      	bne.n	8006c1a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c10:	4b36      	ldr	r3, [pc, #216]	@ (8006cec <xTaskIncrementTick+0x15c>)
 8006c12:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8006c16:	601a      	str	r2, [r3, #0]
					break;
 8006c18:	e03f      	b.n	8006c9a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c1a:	4b31      	ldr	r3, [pc, #196]	@ (8006ce0 <xTaskIncrementTick+0x150>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68db      	ldr	r3, [r3, #12]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006c24:	68bb      	ldr	r3, [r7, #8]
 8006c26:	685b      	ldr	r3, [r3, #4]
 8006c28:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006c2a:	693a      	ldr	r2, [r7, #16]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d203      	bcs.n	8006c3a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006c32:	4a2e      	ldr	r2, [pc, #184]	@ (8006cec <xTaskIncrementTick+0x15c>)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006c38:	e02f      	b.n	8006c9a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7fe fd7c 	bl	800573c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d004      	beq.n	8006c56 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	3318      	adds	r3, #24
 8006c50:	4618      	mov	r0, r3
 8006c52:	f7fe fd73 	bl	800573c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c5a:	4b25      	ldr	r3, [pc, #148]	@ (8006cf0 <xTaskIncrementTick+0x160>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d903      	bls.n	8006c6a <xTaskIncrementTick+0xda>
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c66:	4a22      	ldr	r2, [pc, #136]	@ (8006cf0 <xTaskIncrementTick+0x160>)
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c6e:	4613      	mov	r3, r2
 8006c70:	009b      	lsls	r3, r3, #2
 8006c72:	4413      	add	r3, r2
 8006c74:	009b      	lsls	r3, r3, #2
 8006c76:	4a1f      	ldr	r2, [pc, #124]	@ (8006cf4 <xTaskIncrementTick+0x164>)
 8006c78:	441a      	add	r2, r3
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	4619      	mov	r1, r3
 8006c80:	4610      	mov	r0, r2
 8006c82:	f7fe fcfe 	bl	8005682 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8a:	4b1b      	ldr	r3, [pc, #108]	@ (8006cf8 <xTaskIncrementTick+0x168>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d3b8      	bcc.n	8006c06 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006c94:	2301      	movs	r3, #1
 8006c96:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006c98:	e7b5      	b.n	8006c06 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006c9a:	4b17      	ldr	r3, [pc, #92]	@ (8006cf8 <xTaskIncrementTick+0x168>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ca0:	4914      	ldr	r1, [pc, #80]	@ (8006cf4 <xTaskIncrementTick+0x164>)
 8006ca2:	4613      	mov	r3, r2
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	009b      	lsls	r3, r3, #2
 8006caa:	440b      	add	r3, r1
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d901      	bls.n	8006cb6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006cb6:	4b11      	ldr	r3, [pc, #68]	@ (8006cfc <xTaskIncrementTick+0x16c>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d007      	beq.n	8006cce <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006cbe:	2301      	movs	r3, #1
 8006cc0:	617b      	str	r3, [r7, #20]
 8006cc2:	e004      	b.n	8006cce <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d00 <xTaskIncrementTick+0x170>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3301      	adds	r3, #1
 8006cca:	4a0d      	ldr	r2, [pc, #52]	@ (8006d00 <xTaskIncrementTick+0x170>)
 8006ccc:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006cce:	697b      	ldr	r3, [r7, #20]
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3718      	adds	r7, #24
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	20006bc4 	.word	0x20006bc4
 8006cdc:	20006ba0 	.word	0x20006ba0
 8006ce0:	20006b54 	.word	0x20006b54
 8006ce4:	20006b58 	.word	0x20006b58
 8006ce8:	20006bb4 	.word	0x20006bb4
 8006cec:	20006bbc 	.word	0x20006bbc
 8006cf0:	20006ba4 	.word	0x20006ba4
 8006cf4:	200066cc 	.word	0x200066cc
 8006cf8:	200066c8 	.word	0x200066c8
 8006cfc:	20006bb0 	.word	0x20006bb0
 8006d00:	20006bac 	.word	0x20006bac

08006d04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006d0a:	4b2b      	ldr	r3, [pc, #172]	@ (8006db8 <vTaskSwitchContext+0xb4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d003      	beq.n	8006d1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006d12:	4b2a      	ldr	r3, [pc, #168]	@ (8006dbc <vTaskSwitchContext+0xb8>)
 8006d14:	2201      	movs	r2, #1
 8006d16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006d18:	e047      	b.n	8006daa <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006d1a:	4b28      	ldr	r3, [pc, #160]	@ (8006dbc <vTaskSwitchContext+0xb8>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d20:	4b27      	ldr	r3, [pc, #156]	@ (8006dc0 <vTaskSwitchContext+0xbc>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	e011      	b.n	8006d4c <vTaskSwitchContext+0x48>
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d10b      	bne.n	8006d46 <vTaskSwitchContext+0x42>
	__asm volatile
 8006d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d32:	f383 8811 	msr	BASEPRI, r3
 8006d36:	f3bf 8f6f 	isb	sy
 8006d3a:	f3bf 8f4f 	dsb	sy
 8006d3e:	607b      	str	r3, [r7, #4]
}
 8006d40:	bf00      	nop
 8006d42:	bf00      	nop
 8006d44:	e7fd      	b.n	8006d42 <vTaskSwitchContext+0x3e>
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	491d      	ldr	r1, [pc, #116]	@ (8006dc4 <vTaskSwitchContext+0xc0>)
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	4613      	mov	r3, r2
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	009b      	lsls	r3, r3, #2
 8006d58:	440b      	add	r3, r1
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d0e3      	beq.n	8006d28 <vTaskSwitchContext+0x24>
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	4613      	mov	r3, r2
 8006d64:	009b      	lsls	r3, r3, #2
 8006d66:	4413      	add	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4a16      	ldr	r2, [pc, #88]	@ (8006dc4 <vTaskSwitchContext+0xc0>)
 8006d6c:	4413      	add	r3, r2
 8006d6e:	60bb      	str	r3, [r7, #8]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	685a      	ldr	r2, [r3, #4]
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	605a      	str	r2, [r3, #4]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	3308      	adds	r3, #8
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d104      	bne.n	8006d90 <vTaskSwitchContext+0x8c>
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	685a      	ldr	r2, [r3, #4]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	605a      	str	r2, [r3, #4]
 8006d90:	68bb      	ldr	r3, [r7, #8]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	4a0c      	ldr	r2, [pc, #48]	@ (8006dc8 <vTaskSwitchContext+0xc4>)
 8006d98:	6013      	str	r3, [r2, #0]
 8006d9a:	4a09      	ldr	r2, [pc, #36]	@ (8006dc0 <vTaskSwitchContext+0xbc>)
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006da0:	4b09      	ldr	r3, [pc, #36]	@ (8006dc8 <vTaskSwitchContext+0xc4>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3354      	adds	r3, #84	@ 0x54
 8006da6:	4a09      	ldr	r2, [pc, #36]	@ (8006dcc <vTaskSwitchContext+0xc8>)
 8006da8:	6013      	str	r3, [r2, #0]
}
 8006daa:	bf00      	nop
 8006dac:	3714      	adds	r7, #20
 8006dae:	46bd      	mov	sp, r7
 8006db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db4:	4770      	bx	lr
 8006db6:	bf00      	nop
 8006db8:	20006bc4 	.word	0x20006bc4
 8006dbc:	20006bb0 	.word	0x20006bb0
 8006dc0:	20006ba4 	.word	0x20006ba4
 8006dc4:	200066cc 	.word	0x200066cc
 8006dc8:	200066c8 	.word	0x200066c8
 8006dcc:	20000410 	.word	0x20000410

08006dd0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006dd0:	b580      	push	{r7, lr}
 8006dd2:	b084      	sub	sp, #16
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10b      	bne.n	8006df8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006de4:	f383 8811 	msr	BASEPRI, r3
 8006de8:	f3bf 8f6f 	isb	sy
 8006dec:	f3bf 8f4f 	dsb	sy
 8006df0:	60fb      	str	r3, [r7, #12]
}
 8006df2:	bf00      	nop
 8006df4:	bf00      	nop
 8006df6:	e7fd      	b.n	8006df4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006df8:	4b07      	ldr	r3, [pc, #28]	@ (8006e18 <vTaskPlaceOnEventList+0x48>)
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	3318      	adds	r3, #24
 8006dfe:	4619      	mov	r1, r3
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f7fe fc62 	bl	80056ca <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e06:	2101      	movs	r1, #1
 8006e08:	6838      	ldr	r0, [r7, #0]
 8006e0a:	f000 fc51 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
}
 8006e0e:	bf00      	nop
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	200066c8 	.word	0x200066c8

08006e1c <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d10b      	bne.n	8006e46 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 8006e2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e32:	f383 8811 	msr	BASEPRI, r3
 8006e36:	f3bf 8f6f 	isb	sy
 8006e3a:	f3bf 8f4f 	dsb	sy
 8006e3e:	617b      	str	r3, [r7, #20]
}
 8006e40:	bf00      	nop
 8006e42:	bf00      	nop
 8006e44:	e7fd      	b.n	8006e42 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006e46:	4b12      	ldr	r3, [pc, #72]	@ (8006e90 <vTaskPlaceOnUnorderedEventList+0x74>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d10b      	bne.n	8006e66 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 8006e4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e52:	f383 8811 	msr	BASEPRI, r3
 8006e56:	f3bf 8f6f 	isb	sy
 8006e5a:	f3bf 8f4f 	dsb	sy
 8006e5e:	613b      	str	r3, [r7, #16]
}
 8006e60:	bf00      	nop
 8006e62:	bf00      	nop
 8006e64:	e7fd      	b.n	8006e62 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e66:	4b0b      	ldr	r3, [pc, #44]	@ (8006e94 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8006e70:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006e72:	4b08      	ldr	r3, [pc, #32]	@ (8006e94 <vTaskPlaceOnUnorderedEventList+0x78>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	3318      	adds	r3, #24
 8006e78:	4619      	mov	r1, r3
 8006e7a:	68f8      	ldr	r0, [r7, #12]
 8006e7c:	f7fe fc01 	bl	8005682 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006e80:	2101      	movs	r1, #1
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fc14 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
}
 8006e88:	bf00      	nop
 8006e8a:	3718      	adds	r7, #24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd80      	pop	{r7, pc}
 8006e90:	20006bc4 	.word	0x20006bc4
 8006e94:	200066c8 	.word	0x200066c8

08006e98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b086      	sub	sp, #24
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d10b      	bne.n	8006ec2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006eaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eae:	f383 8811 	msr	BASEPRI, r3
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	f3bf 8f4f 	dsb	sy
 8006eba:	617b      	str	r3, [r7, #20]
}
 8006ebc:	bf00      	nop
 8006ebe:	bf00      	nop
 8006ec0:	e7fd      	b.n	8006ebe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ec2:	4b0a      	ldr	r3, [pc, #40]	@ (8006eec <vTaskPlaceOnEventListRestricted+0x54>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	3318      	adds	r3, #24
 8006ec8:	4619      	mov	r1, r3
 8006eca:	68f8      	ldr	r0, [r7, #12]
 8006ecc:	f7fe fbd9 	bl	8005682 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d002      	beq.n	8006edc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006ed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006eda:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006edc:	6879      	ldr	r1, [r7, #4]
 8006ede:	68b8      	ldr	r0, [r7, #8]
 8006ee0:	f000 fbe6 	bl	80076b0 <prvAddCurrentTaskToDelayedList>
	}
 8006ee4:	bf00      	nop
 8006ee6:	3718      	adds	r7, #24
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	bd80      	pop	{r7, pc}
 8006eec:	200066c8 	.word	0x200066c8

08006ef0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b086      	sub	sp, #24
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	68db      	ldr	r3, [r3, #12]
 8006efc:	68db      	ldr	r3, [r3, #12]
 8006efe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d10b      	bne.n	8006f1e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f0a:	f383 8811 	msr	BASEPRI, r3
 8006f0e:	f3bf 8f6f 	isb	sy
 8006f12:	f3bf 8f4f 	dsb	sy
 8006f16:	60fb      	str	r3, [r7, #12]
}
 8006f18:	bf00      	nop
 8006f1a:	bf00      	nop
 8006f1c:	e7fd      	b.n	8006f1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	3318      	adds	r3, #24
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fc0a 	bl	800573c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f28:	4b1d      	ldr	r3, [pc, #116]	@ (8006fa0 <xTaskRemoveFromEventList+0xb0>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11d      	bne.n	8006f6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	3304      	adds	r3, #4
 8006f34:	4618      	mov	r0, r3
 8006f36:	f7fe fc01 	bl	800573c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f3a:	693b      	ldr	r3, [r7, #16]
 8006f3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3e:	4b19      	ldr	r3, [pc, #100]	@ (8006fa4 <xTaskRemoveFromEventList+0xb4>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	429a      	cmp	r2, r3
 8006f44:	d903      	bls.n	8006f4e <xTaskRemoveFromEventList+0x5e>
 8006f46:	693b      	ldr	r3, [r7, #16]
 8006f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f4a:	4a16      	ldr	r2, [pc, #88]	@ (8006fa4 <xTaskRemoveFromEventList+0xb4>)
 8006f4c:	6013      	str	r3, [r2, #0]
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f52:	4613      	mov	r3, r2
 8006f54:	009b      	lsls	r3, r3, #2
 8006f56:	4413      	add	r3, r2
 8006f58:	009b      	lsls	r3, r3, #2
 8006f5a:	4a13      	ldr	r2, [pc, #76]	@ (8006fa8 <xTaskRemoveFromEventList+0xb8>)
 8006f5c:	441a      	add	r2, r3
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	3304      	adds	r3, #4
 8006f62:	4619      	mov	r1, r3
 8006f64:	4610      	mov	r0, r2
 8006f66:	f7fe fb8c 	bl	8005682 <vListInsertEnd>
 8006f6a:	e005      	b.n	8006f78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	3318      	adds	r3, #24
 8006f70:	4619      	mov	r1, r3
 8006f72:	480e      	ldr	r0, [pc, #56]	@ (8006fac <xTaskRemoveFromEventList+0xbc>)
 8006f74:	f7fe fb85 	bl	8005682 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f7c:	4b0c      	ldr	r3, [pc, #48]	@ (8006fb0 <xTaskRemoveFromEventList+0xc0>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d905      	bls.n	8006f92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006f8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb4 <xTaskRemoveFromEventList+0xc4>)
 8006f8c:	2201      	movs	r2, #1
 8006f8e:	601a      	str	r2, [r3, #0]
 8006f90:	e001      	b.n	8006f96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006f92:	2300      	movs	r3, #0
 8006f94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006f96:	697b      	ldr	r3, [r7, #20]
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	3718      	adds	r7, #24
 8006f9c:	46bd      	mov	sp, r7
 8006f9e:	bd80      	pop	{r7, pc}
 8006fa0:	20006bc4 	.word	0x20006bc4
 8006fa4:	20006ba4 	.word	0x20006ba4
 8006fa8:	200066cc 	.word	0x200066cc
 8006fac:	20006b5c 	.word	0x20006b5c
 8006fb0:	200066c8 	.word	0x200066c8
 8006fb4:	20006bb0 	.word	0x20006bb0

08006fb8 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b086      	sub	sp, #24
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006fc2:	4b2a      	ldr	r3, [pc, #168]	@ (800706c <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d10b      	bne.n	8006fe2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 8006fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	613b      	str	r3, [r7, #16]
}
 8006fdc:	bf00      	nop
 8006fde:	bf00      	nop
 8006fe0:	e7fd      	b.n	8006fde <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006ff2:	697b      	ldr	r3, [r7, #20]
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d10b      	bne.n	8007010 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 8006ff8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ffc:	f383 8811 	msr	BASEPRI, r3
 8007000:	f3bf 8f6f 	isb	sy
 8007004:	f3bf 8f4f 	dsb	sy
 8007008:	60fb      	str	r3, [r7, #12]
}
 800700a:	bf00      	nop
 800700c:	bf00      	nop
 800700e:	e7fd      	b.n	800700c <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 8007010:	6878      	ldr	r0, [r7, #4]
 8007012:	f7fe fb93 	bl	800573c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007016:	697b      	ldr	r3, [r7, #20]
 8007018:	3304      	adds	r3, #4
 800701a:	4618      	mov	r0, r3
 800701c:	f7fe fb8e 	bl	800573c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007020:	697b      	ldr	r3, [r7, #20]
 8007022:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007024:	4b12      	ldr	r3, [pc, #72]	@ (8007070 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	429a      	cmp	r2, r3
 800702a:	d903      	bls.n	8007034 <vTaskRemoveFromUnorderedEventList+0x7c>
 800702c:	697b      	ldr	r3, [r7, #20]
 800702e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007030:	4a0f      	ldr	r2, [pc, #60]	@ (8007070 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007032:	6013      	str	r3, [r2, #0]
 8007034:	697b      	ldr	r3, [r7, #20]
 8007036:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007038:	4613      	mov	r3, r2
 800703a:	009b      	lsls	r3, r3, #2
 800703c:	4413      	add	r3, r2
 800703e:	009b      	lsls	r3, r3, #2
 8007040:	4a0c      	ldr	r2, [pc, #48]	@ (8007074 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007042:	441a      	add	r2, r3
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	3304      	adds	r3, #4
 8007048:	4619      	mov	r1, r3
 800704a:	4610      	mov	r0, r2
 800704c:	f7fe fb19 	bl	8005682 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007050:	697b      	ldr	r3, [r7, #20]
 8007052:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007054:	4b08      	ldr	r3, [pc, #32]	@ (8007078 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800705a:	429a      	cmp	r2, r3
 800705c:	d902      	bls.n	8007064 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800705e:	4b07      	ldr	r3, [pc, #28]	@ (800707c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007060:	2201      	movs	r2, #1
 8007062:	601a      	str	r2, [r3, #0]
	}
}
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20006bc4 	.word	0x20006bc4
 8007070:	20006ba4 	.word	0x20006ba4
 8007074:	200066cc 	.word	0x200066cc
 8007078:	200066c8 	.word	0x200066c8
 800707c:	20006bb0 	.word	0x20006bb0

08007080 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007088:	4b06      	ldr	r3, [pc, #24]	@ (80070a4 <vTaskInternalSetTimeOutState+0x24>)
 800708a:	681a      	ldr	r2, [r3, #0]
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007090:	4b05      	ldr	r3, [pc, #20]	@ (80070a8 <vTaskInternalSetTimeOutState+0x28>)
 8007092:	681a      	ldr	r2, [r3, #0]
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	605a      	str	r2, [r3, #4]
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr
 80070a4:	20006bb4 	.word	0x20006bb4
 80070a8:	20006ba0 	.word	0x20006ba0

080070ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b088      	sub	sp, #32
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
 80070b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d10b      	bne.n	80070d4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80070bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c0:	f383 8811 	msr	BASEPRI, r3
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	f3bf 8f4f 	dsb	sy
 80070cc:	613b      	str	r3, [r7, #16]
}
 80070ce:	bf00      	nop
 80070d0:	bf00      	nop
 80070d2:	e7fd      	b.n	80070d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d10b      	bne.n	80070f2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80070da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070de:	f383 8811 	msr	BASEPRI, r3
 80070e2:	f3bf 8f6f 	isb	sy
 80070e6:	f3bf 8f4f 	dsb	sy
 80070ea:	60fb      	str	r3, [r7, #12]
}
 80070ec:	bf00      	nop
 80070ee:	bf00      	nop
 80070f0:	e7fd      	b.n	80070ee <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80070f2:	f000 ffd9 	bl	80080a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80070f6:	4b1d      	ldr	r3, [pc, #116]	@ (800716c <xTaskCheckForTimeOut+0xc0>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	69ba      	ldr	r2, [r7, #24]
 8007102:	1ad3      	subs	r3, r2, r3
 8007104:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007106:	683b      	ldr	r3, [r7, #0]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800710e:	d102      	bne.n	8007116 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
 8007114:	e023      	b.n	800715e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681a      	ldr	r2, [r3, #0]
 800711a:	4b15      	ldr	r3, [pc, #84]	@ (8007170 <xTaskCheckForTimeOut+0xc4>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	429a      	cmp	r2, r3
 8007120:	d007      	beq.n	8007132 <xTaskCheckForTimeOut+0x86>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	69ba      	ldr	r2, [r7, #24]
 8007128:	429a      	cmp	r2, r3
 800712a:	d302      	bcc.n	8007132 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800712c:	2301      	movs	r3, #1
 800712e:	61fb      	str	r3, [r7, #28]
 8007130:	e015      	b.n	800715e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	697a      	ldr	r2, [r7, #20]
 8007138:	429a      	cmp	r2, r3
 800713a:	d20b      	bcs.n	8007154 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	681a      	ldr	r2, [r3, #0]
 8007140:	697b      	ldr	r3, [r7, #20]
 8007142:	1ad2      	subs	r2, r2, r3
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff ff99 	bl	8007080 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800714e:	2300      	movs	r3, #0
 8007150:	61fb      	str	r3, [r7, #28]
 8007152:	e004      	b.n	800715e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2200      	movs	r2, #0
 8007158:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800715a:	2301      	movs	r3, #1
 800715c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800715e:	f000 ffd5 	bl	800810c <vPortExitCritical>

	return xReturn;
 8007162:	69fb      	ldr	r3, [r7, #28]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3720      	adds	r7, #32
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	20006ba0 	.word	0x20006ba0
 8007170:	20006bb4 	.word	0x20006bb4

08007174 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007174:	b480      	push	{r7}
 8007176:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007178:	4b03      	ldr	r3, [pc, #12]	@ (8007188 <vTaskMissedYield+0x14>)
 800717a:	2201      	movs	r2, #1
 800717c:	601a      	str	r2, [r3, #0]
}
 800717e:	bf00      	nop
 8007180:	46bd      	mov	sp, r7
 8007182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007186:	4770      	bx	lr
 8007188:	20006bb0 	.word	0x20006bb0

0800718c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007194:	f000 f852 	bl	800723c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007198:	4b06      	ldr	r3, [pc, #24]	@ (80071b4 <prvIdleTask+0x28>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b01      	cmp	r3, #1
 800719e:	d9f9      	bls.n	8007194 <prvIdleTask+0x8>
			{
				taskYIELD();
 80071a0:	4b05      	ldr	r3, [pc, #20]	@ (80071b8 <prvIdleTask+0x2c>)
 80071a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071a6:	601a      	str	r2, [r3, #0]
 80071a8:	f3bf 8f4f 	dsb	sy
 80071ac:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80071b0:	e7f0      	b.n	8007194 <prvIdleTask+0x8>
 80071b2:	bf00      	nop
 80071b4:	200066cc 	.word	0x200066cc
 80071b8:	e000ed04 	.word	0xe000ed04

080071bc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071c2:	2300      	movs	r3, #0
 80071c4:	607b      	str	r3, [r7, #4]
 80071c6:	e00c      	b.n	80071e2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80071c8:	687a      	ldr	r2, [r7, #4]
 80071ca:	4613      	mov	r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	4413      	add	r3, r2
 80071d0:	009b      	lsls	r3, r3, #2
 80071d2:	4a12      	ldr	r2, [pc, #72]	@ (800721c <prvInitialiseTaskLists+0x60>)
 80071d4:	4413      	add	r3, r2
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7fe fa26 	bl	8005628 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	3301      	adds	r3, #1
 80071e0:	607b      	str	r3, [r7, #4]
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2b37      	cmp	r3, #55	@ 0x37
 80071e6:	d9ef      	bls.n	80071c8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80071e8:	480d      	ldr	r0, [pc, #52]	@ (8007220 <prvInitialiseTaskLists+0x64>)
 80071ea:	f7fe fa1d 	bl	8005628 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80071ee:	480d      	ldr	r0, [pc, #52]	@ (8007224 <prvInitialiseTaskLists+0x68>)
 80071f0:	f7fe fa1a 	bl	8005628 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80071f4:	480c      	ldr	r0, [pc, #48]	@ (8007228 <prvInitialiseTaskLists+0x6c>)
 80071f6:	f7fe fa17 	bl	8005628 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80071fa:	480c      	ldr	r0, [pc, #48]	@ (800722c <prvInitialiseTaskLists+0x70>)
 80071fc:	f7fe fa14 	bl	8005628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007200:	480b      	ldr	r0, [pc, #44]	@ (8007230 <prvInitialiseTaskLists+0x74>)
 8007202:	f7fe fa11 	bl	8005628 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007206:	4b0b      	ldr	r3, [pc, #44]	@ (8007234 <prvInitialiseTaskLists+0x78>)
 8007208:	4a05      	ldr	r2, [pc, #20]	@ (8007220 <prvInitialiseTaskLists+0x64>)
 800720a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800720c:	4b0a      	ldr	r3, [pc, #40]	@ (8007238 <prvInitialiseTaskLists+0x7c>)
 800720e:	4a05      	ldr	r2, [pc, #20]	@ (8007224 <prvInitialiseTaskLists+0x68>)
 8007210:	601a      	str	r2, [r3, #0]
}
 8007212:	bf00      	nop
 8007214:	3708      	adds	r7, #8
 8007216:	46bd      	mov	sp, r7
 8007218:	bd80      	pop	{r7, pc}
 800721a:	bf00      	nop
 800721c:	200066cc 	.word	0x200066cc
 8007220:	20006b2c 	.word	0x20006b2c
 8007224:	20006b40 	.word	0x20006b40
 8007228:	20006b5c 	.word	0x20006b5c
 800722c:	20006b70 	.word	0x20006b70
 8007230:	20006b88 	.word	0x20006b88
 8007234:	20006b54 	.word	0x20006b54
 8007238:	20006b58 	.word	0x20006b58

0800723c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007242:	e019      	b.n	8007278 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007244:	f000 ff30 	bl	80080a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007248:	4b10      	ldr	r3, [pc, #64]	@ (800728c <prvCheckTasksWaitingTermination+0x50>)
 800724a:	68db      	ldr	r3, [r3, #12]
 800724c:	68db      	ldr	r3, [r3, #12]
 800724e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	3304      	adds	r3, #4
 8007254:	4618      	mov	r0, r3
 8007256:	f7fe fa71 	bl	800573c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800725a:	4b0d      	ldr	r3, [pc, #52]	@ (8007290 <prvCheckTasksWaitingTermination+0x54>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	3b01      	subs	r3, #1
 8007260:	4a0b      	ldr	r2, [pc, #44]	@ (8007290 <prvCheckTasksWaitingTermination+0x54>)
 8007262:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007264:	4b0b      	ldr	r3, [pc, #44]	@ (8007294 <prvCheckTasksWaitingTermination+0x58>)
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	3b01      	subs	r3, #1
 800726a:	4a0a      	ldr	r2, [pc, #40]	@ (8007294 <prvCheckTasksWaitingTermination+0x58>)
 800726c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800726e:	f000 ff4d 	bl	800810c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007272:	6878      	ldr	r0, [r7, #4]
 8007274:	f000 f810 	bl	8007298 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007278:	4b06      	ldr	r3, [pc, #24]	@ (8007294 <prvCheckTasksWaitingTermination+0x58>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d1e1      	bne.n	8007244 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	3708      	adds	r7, #8
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	bf00      	nop
 800728c:	20006b70 	.word	0x20006b70
 8007290:	20006b9c 	.word	0x20006b9c
 8007294:	20006b84 	.word	0x20006b84

08007298 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	3354      	adds	r3, #84	@ 0x54
 80072a4:	4618      	mov	r0, r3
 80072a6:	f004 fae1 	bl	800b86c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d108      	bne.n	80072c6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072b8:	4618      	mov	r0, r3
 80072ba:	f001 f8e5 	bl	8008488 <vPortFree>
				vPortFree( pxTCB );
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	f001 f8e2 	bl	8008488 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80072c4:	e019      	b.n	80072fa <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072cc:	2b01      	cmp	r3, #1
 80072ce:	d103      	bne.n	80072d8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80072d0:	6878      	ldr	r0, [r7, #4]
 80072d2:	f001 f8d9 	bl	8008488 <vPortFree>
	}
 80072d6:	e010      	b.n	80072fa <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d00b      	beq.n	80072fa <prvDeleteTCB+0x62>
	__asm volatile
 80072e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e6:	f383 8811 	msr	BASEPRI, r3
 80072ea:	f3bf 8f6f 	isb	sy
 80072ee:	f3bf 8f4f 	dsb	sy
 80072f2:	60fb      	str	r3, [r7, #12]
}
 80072f4:	bf00      	nop
 80072f6:	bf00      	nop
 80072f8:	e7fd      	b.n	80072f6 <prvDeleteTCB+0x5e>
	}
 80072fa:	bf00      	nop
 80072fc:	3710      	adds	r7, #16
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
	...

08007304 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007304:	b480      	push	{r7}
 8007306:	b083      	sub	sp, #12
 8007308:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800730a:	4b0c      	ldr	r3, [pc, #48]	@ (800733c <prvResetNextTaskUnblockTime+0x38>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d104      	bne.n	800731e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007314:	4b0a      	ldr	r3, [pc, #40]	@ (8007340 <prvResetNextTaskUnblockTime+0x3c>)
 8007316:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800731a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800731c:	e008      	b.n	8007330 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800731e:	4b07      	ldr	r3, [pc, #28]	@ (800733c <prvResetNextTaskUnblockTime+0x38>)
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	4a04      	ldr	r2, [pc, #16]	@ (8007340 <prvResetNextTaskUnblockTime+0x3c>)
 800732e:	6013      	str	r3, [r2, #0]
}
 8007330:	bf00      	nop
 8007332:	370c      	adds	r7, #12
 8007334:	46bd      	mov	sp, r7
 8007336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733a:	4770      	bx	lr
 800733c:	20006b54 	.word	0x20006b54
 8007340:	20006bbc 	.word	0x20006bbc

08007344 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800734a:	4b05      	ldr	r3, [pc, #20]	@ (8007360 <xTaskGetCurrentTaskHandle+0x1c>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007350:	687b      	ldr	r3, [r7, #4]
	}
 8007352:	4618      	mov	r0, r3
 8007354:	370c      	adds	r7, #12
 8007356:	46bd      	mov	sp, r7
 8007358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800735c:	4770      	bx	lr
 800735e:	bf00      	nop
 8007360:	200066c8 	.word	0x200066c8

08007364 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800736a:	4b0b      	ldr	r3, [pc, #44]	@ (8007398 <xTaskGetSchedulerState+0x34>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d102      	bne.n	8007378 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007372:	2301      	movs	r3, #1
 8007374:	607b      	str	r3, [r7, #4]
 8007376:	e008      	b.n	800738a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007378:	4b08      	ldr	r3, [pc, #32]	@ (800739c <xTaskGetSchedulerState+0x38>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d102      	bne.n	8007386 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007380:	2302      	movs	r3, #2
 8007382:	607b      	str	r3, [r7, #4]
 8007384:	e001      	b.n	800738a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007386:	2300      	movs	r3, #0
 8007388:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800738a:	687b      	ldr	r3, [r7, #4]
	}
 800738c:	4618      	mov	r0, r3
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr
 8007398:	20006ba8 	.word	0x20006ba8
 800739c:	20006bc4 	.word	0x20006bc4

080073a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b084      	sub	sp, #16
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80073ac:	2300      	movs	r3, #0
 80073ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	d051      	beq.n	800745a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80073b6:	68bb      	ldr	r3, [r7, #8]
 80073b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ba:	4b2a      	ldr	r3, [pc, #168]	@ (8007464 <xTaskPriorityInherit+0xc4>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d241      	bcs.n	8007448 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	699b      	ldr	r3, [r3, #24]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	db06      	blt.n	80073da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80073cc:	4b25      	ldr	r3, [pc, #148]	@ (8007464 <xTaskPriorityInherit+0xc4>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073d2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80073d6:	68bb      	ldr	r3, [r7, #8]
 80073d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80073da:	68bb      	ldr	r3, [r7, #8]
 80073dc:	6959      	ldr	r1, [r3, #20]
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073e2:	4613      	mov	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	4413      	add	r3, r2
 80073e8:	009b      	lsls	r3, r3, #2
 80073ea:	4a1f      	ldr	r2, [pc, #124]	@ (8007468 <xTaskPriorityInherit+0xc8>)
 80073ec:	4413      	add	r3, r2
 80073ee:	4299      	cmp	r1, r3
 80073f0:	d122      	bne.n	8007438 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe f9a0 	bl	800573c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80073fc:	4b19      	ldr	r3, [pc, #100]	@ (8007464 <xTaskPriorityInherit+0xc4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007402:	68bb      	ldr	r3, [r7, #8]
 8007404:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800740a:	4b18      	ldr	r3, [pc, #96]	@ (800746c <xTaskPriorityInherit+0xcc>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d903      	bls.n	800741a <xTaskPriorityInherit+0x7a>
 8007412:	68bb      	ldr	r3, [r7, #8]
 8007414:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007416:	4a15      	ldr	r2, [pc, #84]	@ (800746c <xTaskPriorityInherit+0xcc>)
 8007418:	6013      	str	r3, [r2, #0]
 800741a:	68bb      	ldr	r3, [r7, #8]
 800741c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800741e:	4613      	mov	r3, r2
 8007420:	009b      	lsls	r3, r3, #2
 8007422:	4413      	add	r3, r2
 8007424:	009b      	lsls	r3, r3, #2
 8007426:	4a10      	ldr	r2, [pc, #64]	@ (8007468 <xTaskPriorityInherit+0xc8>)
 8007428:	441a      	add	r2, r3
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	3304      	adds	r3, #4
 800742e:	4619      	mov	r1, r3
 8007430:	4610      	mov	r0, r2
 8007432:	f7fe f926 	bl	8005682 <vListInsertEnd>
 8007436:	e004      	b.n	8007442 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007438:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <xTaskPriorityInherit+0xc4>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800743e:	68bb      	ldr	r3, [r7, #8]
 8007440:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007442:	2301      	movs	r3, #1
 8007444:	60fb      	str	r3, [r7, #12]
 8007446:	e008      	b.n	800745a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007448:	68bb      	ldr	r3, [r7, #8]
 800744a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800744c:	4b05      	ldr	r3, [pc, #20]	@ (8007464 <xTaskPriorityInherit+0xc4>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007452:	429a      	cmp	r2, r3
 8007454:	d201      	bcs.n	800745a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007456:	2301      	movs	r3, #1
 8007458:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800745a:	68fb      	ldr	r3, [r7, #12]
	}
 800745c:	4618      	mov	r0, r3
 800745e:	3710      	adds	r7, #16
 8007460:	46bd      	mov	sp, r7
 8007462:	bd80      	pop	{r7, pc}
 8007464:	200066c8 	.word	0x200066c8
 8007468:	200066cc 	.word	0x200066cc
 800746c:	20006ba4 	.word	0x20006ba4

08007470 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800747c:	2300      	movs	r3, #0
 800747e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d058      	beq.n	8007538 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007486:	4b2f      	ldr	r3, [pc, #188]	@ (8007544 <xTaskPriorityDisinherit+0xd4>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	693a      	ldr	r2, [r7, #16]
 800748c:	429a      	cmp	r2, r3
 800748e:	d00b      	beq.n	80074a8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007494:	f383 8811 	msr	BASEPRI, r3
 8007498:	f3bf 8f6f 	isb	sy
 800749c:	f3bf 8f4f 	dsb	sy
 80074a0:	60fb      	str	r3, [r7, #12]
}
 80074a2:	bf00      	nop
 80074a4:	bf00      	nop
 80074a6:	e7fd      	b.n	80074a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d10b      	bne.n	80074c8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80074b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b4:	f383 8811 	msr	BASEPRI, r3
 80074b8:	f3bf 8f6f 	isb	sy
 80074bc:	f3bf 8f4f 	dsb	sy
 80074c0:	60bb      	str	r3, [r7, #8]
}
 80074c2:	bf00      	nop
 80074c4:	bf00      	nop
 80074c6:	e7fd      	b.n	80074c4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074cc:	1e5a      	subs	r2, r3, #1
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80074da:	429a      	cmp	r2, r3
 80074dc:	d02c      	beq.n	8007538 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d128      	bne.n	8007538 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80074e6:	693b      	ldr	r3, [r7, #16]
 80074e8:	3304      	adds	r3, #4
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe f926 	bl	800573c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80074f4:	693b      	ldr	r3, [r7, #16]
 80074f6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f8:	693b      	ldr	r3, [r7, #16]
 80074fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80074fc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007504:	693b      	ldr	r3, [r7, #16]
 8007506:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007508:	4b0f      	ldr	r3, [pc, #60]	@ (8007548 <xTaskPriorityDisinherit+0xd8>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d903      	bls.n	8007518 <xTaskPriorityDisinherit+0xa8>
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007514:	4a0c      	ldr	r2, [pc, #48]	@ (8007548 <xTaskPriorityDisinherit+0xd8>)
 8007516:	6013      	str	r3, [r2, #0]
 8007518:	693b      	ldr	r3, [r7, #16]
 800751a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800751c:	4613      	mov	r3, r2
 800751e:	009b      	lsls	r3, r3, #2
 8007520:	4413      	add	r3, r2
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	4a09      	ldr	r2, [pc, #36]	@ (800754c <xTaskPriorityDisinherit+0xdc>)
 8007526:	441a      	add	r2, r3
 8007528:	693b      	ldr	r3, [r7, #16]
 800752a:	3304      	adds	r3, #4
 800752c:	4619      	mov	r1, r3
 800752e:	4610      	mov	r0, r2
 8007530:	f7fe f8a7 	bl	8005682 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007534:	2301      	movs	r3, #1
 8007536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007538:	697b      	ldr	r3, [r7, #20]
	}
 800753a:	4618      	mov	r0, r3
 800753c:	3718      	adds	r7, #24
 800753e:	46bd      	mov	sp, r7
 8007540:	bd80      	pop	{r7, pc}
 8007542:	bf00      	nop
 8007544:	200066c8 	.word	0x200066c8
 8007548:	20006ba4 	.word	0x20006ba4
 800754c:	200066cc 	.word	0x200066cc

08007550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007550:	b580      	push	{r7, lr}
 8007552:	b088      	sub	sp, #32
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]
 8007558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800755e:	2301      	movs	r3, #1
 8007560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d06c      	beq.n	8007642 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800756c:	2b00      	cmp	r3, #0
 800756e:	d10b      	bne.n	8007588 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007574:	f383 8811 	msr	BASEPRI, r3
 8007578:	f3bf 8f6f 	isb	sy
 800757c:	f3bf 8f4f 	dsb	sy
 8007580:	60fb      	str	r3, [r7, #12]
}
 8007582:	bf00      	nop
 8007584:	bf00      	nop
 8007586:	e7fd      	b.n	8007584 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007588:	69bb      	ldr	r3, [r7, #24]
 800758a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800758c:	683a      	ldr	r2, [r7, #0]
 800758e:	429a      	cmp	r2, r3
 8007590:	d902      	bls.n	8007598 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	61fb      	str	r3, [r7, #28]
 8007596:	e002      	b.n	800759e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007598:	69bb      	ldr	r3, [r7, #24]
 800759a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800759c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800759e:	69bb      	ldr	r3, [r7, #24]
 80075a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075a2:	69fa      	ldr	r2, [r7, #28]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	d04c      	beq.n	8007642 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80075a8:	69bb      	ldr	r3, [r7, #24]
 80075aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075ac:	697a      	ldr	r2, [r7, #20]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d147      	bne.n	8007642 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80075b2:	4b26      	ldr	r3, [pc, #152]	@ (800764c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	69ba      	ldr	r2, [r7, #24]
 80075b8:	429a      	cmp	r2, r3
 80075ba:	d10b      	bne.n	80075d4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 80075bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075c0:	f383 8811 	msr	BASEPRI, r3
 80075c4:	f3bf 8f6f 	isb	sy
 80075c8:	f3bf 8f4f 	dsb	sy
 80075cc:	60bb      	str	r3, [r7, #8]
}
 80075ce:	bf00      	nop
 80075d0:	bf00      	nop
 80075d2:	e7fd      	b.n	80075d0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80075d4:	69bb      	ldr	r3, [r7, #24]
 80075d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80075d8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	69fa      	ldr	r2, [r7, #28]
 80075de:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80075e0:	69bb      	ldr	r3, [r7, #24]
 80075e2:	699b      	ldr	r3, [r3, #24]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	db04      	blt.n	80075f2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80075f2:	69bb      	ldr	r3, [r7, #24]
 80075f4:	6959      	ldr	r1, [r3, #20]
 80075f6:	693a      	ldr	r2, [r7, #16]
 80075f8:	4613      	mov	r3, r2
 80075fa:	009b      	lsls	r3, r3, #2
 80075fc:	4413      	add	r3, r2
 80075fe:	009b      	lsls	r3, r3, #2
 8007600:	4a13      	ldr	r2, [pc, #76]	@ (8007650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007602:	4413      	add	r3, r2
 8007604:	4299      	cmp	r1, r3
 8007606:	d11c      	bne.n	8007642 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007608:	69bb      	ldr	r3, [r7, #24]
 800760a:	3304      	adds	r3, #4
 800760c:	4618      	mov	r0, r3
 800760e:	f7fe f895 	bl	800573c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007612:	69bb      	ldr	r3, [r7, #24]
 8007614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007616:	4b0f      	ldr	r3, [pc, #60]	@ (8007654 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d903      	bls.n	8007626 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007622:	4a0c      	ldr	r2, [pc, #48]	@ (8007654 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007624:	6013      	str	r3, [r2, #0]
 8007626:	69bb      	ldr	r3, [r7, #24]
 8007628:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800762a:	4613      	mov	r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	4413      	add	r3, r2
 8007630:	009b      	lsls	r3, r3, #2
 8007632:	4a07      	ldr	r2, [pc, #28]	@ (8007650 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007634:	441a      	add	r2, r3
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	3304      	adds	r3, #4
 800763a:	4619      	mov	r1, r3
 800763c:	4610      	mov	r0, r2
 800763e:	f7fe f820 	bl	8005682 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007642:	bf00      	nop
 8007644:	3720      	adds	r7, #32
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}
 800764a:	bf00      	nop
 800764c:	200066c8 	.word	0x200066c8
 8007650:	200066cc 	.word	0x200066cc
 8007654:	20006ba4 	.word	0x20006ba4

08007658 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007658:	b480      	push	{r7}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800765e:	4b09      	ldr	r3, [pc, #36]	@ (8007684 <uxTaskResetEventItemValue+0x2c>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007666:	4b07      	ldr	r3, [pc, #28]	@ (8007684 <uxTaskResetEventItemValue+0x2c>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800766c:	4b05      	ldr	r3, [pc, #20]	@ (8007684 <uxTaskResetEventItemValue+0x2c>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8007674:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007676:	687b      	ldr	r3, [r7, #4]
}
 8007678:	4618      	mov	r0, r3
 800767a:	370c      	adds	r7, #12
 800767c:	46bd      	mov	sp, r7
 800767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007682:	4770      	bx	lr
 8007684:	200066c8 	.word	0x200066c8

08007688 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800768c:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d004      	beq.n	800769e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800769a:	3201      	adds	r2, #1
 800769c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800769e:	4b03      	ldr	r3, [pc, #12]	@ (80076ac <pvTaskIncrementMutexHeldCount+0x24>)
 80076a0:	681b      	ldr	r3, [r3, #0]
	}
 80076a2:	4618      	mov	r0, r3
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr
 80076ac:	200066c8 	.word	0x200066c8

080076b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80076ba:	4b21      	ldr	r3, [pc, #132]	@ (8007740 <prvAddCurrentTaskToDelayedList+0x90>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80076c0:	4b20      	ldr	r3, [pc, #128]	@ (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	3304      	adds	r3, #4
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe f838 	bl	800573c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80076d2:	d10a      	bne.n	80076ea <prvAddCurrentTaskToDelayedList+0x3a>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80076da:	4b1a      	ldr	r3, [pc, #104]	@ (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	3304      	adds	r3, #4
 80076e0:	4619      	mov	r1, r3
 80076e2:	4819      	ldr	r0, [pc, #100]	@ (8007748 <prvAddCurrentTaskToDelayedList+0x98>)
 80076e4:	f7fd ffcd 	bl	8005682 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80076e8:	e026      	b.n	8007738 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80076ea:	68fa      	ldr	r2, [r7, #12]
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	4413      	add	r3, r2
 80076f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80076f2:	4b14      	ldr	r3, [pc, #80]	@ (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	68ba      	ldr	r2, [r7, #8]
 80076f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d209      	bcs.n	8007716 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007702:	4b12      	ldr	r3, [pc, #72]	@ (800774c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007704:	681a      	ldr	r2, [r3, #0]
 8007706:	4b0f      	ldr	r3, [pc, #60]	@ (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	3304      	adds	r3, #4
 800770c:	4619      	mov	r1, r3
 800770e:	4610      	mov	r0, r2
 8007710:	f7fd ffdb 	bl	80056ca <vListInsert>
}
 8007714:	e010      	b.n	8007738 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007716:	4b0e      	ldr	r3, [pc, #56]	@ (8007750 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	4b0a      	ldr	r3, [pc, #40]	@ (8007744 <prvAddCurrentTaskToDelayedList+0x94>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	3304      	adds	r3, #4
 8007720:	4619      	mov	r1, r3
 8007722:	4610      	mov	r0, r2
 8007724:	f7fd ffd1 	bl	80056ca <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007728:	4b0a      	ldr	r3, [pc, #40]	@ (8007754 <prvAddCurrentTaskToDelayedList+0xa4>)
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	68ba      	ldr	r2, [r7, #8]
 800772e:	429a      	cmp	r2, r3
 8007730:	d202      	bcs.n	8007738 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007732:	4a08      	ldr	r2, [pc, #32]	@ (8007754 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007734:	68bb      	ldr	r3, [r7, #8]
 8007736:	6013      	str	r3, [r2, #0]
}
 8007738:	bf00      	nop
 800773a:	3710      	adds	r7, #16
 800773c:	46bd      	mov	sp, r7
 800773e:	bd80      	pop	{r7, pc}
 8007740:	20006ba0 	.word	0x20006ba0
 8007744:	200066c8 	.word	0x200066c8
 8007748:	20006b88 	.word	0x20006b88
 800774c:	20006b58 	.word	0x20006b58
 8007750:	20006b54 	.word	0x20006b54
 8007754:	20006bbc 	.word	0x20006bbc

08007758 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	@ 0x28
 800775c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800775e:	2300      	movs	r3, #0
 8007760:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007762:	f000 fb13 	bl	8007d8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007766:	4b1d      	ldr	r3, [pc, #116]	@ (80077dc <xTimerCreateTimerTask+0x84>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d021      	beq.n	80077b2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800776e:	2300      	movs	r3, #0
 8007770:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007772:	2300      	movs	r3, #0
 8007774:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007776:	1d3a      	adds	r2, r7, #4
 8007778:	f107 0108 	add.w	r1, r7, #8
 800777c:	f107 030c 	add.w	r3, r7, #12
 8007780:	4618      	mov	r0, r3
 8007782:	f7fd fd41 	bl	8005208 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007786:	6879      	ldr	r1, [r7, #4]
 8007788:	68bb      	ldr	r3, [r7, #8]
 800778a:	68fa      	ldr	r2, [r7, #12]
 800778c:	9202      	str	r2, [sp, #8]
 800778e:	9301      	str	r3, [sp, #4]
 8007790:	2302      	movs	r3, #2
 8007792:	9300      	str	r3, [sp, #0]
 8007794:	2300      	movs	r3, #0
 8007796:	460a      	mov	r2, r1
 8007798:	4911      	ldr	r1, [pc, #68]	@ (80077e0 <xTimerCreateTimerTask+0x88>)
 800779a:	4812      	ldr	r0, [pc, #72]	@ (80077e4 <xTimerCreateTimerTask+0x8c>)
 800779c:	f7fe ff0e 	bl	80065bc <xTaskCreateStatic>
 80077a0:	4603      	mov	r3, r0
 80077a2:	4a11      	ldr	r2, [pc, #68]	@ (80077e8 <xTimerCreateTimerTask+0x90>)
 80077a4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80077a6:	4b10      	ldr	r3, [pc, #64]	@ (80077e8 <xTimerCreateTimerTask+0x90>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d001      	beq.n	80077b2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80077ae:	2301      	movs	r3, #1
 80077b0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d10b      	bne.n	80077d0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80077b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077bc:	f383 8811 	msr	BASEPRI, r3
 80077c0:	f3bf 8f6f 	isb	sy
 80077c4:	f3bf 8f4f 	dsb	sy
 80077c8:	613b      	str	r3, [r7, #16]
}
 80077ca:	bf00      	nop
 80077cc:	bf00      	nop
 80077ce:	e7fd      	b.n	80077cc <xTimerCreateTimerTask+0x74>
	return xReturn;
 80077d0:	697b      	ldr	r3, [r7, #20]
}
 80077d2:	4618      	mov	r0, r3
 80077d4:	3718      	adds	r7, #24
 80077d6:	46bd      	mov	sp, r7
 80077d8:	bd80      	pop	{r7, pc}
 80077da:	bf00      	nop
 80077dc:	20006bf8 	.word	0x20006bf8
 80077e0:	0800cfa8 	.word	0x0800cfa8
 80077e4:	08007925 	.word	0x08007925
 80077e8:	20006bfc 	.word	0x20006bfc

080077ec <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b08a      	sub	sp, #40	@ 0x28
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	60f8      	str	r0, [r7, #12]
 80077f4:	60b9      	str	r1, [r7, #8]
 80077f6:	607a      	str	r2, [r7, #4]
 80077f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10b      	bne.n	800781c <xTimerGenericCommand+0x30>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	623b      	str	r3, [r7, #32]
}
 8007816:	bf00      	nop
 8007818:	bf00      	nop
 800781a:	e7fd      	b.n	8007818 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800781c:	4b19      	ldr	r3, [pc, #100]	@ (8007884 <xTimerGenericCommand+0x98>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	2b00      	cmp	r3, #0
 8007822:	d02a      	beq.n	800787a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007824:	68bb      	ldr	r3, [r7, #8]
 8007826:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	2b05      	cmp	r3, #5
 8007834:	dc18      	bgt.n	8007868 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007836:	f7ff fd95 	bl	8007364 <xTaskGetSchedulerState>
 800783a:	4603      	mov	r3, r0
 800783c:	2b02      	cmp	r3, #2
 800783e:	d109      	bne.n	8007854 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007840:	4b10      	ldr	r3, [pc, #64]	@ (8007884 <xTimerGenericCommand+0x98>)
 8007842:	6818      	ldr	r0, [r3, #0]
 8007844:	f107 0110 	add.w	r1, r7, #16
 8007848:	2300      	movs	r3, #0
 800784a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800784c:	f7fe f99e 	bl	8005b8c <xQueueGenericSend>
 8007850:	6278      	str	r0, [r7, #36]	@ 0x24
 8007852:	e012      	b.n	800787a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007854:	4b0b      	ldr	r3, [pc, #44]	@ (8007884 <xTimerGenericCommand+0x98>)
 8007856:	6818      	ldr	r0, [r3, #0]
 8007858:	f107 0110 	add.w	r1, r7, #16
 800785c:	2300      	movs	r3, #0
 800785e:	2200      	movs	r2, #0
 8007860:	f7fe f994 	bl	8005b8c <xQueueGenericSend>
 8007864:	6278      	str	r0, [r7, #36]	@ 0x24
 8007866:	e008      	b.n	800787a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007868:	4b06      	ldr	r3, [pc, #24]	@ (8007884 <xTimerGenericCommand+0x98>)
 800786a:	6818      	ldr	r0, [r3, #0]
 800786c:	f107 0110 	add.w	r1, r7, #16
 8007870:	2300      	movs	r3, #0
 8007872:	683a      	ldr	r2, [r7, #0]
 8007874:	f7fe fa8c 	bl	8005d90 <xQueueGenericSendFromISR>
 8007878:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800787c:	4618      	mov	r0, r3
 800787e:	3728      	adds	r7, #40	@ 0x28
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	20006bf8 	.word	0x20006bf8

08007888 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b088      	sub	sp, #32
 800788c:	af02      	add	r7, sp, #8
 800788e:	6078      	str	r0, [r7, #4]
 8007890:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007892:	4b23      	ldr	r3, [pc, #140]	@ (8007920 <prvProcessExpiredTimer+0x98>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	68db      	ldr	r3, [r3, #12]
 800789a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800789c:	697b      	ldr	r3, [r7, #20]
 800789e:	3304      	adds	r3, #4
 80078a0:	4618      	mov	r0, r3
 80078a2:	f7fd ff4b 	bl	800573c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d023      	beq.n	80078fc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	699a      	ldr	r2, [r3, #24]
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	18d1      	adds	r1, r2, r3
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	683a      	ldr	r2, [r7, #0]
 80078c0:	6978      	ldr	r0, [r7, #20]
 80078c2:	f000 f8d5 	bl	8007a70 <prvInsertTimerInActiveList>
 80078c6:	4603      	mov	r3, r0
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d020      	beq.n	800790e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078cc:	2300      	movs	r3, #0
 80078ce:	9300      	str	r3, [sp, #0]
 80078d0:	2300      	movs	r3, #0
 80078d2:	687a      	ldr	r2, [r7, #4]
 80078d4:	2100      	movs	r1, #0
 80078d6:	6978      	ldr	r0, [r7, #20]
 80078d8:	f7ff ff88 	bl	80077ec <xTimerGenericCommand>
 80078dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d114      	bne.n	800790e <prvProcessExpiredTimer+0x86>
	__asm volatile
 80078e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e8:	f383 8811 	msr	BASEPRI, r3
 80078ec:	f3bf 8f6f 	isb	sy
 80078f0:	f3bf 8f4f 	dsb	sy
 80078f4:	60fb      	str	r3, [r7, #12]
}
 80078f6:	bf00      	nop
 80078f8:	bf00      	nop
 80078fa:	e7fd      	b.n	80078f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007902:	f023 0301 	bic.w	r3, r3, #1
 8007906:	b2da      	uxtb	r2, r3
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800790e:	697b      	ldr	r3, [r7, #20]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	6978      	ldr	r0, [r7, #20]
 8007914:	4798      	blx	r3
}
 8007916:	bf00      	nop
 8007918:	3718      	adds	r7, #24
 800791a:	46bd      	mov	sp, r7
 800791c:	bd80      	pop	{r7, pc}
 800791e:	bf00      	nop
 8007920:	20006bf0 	.word	0x20006bf0

08007924 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b084      	sub	sp, #16
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800792c:	f107 0308 	add.w	r3, r7, #8
 8007930:	4618      	mov	r0, r3
 8007932:	f000 f859 	bl	80079e8 <prvGetNextExpireTime>
 8007936:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	4619      	mov	r1, r3
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f000 f805 	bl	800794c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007942:	f000 f8d7 	bl	8007af4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007946:	bf00      	nop
 8007948:	e7f0      	b.n	800792c <prvTimerTask+0x8>
	...

0800794c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b084      	sub	sp, #16
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007956:	f7ff f85f 	bl	8006a18 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800795a:	f107 0308 	add.w	r3, r7, #8
 800795e:	4618      	mov	r0, r3
 8007960:	f000 f866 	bl	8007a30 <prvSampleTimeNow>
 8007964:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007966:	68bb      	ldr	r3, [r7, #8]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d130      	bne.n	80079ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d10a      	bne.n	8007988 <prvProcessTimerOrBlockTask+0x3c>
 8007972:	687a      	ldr	r2, [r7, #4]
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	429a      	cmp	r2, r3
 8007978:	d806      	bhi.n	8007988 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800797a:	f7ff f85b 	bl	8006a34 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800797e:	68f9      	ldr	r1, [r7, #12]
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f7ff ff81 	bl	8007888 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007986:	e024      	b.n	80079d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d008      	beq.n	80079a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800798e:	4b13      	ldr	r3, [pc, #76]	@ (80079dc <prvProcessTimerOrBlockTask+0x90>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	2b00      	cmp	r3, #0
 8007996:	d101      	bne.n	800799c <prvProcessTimerOrBlockTask+0x50>
 8007998:	2301      	movs	r3, #1
 800799a:	e000      	b.n	800799e <prvProcessTimerOrBlockTask+0x52>
 800799c:	2300      	movs	r3, #0
 800799e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80079a0:	4b0f      	ldr	r3, [pc, #60]	@ (80079e0 <prvProcessTimerOrBlockTask+0x94>)
 80079a2:	6818      	ldr	r0, [r3, #0]
 80079a4:	687a      	ldr	r2, [r7, #4]
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	1ad3      	subs	r3, r2, r3
 80079aa:	683a      	ldr	r2, [r7, #0]
 80079ac:	4619      	mov	r1, r3
 80079ae:	f7fe fdd1 	bl	8006554 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80079b2:	f7ff f83f 	bl	8006a34 <xTaskResumeAll>
 80079b6:	4603      	mov	r3, r0
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d10a      	bne.n	80079d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80079bc:	4b09      	ldr	r3, [pc, #36]	@ (80079e4 <prvProcessTimerOrBlockTask+0x98>)
 80079be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80079c2:	601a      	str	r2, [r3, #0]
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	f3bf 8f6f 	isb	sy
}
 80079cc:	e001      	b.n	80079d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80079ce:	f7ff f831 	bl	8006a34 <xTaskResumeAll>
}
 80079d2:	bf00      	nop
 80079d4:	3710      	adds	r7, #16
 80079d6:	46bd      	mov	sp, r7
 80079d8:	bd80      	pop	{r7, pc}
 80079da:	bf00      	nop
 80079dc:	20006bf4 	.word	0x20006bf4
 80079e0:	20006bf8 	.word	0x20006bf8
 80079e4:	e000ed04 	.word	0xe000ed04

080079e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80079e8:	b480      	push	{r7}
 80079ea:	b085      	sub	sp, #20
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80079f0:	4b0e      	ldr	r3, [pc, #56]	@ (8007a2c <prvGetNextExpireTime+0x44>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d101      	bne.n	80079fe <prvGetNextExpireTime+0x16>
 80079fa:	2201      	movs	r2, #1
 80079fc:	e000      	b.n	8007a00 <prvGetNextExpireTime+0x18>
 80079fe:	2200      	movs	r2, #0
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	d105      	bne.n	8007a18 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007a0c:	4b07      	ldr	r3, [pc, #28]	@ (8007a2c <prvGetNextExpireTime+0x44>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	60fb      	str	r3, [r7, #12]
 8007a16:	e001      	b.n	8007a1c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007a18:	2300      	movs	r3, #0
 8007a1a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3714      	adds	r7, #20
 8007a22:	46bd      	mov	sp, r7
 8007a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a28:	4770      	bx	lr
 8007a2a:	bf00      	nop
 8007a2c:	20006bf0 	.word	0x20006bf0

08007a30 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b084      	sub	sp, #16
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007a38:	f7ff f89a 	bl	8006b70 <xTaskGetTickCount>
 8007a3c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007a3e:	4b0b      	ldr	r3, [pc, #44]	@ (8007a6c <prvSampleTimeNow+0x3c>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68fa      	ldr	r2, [r7, #12]
 8007a44:	429a      	cmp	r2, r3
 8007a46:	d205      	bcs.n	8007a54 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007a48:	f000 f93a 	bl	8007cc0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2201      	movs	r2, #1
 8007a50:	601a      	str	r2, [r3, #0]
 8007a52:	e002      	b.n	8007a5a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007a5a:	4a04      	ldr	r2, [pc, #16]	@ (8007a6c <prvSampleTimeNow+0x3c>)
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007a60:	68fb      	ldr	r3, [r7, #12]
}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3710      	adds	r7, #16
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20006c00 	.word	0x20006c00

08007a70 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	60f8      	str	r0, [r7, #12]
 8007a78:	60b9      	str	r1, [r7, #8]
 8007a7a:	607a      	str	r2, [r7, #4]
 8007a7c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	68ba      	ldr	r2, [r7, #8]
 8007a86:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	68fa      	ldr	r2, [r7, #12]
 8007a8c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007a8e:	68ba      	ldr	r2, [r7, #8]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d812      	bhi.n	8007abc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a96:	687a      	ldr	r2, [r7, #4]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	1ad2      	subs	r2, r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	699b      	ldr	r3, [r3, #24]
 8007aa0:	429a      	cmp	r2, r3
 8007aa2:	d302      	bcc.n	8007aaa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007aa4:	2301      	movs	r3, #1
 8007aa6:	617b      	str	r3, [r7, #20]
 8007aa8:	e01b      	b.n	8007ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007aaa:	4b10      	ldr	r3, [pc, #64]	@ (8007aec <prvInsertTimerInActiveList+0x7c>)
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f7fd fe08 	bl	80056ca <vListInsert>
 8007aba:	e012      	b.n	8007ae2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007abc:	687a      	ldr	r2, [r7, #4]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d206      	bcs.n	8007ad2 <prvInsertTimerInActiveList+0x62>
 8007ac4:	68ba      	ldr	r2, [r7, #8]
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	429a      	cmp	r2, r3
 8007aca:	d302      	bcc.n	8007ad2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007acc:	2301      	movs	r3, #1
 8007ace:	617b      	str	r3, [r7, #20]
 8007ad0:	e007      	b.n	8007ae2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ad2:	4b07      	ldr	r3, [pc, #28]	@ (8007af0 <prvInsertTimerInActiveList+0x80>)
 8007ad4:	681a      	ldr	r2, [r3, #0]
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	3304      	adds	r3, #4
 8007ada:	4619      	mov	r1, r3
 8007adc:	4610      	mov	r0, r2
 8007ade:	f7fd fdf4 	bl	80056ca <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007ae2:	697b      	ldr	r3, [r7, #20]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3718      	adds	r7, #24
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	20006bf4 	.word	0x20006bf4
 8007af0:	20006bf0 	.word	0x20006bf0

08007af4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b08e      	sub	sp, #56	@ 0x38
 8007af8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007afa:	e0ce      	b.n	8007c9a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	da19      	bge.n	8007b36 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007b02:	1d3b      	adds	r3, r7, #4
 8007b04:	3304      	adds	r3, #4
 8007b06:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d10b      	bne.n	8007b26 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	61fb      	str	r3, [r7, #28]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b2c:	6850      	ldr	r0, [r2, #4]
 8007b2e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007b30:	6892      	ldr	r2, [r2, #8]
 8007b32:	4611      	mov	r1, r2
 8007b34:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f2c0 80ae 	blt.w	8007c9a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d004      	beq.n	8007b54 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4c:	3304      	adds	r3, #4
 8007b4e:	4618      	mov	r0, r3
 8007b50:	f7fd fdf4 	bl	800573c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b54:	463b      	mov	r3, r7
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7ff ff6a 	bl	8007a30 <prvSampleTimeNow>
 8007b5c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	2b09      	cmp	r3, #9
 8007b62:	f200 8097 	bhi.w	8007c94 <prvProcessReceivedCommands+0x1a0>
 8007b66:	a201      	add	r2, pc, #4	@ (adr r2, 8007b6c <prvProcessReceivedCommands+0x78>)
 8007b68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b6c:	08007b95 	.word	0x08007b95
 8007b70:	08007b95 	.word	0x08007b95
 8007b74:	08007b95 	.word	0x08007b95
 8007b78:	08007c0b 	.word	0x08007c0b
 8007b7c:	08007c1f 	.word	0x08007c1f
 8007b80:	08007c6b 	.word	0x08007c6b
 8007b84:	08007b95 	.word	0x08007b95
 8007b88:	08007b95 	.word	0x08007b95
 8007b8c:	08007c0b 	.word	0x08007c0b
 8007b90:	08007c1f 	.word	0x08007c1f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b96:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007b9a:	f043 0301 	orr.w	r3, r3, #1
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ba2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	18d1      	adds	r1, r2, r3
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007bb2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bb4:	f7ff ff5c 	bl	8007a70 <prvInsertTimerInActiveList>
 8007bb8:	4603      	mov	r3, r0
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d06c      	beq.n	8007c98 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc0:	6a1b      	ldr	r3, [r3, #32]
 8007bc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007bc4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007bcc:	f003 0304 	and.w	r3, r3, #4
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d061      	beq.n	8007c98 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007bd4:	68ba      	ldr	r2, [r7, #8]
 8007bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007bd8:	699b      	ldr	r3, [r3, #24]
 8007bda:	441a      	add	r2, r3
 8007bdc:	2300      	movs	r3, #0
 8007bde:	9300      	str	r3, [sp, #0]
 8007be0:	2300      	movs	r3, #0
 8007be2:	2100      	movs	r1, #0
 8007be4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007be6:	f7ff fe01 	bl	80077ec <xTimerGenericCommand>
 8007bea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007bec:	6a3b      	ldr	r3, [r7, #32]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d152      	bne.n	8007c98 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bf6:	f383 8811 	msr	BASEPRI, r3
 8007bfa:	f3bf 8f6f 	isb	sy
 8007bfe:	f3bf 8f4f 	dsb	sy
 8007c02:	61bb      	str	r3, [r7, #24]
}
 8007c04:	bf00      	nop
 8007c06:	bf00      	nop
 8007c08:	e7fd      	b.n	8007c06 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c0c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c10:	f023 0301 	bic.w	r3, r3, #1
 8007c14:	b2da      	uxtb	r2, r3
 8007c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c18:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c1c:	e03d      	b.n	8007c9a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007c1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c24:	f043 0301 	orr.w	r3, r3, #1
 8007c28:	b2da      	uxtb	r2, r3
 8007c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c2c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007c30:	68ba      	ldr	r2, [r7, #8]
 8007c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c34:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007c36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d10b      	bne.n	8007c56 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8007c3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c42:	f383 8811 	msr	BASEPRI, r3
 8007c46:	f3bf 8f6f 	isb	sy
 8007c4a:	f3bf 8f4f 	dsb	sy
 8007c4e:	617b      	str	r3, [r7, #20]
}
 8007c50:	bf00      	nop
 8007c52:	bf00      	nop
 8007c54:	e7fd      	b.n	8007c52 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	699a      	ldr	r2, [r3, #24]
 8007c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5c:	18d1      	adds	r1, r2, r3
 8007c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c64:	f7ff ff04 	bl	8007a70 <prvInsertTimerInActiveList>
					break;
 8007c68:	e017      	b.n	8007c9a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007c6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c6c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c70:	f003 0302 	and.w	r3, r3, #2
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d103      	bne.n	8007c80 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007c78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007c7a:	f000 fc05 	bl	8008488 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007c7e:	e00c      	b.n	8007c9a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c82:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007c86:	f023 0301 	bic.w	r3, r3, #1
 8007c8a:	b2da      	uxtb	r2, r3
 8007c8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c8e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007c92:	e002      	b.n	8007c9a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007c94:	bf00      	nop
 8007c96:	e000      	b.n	8007c9a <prvProcessReceivedCommands+0x1a6>
					break;
 8007c98:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007c9a:	4b08      	ldr	r3, [pc, #32]	@ (8007cbc <prvProcessReceivedCommands+0x1c8>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	1d39      	adds	r1, r7, #4
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7fe f912 	bl	8005ecc <xQueueReceive>
 8007ca8:	4603      	mov	r3, r0
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	f47f af26 	bne.w	8007afc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007cb0:	bf00      	nop
 8007cb2:	bf00      	nop
 8007cb4:	3730      	adds	r7, #48	@ 0x30
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	20006bf8 	.word	0x20006bf8

08007cc0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b088      	sub	sp, #32
 8007cc4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007cc6:	e049      	b.n	8007d5c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007cc8:	4b2e      	ldr	r3, [pc, #184]	@ (8007d84 <prvSwitchTimerLists+0xc4>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	68db      	ldr	r3, [r3, #12]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cd2:	4b2c      	ldr	r3, [pc, #176]	@ (8007d84 <prvSwitchTimerLists+0xc4>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	68db      	ldr	r3, [r3, #12]
 8007cd8:	68db      	ldr	r3, [r3, #12]
 8007cda:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	3304      	adds	r3, #4
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f7fd fd2b 	bl	800573c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	6a1b      	ldr	r3, [r3, #32]
 8007cea:	68f8      	ldr	r0, [r7, #12]
 8007cec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007cf4:	f003 0304 	and.w	r3, r3, #4
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d02f      	beq.n	8007d5c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	699b      	ldr	r3, [r3, #24]
 8007d00:	693a      	ldr	r2, [r7, #16]
 8007d02:	4413      	add	r3, r2
 8007d04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007d06:	68ba      	ldr	r2, [r7, #8]
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d90e      	bls.n	8007d2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	68ba      	ldr	r2, [r7, #8]
 8007d12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	68fa      	ldr	r2, [r7, #12]
 8007d18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007d1a:	4b1a      	ldr	r3, [pc, #104]	@ (8007d84 <prvSwitchTimerLists+0xc4>)
 8007d1c:	681a      	ldr	r2, [r3, #0]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	3304      	adds	r3, #4
 8007d22:	4619      	mov	r1, r3
 8007d24:	4610      	mov	r0, r2
 8007d26:	f7fd fcd0 	bl	80056ca <vListInsert>
 8007d2a:	e017      	b.n	8007d5c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	9300      	str	r3, [sp, #0]
 8007d30:	2300      	movs	r3, #0
 8007d32:	693a      	ldr	r2, [r7, #16]
 8007d34:	2100      	movs	r1, #0
 8007d36:	68f8      	ldr	r0, [r7, #12]
 8007d38:	f7ff fd58 	bl	80077ec <xTimerGenericCommand>
 8007d3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d10b      	bne.n	8007d5c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d48:	f383 8811 	msr	BASEPRI, r3
 8007d4c:	f3bf 8f6f 	isb	sy
 8007d50:	f3bf 8f4f 	dsb	sy
 8007d54:	603b      	str	r3, [r7, #0]
}
 8007d56:	bf00      	nop
 8007d58:	bf00      	nop
 8007d5a:	e7fd      	b.n	8007d58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007d5c:	4b09      	ldr	r3, [pc, #36]	@ (8007d84 <prvSwitchTimerLists+0xc4>)
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d1b0      	bne.n	8007cc8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007d66:	4b07      	ldr	r3, [pc, #28]	@ (8007d84 <prvSwitchTimerLists+0xc4>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007d6c:	4b06      	ldr	r3, [pc, #24]	@ (8007d88 <prvSwitchTimerLists+0xc8>)
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	4a04      	ldr	r2, [pc, #16]	@ (8007d84 <prvSwitchTimerLists+0xc4>)
 8007d72:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007d74:	4a04      	ldr	r2, [pc, #16]	@ (8007d88 <prvSwitchTimerLists+0xc8>)
 8007d76:	697b      	ldr	r3, [r7, #20]
 8007d78:	6013      	str	r3, [r2, #0]
}
 8007d7a:	bf00      	nop
 8007d7c:	3718      	adds	r7, #24
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20006bf0 	.word	0x20006bf0
 8007d88:	20006bf4 	.word	0x20006bf4

08007d8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007d92:	f000 f989 	bl	80080a8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007d96:	4b15      	ldr	r3, [pc, #84]	@ (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d120      	bne.n	8007de0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007d9e:	4814      	ldr	r0, [pc, #80]	@ (8007df0 <prvCheckForValidListAndQueue+0x64>)
 8007da0:	f7fd fc42 	bl	8005628 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007da4:	4813      	ldr	r0, [pc, #76]	@ (8007df4 <prvCheckForValidListAndQueue+0x68>)
 8007da6:	f7fd fc3f 	bl	8005628 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007daa:	4b13      	ldr	r3, [pc, #76]	@ (8007df8 <prvCheckForValidListAndQueue+0x6c>)
 8007dac:	4a10      	ldr	r2, [pc, #64]	@ (8007df0 <prvCheckForValidListAndQueue+0x64>)
 8007dae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007db0:	4b12      	ldr	r3, [pc, #72]	@ (8007dfc <prvCheckForValidListAndQueue+0x70>)
 8007db2:	4a10      	ldr	r2, [pc, #64]	@ (8007df4 <prvCheckForValidListAndQueue+0x68>)
 8007db4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007db6:	2300      	movs	r3, #0
 8007db8:	9300      	str	r3, [sp, #0]
 8007dba:	4b11      	ldr	r3, [pc, #68]	@ (8007e00 <prvCheckForValidListAndQueue+0x74>)
 8007dbc:	4a11      	ldr	r2, [pc, #68]	@ (8007e04 <prvCheckForValidListAndQueue+0x78>)
 8007dbe:	2110      	movs	r1, #16
 8007dc0:	200a      	movs	r0, #10
 8007dc2:	f7fd fd4f 	bl	8005864 <xQueueGenericCreateStatic>
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	4a08      	ldr	r2, [pc, #32]	@ (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007dcc:	4b07      	ldr	r3, [pc, #28]	@ (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d005      	beq.n	8007de0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007dd4:	4b05      	ldr	r3, [pc, #20]	@ (8007dec <prvCheckForValidListAndQueue+0x60>)
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	490b      	ldr	r1, [pc, #44]	@ (8007e08 <prvCheckForValidListAndQueue+0x7c>)
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe fb90 	bl	8006500 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007de0:	f000 f994 	bl	800810c <vPortExitCritical>
}
 8007de4:	bf00      	nop
 8007de6:	46bd      	mov	sp, r7
 8007de8:	bd80      	pop	{r7, pc}
 8007dea:	bf00      	nop
 8007dec:	20006bf8 	.word	0x20006bf8
 8007df0:	20006bc8 	.word	0x20006bc8
 8007df4:	20006bdc 	.word	0x20006bdc
 8007df8:	20006bf0 	.word	0x20006bf0
 8007dfc:	20006bf4 	.word	0x20006bf4
 8007e00:	20006ca4 	.word	0x20006ca4
 8007e04:	20006c04 	.word	0x20006c04
 8007e08:	0800cfb0 	.word	0x0800cfb0

08007e0c <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b08a      	sub	sp, #40	@ 0x28
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	60f8      	str	r0, [r7, #12]
 8007e14:	60b9      	str	r1, [r7, #8]
 8007e16:	607a      	str	r2, [r7, #4]
 8007e18:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8007e1a:	f06f 0301 	mvn.w	r3, #1
 8007e1e:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007e2c:	4b06      	ldr	r3, [pc, #24]	@ (8007e48 <xTimerPendFunctionCallFromISR+0x3c>)
 8007e2e:	6818      	ldr	r0, [r3, #0]
 8007e30:	f107 0114 	add.w	r1, r7, #20
 8007e34:	2300      	movs	r3, #0
 8007e36:	683a      	ldr	r2, [r7, #0]
 8007e38:	f7fd ffaa 	bl	8005d90 <xQueueGenericSendFromISR>
 8007e3c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8007e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8007e40:	4618      	mov	r0, r3
 8007e42:	3728      	adds	r7, #40	@ 0x28
 8007e44:	46bd      	mov	sp, r7
 8007e46:	bd80      	pop	{r7, pc}
 8007e48:	20006bf8 	.word	0x20006bf8

08007e4c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007e4c:	b480      	push	{r7}
 8007e4e:	b085      	sub	sp, #20
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	3b04      	subs	r3, #4
 8007e5c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007e64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	3b04      	subs	r3, #4
 8007e6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	f023 0201 	bic.w	r2, r3, #1
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	3b04      	subs	r3, #4
 8007e7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007e7c:	4a0c      	ldr	r2, [pc, #48]	@ (8007eb0 <pxPortInitialiseStack+0x64>)
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	3b14      	subs	r3, #20
 8007e86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007e88:	687a      	ldr	r2, [r7, #4]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	3b04      	subs	r3, #4
 8007e92:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f06f 0202 	mvn.w	r2, #2
 8007e9a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	3b20      	subs	r3, #32
 8007ea0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007ea2:	68fb      	ldr	r3, [r7, #12]
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3714      	adds	r7, #20
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr
 8007eb0:	08007eb5 	.word	0x08007eb5

08007eb4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	b085      	sub	sp, #20
 8007eb8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007eba:	2300      	movs	r3, #0
 8007ebc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ebe:	4b13      	ldr	r3, [pc, #76]	@ (8007f0c <prvTaskExitError+0x58>)
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ec6:	d00b      	beq.n	8007ee0 <prvTaskExitError+0x2c>
	__asm volatile
 8007ec8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ecc:	f383 8811 	msr	BASEPRI, r3
 8007ed0:	f3bf 8f6f 	isb	sy
 8007ed4:	f3bf 8f4f 	dsb	sy
 8007ed8:	60fb      	str	r3, [r7, #12]
}
 8007eda:	bf00      	nop
 8007edc:	bf00      	nop
 8007ede:	e7fd      	b.n	8007edc <prvTaskExitError+0x28>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	60bb      	str	r3, [r7, #8]
}
 8007ef2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007ef4:	bf00      	nop
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d0fc      	beq.n	8007ef6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007efc:	bf00      	nop
 8007efe:	bf00      	nop
 8007f00:	3714      	adds	r7, #20
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	2000000c 	.word	0x2000000c

08007f10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007f10:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <pxCurrentTCBConst2>)
 8007f12:	6819      	ldr	r1, [r3, #0]
 8007f14:	6808      	ldr	r0, [r1, #0]
 8007f16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f1a:	f380 8809 	msr	PSP, r0
 8007f1e:	f3bf 8f6f 	isb	sy
 8007f22:	f04f 0000 	mov.w	r0, #0
 8007f26:	f380 8811 	msr	BASEPRI, r0
 8007f2a:	4770      	bx	lr
 8007f2c:	f3af 8000 	nop.w

08007f30 <pxCurrentTCBConst2>:
 8007f30:	200066c8 	.word	0x200066c8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007f34:	bf00      	nop
 8007f36:	bf00      	nop

08007f38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007f38:	4808      	ldr	r0, [pc, #32]	@ (8007f5c <prvPortStartFirstTask+0x24>)
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	6800      	ldr	r0, [r0, #0]
 8007f3e:	f380 8808 	msr	MSP, r0
 8007f42:	f04f 0000 	mov.w	r0, #0
 8007f46:	f380 8814 	msr	CONTROL, r0
 8007f4a:	b662      	cpsie	i
 8007f4c:	b661      	cpsie	f
 8007f4e:	f3bf 8f4f 	dsb	sy
 8007f52:	f3bf 8f6f 	isb	sy
 8007f56:	df00      	svc	0
 8007f58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007f5a:	bf00      	nop
 8007f5c:	e000ed08 	.word	0xe000ed08

08007f60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007f60:	b580      	push	{r7, lr}
 8007f62:	b086      	sub	sp, #24
 8007f64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007f66:	4b47      	ldr	r3, [pc, #284]	@ (8008084 <xPortStartScheduler+0x124>)
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	4a47      	ldr	r2, [pc, #284]	@ (8008088 <xPortStartScheduler+0x128>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d10b      	bne.n	8007f88 <xPortStartScheduler+0x28>
	__asm volatile
 8007f70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f74:	f383 8811 	msr	BASEPRI, r3
 8007f78:	f3bf 8f6f 	isb	sy
 8007f7c:	f3bf 8f4f 	dsb	sy
 8007f80:	60fb      	str	r3, [r7, #12]
}
 8007f82:	bf00      	nop
 8007f84:	bf00      	nop
 8007f86:	e7fd      	b.n	8007f84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007f88:	4b3e      	ldr	r3, [pc, #248]	@ (8008084 <xPortStartScheduler+0x124>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	4a3f      	ldr	r2, [pc, #252]	@ (800808c <xPortStartScheduler+0x12c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d10b      	bne.n	8007faa <xPortStartScheduler+0x4a>
	__asm volatile
 8007f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f96:	f383 8811 	msr	BASEPRI, r3
 8007f9a:	f3bf 8f6f 	isb	sy
 8007f9e:	f3bf 8f4f 	dsb	sy
 8007fa2:	613b      	str	r3, [r7, #16]
}
 8007fa4:	bf00      	nop
 8007fa6:	bf00      	nop
 8007fa8:	e7fd      	b.n	8007fa6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007faa:	4b39      	ldr	r3, [pc, #228]	@ (8008090 <xPortStartScheduler+0x130>)
 8007fac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	781b      	ldrb	r3, [r3, #0]
 8007fb2:	b2db      	uxtb	r3, r3
 8007fb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007fb6:	697b      	ldr	r3, [r7, #20]
 8007fb8:	22ff      	movs	r2, #255	@ 0xff
 8007fba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	781b      	ldrb	r3, [r3, #0]
 8007fc0:	b2db      	uxtb	r3, r3
 8007fc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007fc4:	78fb      	ldrb	r3, [r7, #3]
 8007fc6:	b2db      	uxtb	r3, r3
 8007fc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007fcc:	b2da      	uxtb	r2, r3
 8007fce:	4b31      	ldr	r3, [pc, #196]	@ (8008094 <xPortStartScheduler+0x134>)
 8007fd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007fd2:	4b31      	ldr	r3, [pc, #196]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fd4:	2207      	movs	r2, #7
 8007fd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fd8:	e009      	b.n	8007fee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007fda:	4b2f      	ldr	r3, [pc, #188]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	3b01      	subs	r3, #1
 8007fe0:	4a2d      	ldr	r2, [pc, #180]	@ (8008098 <xPortStartScheduler+0x138>)
 8007fe2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007fe4:	78fb      	ldrb	r3, [r7, #3]
 8007fe6:	b2db      	uxtb	r3, r3
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007fee:	78fb      	ldrb	r3, [r7, #3]
 8007ff0:	b2db      	uxtb	r3, r3
 8007ff2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ff6:	2b80      	cmp	r3, #128	@ 0x80
 8007ff8:	d0ef      	beq.n	8007fda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007ffa:	4b27      	ldr	r3, [pc, #156]	@ (8008098 <xPortStartScheduler+0x138>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f1c3 0307 	rsb	r3, r3, #7
 8008002:	2b04      	cmp	r3, #4
 8008004:	d00b      	beq.n	800801e <xPortStartScheduler+0xbe>
	__asm volatile
 8008006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800800a:	f383 8811 	msr	BASEPRI, r3
 800800e:	f3bf 8f6f 	isb	sy
 8008012:	f3bf 8f4f 	dsb	sy
 8008016:	60bb      	str	r3, [r7, #8]
}
 8008018:	bf00      	nop
 800801a:	bf00      	nop
 800801c:	e7fd      	b.n	800801a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800801e:	4b1e      	ldr	r3, [pc, #120]	@ (8008098 <xPortStartScheduler+0x138>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	021b      	lsls	r3, r3, #8
 8008024:	4a1c      	ldr	r2, [pc, #112]	@ (8008098 <xPortStartScheduler+0x138>)
 8008026:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008028:	4b1b      	ldr	r3, [pc, #108]	@ (8008098 <xPortStartScheduler+0x138>)
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008030:	4a19      	ldr	r2, [pc, #100]	@ (8008098 <xPortStartScheduler+0x138>)
 8008032:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	b2da      	uxtb	r2, r3
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800803c:	4b17      	ldr	r3, [pc, #92]	@ (800809c <xPortStartScheduler+0x13c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	4a16      	ldr	r2, [pc, #88]	@ (800809c <xPortStartScheduler+0x13c>)
 8008042:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008046:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008048:	4b14      	ldr	r3, [pc, #80]	@ (800809c <xPortStartScheduler+0x13c>)
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	4a13      	ldr	r2, [pc, #76]	@ (800809c <xPortStartScheduler+0x13c>)
 800804e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008052:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008054:	f000 f8da 	bl	800820c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008058:	4b11      	ldr	r3, [pc, #68]	@ (80080a0 <xPortStartScheduler+0x140>)
 800805a:	2200      	movs	r2, #0
 800805c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800805e:	f000 f8f9 	bl	8008254 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008062:	4b10      	ldr	r3, [pc, #64]	@ (80080a4 <xPortStartScheduler+0x144>)
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	4a0f      	ldr	r2, [pc, #60]	@ (80080a4 <xPortStartScheduler+0x144>)
 8008068:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800806c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800806e:	f7ff ff63 	bl	8007f38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008072:	f7fe fe47 	bl	8006d04 <vTaskSwitchContext>
	prvTaskExitError();
 8008076:	f7ff ff1d 	bl	8007eb4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800807a:	2300      	movs	r3, #0
}
 800807c:	4618      	mov	r0, r3
 800807e:	3718      	adds	r7, #24
 8008080:	46bd      	mov	sp, r7
 8008082:	bd80      	pop	{r7, pc}
 8008084:	e000ed00 	.word	0xe000ed00
 8008088:	410fc271 	.word	0x410fc271
 800808c:	410fc270 	.word	0x410fc270
 8008090:	e000e400 	.word	0xe000e400
 8008094:	20006cf4 	.word	0x20006cf4
 8008098:	20006cf8 	.word	0x20006cf8
 800809c:	e000ed20 	.word	0xe000ed20
 80080a0:	2000000c 	.word	0x2000000c
 80080a4:	e000ef34 	.word	0xe000ef34

080080a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80080a8:	b480      	push	{r7}
 80080aa:	b083      	sub	sp, #12
 80080ac:	af00      	add	r7, sp, #0
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	607b      	str	r3, [r7, #4]
}
 80080c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80080c2:	4b10      	ldr	r3, [pc, #64]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	3301      	adds	r3, #1
 80080c8:	4a0e      	ldr	r2, [pc, #56]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080ca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80080cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008104 <vPortEnterCritical+0x5c>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d110      	bne.n	80080f6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80080d4:	4b0c      	ldr	r3, [pc, #48]	@ (8008108 <vPortEnterCritical+0x60>)
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	b2db      	uxtb	r3, r3
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d00b      	beq.n	80080f6 <vPortEnterCritical+0x4e>
	__asm volatile
 80080de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e2:	f383 8811 	msr	BASEPRI, r3
 80080e6:	f3bf 8f6f 	isb	sy
 80080ea:	f3bf 8f4f 	dsb	sy
 80080ee:	603b      	str	r3, [r7, #0]
}
 80080f0:	bf00      	nop
 80080f2:	bf00      	nop
 80080f4:	e7fd      	b.n	80080f2 <vPortEnterCritical+0x4a>
	}
}
 80080f6:	bf00      	nop
 80080f8:	370c      	adds	r7, #12
 80080fa:	46bd      	mov	sp, r7
 80080fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008100:	4770      	bx	lr
 8008102:	bf00      	nop
 8008104:	2000000c 	.word	0x2000000c
 8008108:	e000ed04 	.word	0xe000ed04

0800810c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800810c:	b480      	push	{r7}
 800810e:	b083      	sub	sp, #12
 8008110:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008112:	4b12      	ldr	r3, [pc, #72]	@ (800815c <vPortExitCritical+0x50>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	2b00      	cmp	r3, #0
 8008118:	d10b      	bne.n	8008132 <vPortExitCritical+0x26>
	__asm volatile
 800811a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800811e:	f383 8811 	msr	BASEPRI, r3
 8008122:	f3bf 8f6f 	isb	sy
 8008126:	f3bf 8f4f 	dsb	sy
 800812a:	607b      	str	r3, [r7, #4]
}
 800812c:	bf00      	nop
 800812e:	bf00      	nop
 8008130:	e7fd      	b.n	800812e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008132:	4b0a      	ldr	r3, [pc, #40]	@ (800815c <vPortExitCritical+0x50>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	3b01      	subs	r3, #1
 8008138:	4a08      	ldr	r2, [pc, #32]	@ (800815c <vPortExitCritical+0x50>)
 800813a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800813c:	4b07      	ldr	r3, [pc, #28]	@ (800815c <vPortExitCritical+0x50>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	2b00      	cmp	r3, #0
 8008142:	d105      	bne.n	8008150 <vPortExitCritical+0x44>
 8008144:	2300      	movs	r3, #0
 8008146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	f383 8811 	msr	BASEPRI, r3
}
 800814e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008150:	bf00      	nop
 8008152:	370c      	adds	r7, #12
 8008154:	46bd      	mov	sp, r7
 8008156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815a:	4770      	bx	lr
 800815c:	2000000c 	.word	0x2000000c

08008160 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008160:	f3ef 8009 	mrs	r0, PSP
 8008164:	f3bf 8f6f 	isb	sy
 8008168:	4b15      	ldr	r3, [pc, #84]	@ (80081c0 <pxCurrentTCBConst>)
 800816a:	681a      	ldr	r2, [r3, #0]
 800816c:	f01e 0f10 	tst.w	lr, #16
 8008170:	bf08      	it	eq
 8008172:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008176:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800817a:	6010      	str	r0, [r2, #0]
 800817c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008180:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008184:	f380 8811 	msr	BASEPRI, r0
 8008188:	f3bf 8f4f 	dsb	sy
 800818c:	f3bf 8f6f 	isb	sy
 8008190:	f7fe fdb8 	bl	8006d04 <vTaskSwitchContext>
 8008194:	f04f 0000 	mov.w	r0, #0
 8008198:	f380 8811 	msr	BASEPRI, r0
 800819c:	bc09      	pop	{r0, r3}
 800819e:	6819      	ldr	r1, [r3, #0]
 80081a0:	6808      	ldr	r0, [r1, #0]
 80081a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a6:	f01e 0f10 	tst.w	lr, #16
 80081aa:	bf08      	it	eq
 80081ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80081b0:	f380 8809 	msr	PSP, r0
 80081b4:	f3bf 8f6f 	isb	sy
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop
 80081bc:	f3af 8000 	nop.w

080081c0 <pxCurrentTCBConst>:
 80081c0:	200066c8 	.word	0x200066c8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80081c4:	bf00      	nop
 80081c6:	bf00      	nop

080081c8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b082      	sub	sp, #8
 80081cc:	af00      	add	r7, sp, #0
	__asm volatile
 80081ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081d2:	f383 8811 	msr	BASEPRI, r3
 80081d6:	f3bf 8f6f 	isb	sy
 80081da:	f3bf 8f4f 	dsb	sy
 80081de:	607b      	str	r3, [r7, #4]
}
 80081e0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80081e2:	f7fe fcd5 	bl	8006b90 <xTaskIncrementTick>
 80081e6:	4603      	mov	r3, r0
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d003      	beq.n	80081f4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80081ec:	4b06      	ldr	r3, [pc, #24]	@ (8008208 <xPortSysTickHandler+0x40>)
 80081ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081f2:	601a      	str	r2, [r3, #0]
 80081f4:	2300      	movs	r3, #0
 80081f6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80081f8:	683b      	ldr	r3, [r7, #0]
 80081fa:	f383 8811 	msr	BASEPRI, r3
}
 80081fe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008200:	bf00      	nop
 8008202:	3708      	adds	r7, #8
 8008204:	46bd      	mov	sp, r7
 8008206:	bd80      	pop	{r7, pc}
 8008208:	e000ed04 	.word	0xe000ed04

0800820c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800820c:	b480      	push	{r7}
 800820e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008210:	4b0b      	ldr	r3, [pc, #44]	@ (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008212:	2200      	movs	r2, #0
 8008214:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008216:	4b0b      	ldr	r3, [pc, #44]	@ (8008244 <vPortSetupTimerInterrupt+0x38>)
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800821c:	4b0a      	ldr	r3, [pc, #40]	@ (8008248 <vPortSetupTimerInterrupt+0x3c>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a0a      	ldr	r2, [pc, #40]	@ (800824c <vPortSetupTimerInterrupt+0x40>)
 8008222:	fba2 2303 	umull	r2, r3, r2, r3
 8008226:	099b      	lsrs	r3, r3, #6
 8008228:	4a09      	ldr	r2, [pc, #36]	@ (8008250 <vPortSetupTimerInterrupt+0x44>)
 800822a:	3b01      	subs	r3, #1
 800822c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800822e:	4b04      	ldr	r3, [pc, #16]	@ (8008240 <vPortSetupTimerInterrupt+0x34>)
 8008230:	2207      	movs	r2, #7
 8008232:	601a      	str	r2, [r3, #0]
}
 8008234:	bf00      	nop
 8008236:	46bd      	mov	sp, r7
 8008238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	e000e010 	.word	0xe000e010
 8008244:	e000e018 	.word	0xe000e018
 8008248:	20000000 	.word	0x20000000
 800824c:	10624dd3 	.word	0x10624dd3
 8008250:	e000e014 	.word	0xe000e014

08008254 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008254:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008264 <vPortEnableVFP+0x10>
 8008258:	6801      	ldr	r1, [r0, #0]
 800825a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800825e:	6001      	str	r1, [r0, #0]
 8008260:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008262:	bf00      	nop
 8008264:	e000ed88 	.word	0xe000ed88

08008268 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008268:	b480      	push	{r7}
 800826a:	b085      	sub	sp, #20
 800826c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800826e:	f3ef 8305 	mrs	r3, IPSR
 8008272:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	2b0f      	cmp	r3, #15
 8008278:	d915      	bls.n	80082a6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800827a:	4a18      	ldr	r2, [pc, #96]	@ (80082dc <vPortValidateInterruptPriority+0x74>)
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	4413      	add	r3, r2
 8008280:	781b      	ldrb	r3, [r3, #0]
 8008282:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008284:	4b16      	ldr	r3, [pc, #88]	@ (80082e0 <vPortValidateInterruptPriority+0x78>)
 8008286:	781b      	ldrb	r3, [r3, #0]
 8008288:	7afa      	ldrb	r2, [r7, #11]
 800828a:	429a      	cmp	r2, r3
 800828c:	d20b      	bcs.n	80082a6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800828e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008292:	f383 8811 	msr	BASEPRI, r3
 8008296:	f3bf 8f6f 	isb	sy
 800829a:	f3bf 8f4f 	dsb	sy
 800829e:	607b      	str	r3, [r7, #4]
}
 80082a0:	bf00      	nop
 80082a2:	bf00      	nop
 80082a4:	e7fd      	b.n	80082a2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80082a6:	4b0f      	ldr	r3, [pc, #60]	@ (80082e4 <vPortValidateInterruptPriority+0x7c>)
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80082ae:	4b0e      	ldr	r3, [pc, #56]	@ (80082e8 <vPortValidateInterruptPriority+0x80>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	429a      	cmp	r2, r3
 80082b4:	d90b      	bls.n	80082ce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80082b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ba:	f383 8811 	msr	BASEPRI, r3
 80082be:	f3bf 8f6f 	isb	sy
 80082c2:	f3bf 8f4f 	dsb	sy
 80082c6:	603b      	str	r3, [r7, #0]
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	e7fd      	b.n	80082ca <vPortValidateInterruptPriority+0x62>
	}
 80082ce:	bf00      	nop
 80082d0:	3714      	adds	r7, #20
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	e000e3f0 	.word	0xe000e3f0
 80082e0:	20006cf4 	.word	0x20006cf4
 80082e4:	e000ed0c 	.word	0xe000ed0c
 80082e8:	20006cf8 	.word	0x20006cf8

080082ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80082ec:	b580      	push	{r7, lr}
 80082ee:	b08a      	sub	sp, #40	@ 0x28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80082f4:	2300      	movs	r3, #0
 80082f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80082f8:	f7fe fb8e 	bl	8006a18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80082fc:	4b5c      	ldr	r3, [pc, #368]	@ (8008470 <pvPortMalloc+0x184>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d101      	bne.n	8008308 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008304:	f000 f924 	bl	8008550 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008308:	4b5a      	ldr	r3, [pc, #360]	@ (8008474 <pvPortMalloc+0x188>)
 800830a:	681a      	ldr	r2, [r3, #0]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	4013      	ands	r3, r2
 8008310:	2b00      	cmp	r3, #0
 8008312:	f040 8095 	bne.w	8008440 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d01e      	beq.n	800835a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800831c:	2208      	movs	r2, #8
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4413      	add	r3, r2
 8008322:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f003 0307 	and.w	r3, r3, #7
 800832a:	2b00      	cmp	r3, #0
 800832c:	d015      	beq.n	800835a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	f023 0307 	bic.w	r3, r3, #7
 8008334:	3308      	adds	r3, #8
 8008336:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f003 0307 	and.w	r3, r3, #7
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00b      	beq.n	800835a <pvPortMalloc+0x6e>
	__asm volatile
 8008342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008346:	f383 8811 	msr	BASEPRI, r3
 800834a:	f3bf 8f6f 	isb	sy
 800834e:	f3bf 8f4f 	dsb	sy
 8008352:	617b      	str	r3, [r7, #20]
}
 8008354:	bf00      	nop
 8008356:	bf00      	nop
 8008358:	e7fd      	b.n	8008356 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	2b00      	cmp	r3, #0
 800835e:	d06f      	beq.n	8008440 <pvPortMalloc+0x154>
 8008360:	4b45      	ldr	r3, [pc, #276]	@ (8008478 <pvPortMalloc+0x18c>)
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	687a      	ldr	r2, [r7, #4]
 8008366:	429a      	cmp	r2, r3
 8008368:	d86a      	bhi.n	8008440 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800836a:	4b44      	ldr	r3, [pc, #272]	@ (800847c <pvPortMalloc+0x190>)
 800836c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800836e:	4b43      	ldr	r3, [pc, #268]	@ (800847c <pvPortMalloc+0x190>)
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008374:	e004      	b.n	8008380 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008378:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800837a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008382:	685b      	ldr	r3, [r3, #4]
 8008384:	687a      	ldr	r2, [r7, #4]
 8008386:	429a      	cmp	r2, r3
 8008388:	d903      	bls.n	8008392 <pvPortMalloc+0xa6>
 800838a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	2b00      	cmp	r3, #0
 8008390:	d1f1      	bne.n	8008376 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008392:	4b37      	ldr	r3, [pc, #220]	@ (8008470 <pvPortMalloc+0x184>)
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008398:	429a      	cmp	r2, r3
 800839a:	d051      	beq.n	8008440 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800839c:	6a3b      	ldr	r3, [r7, #32]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	2208      	movs	r2, #8
 80083a2:	4413      	add	r3, r2
 80083a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80083a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a8:	681a      	ldr	r2, [r3, #0]
 80083aa:	6a3b      	ldr	r3, [r7, #32]
 80083ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80083ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	1ad2      	subs	r2, r2, r3
 80083b6:	2308      	movs	r3, #8
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d920      	bls.n	8008400 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80083be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	4413      	add	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80083c6:	69bb      	ldr	r3, [r7, #24]
 80083c8:	f003 0307 	and.w	r3, r3, #7
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00b      	beq.n	80083e8 <pvPortMalloc+0xfc>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	613b      	str	r3, [r7, #16]
}
 80083e2:	bf00      	nop
 80083e4:	bf00      	nop
 80083e6:	e7fd      	b.n	80083e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80083e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ea:	685a      	ldr	r2, [r3, #4]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	1ad2      	subs	r2, r2, r3
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80083f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083f6:	687a      	ldr	r2, [r7, #4]
 80083f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80083fa:	69b8      	ldr	r0, [r7, #24]
 80083fc:	f000 f90a 	bl	8008614 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008400:	4b1d      	ldr	r3, [pc, #116]	@ (8008478 <pvPortMalloc+0x18c>)
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	1ad3      	subs	r3, r2, r3
 800840a:	4a1b      	ldr	r2, [pc, #108]	@ (8008478 <pvPortMalloc+0x18c>)
 800840c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800840e:	4b1a      	ldr	r3, [pc, #104]	@ (8008478 <pvPortMalloc+0x18c>)
 8008410:	681a      	ldr	r2, [r3, #0]
 8008412:	4b1b      	ldr	r3, [pc, #108]	@ (8008480 <pvPortMalloc+0x194>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	429a      	cmp	r2, r3
 8008418:	d203      	bcs.n	8008422 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800841a:	4b17      	ldr	r3, [pc, #92]	@ (8008478 <pvPortMalloc+0x18c>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	4a18      	ldr	r2, [pc, #96]	@ (8008480 <pvPortMalloc+0x194>)
 8008420:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	685a      	ldr	r2, [r3, #4]
 8008426:	4b13      	ldr	r3, [pc, #76]	@ (8008474 <pvPortMalloc+0x188>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	431a      	orrs	r2, r3
 800842c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800842e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008432:	2200      	movs	r2, #0
 8008434:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008436:	4b13      	ldr	r3, [pc, #76]	@ (8008484 <pvPortMalloc+0x198>)
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	3301      	adds	r3, #1
 800843c:	4a11      	ldr	r2, [pc, #68]	@ (8008484 <pvPortMalloc+0x198>)
 800843e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008440:	f7fe faf8 	bl	8006a34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	f003 0307 	and.w	r3, r3, #7
 800844a:	2b00      	cmp	r3, #0
 800844c:	d00b      	beq.n	8008466 <pvPortMalloc+0x17a>
	__asm volatile
 800844e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008452:	f383 8811 	msr	BASEPRI, r3
 8008456:	f3bf 8f6f 	isb	sy
 800845a:	f3bf 8f4f 	dsb	sy
 800845e:	60fb      	str	r3, [r7, #12]
}
 8008460:	bf00      	nop
 8008462:	bf00      	nop
 8008464:	e7fd      	b.n	8008462 <pvPortMalloc+0x176>
	return pvReturn;
 8008466:	69fb      	ldr	r3, [r7, #28]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3728      	adds	r7, #40	@ 0x28
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	2000a904 	.word	0x2000a904
 8008474:	2000a918 	.word	0x2000a918
 8008478:	2000a908 	.word	0x2000a908
 800847c:	2000a8fc 	.word	0x2000a8fc
 8008480:	2000a90c 	.word	0x2000a90c
 8008484:	2000a910 	.word	0x2000a910

08008488 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008488:	b580      	push	{r7, lr}
 800848a:	b086      	sub	sp, #24
 800848c:	af00      	add	r7, sp, #0
 800848e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2b00      	cmp	r3, #0
 8008498:	d04f      	beq.n	800853a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800849a:	2308      	movs	r3, #8
 800849c:	425b      	negs	r3, r3
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	4413      	add	r3, r2
 80084a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80084a4:	697b      	ldr	r3, [r7, #20]
 80084a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	685a      	ldr	r2, [r3, #4]
 80084ac:	4b25      	ldr	r3, [pc, #148]	@ (8008544 <vPortFree+0xbc>)
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	4013      	ands	r3, r2
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d10b      	bne.n	80084ce <vPortFree+0x46>
	__asm volatile
 80084b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084ba:	f383 8811 	msr	BASEPRI, r3
 80084be:	f3bf 8f6f 	isb	sy
 80084c2:	f3bf 8f4f 	dsb	sy
 80084c6:	60fb      	str	r3, [r7, #12]
}
 80084c8:	bf00      	nop
 80084ca:	bf00      	nop
 80084cc:	e7fd      	b.n	80084ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d00b      	beq.n	80084ee <vPortFree+0x66>
	__asm volatile
 80084d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084da:	f383 8811 	msr	BASEPRI, r3
 80084de:	f3bf 8f6f 	isb	sy
 80084e2:	f3bf 8f4f 	dsb	sy
 80084e6:	60bb      	str	r3, [r7, #8]
}
 80084e8:	bf00      	nop
 80084ea:	bf00      	nop
 80084ec:	e7fd      	b.n	80084ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	685a      	ldr	r2, [r3, #4]
 80084f2:	4b14      	ldr	r3, [pc, #80]	@ (8008544 <vPortFree+0xbc>)
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	4013      	ands	r3, r2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d01e      	beq.n	800853a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80084fc:	693b      	ldr	r3, [r7, #16]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	2b00      	cmp	r3, #0
 8008502:	d11a      	bne.n	800853a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	685a      	ldr	r2, [r3, #4]
 8008508:	4b0e      	ldr	r3, [pc, #56]	@ (8008544 <vPortFree+0xbc>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	43db      	mvns	r3, r3
 800850e:	401a      	ands	r2, r3
 8008510:	693b      	ldr	r3, [r7, #16]
 8008512:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008514:	f7fe fa80 	bl	8006a18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	685a      	ldr	r2, [r3, #4]
 800851c:	4b0a      	ldr	r3, [pc, #40]	@ (8008548 <vPortFree+0xc0>)
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	4413      	add	r3, r2
 8008522:	4a09      	ldr	r2, [pc, #36]	@ (8008548 <vPortFree+0xc0>)
 8008524:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008526:	6938      	ldr	r0, [r7, #16]
 8008528:	f000 f874 	bl	8008614 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800852c:	4b07      	ldr	r3, [pc, #28]	@ (800854c <vPortFree+0xc4>)
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	3301      	adds	r3, #1
 8008532:	4a06      	ldr	r2, [pc, #24]	@ (800854c <vPortFree+0xc4>)
 8008534:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008536:	f7fe fa7d 	bl	8006a34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800853a:	bf00      	nop
 800853c:	3718      	adds	r7, #24
 800853e:	46bd      	mov	sp, r7
 8008540:	bd80      	pop	{r7, pc}
 8008542:	bf00      	nop
 8008544:	2000a918 	.word	0x2000a918
 8008548:	2000a908 	.word	0x2000a908
 800854c:	2000a914 	.word	0x2000a914

08008550 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008550:	b480      	push	{r7}
 8008552:	b085      	sub	sp, #20
 8008554:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008556:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800855a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800855c:	4b27      	ldr	r3, [pc, #156]	@ (80085fc <prvHeapInit+0xac>)
 800855e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	f003 0307 	and.w	r3, r3, #7
 8008566:	2b00      	cmp	r3, #0
 8008568:	d00c      	beq.n	8008584 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	3307      	adds	r3, #7
 800856e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	f023 0307 	bic.w	r3, r3, #7
 8008576:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008578:	68ba      	ldr	r2, [r7, #8]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	1ad3      	subs	r3, r2, r3
 800857e:	4a1f      	ldr	r2, [pc, #124]	@ (80085fc <prvHeapInit+0xac>)
 8008580:	4413      	add	r3, r2
 8008582:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008588:	4a1d      	ldr	r2, [pc, #116]	@ (8008600 <prvHeapInit+0xb0>)
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800858e:	4b1c      	ldr	r3, [pc, #112]	@ (8008600 <prvHeapInit+0xb0>)
 8008590:	2200      	movs	r2, #0
 8008592:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	68ba      	ldr	r2, [r7, #8]
 8008598:	4413      	add	r3, r2
 800859a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800859c:	2208      	movs	r2, #8
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	1a9b      	subs	r3, r3, r2
 80085a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	f023 0307 	bic.w	r3, r3, #7
 80085aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	4a15      	ldr	r2, [pc, #84]	@ (8008604 <prvHeapInit+0xb4>)
 80085b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80085b2:	4b14      	ldr	r3, [pc, #80]	@ (8008604 <prvHeapInit+0xb4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2200      	movs	r2, #0
 80085b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80085ba:	4b12      	ldr	r3, [pc, #72]	@ (8008604 <prvHeapInit+0xb4>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	2200      	movs	r2, #0
 80085c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	1ad2      	subs	r2, r2, r3
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80085d0:	4b0c      	ldr	r3, [pc, #48]	@ (8008604 <prvHeapInit+0xb4>)
 80085d2:	681a      	ldr	r2, [r3, #0]
 80085d4:	683b      	ldr	r3, [r7, #0]
 80085d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	685b      	ldr	r3, [r3, #4]
 80085dc:	4a0a      	ldr	r2, [pc, #40]	@ (8008608 <prvHeapInit+0xb8>)
 80085de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80085e0:	683b      	ldr	r3, [r7, #0]
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	4a09      	ldr	r2, [pc, #36]	@ (800860c <prvHeapInit+0xbc>)
 80085e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80085e8:	4b09      	ldr	r3, [pc, #36]	@ (8008610 <prvHeapInit+0xc0>)
 80085ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80085ee:	601a      	str	r2, [r3, #0]
}
 80085f0:	bf00      	nop
 80085f2:	3714      	adds	r7, #20
 80085f4:	46bd      	mov	sp, r7
 80085f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085fa:	4770      	bx	lr
 80085fc:	20006cfc 	.word	0x20006cfc
 8008600:	2000a8fc 	.word	0x2000a8fc
 8008604:	2000a904 	.word	0x2000a904
 8008608:	2000a90c 	.word	0x2000a90c
 800860c:	2000a908 	.word	0x2000a908
 8008610:	2000a918 	.word	0x2000a918

08008614 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008614:	b480      	push	{r7}
 8008616:	b085      	sub	sp, #20
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800861c:	4b28      	ldr	r3, [pc, #160]	@ (80086c0 <prvInsertBlockIntoFreeList+0xac>)
 800861e:	60fb      	str	r3, [r7, #12]
 8008620:	e002      	b.n	8008628 <prvInsertBlockIntoFreeList+0x14>
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	60fb      	str	r3, [r7, #12]
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	687a      	ldr	r2, [r7, #4]
 800862e:	429a      	cmp	r2, r3
 8008630:	d8f7      	bhi.n	8008622 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	685b      	ldr	r3, [r3, #4]
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	4413      	add	r3, r2
 800863e:	687a      	ldr	r2, [r7, #4]
 8008640:	429a      	cmp	r2, r3
 8008642:	d108      	bne.n	8008656 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	685a      	ldr	r2, [r3, #4]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	685b      	ldr	r3, [r3, #4]
 800864c:	441a      	add	r2, r3
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	68ba      	ldr	r2, [r7, #8]
 8008660:	441a      	add	r2, r3
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	429a      	cmp	r2, r3
 8008668:	d118      	bne.n	800869c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	681a      	ldr	r2, [r3, #0]
 800866e:	4b15      	ldr	r3, [pc, #84]	@ (80086c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	429a      	cmp	r2, r3
 8008674:	d00d      	beq.n	8008692 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	685a      	ldr	r2, [r3, #4]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	441a      	add	r2, r3
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	681a      	ldr	r2, [r3, #0]
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	601a      	str	r2, [r3, #0]
 8008690:	e008      	b.n	80086a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008692:	4b0c      	ldr	r3, [pc, #48]	@ (80086c4 <prvInsertBlockIntoFreeList+0xb0>)
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	601a      	str	r2, [r3, #0]
 800869a:	e003      	b.n	80086a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	681a      	ldr	r2, [r3, #0]
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	429a      	cmp	r2, r3
 80086aa:	d002      	beq.n	80086b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80086ac:	68fb      	ldr	r3, [r7, #12]
 80086ae:	687a      	ldr	r2, [r7, #4]
 80086b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80086b2:	bf00      	nop
 80086b4:	3714      	adds	r7, #20
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	2000a8fc 	.word	0x2000a8fc
 80086c4:	2000a904 	.word	0x2000a904

080086c8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 80086c8:	b580      	push	{r7, lr}
 80086ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 80086cc:	4b10      	ldr	r3, [pc, #64]	@ (8008710 <MX_PDM2PCM_Init+0x48>)
 80086ce:	2200      	movs	r2, #0
 80086d0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 80086d2:	4b0f      	ldr	r3, [pc, #60]	@ (8008710 <MX_PDM2PCM_Init+0x48>)
 80086d4:	2200      	movs	r2, #0
 80086d6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2122358088;
 80086d8:	4b0d      	ldr	r3, [pc, #52]	@ (8008710 <MX_PDM2PCM_Init+0x48>)
 80086da:	4a0e      	ldr	r2, [pc, #56]	@ (8008714 <MX_PDM2PCM_Init+0x4c>)
 80086dc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 80086de:	4b0c      	ldr	r3, [pc, #48]	@ (8008710 <MX_PDM2PCM_Init+0x48>)
 80086e0:	2201      	movs	r2, #1
 80086e2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 80086e4:	4b0a      	ldr	r3, [pc, #40]	@ (8008710 <MX_PDM2PCM_Init+0x48>)
 80086e6:	2201      	movs	r2, #1
 80086e8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 80086ea:	4809      	ldr	r0, [pc, #36]	@ (8008710 <MX_PDM2PCM_Init+0x48>)
 80086ec:	f001 fd26 	bl	800a13c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80086f0:	4b09      	ldr	r3, [pc, #36]	@ (8008718 <MX_PDM2PCM_Init+0x50>)
 80086f2:	2202      	movs	r2, #2
 80086f4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 80086f6:	4b08      	ldr	r3, [pc, #32]	@ (8008718 <MX_PDM2PCM_Init+0x50>)
 80086f8:	2210      	movs	r2, #16
 80086fa:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 80086fc:	4b06      	ldr	r3, [pc, #24]	@ (8008718 <MX_PDM2PCM_Init+0x50>)
 80086fe:	2218      	movs	r2, #24
 8008700:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008702:	4905      	ldr	r1, [pc, #20]	@ (8008718 <MX_PDM2PCM_Init+0x50>)
 8008704:	4802      	ldr	r0, [pc, #8]	@ (8008710 <MX_PDM2PCM_Init+0x48>)
 8008706:	f001 fde9 	bl	800a2dc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 800870a:	bf00      	nop
 800870c:	bd80      	pop	{r7, pc}
 800870e:	bf00      	nop
 8008710:	2000a91c 	.word	0x2000a91c
 8008714:	7e809d48 	.word	0x7e809d48
 8008718:	2000a968 	.word	0x2000a968

0800871c <D16_GENERIC>:
 800871c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008720:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8008724:	b089      	sub	sp, #36	@ 0x24
 8008726:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8008728:	6993      	ldr	r3, [r2, #24]
 800872a:	9406      	str	r4, [sp, #24]
 800872c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800872e:	9307      	str	r3, [sp, #28]
 8008730:	9402      	str	r4, [sp, #8]
 8008732:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8008736:	69d3      	ldr	r3, [r2, #28]
 8008738:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800873a:	9103      	str	r1, [sp, #12]
 800873c:	2d00      	cmp	r5, #0
 800873e:	d066      	beq.n	800880e <D16_GENERIC+0xf2>
 8008740:	f004 0520 	and.w	r5, r4, #32
 8008744:	f004 0410 	and.w	r4, r4, #16
 8008748:	9505      	str	r5, [sp, #20]
 800874a:	4937      	ldr	r1, [pc, #220]	@ (8008828 <D16_GENERIC+0x10c>)
 800874c:	9404      	str	r4, [sp, #16]
 800874e:	f04f 0c00 	mov.w	ip, #0
 8008752:	4635      	mov	r5, r6
 8008754:	e04f      	b.n	80087f6 <D16_GENERIC+0xda>
 8008756:	5d87      	ldrb	r7, [r0, r6]
 8008758:	7804      	ldrb	r4, [r0, #0]
 800875a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800875e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8008762:	b2e6      	uxtb	r6, r4
 8008764:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008768:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800876c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008770:	4433      	add	r3, r6
 8008772:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8008776:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800877a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800877e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8008782:	0aa3      	lsrs	r3, r4, #10
 8008784:	4c29      	ldr	r4, [pc, #164]	@ (800882c <D16_GENERIC+0x110>)
 8008786:	fb26 5404 	smlad	r4, r6, r4, r5
 800878a:	4d29      	ldr	r5, [pc, #164]	@ (8008830 <D16_GENERIC+0x114>)
 800878c:	fb26 f505 	smuad	r5, r6, r5
 8008790:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8008794:	eb04 080a 	add.w	r8, r4, sl
 8008798:	eba8 080b 	sub.w	r8, r8, fp
 800879c:	4646      	mov	r6, r8
 800879e:	17f7      	asrs	r7, r6, #31
 80087a0:	e9cd 6700 	strd	r6, r7, [sp]
 80087a4:	9e04      	ldr	r6, [sp, #16]
 80087a6:	f10c 0e01 	add.w	lr, ip, #1
 80087aa:	b16e      	cbz	r6, 80087c8 <D16_GENERIC+0xac>
 80087ac:	6a16      	ldr	r6, [r2, #32]
 80087ae:	9f01      	ldr	r7, [sp, #4]
 80087b0:	fba8 ab06 	umull	sl, fp, r8, r6
 80087b4:	fb06 bb07 	mla	fp, r6, r7, fp
 80087b8:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 80087bc:	f14b 0900 	adc.w	r9, fp, #0
 80087c0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80087c4:	46a3      	mov	fp, r4
 80087c6:	4654      	mov	r4, sl
 80087c8:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80087ca:	9f02      	ldr	r7, [sp, #8]
 80087cc:	0424      	lsls	r4, r4, #16
 80087ce:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80087d2:	f04f 0900 	mov.w	r9, #0
 80087d6:	fb0c fc06 	mul.w	ip, ip, r6
 80087da:	fbc7 8904 	smlal	r8, r9, r7, r4
 80087de:	9e03      	ldr	r6, [sp, #12]
 80087e0:	464f      	mov	r7, r9
 80087e2:	10bc      	asrs	r4, r7, #2
 80087e4:	f304 040f 	ssat	r4, #16, r4
 80087e8:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 80087ec:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80087ee:	fa1f fc8e 	uxth.w	ip, lr
 80087f2:	4564      	cmp	r4, ip
 80087f4:	d90a      	bls.n	800880c <D16_GENERIC+0xf0>
 80087f6:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80087f8:	2c01      	cmp	r4, #1
 80087fa:	b2e6      	uxtb	r6, r4
 80087fc:	d1ab      	bne.n	8008756 <D16_GENERIC+0x3a>
 80087fe:	9e05      	ldr	r6, [sp, #20]
 8008800:	f850 4b02 	ldr.w	r4, [r0], #2
 8008804:	2e00      	cmp	r6, #0
 8008806:	d0ac      	beq.n	8008762 <D16_GENERIC+0x46>
 8008808:	ba64      	rev16	r4, r4
 800880a:	e7aa      	b.n	8008762 <D16_GENERIC+0x46>
 800880c:	462e      	mov	r6, r5
 800880e:	9906      	ldr	r1, [sp, #24]
 8008810:	61d3      	str	r3, [r2, #28]
 8008812:	9b07      	ldr	r3, [sp, #28]
 8008814:	6096      	str	r6, [r2, #8]
 8008816:	2000      	movs	r0, #0
 8008818:	60d1      	str	r1, [r2, #12]
 800881a:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 800881e:	6193      	str	r3, [r2, #24]
 8008820:	b009      	add	sp, #36	@ 0x24
 8008822:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008826:	bf00      	nop
 8008828:	20000010 	.word	0x20000010
 800882c:	00030001 	.word	0x00030001
 8008830:	00010003 	.word	0x00010003

08008834 <D24_GENERIC>:
 8008834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008838:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 800883a:	6993      	ldr	r3, [r2, #24]
 800883c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 800883e:	b089      	sub	sp, #36	@ 0x24
 8008840:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8008844:	9307      	str	r3, [sp, #28]
 8008846:	9503      	str	r5, [sp, #12]
 8008848:	69d3      	ldr	r3, [r2, #28]
 800884a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800884c:	9104      	str	r1, [sp, #16]
 800884e:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8008852:	2e00      	cmp	r6, #0
 8008854:	f000 808f 	beq.w	8008976 <D24_GENERIC+0x142>
 8008858:	f005 0620 	and.w	r6, r5, #32
 800885c:	f005 0510 	and.w	r5, r5, #16
 8008860:	4953      	ldr	r1, [pc, #332]	@ (80089b0 <D24_GENERIC+0x17c>)
 8008862:	9606      	str	r6, [sp, #24]
 8008864:	9505      	str	r5, [sp, #20]
 8008866:	f04f 0c00 	mov.w	ip, #0
 800886a:	f8cd 9008 	str.w	r9, [sp, #8]
 800886e:	e068      	b.n	8008942 <D24_GENERIC+0x10e>
 8008870:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8008874:	f810 8007 	ldrb.w	r8, [r0, r7]
 8008878:	042d      	lsls	r5, r5, #16
 800887a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800887e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8008882:	44ae      	add	lr, r5
 8008884:	4438      	add	r0, r7
 8008886:	fa5f f68e 	uxtb.w	r6, lr
 800888a:	f3ce 2507 	ubfx	r5, lr, #8, #8
 800888e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008892:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8008896:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800889a:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800889e:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80088a2:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 80088a6:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80088aa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80088ae:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80088b2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 80088b6:	4d3f      	ldr	r5, [pc, #252]	@ (80089b4 <D24_GENERIC+0x180>)
 80088b8:	fb26 b705 	smlad	r7, r6, r5, fp
 80088bc:	4d3e      	ldr	r5, [pc, #248]	@ (80089b8 <D24_GENERIC+0x184>)
 80088be:	fb26 4b05 	smlad	fp, r6, r5, r4
 80088c2:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80088c6:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80088ca:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80088ce:	2401      	movs	r4, #1
 80088d0:	fb26 f604 	smuad	r6, r6, r4
 80088d4:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 80088d8:	9f02      	ldr	r7, [sp, #8]
 80088da:	eb0c 0e04 	add.w	lr, ip, r4
 80088de:	eb08 0406 	add.w	r4, r8, r6
 80088e2:	eb05 060a 	add.w	r6, r5, sl
 80088e6:	1bf6      	subs	r6, r6, r7
 80088e8:	4637      	mov	r7, r6
 80088ea:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80088ee:	e9cd 7800 	strd	r7, r8, [sp]
 80088f2:	9f05      	ldr	r7, [sp, #20]
 80088f4:	b177      	cbz	r7, 8008914 <D24_GENERIC+0xe0>
 80088f6:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80088fa:	9502      	str	r5, [sp, #8]
 80088fc:	fba6 9a08 	umull	r9, sl, r6, r8
 8008900:	9e01      	ldr	r6, [sp, #4]
 8008902:	fb08 aa06 	mla	sl, r8, r6, sl
 8008906:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 800890a:	f14a 0700 	adc.w	r7, sl, #0
 800890e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8008912:	4655      	mov	r5, sl
 8008914:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8008916:	9f03      	ldr	r7, [sp, #12]
 8008918:	03ad      	lsls	r5, r5, #14
 800891a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800891e:	f04f 0900 	mov.w	r9, #0
 8008922:	fb0c fc06 	mul.w	ip, ip, r6
 8008926:	fbc7 8905 	smlal	r8, r9, r7, r5
 800892a:	9e04      	ldr	r6, [sp, #16]
 800892c:	464f      	mov	r7, r9
 800892e:	10bd      	asrs	r5, r7, #2
 8008930:	f305 050f 	ssat	r5, #16, r5
 8008934:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8008938:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800893a:	fa1f fc8e 	uxth.w	ip, lr
 800893e:	4565      	cmp	r5, ip
 8008940:	d917      	bls.n	8008972 <D24_GENERIC+0x13e>
 8008942:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8008944:	f890 e000 	ldrb.w	lr, [r0]
 8008948:	b2ef      	uxtb	r7, r5
 800894a:	2d01      	cmp	r5, #1
 800894c:	b23e      	sxth	r6, r7
 800894e:	d18f      	bne.n	8008870 <D24_GENERIC+0x3c>
 8008950:	9d06      	ldr	r5, [sp, #24]
 8008952:	b1dd      	cbz	r5, 800898c <D24_GENERIC+0x158>
 8008954:	78c5      	ldrb	r5, [r0, #3]
 8008956:	ea4f 280e 	mov.w	r8, lr, lsl #8
 800895a:	f01c 0f01 	tst.w	ip, #1
 800895e:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8008962:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8008966:	d11b      	bne.n	80089a0 <D24_GENERIC+0x16c>
 8008968:	f890 e001 	ldrb.w	lr, [r0, #1]
 800896c:	3002      	adds	r0, #2
 800896e:	44c6      	add	lr, r8
 8008970:	e789      	b.n	8008886 <D24_GENERIC+0x52>
 8008972:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008976:	61d3      	str	r3, [r2, #28]
 8008978:	9b07      	ldr	r3, [sp, #28]
 800897a:	6193      	str	r3, [r2, #24]
 800897c:	2000      	movs	r0, #0
 800897e:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8008982:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8008986:	b009      	add	sp, #36	@ 0x24
 8008988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800898c:	f890 8001 	ldrb.w	r8, [r0, #1]
 8008990:	7885      	ldrb	r5, [r0, #2]
 8008992:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8008996:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 800899a:	44c6      	add	lr, r8
 800899c:	3003      	adds	r0, #3
 800899e:	e772      	b.n	8008886 <D24_GENERIC+0x52>
 80089a0:	f890 8002 	ldrb.w	r8, [r0, #2]
 80089a4:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 80089a8:	44c6      	add	lr, r8
 80089aa:	3004      	adds	r0, #4
 80089ac:	e76b      	b.n	8008886 <D24_GENERIC+0x52>
 80089ae:	bf00      	nop
 80089b0:	20000010 	.word	0x20000010
 80089b4:	00030001 	.word	0x00030001
 80089b8:	00060007 	.word	0x00060007

080089bc <D32_GENERIC>:
 80089bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089c0:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80089c2:	6993      	ldr	r3, [r2, #24]
 80089c4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80089c6:	69d6      	ldr	r6, [r2, #28]
 80089c8:	b089      	sub	sp, #36	@ 0x24
 80089ca:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80089ce:	9307      	str	r3, [sp, #28]
 80089d0:	9403      	str	r4, [sp, #12]
 80089d2:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 80089d6:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80089d8:	9104      	str	r1, [sp, #16]
 80089da:	2d00      	cmp	r5, #0
 80089dc:	f000 809a 	beq.w	8008b14 <D32_GENERIC+0x158>
 80089e0:	f004 0520 	and.w	r5, r4, #32
 80089e4:	f004 0410 	and.w	r4, r4, #16
 80089e8:	9506      	str	r5, [sp, #24]
 80089ea:	4951      	ldr	r1, [pc, #324]	@ (8008b30 <D32_GENERIC+0x174>)
 80089ec:	9405      	str	r4, [sp, #20]
 80089ee:	f04f 0e00 	mov.w	lr, #0
 80089f2:	f8cd 9008 	str.w	r9, [sp, #8]
 80089f6:	461d      	mov	r5, r3
 80089f8:	4617      	mov	r7, r2
 80089fa:	e077      	b.n	8008aec <D32_GENERIC+0x130>
 80089fc:	7823      	ldrb	r3, [r4, #0]
 80089fe:	f810 800c 	ldrb.w	r8, [r0, ip]
 8008a02:	f810 c002 	ldrb.w	ip, [r0, r2]
 8008a06:	7800      	ldrb	r0, [r0, #0]
 8008a08:	041b      	lsls	r3, r3, #16
 8008a0a:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8008a0e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8008a12:	4403      	add	r3, r0
 8008a14:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8008a18:	b2dc      	uxtb	r4, r3
 8008a1a:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8008a1e:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8008a22:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8008a26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8008a2a:	0e1b      	lsrs	r3, r3, #24
 8008a2c:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8008a30:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8008a34:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008a38:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8008a3c:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8008a40:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8008a44:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8008a48:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008a4c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8008a50:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8008a54:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8008a58:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008a5c:	4b35      	ldr	r3, [pc, #212]	@ (8008b34 <D32_GENERIC+0x178>)
 8008a5e:	fb22 b403 	smlad	r4, r2, r3, fp
 8008a62:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8008a66:	fb2c 4803 	smlad	r8, ip, r3, r4
 8008a6a:	4b33      	ldr	r3, [pc, #204]	@ (8008b38 <D32_GENERIC+0x17c>)
 8008a6c:	fb22 5503 	smlad	r5, r2, r3, r5
 8008a70:	4b32      	ldr	r3, [pc, #200]	@ (8008b3c <D32_GENERIC+0x180>)
 8008a72:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8008a76:	2301      	movs	r3, #1
 8008a78:	fb22 f203 	smuad	r2, r2, r3
 8008a7c:	4b30      	ldr	r3, [pc, #192]	@ (8008b40 <D32_GENERIC+0x184>)
 8008a7e:	fb2c 2503 	smlad	r5, ip, r3, r2
 8008a82:	9b02      	ldr	r3, [sp, #8]
 8008a84:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8008a88:	eb04 080a 	add.w	r8, r4, sl
 8008a8c:	eba8 0803 	sub.w	r8, r8, r3
 8008a90:	4642      	mov	r2, r8
 8008a92:	17d3      	asrs	r3, r2, #31
 8008a94:	e9cd 2300 	strd	r2, r3, [sp]
 8008a98:	9b05      	ldr	r3, [sp, #20]
 8008a9a:	f10e 0c01 	add.w	ip, lr, #1
 8008a9e:	b173      	cbz	r3, 8008abe <D32_GENERIC+0x102>
 8008aa0:	6a3a      	ldr	r2, [r7, #32]
 8008aa2:	9b01      	ldr	r3, [sp, #4]
 8008aa4:	9402      	str	r4, [sp, #8]
 8008aa6:	fba8 8902 	umull	r8, r9, r8, r2
 8008aaa:	469a      	mov	sl, r3
 8008aac:	fb02 930a 	mla	r3, r2, sl, r9
 8008ab0:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8008ab4:	f143 0900 	adc.w	r9, r3, #0
 8008ab8:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 8008abc:	4654      	mov	r4, sl
 8008abe:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8008ac0:	9a04      	ldr	r2, [sp, #16]
 8008ac2:	fb0e fe03 	mul.w	lr, lr, r3
 8008ac6:	9b03      	ldr	r3, [sp, #12]
 8008ac8:	0364      	lsls	r4, r4, #13
 8008aca:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8008ace:	f04f 0900 	mov.w	r9, #0
 8008ad2:	fbc3 8904 	smlal	r8, r9, r3, r4
 8008ad6:	464b      	mov	r3, r9
 8008ad8:	109b      	asrs	r3, r3, #2
 8008ada:	f303 030f 	ssat	r3, #16, r3
 8008ade:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 8008ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008ae4:	fa1f fe8c 	uxth.w	lr, ip
 8008ae8:	4573      	cmp	r3, lr
 8008aea:	d90f      	bls.n	8008b0c <D32_GENERIC+0x150>
 8008aec:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8008aee:	b2da      	uxtb	r2, r3
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 8008af6:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 8008afa:	f47f af7f 	bne.w	80089fc <D32_GENERIC+0x40>
 8008afe:	1d02      	adds	r2, r0, #4
 8008b00:	6803      	ldr	r3, [r0, #0]
 8008b02:	9806      	ldr	r0, [sp, #24]
 8008b04:	b188      	cbz	r0, 8008b2a <D32_GENERIC+0x16e>
 8008b06:	ba5b      	rev16	r3, r3
 8008b08:	4610      	mov	r0, r2
 8008b0a:	e785      	b.n	8008a18 <D32_GENERIC+0x5c>
 8008b0c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8008b10:	462b      	mov	r3, r5
 8008b12:	463a      	mov	r2, r7
 8008b14:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 8008b18:	9b07      	ldr	r3, [sp, #28]
 8008b1a:	61d6      	str	r6, [r2, #28]
 8008b1c:	2000      	movs	r0, #0
 8008b1e:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8008b22:	6193      	str	r3, [r2, #24]
 8008b24:	b009      	add	sp, #36	@ 0x24
 8008b26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b2a:	4610      	mov	r0, r2
 8008b2c:	e774      	b.n	8008a18 <D32_GENERIC+0x5c>
 8008b2e:	bf00      	nop
 8008b30:	20000010 	.word	0x20000010
 8008b34:	00060003 	.word	0x00060003
 8008b38:	000a000c 	.word	0x000a000c
 8008b3c:	000c000a 	.word	0x000c000a
 8008b40:	00030006 	.word	0x00030006

08008b44 <D48_GENERIC>:
 8008b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b48:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 8008b4c:	b08b      	sub	sp, #44	@ 0x2c
 8008b4e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8008b50:	9304      	str	r3, [sp, #16]
 8008b52:	6993      	ldr	r3, [r2, #24]
 8008b54:	9309      	str	r3, [sp, #36]	@ 0x24
 8008b56:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8008b5a:	9401      	str	r4, [sp, #4]
 8008b5c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008b5e:	9405      	str	r4, [sp, #20]
 8008b60:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8008b64:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8008b66:	9106      	str	r1, [sp, #24]
 8008b68:	2d00      	cmp	r5, #0
 8008b6a:	f000 80c2 	beq.w	8008cf2 <D48_GENERIC+0x1ae>
 8008b6e:	f004 0520 	and.w	r5, r4, #32
 8008b72:	f04f 0900 	mov.w	r9, #0
 8008b76:	f004 0410 	and.w	r4, r4, #16
 8008b7a:	9508      	str	r5, [sp, #32]
 8008b7c:	4964      	ldr	r1, [pc, #400]	@ (8008d10 <D48_GENERIC+0x1cc>)
 8008b7e:	9407      	str	r4, [sp, #28]
 8008b80:	464d      	mov	r5, r9
 8008b82:	e09e      	b.n	8008cc2 <D48_GENERIC+0x17e>
 8008b84:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8008b88:	f810 b008 	ldrb.w	fp, [r0, r8]
 8008b8c:	f819 8008 	ldrb.w	r8, [r9, r8]
 8008b90:	f810 9006 	ldrb.w	r9, [r0, r6]
 8008b94:	7800      	ldrb	r0, [r0, #0]
 8008b96:	0424      	lsls	r4, r4, #16
 8008b98:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 8008b9c:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8008ba0:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8008ba4:	44be      	add	lr, r7
 8008ba6:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 8008baa:	eb0b 0700 	add.w	r7, fp, r0
 8008bae:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8008bb2:	fa5f fe87 	uxtb.w	lr, r7
 8008bb6:	f3c7 2607 	ubfx	r6, r7, #8, #8
 8008bba:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 8008bbe:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8008bc2:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 8008bc6:	0e3f      	lsrs	r7, r7, #24
 8008bc8:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 8008bcc:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 8008bd0:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8008bd4:	b2e7      	uxtb	r7, r4
 8008bd6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8008bda:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8008bde:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8008be2:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8008be6:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 8008bea:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 8008bee:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8008bf2:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 8008bf6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008bfa:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008bfe:	f3cc 0809 	ubfx	r8, ip, #0, #10
 8008c02:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8008c06:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8008c0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008c0e:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 8008c12:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 8008c16:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 8008c1a:	4c3e      	ldr	r4, [pc, #248]	@ (8008d14 <D48_GENERIC+0x1d0>)
 8008c1c:	9e01      	ldr	r6, [sp, #4]
 8008c1e:	fb29 6404 	smlad	r4, r9, r4, r6
 8008c22:	4e3d      	ldr	r6, [pc, #244]	@ (8008d18 <D48_GENERIC+0x1d4>)
 8008c24:	fb2e 4406 	smlad	r4, lr, r6, r4
 8008c28:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8008c2c:	fb27 4b06 	smlad	fp, r7, r6, r4
 8008c30:	4c3a      	ldr	r4, [pc, #232]	@ (8008d1c <D48_GENERIC+0x1d8>)
 8008c32:	fb29 3304 	smlad	r3, r9, r4, r3
 8008c36:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 8008c3a:	fb2e 3304 	smlad	r3, lr, r4, r3
 8008c3e:	4c38      	ldr	r4, [pc, #224]	@ (8008d20 <D48_GENERIC+0x1dc>)
 8008c40:	fb27 3304 	smlad	r3, r7, r4, r3
 8008c44:	2601      	movs	r6, #1
 8008c46:	9301      	str	r3, [sp, #4]
 8008c48:	fb29 f906 	smuad	r9, r9, r6
 8008c4c:	4b35      	ldr	r3, [pc, #212]	@ (8008d24 <D48_GENERIC+0x1e0>)
 8008c4e:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8008c52:	4b35      	ldr	r3, [pc, #212]	@ (8008d28 <D48_GENERIC+0x1e4>)
 8008c54:	fb27 e303 	smlad	r3, r7, r3, lr
 8008c58:	9f04      	ldr	r7, [sp, #16]
 8008c5a:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 8008c5e:	eb05 0e06 	add.w	lr, r5, r6
 8008c62:	eb04 060a 	add.w	r6, r4, sl
 8008c66:	1bf6      	subs	r6, r6, r7
 8008c68:	4637      	mov	r7, r6
 8008c6a:	ea4f 78e6 	mov.w	r8, r6, asr #31
 8008c6e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8008c72:	9f07      	ldr	r7, [sp, #28]
 8008c74:	b177      	cbz	r7, 8008c94 <D48_GENERIC+0x150>
 8008c76:	f8d2 8020 	ldr.w	r8, [r2, #32]
 8008c7a:	9404      	str	r4, [sp, #16]
 8008c7c:	fba6 9a08 	umull	r9, sl, r6, r8
 8008c80:	9e03      	ldr	r6, [sp, #12]
 8008c82:	fb08 aa06 	mla	sl, r8, r6, sl
 8008c86:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 8008c8a:	f14a 0700 	adc.w	r7, sl, #0
 8008c8e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8008c92:	4654      	mov	r4, sl
 8008c94:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8008c96:	fb05 f606 	mul.w	r6, r5, r6
 8008c9a:	9d05      	ldr	r5, [sp, #20]
 8008c9c:	02e4      	lsls	r4, r4, #11
 8008c9e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8008ca2:	f04f 0800 	mov.w	r8, #0
 8008ca6:	fbc5 7804 	smlal	r7, r8, r5, r4
 8008caa:	4645      	mov	r5, r8
 8008cac:	10ac      	asrs	r4, r5, #2
 8008cae:	9d06      	ldr	r5, [sp, #24]
 8008cb0:	f304 040f 	ssat	r4, #16, r4
 8008cb4:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8008cb8:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8008cba:	fa1f f58e 	uxth.w	r5, lr
 8008cbe:	42ac      	cmp	r4, r5
 8008cc0:	d917      	bls.n	8008cf2 <D48_GENERIC+0x1ae>
 8008cc2:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8008cc4:	b2e6      	uxtb	r6, r4
 8008cc6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 8008cca:	4277      	negs	r7, r6
 8008ccc:	eb00 0b08 	add.w	fp, r0, r8
 8008cd0:	eb0b 0907 	add.w	r9, fp, r7
 8008cd4:	2c01      	cmp	r4, #1
 8008cd6:	eb09 0e08 	add.w	lr, r9, r8
 8008cda:	f47f af53 	bne.w	8008b84 <D48_GENERIC+0x40>
 8008cde:	9e08      	ldr	r6, [sp, #32]
 8008ce0:	e9d0 7400 	ldrd	r7, r4, [r0]
 8008ce4:	3006      	adds	r0, #6
 8008ce6:	2e00      	cmp	r6, #0
 8008ce8:	f43f af63 	beq.w	8008bb2 <D48_GENERIC+0x6e>
 8008cec:	ba7f      	rev16	r7, r7
 8008cee:	ba64      	rev16	r4, r4
 8008cf0:	e75f      	b.n	8008bb2 <D48_GENERIC+0x6e>
 8008cf2:	6093      	str	r3, [r2, #8]
 8008cf4:	9b01      	ldr	r3, [sp, #4]
 8008cf6:	60d3      	str	r3, [r2, #12]
 8008cf8:	9b04      	ldr	r3, [sp, #16]
 8008cfa:	6153      	str	r3, [r2, #20]
 8008cfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cfe:	f8c2 c01c 	str.w	ip, [r2, #28]
 8008d02:	2000      	movs	r0, #0
 8008d04:	f8c2 a010 	str.w	sl, [r2, #16]
 8008d08:	6193      	str	r3, [r2, #24]
 8008d0a:	b00b      	add	sp, #44	@ 0x2c
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	20000010 	.word	0x20000010
 8008d14:	000f000a 	.word	0x000f000a
 8008d18:	00060003 	.word	0x00060003
 8008d1c:	00150019 	.word	0x00150019
 8008d20:	00190015 	.word	0x00190015
 8008d24:	00030006 	.word	0x00030006
 8008d28:	000a000f 	.word	0x000a000f

08008d2c <D64_GENERIC>:
 8008d2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d30:	b089      	sub	sp, #36	@ 0x24
 8008d32:	6895      	ldr	r5, [r2, #8]
 8008d34:	6913      	ldr	r3, [r2, #16]
 8008d36:	9501      	str	r5, [sp, #4]
 8008d38:	68d5      	ldr	r5, [r2, #12]
 8008d3a:	9302      	str	r3, [sp, #8]
 8008d3c:	9500      	str	r5, [sp, #0]
 8008d3e:	6953      	ldr	r3, [r2, #20]
 8008d40:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8008d42:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8008d44:	9303      	str	r3, [sp, #12]
 8008d46:	6993      	ldr	r3, [r2, #24]
 8008d48:	9307      	str	r3, [sp, #28]
 8008d4a:	e9cd 5104 	strd	r5, r1, [sp, #16]
 8008d4e:	69d3      	ldr	r3, [r2, #28]
 8008d50:	2c00      	cmp	r4, #0
 8008d52:	f000 80d7 	beq.w	8008f04 <D64_GENERIC+0x1d8>
 8008d56:	6a11      	ldr	r1, [r2, #32]
 8008d58:	9106      	str	r1, [sp, #24]
 8008d5a:	f04f 0e00 	mov.w	lr, #0
 8008d5e:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8008f44 <D64_GENERIC+0x218>
 8008d62:	4681      	mov	r9, r0
 8008d64:	e0bf      	b.n	8008ee6 <D64_GENERIC+0x1ba>
 8008d66:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8008d6a:	426c      	negs	r4, r5
 8008d6c:	eb09 0708 	add.w	r7, r9, r8
 8008d70:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8008d74:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8008d78:	5d38      	ldrb	r0, [r7, r4]
 8008d7a:	5d31      	ldrb	r1, [r6, r4]
 8008d7c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8008d80:	f819 a008 	ldrb.w	sl, [r9, r8]
 8008d84:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8008d88:	f899 7000 	ldrb.w	r7, [r9]
 8008d8c:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8008d90:	4426      	add	r6, r4
 8008d92:	0409      	lsls	r1, r1, #16
 8008d94:	0400      	lsls	r0, r0, #16
 8008d96:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8008d9a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8008d9e:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8008da2:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8008da6:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 8008daa:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 8008dae:	4459      	add	r1, fp
 8008db0:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8008db4:	4438      	add	r0, r7
 8008db6:	b2c5      	uxtb	r5, r0
 8008db8:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8008dbc:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 8008dc0:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 8008dc4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 8008dc8:	0e00      	lsrs	r0, r0, #24
 8008dca:	eb03 0806 	add.w	r8, r3, r6
 8008dce:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8008dd2:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8008dd6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008dda:	b2c8      	uxtb	r0, r1
 8008ddc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8008de0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 8008de4:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 8008de8:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8008dec:	f3c1 4307 	ubfx	r3, r1, #16, #8
 8008df0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 8008df4:	0e09      	lsrs	r1, r1, #24
 8008df6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8008dfa:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8008dfe:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8008e02:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 8008e06:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 8008e0a:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8008e0e:	f3ca 0309 	ubfx	r3, sl, #0, #10
 8008e12:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8008e16:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8008e1a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8008e1e:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8008e22:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8008e26:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8008e2a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8008e2e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8008e32:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8008e36:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8008e3a:	0a8b      	lsrs	r3, r1, #10
 8008e3c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8008e40:	4938      	ldr	r1, [pc, #224]	@ (8008f24 <D64_GENERIC+0x1f8>)
 8008e42:	9c00      	ldr	r4, [sp, #0]
 8008e44:	fb28 4101 	smlad	r1, r8, r1, r4
 8008e48:	4c37      	ldr	r4, [pc, #220]	@ (8008f28 <D64_GENERIC+0x1fc>)
 8008e4a:	fb27 1104 	smlad	r1, r7, r4, r1
 8008e4e:	4c37      	ldr	r4, [pc, #220]	@ (8008f2c <D64_GENERIC+0x200>)
 8008e50:	fb20 1104 	smlad	r1, r0, r4, r1
 8008e54:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8008e58:	fb2a 1106 	smlad	r1, sl, r6, r1
 8008e5c:	4d34      	ldr	r5, [pc, #208]	@ (8008f30 <D64_GENERIC+0x204>)
 8008e5e:	9c01      	ldr	r4, [sp, #4]
 8008e60:	fb28 4405 	smlad	r4, r8, r5, r4
 8008e64:	fb2a 4415 	smladx	r4, sl, r5, r4
 8008e68:	4d32      	ldr	r5, [pc, #200]	@ (8008f34 <D64_GENERIC+0x208>)
 8008e6a:	fb27 4405 	smlad	r4, r7, r5, r4
 8008e6e:	fb20 4415 	smladx	r4, r0, r5, r4
 8008e72:	2501      	movs	r5, #1
 8008e74:	9400      	str	r4, [sp, #0]
 8008e76:	fb28 f805 	smuad	r8, r8, r5
 8008e7a:	4c2f      	ldr	r4, [pc, #188]	@ (8008f38 <D64_GENERIC+0x20c>)
 8008e7c:	fb27 8704 	smlad	r7, r7, r4, r8
 8008e80:	4c2e      	ldr	r4, [pc, #184]	@ (8008f3c <D64_GENERIC+0x210>)
 8008e82:	fb20 7004 	smlad	r0, r0, r4, r7
 8008e86:	4c2e      	ldr	r4, [pc, #184]	@ (8008f40 <D64_GENERIC+0x214>)
 8008e88:	fb2a 0004 	smlad	r0, sl, r4, r0
 8008e8c:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8008e90:	9906      	ldr	r1, [sp, #24]
 8008e92:	9001      	str	r0, [sp, #4]
 8008e94:	b181      	cbz	r1, 8008eb8 <D64_GENERIC+0x18c>
 8008e96:	9802      	ldr	r0, [sp, #8]
 8008e98:	9c03      	ldr	r4, [sp, #12]
 8008e9a:	4430      	add	r0, r6
 8008e9c:	1b00      	subs	r0, r0, r4
 8008e9e:	fba0 7801 	umull	r7, r8, r0, r1
 8008ea2:	17c5      	asrs	r5, r0, #31
 8008ea4:	fb01 8805 	mla	r8, r1, r5, r8
 8008ea8:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 8008eac:	f148 0100 	adc.w	r1, r8, #0
 8008eb0:	0049      	lsls	r1, r1, #1
 8008eb2:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8008eb6:	460e      	mov	r6, r1
 8008eb8:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 8008eba:	9904      	ldr	r1, [sp, #16]
 8008ebc:	9805      	ldr	r0, [sp, #20]
 8008ebe:	02b6      	lsls	r6, r6, #10
 8008ec0:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8008ec4:	f04f 0800 	mov.w	r8, #0
 8008ec8:	fb0e f404 	mul.w	r4, lr, r4
 8008ecc:	fbc1 7806 	smlal	r7, r8, r1, r6
 8008ed0:	4641      	mov	r1, r8
 8008ed2:	1089      	asrs	r1, r1, #2
 8008ed4:	f301 010f 	ssat	r1, #16, r1
 8008ed8:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 8008edc:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8008ede:	f10e 0e01 	add.w	lr, lr, #1
 8008ee2:	4571      	cmp	r1, lr
 8008ee4:	dd0e      	ble.n	8008f04 <D64_GENERIC+0x1d8>
 8008ee6:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8008ee8:	2d01      	cmp	r5, #1
 8008eea:	f47f af3c 	bne.w	8008d66 <D64_GENERIC+0x3a>
 8008eee:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8008ef0:	06ac      	lsls	r4, r5, #26
 8008ef2:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008ef6:	f109 0908 	add.w	r9, r9, #8
 8008efa:	f57f af5c 	bpl.w	8008db6 <D64_GENERIC+0x8a>
 8008efe:	ba40      	rev16	r0, r0
 8008f00:	ba49      	rev16	r1, r1
 8008f02:	e758      	b.n	8008db6 <D64_GENERIC+0x8a>
 8008f04:	61d3      	str	r3, [r2, #28]
 8008f06:	9b02      	ldr	r3, [sp, #8]
 8008f08:	9901      	ldr	r1, [sp, #4]
 8008f0a:	6113      	str	r3, [r2, #16]
 8008f0c:	9b03      	ldr	r3, [sp, #12]
 8008f0e:	6091      	str	r1, [r2, #8]
 8008f10:	6153      	str	r3, [r2, #20]
 8008f12:	9900      	ldr	r1, [sp, #0]
 8008f14:	9b07      	ldr	r3, [sp, #28]
 8008f16:	60d1      	str	r1, [r2, #12]
 8008f18:	2000      	movs	r0, #0
 8008f1a:	6193      	str	r3, [r2, #24]
 8008f1c:	b009      	add	sp, #36	@ 0x24
 8008f1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f22:	bf00      	nop
 8008f24:	001c0015 	.word	0x001c0015
 8008f28:	000f000a 	.word	0x000f000a
 8008f2c:	00060003 	.word	0x00060003
 8008f30:	0024002a 	.word	0x0024002a
 8008f34:	002e0030 	.word	0x002e0030
 8008f38:	00030006 	.word	0x00030006
 8008f3c:	000a000f 	.word	0x000a000f
 8008f40:	0015001c 	.word	0x0015001c
 8008f44:	20000010 	.word	0x20000010

08008f48 <D80_GENERIC>:
 8008f48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f4c:	b08b      	sub	sp, #44	@ 0x2c
 8008f4e:	6914      	ldr	r4, [r2, #16]
 8008f50:	9405      	str	r4, [sp, #20]
 8008f52:	6954      	ldr	r4, [r2, #20]
 8008f54:	9406      	str	r4, [sp, #24]
 8008f56:	6994      	ldr	r4, [r2, #24]
 8008f58:	9409      	str	r4, [sp, #36]	@ 0x24
 8008f5a:	6894      	ldr	r4, [r2, #8]
 8008f5c:	9402      	str	r4, [sp, #8]
 8008f5e:	68d4      	ldr	r4, [r2, #12]
 8008f60:	9401      	str	r4, [sp, #4]
 8008f62:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8008f64:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8008f66:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 8008f6a:	e9cd 4107 	strd	r4, r1, [sp, #28]
 8008f6e:	2b00      	cmp	r3, #0
 8008f70:	f000 810a 	beq.w	8009188 <D80_GENERIC+0x240>
 8008f74:	2300      	movs	r3, #0
 8008f76:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 80091d8 <D80_GENERIC+0x290>
 8008f7a:	e9cd b303 	strd	fp, r3, [sp, #12]
 8008f7e:	e0ee      	b.n	800915e <D80_GENERIC+0x216>
 8008f80:	fa5f fe8e 	uxtb.w	lr, lr
 8008f84:	fa0f f48e 	sxth.w	r4, lr
 8008f88:	0066      	lsls	r6, r4, #1
 8008f8a:	eb06 0804 	add.w	r8, r6, r4
 8008f8e:	f1ce 0500 	rsb	r5, lr, #0
 8008f92:	eb00 0108 	add.w	r1, r0, r8
 8008f96:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8008f9a:	194b      	adds	r3, r1, r5
 8008f9c:	5d49      	ldrb	r1, [r1, r5]
 8008f9e:	f810 a008 	ldrb.w	sl, [r0, r8]
 8008fa2:	f813 b004 	ldrb.w	fp, [r3, r4]
 8008fa6:	f810 e00e 	ldrb.w	lr, [r0, lr]
 8008faa:	f890 8000 	ldrb.w	r8, [r0]
 8008fae:	eb03 0c04 	add.w	ip, r3, r4
 8008fb2:	eb0c 0705 	add.w	r7, ip, r5
 8008fb6:	0409      	lsls	r1, r1, #16
 8008fb8:	f81c 3005 	ldrb.w	r3, [ip, r5]
 8008fbc:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 8008fc0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8008fc4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 8008fc8:	eb0a 0004 	add.w	r0, sl, r4
 8008fcc:	041b      	lsls	r3, r3, #16
 8008fce:	f81a a004 	ldrb.w	sl, [sl, r4]
 8008fd2:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 8008fd6:	5d44      	ldrb	r4, [r0, r5]
 8008fd8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8008fdc:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8008fe0:	4428      	add	r0, r5
 8008fe2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8008fe6:	4441      	add	r1, r8
 8008fe8:	4430      	add	r0, r6
 8008fea:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 8008fee:	441f      	add	r7, r3
 8008ff0:	b2cd      	uxtb	r5, r1
 8008ff2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 8008ff6:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8008ffa:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 8008ffe:	9b03      	ldr	r3, [sp, #12]
 8009000:	f3c1 4507 	ubfx	r5, r1, #16, #8
 8009004:	0e09      	lsrs	r1, r1, #24
 8009006:	4433      	add	r3, r6
 8009008:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 800900c:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 8009010:	b2fd      	uxtb	r5, r7
 8009012:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 8009016:	469b      	mov	fp, r3
 8009018:	f3c7 2307 	ubfx	r3, r7, #8, #8
 800901c:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009020:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8009024:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8009028:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800902c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8009030:	0e3b      	lsrs	r3, r7, #24
 8009032:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8009036:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 800903a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800903e:	fa5f fc84 	uxtb.w	ip, r4
 8009042:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8009046:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800904a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800904e:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8009052:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8009056:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800905a:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800905e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009062:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009066:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800906a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800906e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009072:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009076:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800907a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800907e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8009082:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8009086:	0aa3      	lsrs	r3, r4, #10
 8009088:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800908c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009090:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009094:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8009098:	9303      	str	r3, [sp, #12]
 800909a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800909e:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 80090a2:	4b41      	ldr	r3, [pc, #260]	@ (80091a8 <D80_GENERIC+0x260>)
 80090a4:	9901      	ldr	r1, [sp, #4]
 80090a6:	fb2b 1303 	smlad	r3, fp, r3, r1
 80090aa:	4940      	ldr	r1, [pc, #256]	@ (80091ac <D80_GENERIC+0x264>)
 80090ac:	fb28 3301 	smlad	r3, r8, r1, r3
 80090b0:	493f      	ldr	r1, [pc, #252]	@ (80091b0 <D80_GENERIC+0x268>)
 80090b2:	fb2e 3301 	smlad	r3, lr, r1, r3
 80090b6:	493f      	ldr	r1, [pc, #252]	@ (80091b4 <D80_GENERIC+0x26c>)
 80090b8:	fb27 3301 	smlad	r3, r7, r1, r3
 80090bc:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80090c0:	fb2c 3404 	smlad	r4, ip, r4, r3
 80090c4:	4b3c      	ldr	r3, [pc, #240]	@ (80091b8 <D80_GENERIC+0x270>)
 80090c6:	9902      	ldr	r1, [sp, #8]
 80090c8:	fb2b 1303 	smlad	r3, fp, r3, r1
 80090cc:	493b      	ldr	r1, [pc, #236]	@ (80091bc <D80_GENERIC+0x274>)
 80090ce:	fb28 3301 	smlad	r3, r8, r1, r3
 80090d2:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 80090d6:	fb2e 3101 	smlad	r1, lr, r1, r3
 80090da:	4b39      	ldr	r3, [pc, #228]	@ (80091c0 <D80_GENERIC+0x278>)
 80090dc:	fb27 1103 	smlad	r1, r7, r3, r1
 80090e0:	4b38      	ldr	r3, [pc, #224]	@ (80091c4 <D80_GENERIC+0x27c>)
 80090e2:	fb2c 1303 	smlad	r3, ip, r3, r1
 80090e6:	2101      	movs	r1, #1
 80090e8:	9301      	str	r3, [sp, #4]
 80090ea:	fb2b fb01 	smuad	fp, fp, r1
 80090ee:	4b36      	ldr	r3, [pc, #216]	@ (80091c8 <D80_GENERIC+0x280>)
 80090f0:	fb28 b803 	smlad	r8, r8, r3, fp
 80090f4:	4d35      	ldr	r5, [pc, #212]	@ (80091cc <D80_GENERIC+0x284>)
 80090f6:	fb2e 8e05 	smlad	lr, lr, r5, r8
 80090fa:	4d35      	ldr	r5, [pc, #212]	@ (80091d0 <D80_GENERIC+0x288>)
 80090fc:	fb27 e705 	smlad	r7, r7, r5, lr
 8009100:	4b34      	ldr	r3, [pc, #208]	@ (80091d4 <D80_GENERIC+0x28c>)
 8009102:	fb2c 7303 	smlad	r3, ip, r3, r7
 8009106:	6a11      	ldr	r1, [r2, #32]
 8009108:	9302      	str	r3, [sp, #8]
 800910a:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 800910e:	b181      	cbz	r1, 8009132 <D80_GENERIC+0x1ea>
 8009110:	9c05      	ldr	r4, [sp, #20]
 8009112:	9d06      	ldr	r5, [sp, #24]
 8009114:	441c      	add	r4, r3
 8009116:	1b64      	subs	r4, r4, r5
 8009118:	fba4 ab01 	umull	sl, fp, r4, r1
 800911c:	17e7      	asrs	r7, r4, #31
 800911e:	fb01 bb07 	mla	fp, r1, r7, fp
 8009122:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 8009126:	f14b 0500 	adc.w	r5, fp, #0
 800912a:	0069      	lsls	r1, r5, #1
 800912c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8009130:	460b      	mov	r3, r1
 8009132:	9e04      	ldr	r6, [sp, #16]
 8009134:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8009136:	9f07      	ldr	r7, [sp, #28]
 8009138:	025b      	lsls	r3, r3, #9
 800913a:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800913e:	2500      	movs	r5, #0
 8009140:	fb06 f101 	mul.w	r1, r6, r1
 8009144:	fbc7 4503 	smlal	r4, r5, r7, r3
 8009148:	9c08      	ldr	r4, [sp, #32]
 800914a:	10ab      	asrs	r3, r5, #2
 800914c:	f303 030f 	ssat	r3, #16, r3
 8009150:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8009154:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8009156:	1c71      	adds	r1, r6, #1
 8009158:	428b      	cmp	r3, r1
 800915a:	9104      	str	r1, [sp, #16]
 800915c:	dd12      	ble.n	8009184 <D80_GENERIC+0x23c>
 800915e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8009162:	f1be 0f01 	cmp.w	lr, #1
 8009166:	f47f af0b 	bne.w	8008f80 <D80_GENERIC+0x38>
 800916a:	6801      	ldr	r1, [r0, #0]
 800916c:	6847      	ldr	r7, [r0, #4]
 800916e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009170:	6884      	ldr	r4, [r0, #8]
 8009172:	069b      	lsls	r3, r3, #26
 8009174:	f100 000a 	add.w	r0, r0, #10
 8009178:	f57f af3a 	bpl.w	8008ff0 <D80_GENERIC+0xa8>
 800917c:	ba49      	rev16	r1, r1
 800917e:	ba7f      	rev16	r7, r7
 8009180:	ba64      	rev16	r4, r4
 8009182:	e735      	b.n	8008ff0 <D80_GENERIC+0xa8>
 8009184:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009188:	9b02      	ldr	r3, [sp, #8]
 800918a:	6093      	str	r3, [r2, #8]
 800918c:	9b01      	ldr	r3, [sp, #4]
 800918e:	60d3      	str	r3, [r2, #12]
 8009190:	9b05      	ldr	r3, [sp, #20]
 8009192:	6113      	str	r3, [r2, #16]
 8009194:	9b06      	ldr	r3, [sp, #24]
 8009196:	6153      	str	r3, [r2, #20]
 8009198:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800919a:	f8c2 b01c 	str.w	fp, [r2, #28]
 800919e:	2000      	movs	r0, #0
 80091a0:	6193      	str	r3, [r2, #24]
 80091a2:	b00b      	add	sp, #44	@ 0x2c
 80091a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091a8:	002d0024 	.word	0x002d0024
 80091ac:	001c0015 	.word	0x001c0015
 80091b0:	000f000a 	.word	0x000f000a
 80091b4:	00060003 	.word	0x00060003
 80091b8:	0037003f 	.word	0x0037003f
 80091bc:	00450049 	.word	0x00450049
 80091c0:	00490045 	.word	0x00490045
 80091c4:	003f0037 	.word	0x003f0037
 80091c8:	00030006 	.word	0x00030006
 80091cc:	000a000f 	.word	0x000a000f
 80091d0:	0015001c 	.word	0x0015001c
 80091d4:	0024002d 	.word	0x0024002d
 80091d8:	20000010 	.word	0x20000010

080091dc <D128_GENERIC>:
 80091dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091e0:	b091      	sub	sp, #68	@ 0x44
 80091e2:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80091e4:	9004      	str	r0, [sp, #16]
 80091e6:	6910      	ldr	r0, [r2, #16]
 80091e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80091ea:	6950      	ldr	r0, [r2, #20]
 80091ec:	900b      	str	r0, [sp, #44]	@ 0x2c
 80091ee:	6990      	ldr	r0, [r2, #24]
 80091f0:	900f      	str	r0, [sp, #60]	@ 0x3c
 80091f2:	69d0      	ldr	r0, [r2, #28]
 80091f4:	9002      	str	r0, [sp, #8]
 80091f6:	6890      	ldr	r0, [r2, #8]
 80091f8:	9003      	str	r0, [sp, #12]
 80091fa:	68d0      	ldr	r0, [r2, #12]
 80091fc:	9001      	str	r0, [sp, #4]
 80091fe:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8009200:	9200      	str	r2, [sp, #0]
 8009202:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009206:	2b00      	cmp	r3, #0
 8009208:	f000 8196 	beq.w	8009538 <D128_GENERIC+0x35c>
 800920c:	2300      	movs	r3, #0
 800920e:	6a12      	ldr	r2, [r2, #32]
 8009210:	920e      	str	r2, [sp, #56]	@ 0x38
 8009212:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 80095b4 <D128_GENERIC+0x3d8>
 8009216:	9305      	str	r3, [sp, #20]
 8009218:	e177      	b.n	800950a <D128_GENERIC+0x32e>
 800921a:	b2d2      	uxtb	r2, r2
 800921c:	9d04      	ldr	r5, [sp, #16]
 800921e:	b214      	sxth	r4, r2
 8009220:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8009224:	4250      	negs	r0, r2
 8009226:	eb05 010a 	add.w	r1, r5, sl
 800922a:	00a6      	lsls	r6, r4, #2
 800922c:	eb01 0800 	add.w	r8, r1, r0
 8009230:	eb06 0e04 	add.w	lr, r6, r4
 8009234:	eb08 070e 	add.w	r7, r8, lr
 8009238:	183b      	adds	r3, r7, r0
 800923a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 800923e:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8009242:	9608      	str	r6, [sp, #32]
 8009244:	eb0c 0604 	add.w	r6, ip, r4
 8009248:	9304      	str	r3, [sp, #16]
 800924a:	1833      	adds	r3, r6, r0
 800924c:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8009250:	9306      	str	r3, [sp, #24]
 8009252:	f818 a00e 	ldrb.w	sl, [r8, lr]
 8009256:	9b04      	ldr	r3, [sp, #16]
 8009258:	f815 e002 	ldrb.w	lr, [r5, r2]
 800925c:	782d      	ldrb	r5, [r5, #0]
 800925e:	5c3a      	ldrb	r2, [r7, r0]
 8009260:	9507      	str	r5, [sp, #28]
 8009262:	9d06      	ldr	r5, [sp, #24]
 8009264:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8009268:	f81c 8004 	ldrb.w	r8, [ip, r4]
 800926c:	9304      	str	r3, [sp, #16]
 800926e:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8009272:	5c33      	ldrb	r3, [r6, r0]
 8009274:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8009278:	5c09      	ldrb	r1, [r1, r0]
 800927a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 800927e:	0412      	lsls	r2, r2, #16
 8009280:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8009284:	eb06 0a04 	add.w	sl, r6, r4
 8009288:	5d36      	ldrb	r6, [r6, r4]
 800928a:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 800928e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8009292:	042d      	lsls	r5, r5, #16
 8009294:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8009298:	0409      	lsls	r1, r1, #16
 800929a:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 800929e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 80092a2:	041b      	lsls	r3, r3, #16
 80092a4:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80092a8:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 80092ac:	eb0a 0e00 	add.w	lr, sl, r0
 80092b0:	9d07      	ldr	r5, [sp, #28]
 80092b2:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 80092b6:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80092ba:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 80092be:	9f08      	ldr	r7, [sp, #32]
 80092c0:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 80092c4:	4429      	add	r1, r5
 80092c6:	9d04      	ldr	r5, [sp, #16]
 80092c8:	4438      	add	r0, r7
 80092ca:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 80092ce:	9004      	str	r0, [sp, #16]
 80092d0:	442a      	add	r2, r5
 80092d2:	eb06 0a0b 	add.w	sl, r6, fp
 80092d6:	1918      	adds	r0, r3, r4
 80092d8:	b2cb      	uxtb	r3, r1
 80092da:	f3c1 2407 	ubfx	r4, r1, #8, #8
 80092de:	9e02      	ldr	r6, [sp, #8]
 80092e0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80092e4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 80092e8:	f3c1 4407 	ubfx	r4, r1, #16, #8
 80092ec:	441e      	add	r6, r3
 80092ee:	0e09      	lsrs	r1, r1, #24
 80092f0:	4633      	mov	r3, r6
 80092f2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 80092f6:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 80092fa:	b2d4      	uxtb	r4, r2
 80092fc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009300:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009304:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8009308:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 800930c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009310:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009314:	0e12      	lsrs	r2, r2, #24
 8009316:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 800931a:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 800931e:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009322:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009326:	9702      	str	r7, [sp, #8]
 8009328:	b2c2      	uxtb	r2, r0
 800932a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 800932e:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 8009332:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8009336:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800933a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 800933e:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 8009342:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8009346:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 800934a:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 800934e:	0e00      	lsrs	r0, r0, #24
 8009350:	fa5f f68a 	uxtb.w	r6, sl
 8009354:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009358:	9308      	str	r3, [sp, #32]
 800935a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 800935e:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8009362:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009366:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800936a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800936e:	9509      	str	r5, [sp, #36]	@ 0x24
 8009370:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009374:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009378:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800937c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009380:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8009384:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009388:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800938c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009390:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8009394:	9306      	str	r3, [sp, #24]
 8009396:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800939a:	9b02      	ldr	r3, [sp, #8]
 800939c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80093a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80093a4:	f8cd a01c 	str.w	sl, [sp, #28]
 80093a8:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 80093ac:	9b06      	ldr	r3, [sp, #24]
 80093ae:	9506      	str	r5, [sp, #24]
 80093b0:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80093b2:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80093b6:	f8cd e008 	str.w	lr, [sp, #8]
 80093ba:	46ae      	mov	lr, r5
 80093bc:	9d08      	ldr	r5, [sp, #32]
 80093be:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80093c2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 80093c6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 80093ca:	9d02      	ldr	r5, [sp, #8]
 80093cc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80093d0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80093d4:	9f07      	ldr	r7, [sp, #28]
 80093d6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80093da:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80093de:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80093e2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80093e6:	9d06      	ldr	r5, [sp, #24]
 80093e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80093ec:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80093f0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80093f4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 80093f8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80093fc:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 8009400:	0abe      	lsrs	r6, r7, #10
 8009402:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009406:	9602      	str	r6, [sp, #8]
 8009408:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 800940c:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8009410:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8009414:	4e52      	ldr	r6, [pc, #328]	@ (8009560 <D128_GENERIC+0x384>)
 8009416:	9f01      	ldr	r7, [sp, #4]
 8009418:	fb2e 7606 	smlad	r6, lr, r6, r7
 800941c:	4f51      	ldr	r7, [pc, #324]	@ (8009564 <D128_GENERIC+0x388>)
 800941e:	fb2a 6607 	smlad	r6, sl, r7, r6
 8009422:	4f51      	ldr	r7, [pc, #324]	@ (8009568 <D128_GENERIC+0x38c>)
 8009424:	fb21 6607 	smlad	r6, r1, r7, r6
 8009428:	4f50      	ldr	r7, [pc, #320]	@ (800956c <D128_GENERIC+0x390>)
 800942a:	fb24 6607 	smlad	r6, r4, r7, r6
 800942e:	4f50      	ldr	r7, [pc, #320]	@ (8009570 <D128_GENERIC+0x394>)
 8009430:	fb22 6607 	smlad	r6, r2, r7, r6
 8009434:	4f4f      	ldr	r7, [pc, #316]	@ (8009574 <D128_GENERIC+0x398>)
 8009436:	fb20 6607 	smlad	r6, r0, r7, r6
 800943a:	4f4f      	ldr	r7, [pc, #316]	@ (8009578 <D128_GENERIC+0x39c>)
 800943c:	fb23 6607 	smlad	r6, r3, r7, r6
 8009440:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8009444:	fb25 6807 	smlad	r8, r5, r7, r6
 8009448:	4f4c      	ldr	r7, [pc, #304]	@ (800957c <D128_GENERIC+0x3a0>)
 800944a:	9e03      	ldr	r6, [sp, #12]
 800944c:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8009450:	4e4b      	ldr	r6, [pc, #300]	@ (8009580 <D128_GENERIC+0x3a4>)
 8009452:	fb2a cc06 	smlad	ip, sl, r6, ip
 8009456:	4f4b      	ldr	r7, [pc, #300]	@ (8009584 <D128_GENERIC+0x3a8>)
 8009458:	fb21 cc07 	smlad	ip, r1, r7, ip
 800945c:	4f4a      	ldr	r7, [pc, #296]	@ (8009588 <D128_GENERIC+0x3ac>)
 800945e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8009462:	4f4a      	ldr	r7, [pc, #296]	@ (800958c <D128_GENERIC+0x3b0>)
 8009464:	fb22 cc07 	smlad	ip, r2, r7, ip
 8009468:	4f49      	ldr	r7, [pc, #292]	@ (8009590 <D128_GENERIC+0x3b4>)
 800946a:	fb20 cc07 	smlad	ip, r0, r7, ip
 800946e:	4f49      	ldr	r7, [pc, #292]	@ (8009594 <D128_GENERIC+0x3b8>)
 8009470:	fb23 c707 	smlad	r7, r3, r7, ip
 8009474:	f8df c140 	ldr.w	ip, [pc, #320]	@ 80095b8 <D128_GENERIC+0x3dc>
 8009478:	fb25 760c 	smlad	r6, r5, ip, r7
 800947c:	f04f 0b01 	mov.w	fp, #1
 8009480:	9601      	str	r6, [sp, #4]
 8009482:	fb2e fb0b 	smuad	fp, lr, fp
 8009486:	4f44      	ldr	r7, [pc, #272]	@ (8009598 <D128_GENERIC+0x3bc>)
 8009488:	fb2a ba07 	smlad	sl, sl, r7, fp
 800948c:	4f43      	ldr	r7, [pc, #268]	@ (800959c <D128_GENERIC+0x3c0>)
 800948e:	fb21 aa07 	smlad	sl, r1, r7, sl
 8009492:	4f43      	ldr	r7, [pc, #268]	@ (80095a0 <D128_GENERIC+0x3c4>)
 8009494:	fb24 aa07 	smlad	sl, r4, r7, sl
 8009498:	4f42      	ldr	r7, [pc, #264]	@ (80095a4 <D128_GENERIC+0x3c8>)
 800949a:	fb22 a707 	smlad	r7, r2, r7, sl
 800949e:	4a42      	ldr	r2, [pc, #264]	@ (80095a8 <D128_GENERIC+0x3cc>)
 80094a0:	fb20 7702 	smlad	r7, r0, r2, r7
 80094a4:	4a41      	ldr	r2, [pc, #260]	@ (80095ac <D128_GENERIC+0x3d0>)
 80094a6:	fb23 7702 	smlad	r7, r3, r2, r7
 80094aa:	4b41      	ldr	r3, [pc, #260]	@ (80095b0 <D128_GENERIC+0x3d4>)
 80094ac:	fb25 7303 	smlad	r3, r5, r3, r7
 80094b0:	9303      	str	r3, [sp, #12]
 80094b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80094b4:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 80094b8:	b183      	cbz	r3, 80094dc <D128_GENERIC+0x300>
 80094ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80094bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80094be:	4432      	add	r2, r6
 80094c0:	1a52      	subs	r2, r2, r1
 80094c2:	fba2 4503 	umull	r4, r5, r2, r3
 80094c6:	17d1      	asrs	r1, r2, #31
 80094c8:	fb03 5501 	mla	r5, r3, r1, r5
 80094cc:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 80094d0:	f145 0300 	adc.w	r3, r5, #0
 80094d4:	005b      	lsls	r3, r3, #1
 80094d6:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 80094da:	461e      	mov	r6, r3
 80094dc:	9800      	ldr	r0, [sp, #0]
 80094de:	9c05      	ldr	r4, [sp, #20]
 80094e0:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 80094e2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 80094e4:	01f6      	lsls	r6, r6, #7
 80094e6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80094ea:	2300      	movs	r3, #0
 80094ec:	fbc5 2306 	smlal	r2, r3, r5, r6
 80094f0:	fb04 f101 	mul.w	r1, r4, r1
 80094f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80094f6:	109b      	asrs	r3, r3, #2
 80094f8:	f303 030f 	ssat	r3, #16, r3
 80094fc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8009500:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8009502:	1c62      	adds	r2, r4, #1
 8009504:	4293      	cmp	r3, r2
 8009506:	9205      	str	r2, [sp, #20]
 8009508:	dd16      	ble.n	8009538 <D128_GENERIC+0x35c>
 800950a:	9b00      	ldr	r3, [sp, #0]
 800950c:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 800950e:	2a01      	cmp	r2, #1
 8009510:	f47f ae83 	bne.w	800921a <D128_GENERIC+0x3e>
 8009514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009516:	9c04      	ldr	r4, [sp, #16]
 8009518:	069b      	lsls	r3, r3, #26
 800951a:	e9d4 1200 	ldrd	r1, r2, [r4]
 800951e:	68a0      	ldr	r0, [r4, #8]
 8009520:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009524:	f104 0410 	add.w	r4, r4, #16
 8009528:	d517      	bpl.n	800955a <D128_GENERIC+0x37e>
 800952a:	ba49      	rev16	r1, r1
 800952c:	ba52      	rev16	r2, r2
 800952e:	ba40      	rev16	r0, r0
 8009530:	fa9a fa9a 	rev16.w	sl, sl
 8009534:	9404      	str	r4, [sp, #16]
 8009536:	e6cf      	b.n	80092d8 <D128_GENERIC+0xfc>
 8009538:	9b00      	ldr	r3, [sp, #0]
 800953a:	9903      	ldr	r1, [sp, #12]
 800953c:	6099      	str	r1, [r3, #8]
 800953e:	9901      	ldr	r1, [sp, #4]
 8009540:	60d9      	str	r1, [r3, #12]
 8009542:	9902      	ldr	r1, [sp, #8]
 8009544:	61d9      	str	r1, [r3, #28]
 8009546:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009548:	6119      	str	r1, [r3, #16]
 800954a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800954c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800954e:	6159      	str	r1, [r3, #20]
 8009550:	2000      	movs	r0, #0
 8009552:	619a      	str	r2, [r3, #24]
 8009554:	b011      	add	sp, #68	@ 0x44
 8009556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800955a:	9404      	str	r4, [sp, #16]
 800955c:	e6bc      	b.n	80092d8 <D128_GENERIC+0xfc>
 800955e:	bf00      	nop
 8009560:	00780069 	.word	0x00780069
 8009564:	005b004e 	.word	0x005b004e
 8009568:	00420037 	.word	0x00420037
 800956c:	002d0024 	.word	0x002d0024
 8009570:	001c0015 	.word	0x001c0015
 8009574:	000f000a 	.word	0x000f000a
 8009578:	00060003 	.word	0x00060003
 800957c:	00880096 	.word	0x00880096
 8009580:	00a200ac 	.word	0x00a200ac
 8009584:	00b400ba 	.word	0x00b400ba
 8009588:	00be00c0 	.word	0x00be00c0
 800958c:	00c000be 	.word	0x00c000be
 8009590:	00ba00b4 	.word	0x00ba00b4
 8009594:	00ac00a2 	.word	0x00ac00a2
 8009598:	00030006 	.word	0x00030006
 800959c:	000a000f 	.word	0x000a000f
 80095a0:	0015001c 	.word	0x0015001c
 80095a4:	0024002d 	.word	0x0024002d
 80095a8:	00370042 	.word	0x00370042
 80095ac:	004e005b 	.word	0x004e005b
 80095b0:	00690078 	.word	0x00690078
 80095b4:	20000010 	.word	0x20000010
 80095b8:	00960088 	.word	0x00960088

080095bc <D16_1CH_HTONS_VOL_HP>:
 80095bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095c0:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 80095c4:	b085      	sub	sp, #20
 80095c6:	4681      	mov	r9, r0
 80095c8:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80095ca:	6993      	ldr	r3, [r2, #24]
 80095cc:	9303      	str	r3, [sp, #12]
 80095ce:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80095d2:	69d3      	ldr	r3, [r2, #28]
 80095d4:	9402      	str	r4, [sp, #8]
 80095d6:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 80095da:	f8d2 c020 	ldr.w	ip, [r2, #32]
 80095de:	2800      	cmp	r0, #0
 80095e0:	d057      	beq.n	8009692 <D16_1CH_HTONS_VOL_HP+0xd6>
 80095e2:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 80095e6:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 80096a0 <D16_1CH_HTONS_VOL_HP+0xe4>
 80095ea:	f1a1 0802 	sub.w	r8, r1, #2
 80095ee:	4639      	mov	r1, r7
 80095f0:	465f      	mov	r7, fp
 80095f2:	46d3      	mov	fp, sl
 80095f4:	46ca      	mov	sl, r9
 80095f6:	4699      	mov	r9, r3
 80095f8:	4633      	mov	r3, r6
 80095fa:	4616      	mov	r6, r2
 80095fc:	f85a 2b02 	ldr.w	r2, [sl], #2
 8009600:	ba52      	rev16	r2, r2
 8009602:	b2d4      	uxtb	r4, r2
 8009604:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8009608:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 800960c:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009610:	4491      	add	r9, r2
 8009612:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 8009616:	f3c0 0209 	ubfx	r2, r0, #0, #10
 800961a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800961e:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8009622:	ea4f 2990 	mov.w	r9, r0, lsr #10
 8009626:	481c      	ldr	r0, [pc, #112]	@ (8009698 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8009628:	fb22 5400 	smlad	r4, r2, r0, r5
 800962c:	481b      	ldr	r0, [pc, #108]	@ (800969c <D16_1CH_HTONS_VOL_HP+0xe0>)
 800962e:	fb22 f500 	smuad	r5, r2, r0
 8009632:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8009636:	18e2      	adds	r2, r4, r3
 8009638:	1a52      	subs	r2, r2, r1
 800963a:	17d1      	asrs	r1, r2, #31
 800963c:	fba2 230c 	umull	r2, r3, r2, ip
 8009640:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8009644:	fb0c 3301 	mla	r3, ip, r1, r3
 8009648:	f143 0100 	adc.w	r1, r3, #0
 800964c:	e9cd 0100 	strd	r0, r1, [sp]
 8009650:	044a      	lsls	r2, r1, #17
 8009652:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009656:	2100      	movs	r1, #0
 8009658:	9b01      	ldr	r3, [sp, #4]
 800965a:	fbcb 0102 	smlal	r0, r1, fp, r2
 800965e:	45ba      	cmp	sl, r7
 8009660:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8009664:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009668:	f302 020f 	ssat	r2, #16, r2
 800966c:	4621      	mov	r1, r4
 800966e:	f828 2f02 	strh.w	r2, [r8, #2]!
 8009672:	d1c3      	bne.n	80095fc <D16_1CH_HTONS_VOL_HP+0x40>
 8009674:	4632      	mov	r2, r6
 8009676:	461e      	mov	r6, r3
 8009678:	464b      	mov	r3, r9
 800967a:	9902      	ldr	r1, [sp, #8]
 800967c:	61d3      	str	r3, [r2, #28]
 800967e:	9b03      	ldr	r3, [sp, #12]
 8009680:	6095      	str	r5, [r2, #8]
 8009682:	2000      	movs	r0, #0
 8009684:	60d1      	str	r1, [r2, #12]
 8009686:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800968a:	6193      	str	r3, [r2, #24]
 800968c:	b005      	add	sp, #20
 800968e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009692:	463c      	mov	r4, r7
 8009694:	e7f1      	b.n	800967a <D16_1CH_HTONS_VOL_HP+0xbe>
 8009696:	bf00      	nop
 8009698:	00030001 	.word	0x00030001
 800969c:	00010003 	.word	0x00010003
 80096a0:	20000010 	.word	0x20000010

080096a4 <D24_1CH_HTONS_VOL_HP>:
 80096a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a8:	4696      	mov	lr, r2
 80096aa:	b089      	sub	sp, #36	@ 0x24
 80096ac:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 80096b0:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80096b2:	f8de 3018 	ldr.w	r3, [lr, #24]
 80096b6:	9703      	str	r7, [sp, #12]
 80096b8:	f8de 7020 	ldr.w	r7, [lr, #32]
 80096bc:	9306      	str	r3, [sp, #24]
 80096be:	9205      	str	r2, [sp, #20]
 80096c0:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 80096c4:	f8de 601c 	ldr.w	r6, [lr, #28]
 80096c8:	9704      	str	r7, [sp, #16]
 80096ca:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 80096ce:	2a00      	cmp	r2, #0
 80096d0:	f000 8081 	beq.w	80097d6 <D24_1CH_HTONS_VOL_HP+0x132>
 80096d4:	f1a1 0b02 	sub.w	fp, r1, #2
 80096d8:	2700      	movs	r7, #0
 80096da:	46d9      	mov	r9, fp
 80096dc:	f8cd e01c 	str.w	lr, [sp, #28]
 80096e0:	46d3      	mov	fp, sl
 80096e2:	f8df c100 	ldr.w	ip, [pc, #256]	@ 80097e4 <D24_1CH_HTONS_VOL_HP+0x140>
 80096e6:	46a8      	mov	r8, r5
 80096e8:	46ba      	mov	sl, r7
 80096ea:	469e      	mov	lr, r3
 80096ec:	e052      	b.n	8009794 <D24_1CH_HTONS_VOL_HP+0xf0>
 80096ee:	7842      	ldrb	r2, [r0, #1]
 80096f0:	3002      	adds	r0, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	b2d9      	uxtb	r1, r3
 80096f6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80096fa:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 80096fe:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8009702:	0c1b      	lsrs	r3, r3, #16
 8009704:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009708:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 800970c:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8009710:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8009714:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009718:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 800971c:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8009720:	4a2e      	ldr	r2, [pc, #184]	@ (80097dc <D24_1CH_HTONS_VOL_HP+0x138>)
 8009722:	fb23 b102 	smlad	r1, r3, r2, fp
 8009726:	4a2e      	ldr	r2, [pc, #184]	@ (80097e0 <D24_1CH_HTONS_VOL_HP+0x13c>)
 8009728:	fb23 eb02 	smlad	fp, r3, r2, lr
 800972c:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 8009730:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8009734:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 8009738:	2201      	movs	r2, #1
 800973a:	fb23 f702 	smuad	r7, r3, r2
 800973e:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 8009742:	eb01 0208 	add.w	r2, r1, r8
 8009746:	1b12      	subs	r2, r2, r4
 8009748:	17d4      	asrs	r4, r2, #31
 800974a:	4613      	mov	r3, r2
 800974c:	e9cd 3400 	strd	r3, r4, [sp]
 8009750:	9c04      	ldr	r4, [sp, #16]
 8009752:	9d01      	ldr	r5, [sp, #4]
 8009754:	fba2 2304 	umull	r2, r3, r2, r4
 8009758:	fb04 3305 	mla	r3, r4, r5, r3
 800975c:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8009760:	f143 0500 	adc.w	r5, r3, #0
 8009764:	9b03      	ldr	r3, [sp, #12]
 8009766:	e9cd 4500 	strd	r4, r5, [sp]
 800976a:	03ea      	lsls	r2, r5, #15
 800976c:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8009770:	2500      	movs	r5, #0
 8009772:	fbc3 4502 	smlal	r4, r5, r3, r2
 8009776:	9b01      	ldr	r3, [sp, #4]
 8009778:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800977c:	10ab      	asrs	r3, r5, #2
 800977e:	f303 030f 	ssat	r3, #16, r3
 8009782:	f829 3f02 	strh.w	r3, [r9, #2]!
 8009786:	9b05      	ldr	r3, [sp, #20]
 8009788:	f10a 0a01 	add.w	sl, sl, #1
 800978c:	459a      	cmp	sl, r3
 800978e:	44be      	add	lr, r7
 8009790:	460c      	mov	r4, r1
 8009792:	d00e      	beq.n	80097b2 <D24_1CH_HTONS_VOL_HP+0x10e>
 8009794:	7801      	ldrb	r1, [r0, #0]
 8009796:	78c2      	ldrb	r2, [r0, #3]
 8009798:	020b      	lsls	r3, r1, #8
 800979a:	f01a 0f01 	tst.w	sl, #1
 800979e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 80097a2:	d0a4      	beq.n	80096ee <D24_1CH_HTONS_VOL_HP+0x4a>
 80097a4:	7885      	ldrb	r5, [r0, #2]
 80097a6:	0212      	lsls	r2, r2, #8
 80097a8:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 80097ac:	440b      	add	r3, r1
 80097ae:	3004      	adds	r0, #4
 80097b0:	e7a0      	b.n	80096f4 <D24_1CH_HTONS_VOL_HP+0x50>
 80097b2:	4673      	mov	r3, lr
 80097b4:	f8dd e01c 	ldr.w	lr, [sp, #28]
 80097b8:	46da      	mov	sl, fp
 80097ba:	4645      	mov	r5, r8
 80097bc:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 80097c0:	9b06      	ldr	r3, [sp, #24]
 80097c2:	f8ce 601c 	str.w	r6, [lr, #28]
 80097c6:	2000      	movs	r0, #0
 80097c8:	e9ce 5104 	strd	r5, r1, [lr, #16]
 80097cc:	f8ce 3018 	str.w	r3, [lr, #24]
 80097d0:	b009      	add	sp, #36	@ 0x24
 80097d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097d6:	4621      	mov	r1, r4
 80097d8:	e7f0      	b.n	80097bc <D24_1CH_HTONS_VOL_HP+0x118>
 80097da:	bf00      	nop
 80097dc:	00030001 	.word	0x00030001
 80097e0:	00060007 	.word	0x00060007
 80097e4:	20000010 	.word	0x20000010

080097e8 <D32_1CH_HTONS_VOL_HP>:
 80097e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097ec:	4682      	mov	sl, r0
 80097ee:	b087      	sub	sp, #28
 80097f0:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 80097f2:	6993      	ldr	r3, [r2, #24]
 80097f4:	9304      	str	r3, [sp, #16]
 80097f6:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 80097fa:	69d5      	ldr	r5, [r2, #28]
 80097fc:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80097fe:	f8d2 9020 	ldr.w	r9, [r2, #32]
 8009802:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 8009806:	2800      	cmp	r0, #0
 8009808:	d070      	beq.n	80098ec <D32_1CH_HTONS_VOL_HP+0x104>
 800980a:	468e      	mov	lr, r1
 800980c:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 8009900 <D32_1CH_HTONS_VOL_HP+0x118>
 8009810:	9205      	str	r2, [sp, #20]
 8009812:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009816:	46d3      	mov	fp, sl
 8009818:	4638      	mov	r0, r7
 800981a:	46ca      	mov	sl, r9
 800981c:	9103      	str	r1, [sp, #12]
 800981e:	4627      	mov	r7, r4
 8009820:	4699      	mov	r9, r3
 8009822:	f85b 1b04 	ldr.w	r1, [fp], #4
 8009826:	ba49      	rev16	r1, r1
 8009828:	b2ca      	uxtb	r2, r1
 800982a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800982e:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8009832:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8009836:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800983a:	0e09      	lsrs	r1, r1, #24
 800983c:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8009840:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 8009844:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 8009848:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800984c:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8009850:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 8009854:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009858:	f3c5 0109 	ubfx	r1, r5, #0, #10
 800985c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009860:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009864:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009868:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800986c:	4a20      	ldr	r2, [pc, #128]	@ (80098f0 <D32_1CH_HTONS_VOL_HP+0x108>)
 800986e:	fb23 8802 	smlad	r8, r3, r2, r8
 8009872:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009876:	fb24 8102 	smlad	r1, r4, r2, r8
 800987a:	4a1e      	ldr	r2, [pc, #120]	@ (80098f4 <D32_1CH_HTONS_VOL_HP+0x10c>)
 800987c:	fb23 9802 	smlad	r8, r3, r2, r9
 8009880:	4a1d      	ldr	r2, [pc, #116]	@ (80098f8 <D32_1CH_HTONS_VOL_HP+0x110>)
 8009882:	fb24 8802 	smlad	r8, r4, r2, r8
 8009886:	2201      	movs	r2, #1
 8009888:	fb23 f302 	smuad	r3, r3, r2
 800988c:	4a1b      	ldr	r2, [pc, #108]	@ (80098fc <D32_1CH_HTONS_VOL_HP+0x114>)
 800988e:	fb24 3902 	smlad	r9, r4, r2, r3
 8009892:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 8009896:	19a2      	adds	r2, r4, r6
 8009898:	1a12      	subs	r2, r2, r0
 800989a:	17d1      	asrs	r1, r2, #31
 800989c:	fba2 230a 	umull	r2, r3, r2, sl
 80098a0:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 80098a4:	fb0a 3301 	mla	r3, sl, r1, r3
 80098a8:	f143 0100 	adc.w	r1, r3, #0
 80098ac:	e9cd 0100 	strd	r0, r1, [sp]
 80098b0:	038a      	lsls	r2, r1, #14
 80098b2:	9b01      	ldr	r3, [sp, #4]
 80098b4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80098b8:	2100      	movs	r1, #0
 80098ba:	fbc7 0102 	smlal	r0, r1, r7, r2
 80098be:	108a      	asrs	r2, r1, #2
 80098c0:	005e      	lsls	r6, r3, #1
 80098c2:	f302 020f 	ssat	r2, #16, r2
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	f82e 2b02 	strh.w	r2, [lr], #2
 80098cc:	459e      	cmp	lr, r3
 80098ce:	4620      	mov	r0, r4
 80098d0:	d1a7      	bne.n	8009822 <D32_1CH_HTONS_VOL_HP+0x3a>
 80098d2:	9a05      	ldr	r2, [sp, #20]
 80098d4:	464b      	mov	r3, r9
 80098d6:	e9c2 3802 	strd	r3, r8, [r2, #8]
 80098da:	9b04      	ldr	r3, [sp, #16]
 80098dc:	61d5      	str	r5, [r2, #28]
 80098de:	2000      	movs	r0, #0
 80098e0:	e9c2 6404 	strd	r6, r4, [r2, #16]
 80098e4:	6193      	str	r3, [r2, #24]
 80098e6:	b007      	add	sp, #28
 80098e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098ec:	463c      	mov	r4, r7
 80098ee:	e7f2      	b.n	80098d6 <D32_1CH_HTONS_VOL_HP+0xee>
 80098f0:	00060003 	.word	0x00060003
 80098f4:	000a000c 	.word	0x000a000c
 80098f8:	000c000a 	.word	0x000c000a
 80098fc:	00030006 	.word	0x00030006
 8009900:	20000010 	.word	0x20000010

08009904 <D48_1CH_HTONS_VOL_HP>:
 8009904:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009908:	b087      	sub	sp, #28
 800990a:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 800990c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800990e:	6993      	ldr	r3, [r2, #24]
 8009910:	9702      	str	r7, [sp, #8]
 8009912:	6a17      	ldr	r7, [r2, #32]
 8009914:	9304      	str	r3, [sp, #16]
 8009916:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 800991a:	69d6      	ldr	r6, [r2, #28]
 800991c:	9705      	str	r7, [sp, #20]
 800991e:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 8009922:	2d00      	cmp	r5, #0
 8009924:	f000 8093 	beq.w	8009a4e <D48_1CH_HTONS_VOL_HP+0x14a>
 8009928:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800992c:	46ba      	mov	sl, r7
 800992e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8009932:	3902      	subs	r1, #2
 8009934:	4f47      	ldr	r7, [pc, #284]	@ (8009a54 <D48_1CH_HTONS_VOL_HP+0x150>)
 8009936:	9503      	str	r5, [sp, #12]
 8009938:	9101      	str	r1, [sp, #4]
 800993a:	469e      	mov	lr, r3
 800993c:	9205      	str	r2, [sp, #20]
 800993e:	e9d0 3500 	ldrd	r3, r5, [r0]
 8009942:	3006      	adds	r0, #6
 8009944:	ba5b      	rev16	r3, r3
 8009946:	ba6d      	rev16	r5, r5
 8009948:	b2da      	uxtb	r2, r3
 800994a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800994e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8009952:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 8009956:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800995a:	0e1b      	lsrs	r3, r3, #24
 800995c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8009960:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8009964:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 8009968:	fa5f fb85 	uxtb.w	fp, r5
 800996c:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 8009970:	f3c5 2607 	ubfx	r6, r5, #8, #8
 8009974:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009978:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 800997c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8009980:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8009984:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009988:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800998c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009990:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009994:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 8009998:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800999c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80099a0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80099a4:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 80099a8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80099ac:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 80099b0:	4b29      	ldr	r3, [pc, #164]	@ (8009a58 <D48_1CH_HTONS_VOL_HP+0x154>)
 80099b2:	fb22 c103 	smlad	r1, r2, r3, ip
 80099b6:	4b29      	ldr	r3, [pc, #164]	@ (8009a5c <D48_1CH_HTONS_VOL_HP+0x158>)
 80099b8:	fb28 1103 	smlad	r1, r8, r3, r1
 80099bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80099c0:	fb25 1103 	smlad	r1, r5, r3, r1
 80099c4:	4b26      	ldr	r3, [pc, #152]	@ (8009a60 <D48_1CH_HTONS_VOL_HP+0x15c>)
 80099c6:	fb22 ec03 	smlad	ip, r2, r3, lr
 80099ca:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 80099ce:	fb28 cc03 	smlad	ip, r8, r3, ip
 80099d2:	4b24      	ldr	r3, [pc, #144]	@ (8009a64 <D48_1CH_HTONS_VOL_HP+0x160>)
 80099d4:	fb25 cc03 	smlad	ip, r5, r3, ip
 80099d8:	f04f 0e01 	mov.w	lr, #1
 80099dc:	fb22 f20e 	smuad	r2, r2, lr
 80099e0:	4b21      	ldr	r3, [pc, #132]	@ (8009a68 <D48_1CH_HTONS_VOL_HP+0x164>)
 80099e2:	fb28 2803 	smlad	r8, r8, r3, r2
 80099e6:	4b21      	ldr	r3, [pc, #132]	@ (8009a6c <D48_1CH_HTONS_VOL_HP+0x168>)
 80099e8:	fb25 8e03 	smlad	lr, r5, r3, r8
 80099ec:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 80099f0:	190a      	adds	r2, r1, r4
 80099f2:	eba2 0209 	sub.w	r2, r2, r9
 80099f6:	17d5      	asrs	r5, r2, #31
 80099f8:	fba2 230a 	umull	r2, r3, r2, sl
 80099fc:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 8009a00:	fb0a 3305 	mla	r3, sl, r5, r3
 8009a04:	f143 0500 	adc.w	r5, r3, #0
 8009a08:	9b02      	ldr	r3, [sp, #8]
 8009a0a:	032a      	lsls	r2, r5, #12
 8009a0c:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8009a10:	f04f 0900 	mov.w	r9, #0
 8009a14:	fbc3 8902 	smlal	r8, r9, r3, r2
 8009a18:	9a01      	ldr	r2, [sp, #4]
 8009a1a:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8009a1e:	f303 030f 	ssat	r3, #16, r3
 8009a22:	f822 3f02 	strh.w	r3, [r2, #2]!
 8009a26:	9b03      	ldr	r3, [sp, #12]
 8009a28:	9201      	str	r2, [sp, #4]
 8009a2a:	4283      	cmp	r3, r0
 8009a2c:	ea4f 0445 	mov.w	r4, r5, lsl #1
 8009a30:	4689      	mov	r9, r1
 8009a32:	d184      	bne.n	800993e <D48_1CH_HTONS_VOL_HP+0x3a>
 8009a34:	9a05      	ldr	r2, [sp, #20]
 8009a36:	4673      	mov	r3, lr
 8009a38:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 8009a3c:	9b04      	ldr	r3, [sp, #16]
 8009a3e:	61d6      	str	r6, [r2, #28]
 8009a40:	2000      	movs	r0, #0
 8009a42:	e9c2 4104 	strd	r4, r1, [r2, #16]
 8009a46:	6193      	str	r3, [r2, #24]
 8009a48:	b007      	add	sp, #28
 8009a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a4e:	4649      	mov	r1, r9
 8009a50:	e7f2      	b.n	8009a38 <D48_1CH_HTONS_VOL_HP+0x134>
 8009a52:	bf00      	nop
 8009a54:	20000010 	.word	0x20000010
 8009a58:	000f000a 	.word	0x000f000a
 8009a5c:	00060003 	.word	0x00060003
 8009a60:	00150019 	.word	0x00150019
 8009a64:	00190015 	.word	0x00190015
 8009a68:	00030006 	.word	0x00030006
 8009a6c:	000a000f 	.word	0x000a000f

08009a70 <D64_1CH_HTONS_VOL_HP>:
 8009a70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a74:	b087      	sub	sp, #28
 8009a76:	6913      	ldr	r3, [r2, #16]
 8009a78:	9300      	str	r3, [sp, #0]
 8009a7a:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 8009a7e:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 8009a80:	9601      	str	r6, [sp, #4]
 8009a82:	4681      	mov	r9, r0
 8009a84:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8009a86:	6a16      	ldr	r6, [r2, #32]
 8009a88:	9304      	str	r3, [sp, #16]
 8009a8a:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 8009a8e:	69d3      	ldr	r3, [r2, #28]
 8009a90:	9602      	str	r6, [sp, #8]
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f000 809d 	beq.w	8009bd2 <D64_1CH_HTONS_VOL_HP+0x162>
 8009a98:	468e      	mov	lr, r1
 8009a9a:	f8df c170 	ldr.w	ip, [pc, #368]	@ 8009c0c <D64_1CH_HTONS_VOL_HP+0x19c>
 8009a9e:	9205      	str	r2, [sp, #20]
 8009aa0:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 8009aa4:	9103      	str	r1, [sp, #12]
 8009aa6:	4622      	mov	r2, r4
 8009aa8:	4619      	mov	r1, r3
 8009aaa:	f859 3b08 	ldr.w	r3, [r9], #8
 8009aae:	f859 6c04 	ldr.w	r6, [r9, #-4]
 8009ab2:	ba5b      	rev16	r3, r3
 8009ab4:	ba76      	rev16	r6, r6
 8009ab6:	b2dc      	uxtb	r4, r3
 8009ab8:	f3c3 2007 	ubfx	r0, r3, #8, #8
 8009abc:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 8009ac0:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 8009ac4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009ac8:	0e1b      	lsrs	r3, r3, #24
 8009aca:	eb01 0b07 	add.w	fp, r1, r7
 8009ace:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 8009ad2:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 8009ad6:	b2f1      	uxtb	r1, r6
 8009ad8:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 8009adc:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8009ae0:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 8009ae4:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8009ae8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 8009aec:	f3c6 4107 	ubfx	r1, r6, #16, #8
 8009af0:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 8009af4:	0e36      	lsrs	r6, r6, #24
 8009af6:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 8009afa:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 8009afe:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8009b02:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009b06:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8009b0a:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8009b0e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009b12:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009b16:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009b1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009b1e:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009b22:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8009b26:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009b2a:	f3c6 0409 	ubfx	r4, r6, #0, #10
 8009b2e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009b32:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 8009b36:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8009b3a:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 8009b3e:	4b2b      	ldr	r3, [pc, #172]	@ (8009bec <D64_1CH_HTONS_VOL_HP+0x17c>)
 8009b40:	0ab1      	lsrs	r1, r6, #10
 8009b42:	fb2b 8803 	smlad	r8, fp, r3, r8
 8009b46:	4b2a      	ldr	r3, [pc, #168]	@ (8009bf0 <D64_1CH_HTONS_VOL_HP+0x180>)
 8009b48:	fb2a 8803 	smlad	r8, sl, r3, r8
 8009b4c:	4b29      	ldr	r3, [pc, #164]	@ (8009bf4 <D64_1CH_HTONS_VOL_HP+0x184>)
 8009b4e:	fb27 8803 	smlad	r8, r7, r3, r8
 8009b52:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8009b56:	fb20 8604 	smlad	r6, r0, r4, r8
 8009b5a:	4b27      	ldr	r3, [pc, #156]	@ (8009bf8 <D64_1CH_HTONS_VOL_HP+0x188>)
 8009b5c:	fb2b 5803 	smlad	r8, fp, r3, r5
 8009b60:	fb20 8813 	smladx	r8, r0, r3, r8
 8009b64:	4b25      	ldr	r3, [pc, #148]	@ (8009bfc <D64_1CH_HTONS_VOL_HP+0x18c>)
 8009b66:	fb2a 8803 	smlad	r8, sl, r3, r8
 8009b6a:	fb27 8813 	smladx	r8, r7, r3, r8
 8009b6e:	2401      	movs	r4, #1
 8009b70:	fb2b fb04 	smuad	fp, fp, r4
 8009b74:	4b22      	ldr	r3, [pc, #136]	@ (8009c00 <D64_1CH_HTONS_VOL_HP+0x190>)
 8009b76:	fb2a ba03 	smlad	sl, sl, r3, fp
 8009b7a:	4b22      	ldr	r3, [pc, #136]	@ (8009c04 <D64_1CH_HTONS_VOL_HP+0x194>)
 8009b7c:	fb27 a703 	smlad	r7, r7, r3, sl
 8009b80:	4b21      	ldr	r3, [pc, #132]	@ (8009c08 <D64_1CH_HTONS_VOL_HP+0x198>)
 8009b82:	fb20 7503 	smlad	r5, r0, r3, r7
 8009b86:	9b00      	ldr	r3, [sp, #0]
 8009b88:	9802      	ldr	r0, [sp, #8]
 8009b8a:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 8009b8e:	4423      	add	r3, r4
 8009b90:	1a9a      	subs	r2, r3, r2
 8009b92:	17d7      	asrs	r7, r2, #31
 8009b94:	fba2 2300 	umull	r2, r3, r2, r0
 8009b98:	fb00 3307 	mla	r3, r0, r7, r3
 8009b9c:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 8009ba0:	f143 0b00 	adc.w	fp, r3, #0
 8009ba4:	9b01      	ldr	r3, [sp, #4]
 8009ba6:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 8009baa:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8009bae:	2700      	movs	r7, #0
 8009bb0:	fbc3 6702 	smlal	r6, r7, r3, r2
 8009bb4:	ea4f 034b 	mov.w	r3, fp, lsl #1
 8009bb8:	10ba      	asrs	r2, r7, #2
 8009bba:	9300      	str	r3, [sp, #0]
 8009bbc:	f302 020f 	ssat	r2, #16, r2
 8009bc0:	9b03      	ldr	r3, [sp, #12]
 8009bc2:	f82e 2b02 	strh.w	r2, [lr], #2
 8009bc6:	459e      	cmp	lr, r3
 8009bc8:	4622      	mov	r2, r4
 8009bca:	f47f af6e 	bne.w	8009aaa <D64_1CH_HTONS_VOL_HP+0x3a>
 8009bce:	9a05      	ldr	r2, [sp, #20]
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	61d3      	str	r3, [r2, #28]
 8009bd4:	9b00      	ldr	r3, [sp, #0]
 8009bd6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 8009bda:	9b04      	ldr	r3, [sp, #16]
 8009bdc:	6193      	str	r3, [r2, #24]
 8009bde:	2000      	movs	r0, #0
 8009be0:	e9c2 5802 	strd	r5, r8, [r2, #8]
 8009be4:	b007      	add	sp, #28
 8009be6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bea:	bf00      	nop
 8009bec:	001c0015 	.word	0x001c0015
 8009bf0:	000f000a 	.word	0x000f000a
 8009bf4:	00060003 	.word	0x00060003
 8009bf8:	0024002a 	.word	0x0024002a
 8009bfc:	002e0030 	.word	0x002e0030
 8009c00:	00030006 	.word	0x00030006
 8009c04:	000a000f 	.word	0x000a000f
 8009c08:	0015001c 	.word	0x0015001c
 8009c0c:	20000010 	.word	0x20000010

08009c10 <D80_1CH_HTONS_VOL_HP>:
 8009c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c14:	4615      	mov	r5, r2
 8009c16:	b089      	sub	sp, #36	@ 0x24
 8009c18:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 8009c1c:	692b      	ldr	r3, [r5, #16]
 8009c1e:	9301      	str	r3, [sp, #4]
 8009c20:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 8009c24:	9400      	str	r4, [sp, #0]
 8009c26:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8009c28:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 8009c2a:	9403      	str	r4, [sp, #12]
 8009c2c:	6a2c      	ldr	r4, [r5, #32]
 8009c2e:	9306      	str	r3, [sp, #24]
 8009c30:	9404      	str	r4, [sp, #16]
 8009c32:	69eb      	ldr	r3, [r5, #28]
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	f000 80d3 	beq.w	8009de0 <D80_1CH_HTONS_VOL_HP+0x1d0>
 8009c3a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8009c3e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8009c42:	9205      	str	r2, [sp, #20]
 8009c44:	4c67      	ldr	r4, [pc, #412]	@ (8009de4 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8009c46:	9507      	str	r5, [sp, #28]
 8009c48:	1e8a      	subs	r2, r1, #2
 8009c4a:	9202      	str	r2, [sp, #8]
 8009c4c:	469b      	mov	fp, r3
 8009c4e:	6807      	ldr	r7, [r0, #0]
 8009c50:	6842      	ldr	r2, [r0, #4]
 8009c52:	6883      	ldr	r3, [r0, #8]
 8009c54:	300a      	adds	r0, #10
 8009c56:	ba7f      	rev16	r7, r7
 8009c58:	ba52      	rev16	r2, r2
 8009c5a:	ba5b      	rev16	r3, r3
 8009c5c:	b2fd      	uxtb	r5, r7
 8009c5e:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8009c62:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 8009c66:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 8009c6a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 8009c6e:	44f3      	add	fp, lr
 8009c70:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8009c74:	0e3f      	lsrs	r7, r7, #24
 8009c76:	fa5f fe82 	uxtb.w	lr, r2
 8009c7a:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 8009c7e:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 8009c82:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8009c86:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 8009c8a:	f3c2 2507 	ubfx	r5, r2, #8, #8
 8009c8e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8009c92:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 8009c96:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 8009c9a:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 8009c9e:	0e12      	lsrs	r2, r2, #24
 8009ca0:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8009ca4:	fa5f fe83 	uxtb.w	lr, r3
 8009ca8:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 8009cac:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009cb0:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 8009cb4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8009cb8:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 8009cbc:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8009cc0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8009cc4:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 8009cc8:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 8009ccc:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009cd0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009cd4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8009cd8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009cdc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009ce0:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 8009ce4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009ce8:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 8009cec:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009cf0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009cf4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009cf8:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8009cfc:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 8009d00:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 8009d04:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 8009d08:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 8009d0c:	4b36      	ldr	r3, [pc, #216]	@ (8009de8 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8009d0e:	9a00      	ldr	r2, [sp, #0]
 8009d10:	fb21 2303 	smlad	r3, r1, r3, r2
 8009d14:	4a35      	ldr	r2, [pc, #212]	@ (8009dec <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8009d16:	fb27 3302 	smlad	r3, r7, r2, r3
 8009d1a:	4a35      	ldr	r2, [pc, #212]	@ (8009df0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8009d1c:	fb25 3302 	smlad	r3, r5, r2, r3
 8009d20:	4a34      	ldr	r2, [pc, #208]	@ (8009df4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8009d22:	fb28 3302 	smlad	r3, r8, r2, r3
 8009d26:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8009d2a:	fb2e 3302 	smlad	r3, lr, r2, r3
 8009d2e:	4a32      	ldr	r2, [pc, #200]	@ (8009df8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8009d30:	fb21 cc02 	smlad	ip, r1, r2, ip
 8009d34:	4a31      	ldr	r2, [pc, #196]	@ (8009dfc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8009d36:	fb27 cc02 	smlad	ip, r7, r2, ip
 8009d3a:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 8009d3e:	fb25 c909 	smlad	r9, r5, r9, ip
 8009d42:	4a2f      	ldr	r2, [pc, #188]	@ (8009e00 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8009d44:	fb28 9902 	smlad	r9, r8, r2, r9
 8009d48:	4a2e      	ldr	r2, [pc, #184]	@ (8009e04 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8009d4a:	fb2e 9202 	smlad	r2, lr, r2, r9
 8009d4e:	f04f 0a01 	mov.w	sl, #1
 8009d52:	9200      	str	r2, [sp, #0]
 8009d54:	fb21 fa0a 	smuad	sl, r1, sl
 8009d58:	4a2b      	ldr	r2, [pc, #172]	@ (8009e08 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8009d5a:	fb27 a702 	smlad	r7, r7, r2, sl
 8009d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8009e0c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8009d60:	fb25 7702 	smlad	r7, r5, r2, r7
 8009d64:	4a2a      	ldr	r2, [pc, #168]	@ (8009e10 <D80_1CH_HTONS_VOL_HP+0x200>)
 8009d66:	fb28 7202 	smlad	r2, r8, r2, r7
 8009d6a:	4d2a      	ldr	r5, [pc, #168]	@ (8009e14 <D80_1CH_HTONS_VOL_HP+0x204>)
 8009d6c:	fb2e 2c05 	smlad	ip, lr, r5, r2
 8009d70:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 8009d74:	9b01      	ldr	r3, [sp, #4]
 8009d76:	9903      	ldr	r1, [sp, #12]
 8009d78:	4413      	add	r3, r2
 8009d7a:	1b9e      	subs	r6, r3, r6
 8009d7c:	9b04      	ldr	r3, [sp, #16]
 8009d7e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8009d82:	fba6 5603 	umull	r5, r6, r6, r3
 8009d86:	fb03 6309 	mla	r3, r3, r9, r6
 8009d8a:	462e      	mov	r6, r5
 8009d8c:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8009d90:	f143 0700 	adc.w	r7, r3, #0
 8009d94:	02bb      	lsls	r3, r7, #10
 8009d96:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8009d9a:	f04f 0900 	mov.w	r9, #0
 8009d9e:	fbc1 8903 	smlal	r8, r9, r1, r3
 8009da2:	9902      	ldr	r1, [sp, #8]
 8009da4:	007b      	lsls	r3, r7, #1
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8009dac:	f303 030f 	ssat	r3, #16, r3
 8009db0:	f821 3f02 	strh.w	r3, [r1, #2]!
 8009db4:	9b05      	ldr	r3, [sp, #20]
 8009db6:	9102      	str	r1, [sp, #8]
 8009db8:	4283      	cmp	r3, r0
 8009dba:	4616      	mov	r6, r2
 8009dbc:	f47f af47 	bne.w	8009c4e <D80_1CH_HTONS_VOL_HP+0x3e>
 8009dc0:	9d07      	ldr	r5, [sp, #28]
 8009dc2:	465b      	mov	r3, fp
 8009dc4:	61eb      	str	r3, [r5, #28]
 8009dc6:	9b01      	ldr	r3, [sp, #4]
 8009dc8:	9900      	ldr	r1, [sp, #0]
 8009dca:	f8c5 c008 	str.w	ip, [r5, #8]
 8009dce:	e9c5 3204 	strd	r3, r2, [r5, #16]
 8009dd2:	9b06      	ldr	r3, [sp, #24]
 8009dd4:	60e9      	str	r1, [r5, #12]
 8009dd6:	2000      	movs	r0, #0
 8009dd8:	61ab      	str	r3, [r5, #24]
 8009dda:	b009      	add	sp, #36	@ 0x24
 8009ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009de0:	4632      	mov	r2, r6
 8009de2:	e7ef      	b.n	8009dc4 <D80_1CH_HTONS_VOL_HP+0x1b4>
 8009de4:	20000010 	.word	0x20000010
 8009de8:	002d0024 	.word	0x002d0024
 8009dec:	001c0015 	.word	0x001c0015
 8009df0:	000f000a 	.word	0x000f000a
 8009df4:	00060003 	.word	0x00060003
 8009df8:	0037003f 	.word	0x0037003f
 8009dfc:	00450049 	.word	0x00450049
 8009e00:	00490045 	.word	0x00490045
 8009e04:	003f0037 	.word	0x003f0037
 8009e08:	00030006 	.word	0x00030006
 8009e0c:	000a000f 	.word	0x000a000f
 8009e10:	0015001c 	.word	0x0015001c
 8009e14:	0024002d 	.word	0x0024002d

08009e18 <D128_1CH_HTONS_VOL_HP>:
 8009e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1c:	b093      	sub	sp, #76	@ 0x4c
 8009e1e:	6914      	ldr	r4, [r2, #16]
 8009e20:	9404      	str	r4, [sp, #16]
 8009e22:	6954      	ldr	r4, [r2, #20]
 8009e24:	9406      	str	r4, [sp, #24]
 8009e26:	6994      	ldr	r4, [r2, #24]
 8009e28:	9410      	str	r4, [sp, #64]	@ 0x40
 8009e2a:	6894      	ldr	r4, [r2, #8]
 8009e2c:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8009e2e:	9403      	str	r4, [sp, #12]
 8009e30:	68d4      	ldr	r4, [r2, #12]
 8009e32:	9211      	str	r2, [sp, #68]	@ 0x44
 8009e34:	69d6      	ldr	r6, [r2, #28]
 8009e36:	9402      	str	r4, [sp, #8]
 8009e38:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8009e3a:	6a12      	ldr	r2, [r2, #32]
 8009e3c:	940d      	str	r4, [sp, #52]	@ 0x34
 8009e3e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	f000 814a 	beq.w	800a0da <D128_1CH_HTONS_VOL_HP+0x2c2>
 8009e46:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8009e4a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009e4c:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 800a118 <D128_1CH_HTONS_VOL_HP+0x300>
 8009e50:	9107      	str	r1, [sp, #28]
 8009e52:	f100 0310 	add.w	r3, r0, #16
 8009e56:	469b      	mov	fp, r3
 8009e58:	9605      	str	r6, [sp, #20]
 8009e5a:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 8009e5e:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 8009e62:	ba49      	rev16	r1, r1
 8009e64:	ba52      	rev16	r2, r2
 8009e66:	ba5b      	rev16	r3, r3
 8009e68:	fa90 fa90 	rev16.w	sl, r0
 8009e6c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 8009e70:	b2cc      	uxtb	r4, r1
 8009e72:	9e05      	ldr	r6, [sp, #20]
 8009e74:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8009e78:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 8009e7c:	f3c1 4007 	ubfx	r0, r1, #16, #8
 8009e80:	0e09      	lsrs	r1, r1, #24
 8009e82:	4426      	add	r6, r4
 8009e84:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 8009e88:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 8009e8c:	b2d0      	uxtb	r0, r2
 8009e8e:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 8009e92:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009e96:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 8009e9a:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 8009e9e:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 8009ea2:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8009ea6:	0e12      	lsrs	r2, r2, #24
 8009ea8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8009eac:	9401      	str	r4, [sp, #4]
 8009eae:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 8009eb2:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 8009eb6:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 8009eba:	9705      	str	r7, [sp, #20]
 8009ebc:	b2da      	uxtb	r2, r3
 8009ebe:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 8009ec2:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 8009ec6:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 8009eca:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009ece:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 8009ed2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009ed6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 8009eda:	0e1b      	lsrs	r3, r3, #24
 8009edc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 8009ee0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 8009ee4:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 8009ee8:	fa5f f38a 	uxtb.w	r3, sl
 8009eec:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009ef0:	960a      	str	r6, [sp, #40]	@ 0x28
 8009ef2:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009ef6:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 8009efa:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009efe:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009f02:	950b      	str	r5, [sp, #44]	@ 0x2c
 8009f04:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009f08:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009f0c:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009f10:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 8009f14:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 8009f18:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009f1c:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8009f20:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009f24:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 8009f28:	9308      	str	r3, [sp, #32]
 8009f2a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009f2e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009f32:	920c      	str	r2, [sp, #48]	@ 0x30
 8009f34:	9b01      	ldr	r3, [sp, #4]
 8009f36:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009f38:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009f3c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009f40:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 8009f44:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009f48:	9b05      	ldr	r3, [sp, #20]
 8009f4a:	f8cd 9014 	str.w	r9, [sp, #20]
 8009f4e:	4691      	mov	r9, r2
 8009f50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f52:	f8cd a004 	str.w	sl, [sp, #4]
 8009f56:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 8009f5a:	9a01      	ldr	r2, [sp, #4]
 8009f5c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009f60:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 8009f64:	9b08      	ldr	r3, [sp, #32]
 8009f66:	9a05      	ldr	r2, [sp, #20]
 8009f68:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009f6c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8009f70:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009f72:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009f76:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8009f7a:	9201      	str	r2, [sp, #4]
 8009f7c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f7e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009f82:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009f86:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009f8a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009f8e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009f92:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009f96:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009f9a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009f9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009fa2:	0a92      	lsrs	r2, r2, #10
 8009fa4:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 8009fa8:	9205      	str	r2, [sp, #20]
 8009faa:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8009fae:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009fb2:	4d4b      	ldr	r5, [pc, #300]	@ (800a0e0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8009fb4:	9a02      	ldr	r2, [sp, #8]
 8009fb6:	fb29 2505 	smlad	r5, r9, r5, r2
 8009fba:	4a4a      	ldr	r2, [pc, #296]	@ (800a0e4 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8009fbc:	fb2a 5502 	smlad	r5, sl, r2, r5
 8009fc0:	4a49      	ldr	r2, [pc, #292]	@ (800a0e8 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8009fc2:	fb21 5502 	smlad	r5, r1, r2, r5
 8009fc6:	4a49      	ldr	r2, [pc, #292]	@ (800a0ec <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8009fc8:	fb24 5502 	smlad	r5, r4, r2, r5
 8009fcc:	4a48      	ldr	r2, [pc, #288]	@ (800a0f0 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8009fce:	9e01      	ldr	r6, [sp, #4]
 8009fd0:	fb26 5502 	smlad	r5, r6, r2, r5
 8009fd4:	4a47      	ldr	r2, [pc, #284]	@ (800a0f4 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8009fd6:	fb20 5502 	smlad	r5, r0, r2, r5
 8009fda:	4a47      	ldr	r2, [pc, #284]	@ (800a0f8 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8009fdc:	fb23 5502 	smlad	r5, r3, r2, r5
 8009fe0:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 8009fe4:	fb27 520c 	smlad	r2, r7, ip, r5
 8009fe8:	4616      	mov	r6, r2
 8009fea:	9d03      	ldr	r5, [sp, #12]
 8009fec:	4a43      	ldr	r2, [pc, #268]	@ (800a0fc <D128_1CH_HTONS_VOL_HP+0x2e4>)
 8009fee:	fb29 5c02 	smlad	ip, r9, r2, r5
 8009ff2:	4a43      	ldr	r2, [pc, #268]	@ (800a100 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 8009ff4:	fb2a ce02 	smlad	lr, sl, r2, ip
 8009ff8:	f8df c120 	ldr.w	ip, [pc, #288]	@ 800a11c <D128_1CH_HTONS_VOL_HP+0x304>
 8009ffc:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800a000:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 800a120 <D128_1CH_HTONS_VOL_HP+0x308>
 800a004:	fb24 cc0e 	smlad	ip, r4, lr, ip
 800a008:	f8df e118 	ldr.w	lr, [pc, #280]	@ 800a124 <D128_1CH_HTONS_VOL_HP+0x30c>
 800a00c:	9d01      	ldr	r5, [sp, #4]
 800a00e:	fb25 ce0e 	smlad	lr, r5, lr, ip
 800a012:	f8df c114 	ldr.w	ip, [pc, #276]	@ 800a128 <D128_1CH_HTONS_VOL_HP+0x310>
 800a016:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800a01a:	f8df c110 	ldr.w	ip, [pc, #272]	@ 800a12c <D128_1CH_HTONS_VOL_HP+0x314>
 800a01e:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800a022:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 800a130 <D128_1CH_HTONS_VOL_HP+0x318>
 800a026:	fb27 c20e 	smlad	r2, r7, lr, ip
 800a02a:	f04f 0c01 	mov.w	ip, #1
 800a02e:	9202      	str	r2, [sp, #8]
 800a030:	fb29 fc0c 	smuad	ip, r9, ip
 800a034:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 800a134 <D128_1CH_HTONS_VOL_HP+0x31c>
 800a038:	fb2a ca09 	smlad	sl, sl, r9, ip
 800a03c:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 800a138 <D128_1CH_HTONS_VOL_HP+0x320>
 800a040:	fb21 a909 	smlad	r9, r1, r9, sl
 800a044:	492f      	ldr	r1, [pc, #188]	@ (800a104 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800a046:	fb24 9901 	smlad	r9, r4, r1, r9
 800a04a:	492f      	ldr	r1, [pc, #188]	@ (800a108 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800a04c:	fb25 9901 	smlad	r9, r5, r1, r9
 800a050:	492e      	ldr	r1, [pc, #184]	@ (800a10c <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800a052:	fb20 9901 	smlad	r9, r0, r1, r9
 800a056:	492e      	ldr	r1, [pc, #184]	@ (800a110 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800a058:	fb23 9301 	smlad	r3, r3, r1, r9
 800a05c:	482d      	ldr	r0, [pc, #180]	@ (800a114 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800a05e:	fb27 3300 	smlad	r3, r7, r0, r3
 800a062:	9303      	str	r3, [sp, #12]
 800a064:	9b04      	ldr	r3, [sp, #16]
 800a066:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800a068:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 800a06c:	442b      	add	r3, r5
 800a06e:	461a      	mov	r2, r3
 800a070:	9b06      	ldr	r3, [sp, #24]
 800a072:	9506      	str	r5, [sp, #24]
 800a074:	1ad2      	subs	r2, r2, r3
 800a076:	17d1      	asrs	r1, r2, #31
 800a078:	fba2 2304 	umull	r2, r3, r2, r4
 800a07c:	fb04 3301 	mla	r3, r4, r1, r3
 800a080:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 800a084:	f143 0a00 	adc.w	sl, r3, #0
 800a088:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a08a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800a08e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a092:	2100      	movs	r1, #0
 800a094:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a098:	9b07      	ldr	r3, [sp, #28]
 800a09a:	108a      	asrs	r2, r1, #2
 800a09c:	f302 020f 	ssat	r2, #16, r2
 800a0a0:	f823 2b02 	strh.w	r2, [r3], #2
 800a0a4:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800a0a8:	9204      	str	r2, [sp, #16]
 800a0aa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a0ac:	9307      	str	r3, [sp, #28]
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	f10b 0b10 	add.w	fp, fp, #16
 800a0b4:	f47f aed1 	bne.w	8009e5a <D128_1CH_HTONS_VOL_HP+0x42>
 800a0b8:	9e05      	ldr	r6, [sp, #20]
 800a0ba:	4629      	mov	r1, r5
 800a0bc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a0be:	9803      	ldr	r0, [sp, #12]
 800a0c0:	6098      	str	r0, [r3, #8]
 800a0c2:	9802      	ldr	r0, [sp, #8]
 800a0c4:	60d8      	str	r0, [r3, #12]
 800a0c6:	9804      	ldr	r0, [sp, #16]
 800a0c8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a0ca:	61de      	str	r6, [r3, #28]
 800a0cc:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a0d0:	2000      	movs	r0, #0
 800a0d2:	619a      	str	r2, [r3, #24]
 800a0d4:	b013      	add	sp, #76	@ 0x4c
 800a0d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0da:	9906      	ldr	r1, [sp, #24]
 800a0dc:	e7ee      	b.n	800a0bc <D128_1CH_HTONS_VOL_HP+0x2a4>
 800a0de:	bf00      	nop
 800a0e0:	00780069 	.word	0x00780069
 800a0e4:	005b004e 	.word	0x005b004e
 800a0e8:	00420037 	.word	0x00420037
 800a0ec:	002d0024 	.word	0x002d0024
 800a0f0:	001c0015 	.word	0x001c0015
 800a0f4:	000f000a 	.word	0x000f000a
 800a0f8:	00060003 	.word	0x00060003
 800a0fc:	00880096 	.word	0x00880096
 800a100:	00a200ac 	.word	0x00a200ac
 800a104:	0015001c 	.word	0x0015001c
 800a108:	0024002d 	.word	0x0024002d
 800a10c:	00370042 	.word	0x00370042
 800a110:	004e005b 	.word	0x004e005b
 800a114:	00690078 	.word	0x00690078
 800a118:	20000010 	.word	0x20000010
 800a11c:	00b400ba 	.word	0x00b400ba
 800a120:	00be00c0 	.word	0x00be00c0
 800a124:	00c000be 	.word	0x00c000be
 800a128:	00ba00b4 	.word	0x00ba00b4
 800a12c:	00ac00a2 	.word	0x00ac00a2
 800a130:	00960088 	.word	0x00960088
 800a134:	00030006 	.word	0x00030006
 800a138:	000a000f 	.word	0x000a000f

0800a13c <PDM_Filter_Init>:
 800a13c:	4a59      	ldr	r2, [pc, #356]	@ (800a2a4 <PDM_Filter_Init+0x168>)
 800a13e:	495a      	ldr	r1, [pc, #360]	@ (800a2a8 <PDM_Filter_Init+0x16c>)
 800a140:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a142:	6813      	ldr	r3, [r2, #0]
 800a144:	f023 0301 	bic.w	r3, r3, #1
 800a148:	6013      	str	r3, [r2, #0]
 800a14a:	680b      	ldr	r3, [r1, #0]
 800a14c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800a150:	4013      	ands	r3, r2
 800a152:	f24c 2540 	movw	r5, #49728	@ 0xc240
 800a156:	42ab      	cmp	r3, r5
 800a158:	4604      	mov	r4, r0
 800a15a:	d044      	beq.n	800a1e6 <PDM_Filter_Init+0xaa>
 800a15c:	680b      	ldr	r3, [r1, #0]
 800a15e:	f24c 2170 	movw	r1, #49776	@ 0xc270
 800a162:	401a      	ands	r2, r3
 800a164:	428a      	cmp	r2, r1
 800a166:	d03e      	beq.n	800a1e6 <PDM_Filter_Init+0xaa>
 800a168:	4b50      	ldr	r3, [pc, #320]	@ (800a2ac <PDM_Filter_Init+0x170>)
 800a16a:	2201      	movs	r2, #1
 800a16c:	601a      	str	r2, [r3, #0]
 800a16e:	6819      	ldr	r1, [r3, #0]
 800a170:	2900      	cmp	r1, #0
 800a172:	d1fc      	bne.n	800a16e <PDM_Filter_Init+0x32>
 800a174:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b0 <PDM_Filter_Init+0x174>)
 800a176:	4a4f      	ldr	r2, [pc, #316]	@ (800a2b4 <PDM_Filter_Init+0x178>)
 800a178:	601a      	str	r2, [r3, #0]
 800a17a:	681a      	ldr	r2, [r3, #0]
 800a17c:	4b4e      	ldr	r3, [pc, #312]	@ (800a2b8 <PDM_Filter_Init+0x17c>)
 800a17e:	429a      	cmp	r2, r3
 800a180:	f104 000c 	add.w	r0, r4, #12
 800a184:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800a188:	d047      	beq.n	800a21a <PDM_Filter_Init+0xde>
 800a18a:	f001 fb67 	bl	800b85c <memset>
 800a18e:	2300      	movs	r3, #0
 800a190:	6463      	str	r3, [r4, #68]	@ 0x44
 800a192:	8820      	ldrh	r0, [r4, #0]
 800a194:	8963      	ldrh	r3, [r4, #10]
 800a196:	8922      	ldrh	r2, [r4, #8]
 800a198:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800a19a:	2801      	cmp	r0, #1
 800a19c:	f04f 0300 	mov.w	r3, #0
 800a1a0:	61a3      	str	r3, [r4, #24]
 800a1a2:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800a1a6:	60e3      	str	r3, [r4, #12]
 800a1a8:	6263      	str	r3, [r4, #36]	@ 0x24
 800a1aa:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a1ae:	6423      	str	r3, [r4, #64]	@ 0x40
 800a1b0:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800a1b2:	d93a      	bls.n	800a22a <PDM_Filter_Init+0xee>
 800a1b4:	2003      	movs	r0, #3
 800a1b6:	2302      	movs	r3, #2
 800a1b8:	8862      	ldrh	r2, [r4, #2]
 800a1ba:	2a01      	cmp	r2, #1
 800a1bc:	d932      	bls.n	800a224 <PDM_Filter_Init+0xe8>
 800a1be:	2140      	movs	r1, #64	@ 0x40
 800a1c0:	2300      	movs	r3, #0
 800a1c2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a1c4:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 800a1c8:	6862      	ldr	r2, [r4, #4]
 800a1ca:	bf04      	itt	eq
 800a1cc:	6421      	streq	r1, [r4, #64]	@ 0x40
 800a1ce:	460b      	moveq	r3, r1
 800a1d0:	b11a      	cbz	r2, 800a1da <PDM_Filter_Init+0x9e>
 800a1d2:	f043 0310 	orr.w	r3, r3, #16
 800a1d6:	6423      	str	r3, [r4, #64]	@ 0x40
 800a1d8:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800a1da:	2200      	movs	r2, #0
 800a1dc:	8722      	strh	r2, [r4, #56]	@ 0x38
 800a1de:	b908      	cbnz	r0, 800a1e4 <PDM_Filter_Init+0xa8>
 800a1e0:	3380      	adds	r3, #128	@ 0x80
 800a1e2:	6423      	str	r3, [r4, #64]	@ 0x40
 800a1e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1e6:	4b35      	ldr	r3, [pc, #212]	@ (800a2bc <PDM_Filter_Init+0x180>)
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1bc      	bne.n	800a168 <PDM_Filter_Init+0x2c>
 800a1ee:	4a34      	ldr	r2, [pc, #208]	@ (800a2c0 <PDM_Filter_Init+0x184>)
 800a1f0:	6813      	ldr	r3, [r2, #0]
 800a1f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a1f6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800a1fa:	d006      	beq.n	800a20a <PDM_Filter_Init+0xce>
 800a1fc:	6813      	ldr	r3, [r2, #0]
 800a1fe:	f240 4283 	movw	r2, #1155	@ 0x483
 800a202:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a206:	4293      	cmp	r3, r2
 800a208:	d1ae      	bne.n	800a168 <PDM_Filter_Init+0x2c>
 800a20a:	4b2e      	ldr	r3, [pc, #184]	@ (800a2c4 <PDM_Filter_Init+0x188>)
 800a20c:	2201      	movs	r2, #1
 800a20e:	601a      	str	r2, [r3, #0]
 800a210:	6819      	ldr	r1, [r3, #0]
 800a212:	2900      	cmp	r1, #0
 800a214:	d1fc      	bne.n	800a210 <PDM_Filter_Init+0xd4>
 800a216:	4b2c      	ldr	r3, [pc, #176]	@ (800a2c8 <PDM_Filter_Init+0x18c>)
 800a218:	e7ad      	b.n	800a176 <PDM_Filter_Init+0x3a>
 800a21a:	f001 fb1f 	bl	800b85c <memset>
 800a21e:	4b26      	ldr	r3, [pc, #152]	@ (800a2b8 <PDM_Filter_Init+0x17c>)
 800a220:	6463      	str	r3, [r4, #68]	@ 0x44
 800a222:	e7b6      	b.n	800a192 <PDM_Filter_Init+0x56>
 800a224:	d038      	beq.n	800a298 <PDM_Filter_Init+0x15c>
 800a226:	4618      	mov	r0, r3
 800a228:	e7c9      	b.n	800a1be <PDM_Filter_Init+0x82>
 800a22a:	4d28      	ldr	r5, [pc, #160]	@ (800a2cc <PDM_Filter_Init+0x190>)
 800a22c:	782a      	ldrb	r2, [r5, #0]
 800a22e:	d01a      	beq.n	800a266 <PDM_Filter_Init+0x12a>
 800a230:	2a01      	cmp	r2, #1
 800a232:	d001      	beq.n	800a238 <PDM_Filter_Init+0xfc>
 800a234:	2001      	movs	r0, #1
 800a236:	e7bf      	b.n	800a1b8 <PDM_Filter_Init+0x7c>
 800a238:	4925      	ldr	r1, [pc, #148]	@ (800a2d0 <PDM_Filter_Init+0x194>)
 800a23a:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 800a2d8 <PDM_Filter_Init+0x19c>
 800a23e:	4f25      	ldr	r7, [pc, #148]	@ (800a2d4 <PDM_Filter_Init+0x198>)
 800a240:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800a244:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a248:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a24c:	ea02 0007 	and.w	r0, r2, r7
 800a250:	4303      	orrs	r3, r0
 800a252:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a256:	4413      	add	r3, r2
 800a258:	428e      	cmp	r6, r1
 800a25a:	600b      	str	r3, [r1, #0]
 800a25c:	d1f2      	bne.n	800a244 <PDM_Filter_Init+0x108>
 800a25e:	2300      	movs	r3, #0
 800a260:	702b      	strb	r3, [r5, #0]
 800a262:	2001      	movs	r0, #1
 800a264:	e7a8      	b.n	800a1b8 <PDM_Filter_Init+0x7c>
 800a266:	2a00      	cmp	r2, #0
 800a268:	d1a6      	bne.n	800a1b8 <PDM_Filter_Init+0x7c>
 800a26a:	4919      	ldr	r1, [pc, #100]	@ (800a2d0 <PDM_Filter_Init+0x194>)
 800a26c:	f8df c068 	ldr.w	ip, [pc, #104]	@ 800a2d8 <PDM_Filter_Init+0x19c>
 800a270:	4f18      	ldr	r7, [pc, #96]	@ (800a2d4 <PDM_Filter_Init+0x198>)
 800a272:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800a276:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800a27a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800a27e:	ea02 0007 	and.w	r0, r2, r7
 800a282:	4303      	orrs	r3, r0
 800a284:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800a288:	4413      	add	r3, r2
 800a28a:	428e      	cmp	r6, r1
 800a28c:	600b      	str	r3, [r1, #0]
 800a28e:	d1f2      	bne.n	800a276 <PDM_Filter_Init+0x13a>
 800a290:	2001      	movs	r0, #1
 800a292:	7028      	strb	r0, [r5, #0]
 800a294:	2300      	movs	r3, #0
 800a296:	e78f      	b.n	800a1b8 <PDM_Filter_Init+0x7c>
 800a298:	2220      	movs	r2, #32
 800a29a:	4618      	mov	r0, r3
 800a29c:	6422      	str	r2, [r4, #64]	@ 0x40
 800a29e:	4613      	mov	r3, r2
 800a2a0:	2160      	movs	r1, #96	@ 0x60
 800a2a2:	e78e      	b.n	800a1c2 <PDM_Filter_Init+0x86>
 800a2a4:	e0002000 	.word	0xe0002000
 800a2a8:	e000ed00 	.word	0xe000ed00
 800a2ac:	40023008 	.word	0x40023008
 800a2b0:	40023000 	.word	0x40023000
 800a2b4:	f407a5c2 	.word	0xf407a5c2
 800a2b8:	b5e8b5cd 	.word	0xb5e8b5cd
 800a2bc:	e0042000 	.word	0xe0042000
 800a2c0:	5c001000 	.word	0x5c001000
 800a2c4:	58024c08 	.word	0x58024c08
 800a2c8:	58024c00 	.word	0x58024c00
 800a2cc:	2000a96e 	.word	0x2000a96e
 800a2d0:	2000000c 	.word	0x2000000c
 800a2d4:	000ffc00 	.word	0x000ffc00
 800a2d8:	3ff00000 	.word	0x3ff00000

0800a2dc <PDM_Filter_setConfig>:
 800a2dc:	4b6d      	ldr	r3, [pc, #436]	@ (800a494 <PDM_Filter_setConfig+0x1b8>)
 800a2de:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800a2e0:	429a      	cmp	r2, r3
 800a2e2:	d12f      	bne.n	800a344 <PDM_Filter_setConfig+0x68>
 800a2e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2e6:	880e      	ldrh	r6, [r1, #0]
 800a2e8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800a2ea:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800a2ee:	ed2d 8b02 	vpush	{d8}
 800a2f2:	4604      	mov	r4, r0
 800a2f4:	1e72      	subs	r2, r6, #1
 800a2f6:	460d      	mov	r5, r1
 800a2f8:	2a06      	cmp	r2, #6
 800a2fa:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800a2fe:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 800a302:	6421      	str	r1, [r4, #64]	@ 0x40
 800a304:	b083      	sub	sp, #12
 800a306:	d904      	bls.n	800a312 <PDM_Filter_setConfig+0x36>
 800a308:	42b8      	cmp	r0, r7
 800a30a:	f000 80bb 	beq.w	800a484 <PDM_Filter_setConfig+0x1a8>
 800a30e:	2008      	movs	r0, #8
 800a310:	e01d      	b.n	800a34e <PDM_Filter_setConfig+0x72>
 800a312:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 800a314:	42b2      	cmp	r2, r6
 800a316:	d070      	beq.n	800a3fa <PDM_Filter_setConfig+0x11e>
 800a318:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 800a31c:	f023 0301 	bic.w	r3, r3, #1
 800a320:	4333      	orrs	r3, r6
 800a322:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800a326:	6423      	str	r3, [r4, #64]	@ 0x40
 800a328:	2a70      	cmp	r2, #112	@ 0x70
 800a32a:	f003 030f 	and.w	r3, r3, #15
 800a32e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800a332:	d067      	beq.n	800a404 <PDM_Filter_setConfig+0x128>
 800a334:	2b06      	cmp	r3, #6
 800a336:	d809      	bhi.n	800a34c <PDM_Filter_setConfig+0x70>
 800a338:	e8df f003 	tbb	[pc, r3]
 800a33c:	89868380 	.word	0x89868380
 800a340:	8f8c      	.short	0x8f8c
 800a342:	7d          	.byte	0x7d
 800a343:	00          	.byte	0x00
 800a344:	2004      	movs	r0, #4
 800a346:	4770      	bx	lr
 800a348:	4b53      	ldr	r3, [pc, #332]	@ (800a498 <PDM_Filter_setConfig+0x1bc>)
 800a34a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a34c:	2000      	movs	r0, #0
 800a34e:	f117 0f0c 	cmn.w	r7, #12
 800a352:	da0a      	bge.n	800a36a <PDM_Filter_setConfig+0x8e>
 800a354:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 800a358:	3040      	adds	r0, #64	@ 0x40
 800a35a:	80ab      	strh	r3, [r5, #4]
 800a35c:	886b      	ldrh	r3, [r5, #2]
 800a35e:	8663      	strh	r3, [r4, #50]	@ 0x32
 800a360:	8626      	strh	r6, [r4, #48]	@ 0x30
 800a362:	b003      	add	sp, #12
 800a364:	ecbd 8b02 	vpop	{d8}
 800a368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a36a:	2f33      	cmp	r7, #51	@ 0x33
 800a36c:	dc41      	bgt.n	800a3f2 <PDM_Filter_setConfig+0x116>
 800a36e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a370:	f003 030f 	and.w	r3, r3, #15
 800a374:	3b01      	subs	r3, #1
 800a376:	2b06      	cmp	r3, #6
 800a378:	d858      	bhi.n	800a42c <PDM_Filter_setConfig+0x150>
 800a37a:	4948      	ldr	r1, [pc, #288]	@ (800a49c <PDM_Filter_setConfig+0x1c0>)
 800a37c:	4a48      	ldr	r2, [pc, #288]	@ (800a4a0 <PDM_Filter_setConfig+0x1c4>)
 800a37e:	eddf 0a49 	vldr	s1, [pc, #292]	@ 800a4a4 <PDM_Filter_setConfig+0x1c8>
 800a382:	9001      	str	r0, [sp, #4]
 800a384:	009b      	lsls	r3, r3, #2
 800a386:	4419      	add	r1, r3
 800a388:	edd1 7a00 	vldr	s15, [r1]
 800a38c:	4413      	add	r3, r2
 800a38e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800a392:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800a396:	ed93 8a00 	vldr	s16, [r3]
 800a39a:	f001 fb83 	bl	800baa4 <powf>
 800a39e:	9801      	ldr	r0, [sp, #4]
 800a3a0:	eef0 8a40 	vmov.f32	s17, s0
 800a3a4:	ee07 7a10 	vmov	s14, r7
 800a3a8:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800a4a8 <PDM_Filter_setConfig+0x1cc>
 800a3ac:	9001      	str	r0, [sp, #4]
 800a3ae:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 800a3b2:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800a3b6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800a3ba:	f001 fb73 	bl	800baa4 <powf>
 800a3be:	ee28 8a28 	vmul.f32	s16, s16, s17
 800a3c2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800a3c6:	f001 fc3b 	bl	800bc40 <roundf>
 800a3ca:	9801      	ldr	r0, [sp, #4]
 800a3cc:	886b      	ldrh	r3, [r5, #2]
 800a3ce:	8663      	strh	r3, [r4, #50]	@ 0x32
 800a3d0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800a3d4:	8727      	strh	r7, [r4, #56]	@ 0x38
 800a3d6:	8626      	strh	r6, [r4, #48]	@ 0x30
 800a3d8:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 800a3dc:	2800      	cmp	r0, #0
 800a3de:	d1c0      	bne.n	800a362 <PDM_Filter_setConfig+0x86>
 800a3e0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a3e2:	2000      	movs	r0, #0
 800a3e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a3e8:	6423      	str	r3, [r4, #64]	@ 0x40
 800a3ea:	b003      	add	sp, #12
 800a3ec:	ecbd 8b02 	vpop	{d8}
 800a3f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a3f2:	2333      	movs	r3, #51	@ 0x33
 800a3f4:	3040      	adds	r0, #64	@ 0x40
 800a3f6:	80ab      	strh	r3, [r5, #4]
 800a3f8:	e7b0      	b.n	800a35c <PDM_Filter_setConfig+0x80>
 800a3fa:	42b8      	cmp	r0, r7
 800a3fc:	d1a6      	bne.n	800a34c <PDM_Filter_setConfig+0x70>
 800a3fe:	886b      	ldrh	r3, [r5, #2]
 800a400:	8663      	strh	r3, [r4, #50]	@ 0x32
 800a402:	e7ed      	b.n	800a3e0 <PDM_Filter_setConfig+0x104>
 800a404:	2b06      	cmp	r3, #6
 800a406:	d8a1      	bhi.n	800a34c <PDM_Filter_setConfig+0x70>
 800a408:	a201      	add	r2, pc, #4	@ (adr r2, 800a410 <PDM_Filter_setConfig+0x134>)
 800a40a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a40e:	bf00      	nop
 800a410:	0800a47f 	.word	0x0800a47f
 800a414:	0800a479 	.word	0x0800a479
 800a418:	0800a46d 	.word	0x0800a46d
 800a41c:	0800a467 	.word	0x0800a467
 800a420:	0800a349 	.word	0x0800a349
 800a424:	0800a461 	.word	0x0800a461
 800a428:	0800a473 	.word	0x0800a473
 800a42c:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 800a4ac <PDM_Filter_setConfig+0x1d0>
 800a430:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 800a4b0 <PDM_Filter_setConfig+0x1d4>
 800a434:	e7b6      	b.n	800a3a4 <PDM_Filter_setConfig+0xc8>
 800a436:	4b1f      	ldr	r3, [pc, #124]	@ (800a4b4 <PDM_Filter_setConfig+0x1d8>)
 800a438:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a43a:	e787      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a43c:	4b1e      	ldr	r3, [pc, #120]	@ (800a4b8 <PDM_Filter_setConfig+0x1dc>)
 800a43e:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a440:	e784      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a442:	4b1e      	ldr	r3, [pc, #120]	@ (800a4bc <PDM_Filter_setConfig+0x1e0>)
 800a444:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a446:	e781      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a448:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c0 <PDM_Filter_setConfig+0x1e4>)
 800a44a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a44c:	e77e      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a44e:	4b1d      	ldr	r3, [pc, #116]	@ (800a4c4 <PDM_Filter_setConfig+0x1e8>)
 800a450:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a452:	e77b      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a454:	4b1c      	ldr	r3, [pc, #112]	@ (800a4c8 <PDM_Filter_setConfig+0x1ec>)
 800a456:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a458:	e778      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a45a:	4b1c      	ldr	r3, [pc, #112]	@ (800a4cc <PDM_Filter_setConfig+0x1f0>)
 800a45c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a45e:	e775      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a460:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d0 <PDM_Filter_setConfig+0x1f4>)
 800a462:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a464:	e772      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a466:	4b1b      	ldr	r3, [pc, #108]	@ (800a4d4 <PDM_Filter_setConfig+0x1f8>)
 800a468:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a46a:	e76f      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a46c:	4b1a      	ldr	r3, [pc, #104]	@ (800a4d8 <PDM_Filter_setConfig+0x1fc>)
 800a46e:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a470:	e76c      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a472:	4b1a      	ldr	r3, [pc, #104]	@ (800a4dc <PDM_Filter_setConfig+0x200>)
 800a474:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a476:	e769      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a478:	4b19      	ldr	r3, [pc, #100]	@ (800a4e0 <PDM_Filter_setConfig+0x204>)
 800a47a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a47c:	e766      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a47e:	4b19      	ldr	r3, [pc, #100]	@ (800a4e4 <PDM_Filter_setConfig+0x208>)
 800a480:	64a3      	str	r3, [r4, #72]	@ 0x48
 800a482:	e763      	b.n	800a34c <PDM_Filter_setConfig+0x70>
 800a484:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800a486:	42b3      	cmp	r3, r6
 800a488:	f47f af41 	bne.w	800a30e <PDM_Filter_setConfig+0x32>
 800a48c:	886b      	ldrh	r3, [r5, #2]
 800a48e:	8663      	strh	r3, [r4, #50]	@ 0x32
 800a490:	2008      	movs	r0, #8
 800a492:	e766      	b.n	800a362 <PDM_Filter_setConfig+0x86>
 800a494:	b5e8b5cd 	.word	0xb5e8b5cd
 800a498:	080095bd 	.word	0x080095bd
 800a49c:	0800d094 	.word	0x0800d094
 800a4a0:	0800d0b0 	.word	0x0800d0b0
 800a4a4:	42000000 	.word	0x42000000
 800a4a8:	3d4ccccd 	.word	0x3d4ccccd
 800a4ac:	4f800000 	.word	0x4f800000
 800a4b0:	00000000 	.word	0x00000000
 800a4b4:	080089bd 	.word	0x080089bd
 800a4b8:	08008b45 	.word	0x08008b45
 800a4bc:	08008d2d 	.word	0x08008d2d
 800a4c0:	08008f49 	.word	0x08008f49
 800a4c4:	080091dd 	.word	0x080091dd
 800a4c8:	0800871d 	.word	0x0800871d
 800a4cc:	08008835 	.word	0x08008835
 800a4d0:	080096a5 	.word	0x080096a5
 800a4d4:	08009e19 	.word	0x08009e19
 800a4d8:	08009c11 	.word	0x08009c11
 800a4dc:	080097e9 	.word	0x080097e9
 800a4e0:	08009a71 	.word	0x08009a71
 800a4e4:	08009905 	.word	0x08009905

0800a4e8 <PDM_Filter>:
 800a4e8:	b410      	push	{r4}
 800a4ea:	4b0b      	ldr	r3, [pc, #44]	@ (800a518 <PDM_Filter+0x30>)
 800a4ec:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800a4ee:	429c      	cmp	r4, r3
 800a4f0:	d107      	bne.n	800a502 <PDM_Filter+0x1a>
 800a4f2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800a4f4:	05dc      	lsls	r4, r3, #23
 800a4f6:	d508      	bpl.n	800a50a <PDM_Filter+0x22>
 800a4f8:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800a4fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4fe:	320c      	adds	r2, #12
 800a500:	4718      	bx	r3
 800a502:	2004      	movs	r0, #4
 800a504:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a508:	4770      	bx	lr
 800a50a:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a50e:	bf14      	ite	ne
 800a510:	2020      	movne	r0, #32
 800a512:	2030      	moveq	r0, #48	@ 0x30
 800a514:	e7f6      	b.n	800a504 <PDM_Filter+0x1c>
 800a516:	bf00      	nop
 800a518:	b5e8b5cd 	.word	0xb5e8b5cd

0800a51c <arm_rfft_32_fast_init_f32>:
 800a51c:	b150      	cbz	r0, 800a534 <arm_rfft_32_fast_init_f32+0x18>
 800a51e:	b510      	push	{r4, lr}
 800a520:	2110      	movs	r1, #16
 800a522:	4604      	mov	r4, r0
 800a524:	f000 fe7c 	bl	800b220 <arm_cfft_init_f32>
 800a528:	b918      	cbnz	r0, 800a532 <arm_rfft_32_fast_init_f32+0x16>
 800a52a:	4b04      	ldr	r3, [pc, #16]	@ (800a53c <arm_rfft_32_fast_init_f32+0x20>)
 800a52c:	6163      	str	r3, [r4, #20]
 800a52e:	2220      	movs	r2, #32
 800a530:	8222      	strh	r2, [r4, #16]
 800a532:	bd10      	pop	{r4, pc}
 800a534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a538:	4770      	bx	lr
 800a53a:	bf00      	nop
 800a53c:	08025b24 	.word	0x08025b24

0800a540 <arm_rfft_64_fast_init_f32>:
 800a540:	b150      	cbz	r0, 800a558 <arm_rfft_64_fast_init_f32+0x18>
 800a542:	b510      	push	{r4, lr}
 800a544:	2120      	movs	r1, #32
 800a546:	4604      	mov	r4, r0
 800a548:	f000 fe6a 	bl	800b220 <arm_cfft_init_f32>
 800a54c:	b918      	cbnz	r0, 800a556 <arm_rfft_64_fast_init_f32+0x16>
 800a54e:	4b04      	ldr	r3, [pc, #16]	@ (800a560 <arm_rfft_64_fast_init_f32+0x20>)
 800a550:	6163      	str	r3, [r4, #20]
 800a552:	2240      	movs	r2, #64	@ 0x40
 800a554:	8222      	strh	r2, [r4, #16]
 800a556:	bd10      	pop	{r4, pc}
 800a558:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a55c:	4770      	bx	lr
 800a55e:	bf00      	nop
 800a560:	0802a3a4 	.word	0x0802a3a4

0800a564 <arm_rfft_128_fast_init_f32>:
 800a564:	b150      	cbz	r0, 800a57c <arm_rfft_128_fast_init_f32+0x18>
 800a566:	b510      	push	{r4, lr}
 800a568:	2140      	movs	r1, #64	@ 0x40
 800a56a:	4604      	mov	r4, r0
 800a56c:	f000 fe58 	bl	800b220 <arm_cfft_init_f32>
 800a570:	b918      	cbnz	r0, 800a57a <arm_rfft_128_fast_init_f32+0x16>
 800a572:	4b04      	ldr	r3, [pc, #16]	@ (800a584 <arm_rfft_128_fast_init_f32+0x20>)
 800a574:	6163      	str	r3, [r4, #20]
 800a576:	2280      	movs	r2, #128	@ 0x80
 800a578:	8222      	strh	r2, [r4, #16]
 800a57a:	bd10      	pop	{r4, pc}
 800a57c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a580:	4770      	bx	lr
 800a582:	bf00      	nop
 800a584:	08023524 	.word	0x08023524

0800a588 <arm_rfft_256_fast_init_f32>:
 800a588:	b158      	cbz	r0, 800a5a2 <arm_rfft_256_fast_init_f32+0x1a>
 800a58a:	b510      	push	{r4, lr}
 800a58c:	2180      	movs	r1, #128	@ 0x80
 800a58e:	4604      	mov	r4, r0
 800a590:	f000 fe46 	bl	800b220 <arm_cfft_init_f32>
 800a594:	b920      	cbnz	r0, 800a5a0 <arm_rfft_256_fast_init_f32+0x18>
 800a596:	4b04      	ldr	r3, [pc, #16]	@ (800a5a8 <arm_rfft_256_fast_init_f32+0x20>)
 800a598:	6163      	str	r3, [r4, #20]
 800a59a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a59e:	8222      	strh	r2, [r4, #16]
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5a6:	4770      	bx	lr
 800a5a8:	08025724 	.word	0x08025724

0800a5ac <arm_rfft_512_fast_init_f32>:
 800a5ac:	b160      	cbz	r0, 800a5c8 <arm_rfft_512_fast_init_f32+0x1c>
 800a5ae:	b510      	push	{r4, lr}
 800a5b0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a5b4:	4604      	mov	r4, r0
 800a5b6:	f000 fe33 	bl	800b220 <arm_cfft_init_f32>
 800a5ba:	b920      	cbnz	r0, 800a5c6 <arm_rfft_512_fast_init_f32+0x1a>
 800a5bc:	4b04      	ldr	r3, [pc, #16]	@ (800a5d0 <arm_rfft_512_fast_init_f32+0x24>)
 800a5be:	6163      	str	r3, [r4, #20]
 800a5c0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a5c4:	8222      	strh	r2, [r4, #16]
 800a5c6:	bd10      	pop	{r4, pc}
 800a5c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	08029ba4 	.word	0x08029ba4

0800a5d4 <arm_rfft_1024_fast_init_f32>:
 800a5d4:	b160      	cbz	r0, 800a5f0 <arm_rfft_1024_fast_init_f32+0x1c>
 800a5d6:	b510      	push	{r4, lr}
 800a5d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800a5dc:	4604      	mov	r4, r0
 800a5de:	f000 fe1f 	bl	800b220 <arm_cfft_init_f32>
 800a5e2:	b920      	cbnz	r0, 800a5ee <arm_rfft_1024_fast_init_f32+0x1a>
 800a5e4:	4b04      	ldr	r3, [pc, #16]	@ (800a5f8 <arm_rfft_1024_fast_init_f32+0x24>)
 800a5e6:	6163      	str	r3, [r4, #20]
 800a5e8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a5ec:	8222      	strh	r2, [r4, #16]
 800a5ee:	bd10      	pop	{r4, pc}
 800a5f0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5f4:	4770      	bx	lr
 800a5f6:	bf00      	nop
 800a5f8:	08022524 	.word	0x08022524

0800a5fc <arm_rfft_2048_fast_init_f32>:
 800a5fc:	b160      	cbz	r0, 800a618 <arm_rfft_2048_fast_init_f32+0x1c>
 800a5fe:	b510      	push	{r4, lr}
 800a600:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a604:	4604      	mov	r4, r0
 800a606:	f000 fe0b 	bl	800b220 <arm_cfft_init_f32>
 800a60a:	b920      	cbnz	r0, 800a616 <arm_rfft_2048_fast_init_f32+0x1a>
 800a60c:	4b04      	ldr	r3, [pc, #16]	@ (800a620 <arm_rfft_2048_fast_init_f32+0x24>)
 800a60e:	6163      	str	r3, [r4, #20]
 800a610:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a614:	8222      	strh	r2, [r4, #16]
 800a616:	bd10      	pop	{r4, pc}
 800a618:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a61c:	4770      	bx	lr
 800a61e:	bf00      	nop
 800a620:	08023724 	.word	0x08023724

0800a624 <arm_rfft_4096_fast_init_f32>:
 800a624:	b160      	cbz	r0, 800a640 <arm_rfft_4096_fast_init_f32+0x1c>
 800a626:	b510      	push	{r4, lr}
 800a628:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800a62c:	4604      	mov	r4, r0
 800a62e:	f000 fdf7 	bl	800b220 <arm_cfft_init_f32>
 800a632:	b920      	cbnz	r0, 800a63e <arm_rfft_4096_fast_init_f32+0x1a>
 800a634:	4b04      	ldr	r3, [pc, #16]	@ (800a648 <arm_rfft_4096_fast_init_f32+0x24>)
 800a636:	6163      	str	r3, [r4, #20]
 800a638:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800a63c:	8222      	strh	r2, [r4, #16]
 800a63e:	bd10      	pop	{r4, pc}
 800a640:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	08025ba4 	.word	0x08025ba4

0800a64c <arm_rfft_fast_init_f32>:
 800a64c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a650:	d024      	beq.n	800a69c <arm_rfft_fast_init_f32+0x50>
 800a652:	d807      	bhi.n	800a664 <arm_rfft_fast_init_f32+0x18>
 800a654:	2980      	cmp	r1, #128	@ 0x80
 800a656:	d01c      	beq.n	800a692 <arm_rfft_fast_init_f32+0x46>
 800a658:	d90c      	bls.n	800a674 <arm_rfft_fast_init_f32+0x28>
 800a65a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800a65e:	d11a      	bne.n	800a696 <arm_rfft_fast_init_f32+0x4a>
 800a660:	4b0f      	ldr	r3, [pc, #60]	@ (800a6a0 <arm_rfft_fast_init_f32+0x54>)
 800a662:	4718      	bx	r3
 800a664:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800a668:	d011      	beq.n	800a68e <arm_rfft_fast_init_f32+0x42>
 800a66a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800a66e:	d107      	bne.n	800a680 <arm_rfft_fast_init_f32+0x34>
 800a670:	4b0c      	ldr	r3, [pc, #48]	@ (800a6a4 <arm_rfft_fast_init_f32+0x58>)
 800a672:	4718      	bx	r3
 800a674:	2920      	cmp	r1, #32
 800a676:	d008      	beq.n	800a68a <arm_rfft_fast_init_f32+0x3e>
 800a678:	2940      	cmp	r1, #64	@ 0x40
 800a67a:	d10c      	bne.n	800a696 <arm_rfft_fast_init_f32+0x4a>
 800a67c:	4b0a      	ldr	r3, [pc, #40]	@ (800a6a8 <arm_rfft_fast_init_f32+0x5c>)
 800a67e:	e7f0      	b.n	800a662 <arm_rfft_fast_init_f32+0x16>
 800a680:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800a684:	d107      	bne.n	800a696 <arm_rfft_fast_init_f32+0x4a>
 800a686:	4b09      	ldr	r3, [pc, #36]	@ (800a6ac <arm_rfft_fast_init_f32+0x60>)
 800a688:	e7eb      	b.n	800a662 <arm_rfft_fast_init_f32+0x16>
 800a68a:	4b09      	ldr	r3, [pc, #36]	@ (800a6b0 <arm_rfft_fast_init_f32+0x64>)
 800a68c:	e7e9      	b.n	800a662 <arm_rfft_fast_init_f32+0x16>
 800a68e:	4b09      	ldr	r3, [pc, #36]	@ (800a6b4 <arm_rfft_fast_init_f32+0x68>)
 800a690:	e7e7      	b.n	800a662 <arm_rfft_fast_init_f32+0x16>
 800a692:	4b09      	ldr	r3, [pc, #36]	@ (800a6b8 <arm_rfft_fast_init_f32+0x6c>)
 800a694:	e7e5      	b.n	800a662 <arm_rfft_fast_init_f32+0x16>
 800a696:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a69a:	4770      	bx	lr
 800a69c:	4b07      	ldr	r3, [pc, #28]	@ (800a6bc <arm_rfft_fast_init_f32+0x70>)
 800a69e:	e7e0      	b.n	800a662 <arm_rfft_fast_init_f32+0x16>
 800a6a0:	0800a589 	.word	0x0800a589
 800a6a4:	0800a625 	.word	0x0800a625
 800a6a8:	0800a541 	.word	0x0800a541
 800a6ac:	0800a5d5 	.word	0x0800a5d5
 800a6b0:	0800a51d 	.word	0x0800a51d
 800a6b4:	0800a5fd 	.word	0x0800a5fd
 800a6b8:	0800a565 	.word	0x0800a565
 800a6bc:	0800a5ad 	.word	0x0800a5ad

0800a6c0 <stage_rfft_f32>:
 800a6c0:	b410      	push	{r4}
 800a6c2:	edd1 7a00 	vldr	s15, [r1]
 800a6c6:	ed91 7a01 	vldr	s14, [r1, #4]
 800a6ca:	8804      	ldrh	r4, [r0, #0]
 800a6cc:	6940      	ldr	r0, [r0, #20]
 800a6ce:	ee37 7a07 	vadd.f32	s14, s14, s14
 800a6d2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800a6d6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800a6da:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a6de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a6e2:	3c01      	subs	r4, #1
 800a6e4:	ee26 7a84 	vmul.f32	s14, s13, s8
 800a6e8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a6ec:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800a6f0:	ed82 7a00 	vstr	s14, [r2]
 800a6f4:	edc2 7a01 	vstr	s15, [r2, #4]
 800a6f8:	3010      	adds	r0, #16
 800a6fa:	3210      	adds	r2, #16
 800a6fc:	3b08      	subs	r3, #8
 800a6fe:	3110      	adds	r1, #16
 800a700:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a704:	ed93 7a02 	vldr	s14, [r3, #8]
 800a708:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a70c:	edd3 4a03 	vldr	s9, [r3, #12]
 800a710:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a714:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a718:	ee77 5a45 	vsub.f32	s11, s14, s10
 800a71c:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a720:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a724:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a728:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a72c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a730:	ee37 7a23 	vadd.f32	s14, s14, s7
 800a734:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a738:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a73c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a740:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a744:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a748:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a74c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a750:	3c01      	subs	r4, #1
 800a752:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a756:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a75a:	f1a3 0308 	sub.w	r3, r3, #8
 800a75e:	f101 0108 	add.w	r1, r1, #8
 800a762:	f100 0008 	add.w	r0, r0, #8
 800a766:	f102 0208 	add.w	r2, r2, #8
 800a76a:	d1c9      	bne.n	800a700 <stage_rfft_f32+0x40>
 800a76c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a770:	4770      	bx	lr
 800a772:	bf00      	nop

0800a774 <merge_rfft_f32>:
 800a774:	b410      	push	{r4}
 800a776:	edd1 7a00 	vldr	s15, [r1]
 800a77a:	edd1 6a01 	vldr	s13, [r1, #4]
 800a77e:	8804      	ldrh	r4, [r0, #0]
 800a780:	6940      	ldr	r0, [r0, #20]
 800a782:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800a786:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a78a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800a78e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a792:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a796:	3c01      	subs	r4, #1
 800a798:	ed82 7a00 	vstr	s14, [r2]
 800a79c:	edc2 7a01 	vstr	s15, [r2, #4]
 800a7a0:	b3dc      	cbz	r4, 800a81a <merge_rfft_f32+0xa6>
 800a7a2:	00e3      	lsls	r3, r4, #3
 800a7a4:	3b08      	subs	r3, #8
 800a7a6:	440b      	add	r3, r1
 800a7a8:	3010      	adds	r0, #16
 800a7aa:	3210      	adds	r2, #16
 800a7ac:	3110      	adds	r1, #16
 800a7ae:	ed11 5a02 	vldr	s10, [r1, #-8]
 800a7b2:	ed93 7a02 	vldr	s14, [r3, #8]
 800a7b6:	ed50 6a02 	vldr	s13, [r0, #-8]
 800a7ba:	edd3 4a03 	vldr	s9, [r3, #12]
 800a7be:	ed51 7a01 	vldr	s15, [r1, #-4]
 800a7c2:	ed10 6a01 	vldr	s12, [r0, #-4]
 800a7c6:	ee75 5a47 	vsub.f32	s11, s10, s14
 800a7ca:	ee37 7a05 	vadd.f32	s14, s14, s10
 800a7ce:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800a7d2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800a7d6:	ee66 5a25 	vmul.f32	s11, s12, s11
 800a7da:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a7de:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a7e2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800a7e6:	ee26 6a05 	vmul.f32	s12, s12, s10
 800a7ea:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800a7ee:	ee37 7a46 	vsub.f32	s14, s14, s12
 800a7f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a7f6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800a7fa:	ee67 7a84 	vmul.f32	s15, s15, s8
 800a7fe:	3c01      	subs	r4, #1
 800a800:	ed02 7a02 	vstr	s14, [r2, #-8]
 800a804:	ed42 7a01 	vstr	s15, [r2, #-4]
 800a808:	f1a3 0308 	sub.w	r3, r3, #8
 800a80c:	f101 0108 	add.w	r1, r1, #8
 800a810:	f100 0008 	add.w	r0, r0, #8
 800a814:	f102 0208 	add.w	r2, r2, #8
 800a818:	d1c9      	bne.n	800a7ae <merge_rfft_f32+0x3a>
 800a81a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a81e:	4770      	bx	lr

0800a820 <arm_rfft_fast_f32>:
 800a820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a824:	461c      	mov	r4, r3
 800a826:	4605      	mov	r5, r0
 800a828:	4616      	mov	r6, r2
 800a82a:	b14b      	cbz	r3, 800a840 <arm_rfft_fast_f32+0x20>
 800a82c:	f7ff ffa2 	bl	800a774 <merge_rfft_f32>
 800a830:	4622      	mov	r2, r4
 800a832:	4631      	mov	r1, r6
 800a834:	4628      	mov	r0, r5
 800a836:	2301      	movs	r3, #1
 800a838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a83c:	f000 bb34 	b.w	800aea8 <arm_cfft_f32>
 800a840:	460f      	mov	r7, r1
 800a842:	461a      	mov	r2, r3
 800a844:	2301      	movs	r3, #1
 800a846:	f000 fb2f 	bl	800aea8 <arm_cfft_f32>
 800a84a:	4632      	mov	r2, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	4628      	mov	r0, r5
 800a850:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a854:	f7ff bf34 	b.w	800a6c0 <stage_rfft_f32>

0800a858 <arm_cfft_radix8by2_f32>:
 800a858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a85c:	ed2d 8b08 	vpush	{d8-d11}
 800a860:	f8b0 c000 	ldrh.w	ip, [r0]
 800a864:	6842      	ldr	r2, [r0, #4]
 800a866:	4607      	mov	r7, r0
 800a868:	4608      	mov	r0, r1
 800a86a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800a86e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800a872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800a876:	b082      	sub	sp, #8
 800a878:	f000 80b0 	beq.w	800a9dc <arm_cfft_radix8by2_f32+0x184>
 800a87c:	008c      	lsls	r4, r1, #2
 800a87e:	3410      	adds	r4, #16
 800a880:	f100 0310 	add.w	r3, r0, #16
 800a884:	1906      	adds	r6, r0, r4
 800a886:	3210      	adds	r2, #16
 800a888:	4444      	add	r4, r8
 800a88a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800a88e:	f108 0510 	add.w	r5, r8, #16
 800a892:	ed15 2a04 	vldr	s4, [r5, #-16]
 800a896:	ed55 2a03 	vldr	s5, [r5, #-12]
 800a89a:	ed54 4a04 	vldr	s9, [r4, #-16]
 800a89e:	ed14 4a03 	vldr	s8, [r4, #-12]
 800a8a2:	ed14 6a02 	vldr	s12, [r4, #-8]
 800a8a6:	ed54 5a01 	vldr	s11, [r4, #-4]
 800a8aa:	ed53 3a04 	vldr	s7, [r3, #-16]
 800a8ae:	ed15 0a02 	vldr	s0, [r5, #-8]
 800a8b2:	ed55 0a01 	vldr	s1, [r5, #-4]
 800a8b6:	ed56 6a04 	vldr	s13, [r6, #-16]
 800a8ba:	ed16 3a03 	vldr	s6, [r6, #-12]
 800a8be:	ed13 7a03 	vldr	s14, [r3, #-12]
 800a8c2:	ed13 5a02 	vldr	s10, [r3, #-8]
 800a8c6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800a8ca:	ed16 1a02 	vldr	s2, [r6, #-8]
 800a8ce:	ed56 1a01 	vldr	s3, [r6, #-4]
 800a8d2:	ee73 ba82 	vadd.f32	s23, s7, s4
 800a8d6:	ee37 ba22 	vadd.f32	s22, s14, s5
 800a8da:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800a8de:	ee33 9a04 	vadd.f32	s18, s6, s8
 800a8e2:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800a8e6:	ee75 aa00 	vadd.f32	s21, s10, s0
 800a8ea:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800a8ee:	ee71 8a06 	vadd.f32	s17, s2, s12
 800a8f2:	ed43 ba04 	vstr	s23, [r3, #-16]
 800a8f6:	ed03 ba03 	vstr	s22, [r3, #-12]
 800a8fa:	ed43 aa02 	vstr	s21, [r3, #-8]
 800a8fe:	ed03 aa01 	vstr	s20, [r3, #-4]
 800a902:	ed06 8a01 	vstr	s16, [r6, #-4]
 800a906:	ed46 9a04 	vstr	s19, [r6, #-16]
 800a90a:	ed06 9a03 	vstr	s18, [r6, #-12]
 800a90e:	ed46 8a02 	vstr	s17, [r6, #-8]
 800a912:	ee37 7a62 	vsub.f32	s14, s14, s5
 800a916:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800a91a:	ee34 4a43 	vsub.f32	s8, s8, s6
 800a91e:	ed52 6a03 	vldr	s13, [r2, #-12]
 800a922:	ed12 3a04 	vldr	s6, [r2, #-16]
 800a926:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800a92a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800a92e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800a932:	ee23 2a83 	vmul.f32	s4, s7, s6
 800a936:	ee64 4a83 	vmul.f32	s9, s9, s6
 800a93a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800a93e:	ee27 7a03 	vmul.f32	s14, s14, s6
 800a942:	ee64 6a26 	vmul.f32	s13, s8, s13
 800a946:	ee24 4a03 	vmul.f32	s8, s8, s6
 800a94a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800a94e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800a952:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800a956:	ee32 3a08 	vadd.f32	s6, s4, s16
 800a95a:	ed05 7a03 	vstr	s14, [r5, #-12]
 800a95e:	ed05 3a04 	vstr	s6, [r5, #-16]
 800a962:	ed04 4a04 	vstr	s8, [r4, #-16]
 800a966:	ed44 6a03 	vstr	s13, [r4, #-12]
 800a96a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800a96e:	ee76 6a41 	vsub.f32	s13, s12, s2
 800a972:	ee35 5a40 	vsub.f32	s10, s10, s0
 800a976:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800a97a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800a97e:	ed52 5a02 	vldr	s11, [r2, #-8]
 800a982:	ee67 3a87 	vmul.f32	s7, s15, s14
 800a986:	ee66 4a87 	vmul.f32	s9, s13, s14
 800a98a:	ee25 4a25 	vmul.f32	s8, s10, s11
 800a98e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800a992:	ee25 5a07 	vmul.f32	s10, s10, s14
 800a996:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800a99a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800a99e:	ee26 6a25 	vmul.f32	s12, s12, s11
 800a9a2:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800a9a6:	ee74 5a23 	vadd.f32	s11, s8, s7
 800a9aa:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800a9ae:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a9b2:	3310      	adds	r3, #16
 800a9b4:	4563      	cmp	r3, ip
 800a9b6:	ed45 5a02 	vstr	s11, [r5, #-8]
 800a9ba:	f106 0610 	add.w	r6, r6, #16
 800a9be:	ed45 7a01 	vstr	s15, [r5, #-4]
 800a9c2:	f102 0210 	add.w	r2, r2, #16
 800a9c6:	ed04 6a02 	vstr	s12, [r4, #-8]
 800a9ca:	ed04 7a01 	vstr	s14, [r4, #-4]
 800a9ce:	f105 0510 	add.w	r5, r5, #16
 800a9d2:	f104 0410 	add.w	r4, r4, #16
 800a9d6:	f47f af5c 	bne.w	800a892 <arm_cfft_radix8by2_f32+0x3a>
 800a9da:	687a      	ldr	r2, [r7, #4]
 800a9dc:	b289      	uxth	r1, r1
 800a9de:	2302      	movs	r3, #2
 800a9e0:	9101      	str	r1, [sp, #4]
 800a9e2:	f000 fc6f 	bl	800b2c4 <arm_radix8_butterfly_f32>
 800a9e6:	9901      	ldr	r1, [sp, #4]
 800a9e8:	687a      	ldr	r2, [r7, #4]
 800a9ea:	4640      	mov	r0, r8
 800a9ec:	2302      	movs	r3, #2
 800a9ee:	b002      	add	sp, #8
 800a9f0:	ecbd 8b08 	vpop	{d8-d11}
 800a9f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f8:	f000 bc64 	b.w	800b2c4 <arm_radix8_butterfly_f32>

0800a9fc <arm_cfft_radix8by4_f32>:
 800a9fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa00:	ed2d 8b0a 	vpush	{d8-d12}
 800aa04:	8803      	ldrh	r3, [r0, #0]
 800aa06:	6842      	ldr	r2, [r0, #4]
 800aa08:	b08d      	sub	sp, #52	@ 0x34
 800aa0a:	085b      	lsrs	r3, r3, #1
 800aa0c:	900a      	str	r0, [sp, #40]	@ 0x28
 800aa0e:	4608      	mov	r0, r1
 800aa10:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800aa14:	edd1 5a00 	vldr	s11, [r1]
 800aa18:	edd0 7a00 	vldr	s15, [r0]
 800aa1c:	edd1 3a01 	vldr	s7, [r1, #4]
 800aa20:	ed90 5a01 	vldr	s10, [r0, #4]
 800aa24:	9108      	str	r1, [sp, #32]
 800aa26:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800aa2a:	ed96 7a00 	vldr	s14, [r6]
 800aa2e:	ed96 4a01 	vldr	s8, [r6, #4]
 800aa32:	9607      	str	r6, [sp, #28]
 800aa34:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800aa38:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800aa3c:	edd8 4a00 	vldr	s9, [r8]
 800aa40:	ed98 3a01 	vldr	s6, [r8, #4]
 800aa44:	ee77 6a06 	vadd.f32	s13, s14, s12
 800aa48:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800aa4c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800aa50:	4604      	mov	r4, r0
 800aa52:	edc0 6a00 	vstr	s13, [r0]
 800aa56:	edd6 5a01 	vldr	s11, [r6, #4]
 800aa5a:	edd8 2a01 	vldr	s5, [r8, #4]
 800aa5e:	ee75 6a23 	vadd.f32	s13, s10, s7
 800aa62:	ee35 5a63 	vsub.f32	s10, s10, s7
 800aa66:	ee36 6a47 	vsub.f32	s12, s12, s14
 800aa6a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800aa6e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800aa72:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800aa76:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800aa7a:	3408      	adds	r4, #8
 800aa7c:	ee35 4a47 	vsub.f32	s8, s10, s14
 800aa80:	460d      	mov	r5, r1
 800aa82:	ee37 7a05 	vadd.f32	s14, s14, s10
 800aa86:	4637      	mov	r7, r6
 800aa88:	9402      	str	r4, [sp, #8]
 800aa8a:	3708      	adds	r7, #8
 800aa8c:	460c      	mov	r4, r1
 800aa8e:	3508      	adds	r5, #8
 800aa90:	0859      	lsrs	r1, r3, #1
 800aa92:	9109      	str	r1, [sp, #36]	@ 0x24
 800aa94:	9706      	str	r7, [sp, #24]
 800aa96:	9505      	str	r5, [sp, #20]
 800aa98:	f102 0708 	add.w	r7, r2, #8
 800aa9c:	ee36 6a64 	vsub.f32	s12, s12, s9
 800aaa0:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800aaa4:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800aaa8:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800aaac:	ee77 7a83 	vadd.f32	s15, s15, s6
 800aab0:	ee34 5a24 	vadd.f32	s10, s8, s9
 800aab4:	ee37 7a64 	vsub.f32	s14, s14, s9
 800aab8:	3902      	subs	r1, #2
 800aaba:	4645      	mov	r5, r8
 800aabc:	9701      	str	r7, [sp, #4]
 800aabe:	f102 0c18 	add.w	ip, r2, #24
 800aac2:	f102 0710 	add.w	r7, r2, #16
 800aac6:	3508      	adds	r5, #8
 800aac8:	0849      	lsrs	r1, r1, #1
 800aaca:	edc0 5a01 	vstr	s11, [r0, #4]
 800aace:	9703      	str	r7, [sp, #12]
 800aad0:	edc6 3a00 	vstr	s7, [r6]
 800aad4:	ed86 5a01 	vstr	s10, [r6, #4]
 800aad8:	f8cd c000 	str.w	ip, [sp]
 800aadc:	ed84 6a00 	vstr	s12, [r4]
 800aae0:	edc4 6a01 	vstr	s13, [r4, #4]
 800aae4:	9504      	str	r5, [sp, #16]
 800aae6:	edc8 7a00 	vstr	s15, [r8]
 800aaea:	ed88 7a01 	vstr	s14, [r8, #4]
 800aaee:	910b      	str	r1, [sp, #44]	@ 0x2c
 800aaf0:	f000 8138 	beq.w	800ad64 <arm_cfft_radix8by4_f32+0x368>
 800aaf4:	009b      	lsls	r3, r3, #2
 800aaf6:	3b0c      	subs	r3, #12
 800aaf8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800aafc:	f106 0510 	add.w	r5, r6, #16
 800ab00:	4626      	mov	r6, r4
 800ab02:	46bb      	mov	fp, r7
 800ab04:	f102 0a20 	add.w	sl, r2, #32
 800ab08:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800ab0c:	f106 0710 	add.w	r7, r6, #16
 800ab10:	4443      	add	r3, r8
 800ab12:	f100 0e10 	add.w	lr, r0, #16
 800ab16:	3c0c      	subs	r4, #12
 800ab18:	f1a8 060c 	sub.w	r6, r8, #12
 800ab1c:	f108 0210 	add.w	r2, r8, #16
 800ab20:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800ab24:	ed57 5a02 	vldr	s11, [r7, #-8]
 800ab28:	ed55 7a02 	vldr	s15, [r5, #-8]
 800ab2c:	ed52 1a02 	vldr	s3, [r2, #-8]
 800ab30:	ed57 6a01 	vldr	s13, [r7, #-4]
 800ab34:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800ab38:	ed12 1a01 	vldr	s2, [r2, #-4]
 800ab3c:	ed15 8a01 	vldr	s16, [r5, #-4]
 800ab40:	ee35 4a25 	vadd.f32	s8, s10, s11
 800ab44:	ee30 6a26 	vadd.f32	s12, s0, s13
 800ab48:	ee37 7a84 	vadd.f32	s14, s15, s8
 800ab4c:	ee30 0a66 	vsub.f32	s0, s0, s13
 800ab50:	ee37 7a21 	vadd.f32	s14, s14, s3
 800ab54:	ee75 5a65 	vsub.f32	s11, s10, s11
 800ab58:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800ab5c:	ed15 7a01 	vldr	s14, [r5, #-4]
 800ab60:	ed52 6a01 	vldr	s13, [r2, #-4]
 800ab64:	ee36 7a07 	vadd.f32	s14, s12, s14
 800ab68:	ee78 aa25 	vadd.f32	s21, s16, s11
 800ab6c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800ab70:	ee70 3a67 	vsub.f32	s7, s0, s15
 800ab74:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800ab78:	ed96 7a02 	vldr	s14, [r6, #8]
 800ab7c:	ed9c 2a02 	vldr	s4, [ip, #8]
 800ab80:	ed94 ba02 	vldr	s22, [r4, #8]
 800ab84:	edd3 9a02 	vldr	s19, [r3, #8]
 800ab88:	edd6 2a01 	vldr	s5, [r6, #4]
 800ab8c:	ed9c 9a01 	vldr	s18, [ip, #4]
 800ab90:	ed93 5a01 	vldr	s10, [r3, #4]
 800ab94:	edd4 0a01 	vldr	s1, [r4, #4]
 800ab98:	ee72 6a07 	vadd.f32	s13, s4, s14
 800ab9c:	ee32 2a47 	vsub.f32	s4, s4, s14
 800aba0:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800aba4:	ee79 4a22 	vadd.f32	s9, s18, s5
 800aba8:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800abac:	ee79 2a62 	vsub.f32	s5, s18, s5
 800abb0:	ed8c 7a02 	vstr	s14, [ip, #8]
 800abb4:	ed94 7a01 	vldr	s14, [r4, #4]
 800abb8:	edd3 8a01 	vldr	s17, [r3, #4]
 800abbc:	ee34 7a87 	vadd.f32	s14, s9, s14
 800abc0:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800abc4:	ee37 7a28 	vadd.f32	s14, s14, s17
 800abc8:	ee32 9a60 	vsub.f32	s18, s4, s1
 800abcc:	ed8c 7a01 	vstr	s14, [ip, #4]
 800abd0:	ed1b 7a01 	vldr	s14, [fp, #-4]
 800abd4:	ed1b aa02 	vldr	s20, [fp, #-8]
 800abd8:	ee73 8a22 	vadd.f32	s17, s6, s5
 800abdc:	ee39 9a05 	vadd.f32	s18, s18, s10
 800abe0:	ee7a aac1 	vsub.f32	s21, s21, s2
 800abe4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800abe8:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800abec:	ee69 ba07 	vmul.f32	s23, s18, s14
 800abf0:	ee6a aa87 	vmul.f32	s21, s21, s14
 800abf4:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800abf8:	ee63 ca87 	vmul.f32	s25, s7, s14
 800abfc:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800ac00:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800ac04:	ee68 8a87 	vmul.f32	s17, s17, s14
 800ac08:	ee73 3aea 	vsub.f32	s7, s7, s21
 800ac0c:	ee78 8a89 	vadd.f32	s17, s17, s18
 800ac10:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800ac14:	ee3b aaca 	vsub.f32	s20, s23, s20
 800ac18:	ee34 4a67 	vsub.f32	s8, s8, s15
 800ac1c:	ee76 6acb 	vsub.f32	s13, s13, s22
 800ac20:	ee36 6a48 	vsub.f32	s12, s12, s16
 800ac24:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800ac28:	ed05 7a02 	vstr	s14, [r5, #-8]
 800ac2c:	ed45 3a01 	vstr	s7, [r5, #-4]
 800ac30:	edc4 8a01 	vstr	s17, [r4, #4]
 800ac34:	ed84 aa02 	vstr	s20, [r4, #8]
 800ac38:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800ac3c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800ac40:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800ac44:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800ac48:	ee34 4a61 	vsub.f32	s8, s8, s3
 800ac4c:	ee36 6a41 	vsub.f32	s12, s12, s2
 800ac50:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800ac54:	ee66 9a26 	vmul.f32	s19, s12, s13
 800ac58:	ee24 9a23 	vmul.f32	s18, s8, s7
 800ac5c:	ee26 6a23 	vmul.f32	s12, s12, s7
 800ac60:	ee24 4a26 	vmul.f32	s8, s8, s13
 800ac64:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ac68:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800ac6c:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800ac70:	ee36 6a44 	vsub.f32	s12, s12, s8
 800ac74:	ee37 7a64 	vsub.f32	s14, s14, s9
 800ac78:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800ac7c:	ee79 3a29 	vadd.f32	s7, s18, s19
 800ac80:	ee75 6a60 	vsub.f32	s13, s10, s1
 800ac84:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800ac88:	ee77 7a80 	vadd.f32	s15, s15, s0
 800ac8c:	ed47 3a02 	vstr	s7, [r7, #-8]
 800ac90:	ed07 6a01 	vstr	s12, [r7, #-4]
 800ac94:	ed86 7a01 	vstr	s14, [r6, #4]
 800ac98:	ed86 4a02 	vstr	s8, [r6, #8]
 800ac9c:	ee35 6a81 	vadd.f32	s12, s11, s2
 800aca0:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800aca4:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 800aca8:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 800acac:	ee33 3a62 	vsub.f32	s6, s6, s5
 800acb0:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800acb4:	ee67 2a26 	vmul.f32	s5, s14, s13
 800acb8:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800acbc:	ee26 5a25 	vmul.f32	s10, s12, s11
 800acc0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800acc4:	ee26 6a26 	vmul.f32	s12, s12, s13
 800acc8:	ee27 7a25 	vmul.f32	s14, s14, s11
 800accc:	ee63 6a26 	vmul.f32	s13, s6, s13
 800acd0:	ee23 3a25 	vmul.f32	s6, s6, s11
 800acd4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800acd8:	ee75 5a24 	vadd.f32	s11, s10, s9
 800acdc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800ace0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800ace4:	3901      	subs	r1, #1
 800ace6:	ed42 5a02 	vstr	s11, [r2, #-8]
 800acea:	ed42 7a01 	vstr	s15, [r2, #-4]
 800acee:	f10e 0e08 	add.w	lr, lr, #8
 800acf2:	ed83 3a02 	vstr	s6, [r3, #8]
 800acf6:	ed83 7a01 	vstr	s14, [r3, #4]
 800acfa:	f1ac 0c08 	sub.w	ip, ip, #8
 800acfe:	f10b 0b08 	add.w	fp, fp, #8
 800ad02:	f105 0508 	add.w	r5, r5, #8
 800ad06:	f1a4 0408 	sub.w	r4, r4, #8
 800ad0a:	f10a 0a10 	add.w	sl, sl, #16
 800ad0e:	f107 0708 	add.w	r7, r7, #8
 800ad12:	f1a6 0608 	sub.w	r6, r6, #8
 800ad16:	f109 0918 	add.w	r9, r9, #24
 800ad1a:	f102 0208 	add.w	r2, r2, #8
 800ad1e:	f1a3 0308 	sub.w	r3, r3, #8
 800ad22:	f47f aefd 	bne.w	800ab20 <arm_cfft_radix8by4_f32+0x124>
 800ad26:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ad28:	9902      	ldr	r1, [sp, #8]
 800ad2a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad2e:	9102      	str	r1, [sp, #8]
 800ad30:	9901      	ldr	r1, [sp, #4]
 800ad32:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad36:	9101      	str	r1, [sp, #4]
 800ad38:	9906      	ldr	r1, [sp, #24]
 800ad3a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad3e:	9106      	str	r1, [sp, #24]
 800ad40:	9903      	ldr	r1, [sp, #12]
 800ad42:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800ad46:	9103      	str	r1, [sp, #12]
 800ad48:	9905      	ldr	r1, [sp, #20]
 800ad4a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800ad4e:	9105      	str	r1, [sp, #20]
 800ad50:	9904      	ldr	r1, [sp, #16]
 800ad52:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800ad56:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800ad5a:	9204      	str	r2, [sp, #16]
 800ad5c:	9a00      	ldr	r2, [sp, #0]
 800ad5e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ad62:	9300      	str	r3, [sp, #0]
 800ad64:	9902      	ldr	r1, [sp, #8]
 800ad66:	9d05      	ldr	r5, [sp, #20]
 800ad68:	ed91 4a00 	vldr	s8, [r1]
 800ad6c:	edd5 6a00 	vldr	s13, [r5]
 800ad70:	9b06      	ldr	r3, [sp, #24]
 800ad72:	9c04      	ldr	r4, [sp, #16]
 800ad74:	edd3 7a00 	vldr	s15, [r3]
 800ad78:	ed94 3a00 	vldr	s6, [r4]
 800ad7c:	edd5 4a01 	vldr	s9, [r5, #4]
 800ad80:	edd1 3a01 	vldr	s7, [r1, #4]
 800ad84:	ed94 2a01 	vldr	s4, [r4, #4]
 800ad88:	ed93 7a01 	vldr	s14, [r3, #4]
 800ad8c:	9a01      	ldr	r2, [sp, #4]
 800ad8e:	ee34 6a26 	vadd.f32	s12, s8, s13
 800ad92:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800ad96:	ee37 5a86 	vadd.f32	s10, s15, s12
 800ad9a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800ad9e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800ada2:	ee74 6a66 	vsub.f32	s13, s8, s13
 800ada6:	ed81 5a00 	vstr	s10, [r1]
 800adaa:	ed93 5a01 	vldr	s10, [r3, #4]
 800adae:	edd4 4a01 	vldr	s9, [r4, #4]
 800adb2:	ee35 5a85 	vadd.f32	s10, s11, s10
 800adb6:	ee37 4a26 	vadd.f32	s8, s14, s13
 800adba:	ee35 5a24 	vadd.f32	s10, s10, s9
 800adbe:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800adc2:	ed81 5a01 	vstr	s10, [r1, #4]
 800adc6:	edd2 1a00 	vldr	s3, [r2]
 800adca:	edd2 2a01 	vldr	s5, [r2, #4]
 800adce:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800add2:	ee34 5a83 	vadd.f32	s10, s9, s6
 800add6:	ee34 4a42 	vsub.f32	s8, s8, s4
 800adda:	ee36 6a67 	vsub.f32	s12, s12, s15
 800adde:	ee64 4a21 	vmul.f32	s9, s8, s3
 800ade2:	ee24 4a22 	vmul.f32	s8, s8, s5
 800ade6:	ee65 2a22 	vmul.f32	s5, s10, s5
 800adea:	ee25 5a21 	vmul.f32	s10, s10, s3
 800adee:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800adf2:	ee35 5a44 	vsub.f32	s10, s10, s8
 800adf6:	edc3 2a00 	vstr	s5, [r3]
 800adfa:	ed83 5a01 	vstr	s10, [r3, #4]
 800adfe:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800ae02:	9b03      	ldr	r3, [sp, #12]
 800ae04:	ee36 6a43 	vsub.f32	s12, s12, s6
 800ae08:	ed93 4a01 	vldr	s8, [r3, #4]
 800ae0c:	ed93 5a00 	vldr	s10, [r3]
 800ae10:	9b00      	ldr	r3, [sp, #0]
 800ae12:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800ae16:	ee66 4a05 	vmul.f32	s9, s12, s10
 800ae1a:	ee25 5a85 	vmul.f32	s10, s11, s10
 800ae1e:	ee26 6a04 	vmul.f32	s12, s12, s8
 800ae22:	ee65 5a84 	vmul.f32	s11, s11, s8
 800ae26:	ee35 6a46 	vsub.f32	s12, s10, s12
 800ae2a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800ae2e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800ae32:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ae36:	ed85 6a01 	vstr	s12, [r5, #4]
 800ae3a:	edc5 5a00 	vstr	s11, [r5]
 800ae3e:	edd3 5a01 	vldr	s11, [r3, #4]
 800ae42:	edd3 6a00 	vldr	s13, [r3]
 800ae46:	ee37 7a02 	vadd.f32	s14, s14, s4
 800ae4a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800ae4e:	ee27 6a26 	vmul.f32	s12, s14, s13
 800ae52:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800ae56:	ee27 7a25 	vmul.f32	s14, s14, s11
 800ae5a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800ae5e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800ae62:	ee76 7a27 	vadd.f32	s15, s12, s15
 800ae66:	ed84 7a01 	vstr	s14, [r4, #4]
 800ae6a:	edc4 7a00 	vstr	s15, [r4]
 800ae6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800ae70:	9100      	str	r1, [sp, #0]
 800ae72:	6862      	ldr	r2, [r4, #4]
 800ae74:	2304      	movs	r3, #4
 800ae76:	f000 fa25 	bl	800b2c4 <arm_radix8_butterfly_f32>
 800ae7a:	9807      	ldr	r0, [sp, #28]
 800ae7c:	9900      	ldr	r1, [sp, #0]
 800ae7e:	6862      	ldr	r2, [r4, #4]
 800ae80:	2304      	movs	r3, #4
 800ae82:	f000 fa1f 	bl	800b2c4 <arm_radix8_butterfly_f32>
 800ae86:	9808      	ldr	r0, [sp, #32]
 800ae88:	9900      	ldr	r1, [sp, #0]
 800ae8a:	6862      	ldr	r2, [r4, #4]
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	f000 fa19 	bl	800b2c4 <arm_radix8_butterfly_f32>
 800ae92:	9900      	ldr	r1, [sp, #0]
 800ae94:	6862      	ldr	r2, [r4, #4]
 800ae96:	4640      	mov	r0, r8
 800ae98:	2304      	movs	r3, #4
 800ae9a:	b00d      	add	sp, #52	@ 0x34
 800ae9c:	ecbd 8b0a 	vpop	{d8-d12}
 800aea0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aea4:	f000 ba0e 	b.w	800b2c4 <arm_radix8_butterfly_f32>

0800aea8 <arm_cfft_f32>:
 800aea8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aeac:	2a01      	cmp	r2, #1
 800aeae:	8805      	ldrh	r5, [r0, #0]
 800aeb0:	4607      	mov	r7, r0
 800aeb2:	4690      	mov	r8, r2
 800aeb4:	460c      	mov	r4, r1
 800aeb6:	4699      	mov	r9, r3
 800aeb8:	d05c      	beq.n	800af74 <arm_cfft_f32+0xcc>
 800aeba:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800aebe:	d054      	beq.n	800af6a <arm_cfft_f32+0xc2>
 800aec0:	d810      	bhi.n	800aee4 <arm_cfft_f32+0x3c>
 800aec2:	2d40      	cmp	r5, #64	@ 0x40
 800aec4:	d015      	beq.n	800aef2 <arm_cfft_f32+0x4a>
 800aec6:	d94c      	bls.n	800af62 <arm_cfft_f32+0xba>
 800aec8:	2d80      	cmp	r5, #128	@ 0x80
 800aeca:	d103      	bne.n	800aed4 <arm_cfft_f32+0x2c>
 800aecc:	4621      	mov	r1, r4
 800aece:	4638      	mov	r0, r7
 800aed0:	f7ff fcc2 	bl	800a858 <arm_cfft_radix8by2_f32>
 800aed4:	f1b9 0f00 	cmp.w	r9, #0
 800aed8:	d114      	bne.n	800af04 <arm_cfft_f32+0x5c>
 800aeda:	f1b8 0f01 	cmp.w	r8, #1
 800aede:	d019      	beq.n	800af14 <arm_cfft_f32+0x6c>
 800aee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aee4:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800aee8:	d03f      	beq.n	800af6a <arm_cfft_f32+0xc2>
 800aeea:	d933      	bls.n	800af54 <arm_cfft_f32+0xac>
 800aeec:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800aef0:	d1f0      	bne.n	800aed4 <arm_cfft_f32+0x2c>
 800aef2:	687a      	ldr	r2, [r7, #4]
 800aef4:	2301      	movs	r3, #1
 800aef6:	4629      	mov	r1, r5
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 f9e3 	bl	800b2c4 <arm_radix8_butterfly_f32>
 800aefe:	f1b9 0f00 	cmp.w	r9, #0
 800af02:	d0ea      	beq.n	800aeda <arm_cfft_f32+0x32>
 800af04:	68ba      	ldr	r2, [r7, #8]
 800af06:	89b9      	ldrh	r1, [r7, #12]
 800af08:	4620      	mov	r0, r4
 800af0a:	f000 f845 	bl	800af98 <arm_bitreversal_32>
 800af0e:	f1b8 0f01 	cmp.w	r8, #1
 800af12:	d1e5      	bne.n	800aee0 <arm_cfft_f32+0x38>
 800af14:	ee07 5a90 	vmov	s15, r5
 800af18:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800af1c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800af20:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800af24:	2d00      	cmp	r5, #0
 800af26:	d0db      	beq.n	800aee0 <arm_cfft_f32+0x38>
 800af28:	f104 0108 	add.w	r1, r4, #8
 800af2c:	2300      	movs	r3, #0
 800af2e:	3301      	adds	r3, #1
 800af30:	429d      	cmp	r5, r3
 800af32:	f101 0108 	add.w	r1, r1, #8
 800af36:	ed11 7a04 	vldr	s14, [r1, #-16]
 800af3a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800af3e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800af42:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800af46:	ed01 7a04 	vstr	s14, [r1, #-16]
 800af4a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800af4e:	d1ee      	bne.n	800af2e <arm_cfft_f32+0x86>
 800af50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800af54:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800af58:	d0cb      	beq.n	800aef2 <arm_cfft_f32+0x4a>
 800af5a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800af5e:	d0b5      	beq.n	800aecc <arm_cfft_f32+0x24>
 800af60:	e7b8      	b.n	800aed4 <arm_cfft_f32+0x2c>
 800af62:	2d10      	cmp	r5, #16
 800af64:	d0b2      	beq.n	800aecc <arm_cfft_f32+0x24>
 800af66:	2d20      	cmp	r5, #32
 800af68:	d1b4      	bne.n	800aed4 <arm_cfft_f32+0x2c>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4638      	mov	r0, r7
 800af6e:	f7ff fd45 	bl	800a9fc <arm_cfft_radix8by4_f32>
 800af72:	e7af      	b.n	800aed4 <arm_cfft_f32+0x2c>
 800af74:	b16d      	cbz	r5, 800af92 <arm_cfft_f32+0xea>
 800af76:	310c      	adds	r1, #12
 800af78:	2600      	movs	r6, #0
 800af7a:	ed51 7a02 	vldr	s15, [r1, #-8]
 800af7e:	3601      	adds	r6, #1
 800af80:	eef1 7a67 	vneg.f32	s15, s15
 800af84:	42b5      	cmp	r5, r6
 800af86:	ed41 7a02 	vstr	s15, [r1, #-8]
 800af8a:	f101 0108 	add.w	r1, r1, #8
 800af8e:	d1f4      	bne.n	800af7a <arm_cfft_f32+0xd2>
 800af90:	e793      	b.n	800aeba <arm_cfft_f32+0x12>
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0a4      	beq.n	800aee0 <arm_cfft_f32+0x38>
 800af96:	e7b5      	b.n	800af04 <arm_cfft_f32+0x5c>

0800af98 <arm_bitreversal_32>:
 800af98:	b1e9      	cbz	r1, 800afd6 <arm_bitreversal_32+0x3e>
 800af9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800af9c:	2500      	movs	r5, #0
 800af9e:	f102 0e02 	add.w	lr, r2, #2
 800afa2:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800afa6:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800afaa:	08a4      	lsrs	r4, r4, #2
 800afac:	089b      	lsrs	r3, r3, #2
 800afae:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800afb2:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800afb6:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800afba:	00a6      	lsls	r6, r4, #2
 800afbc:	009b      	lsls	r3, r3, #2
 800afbe:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800afc2:	3304      	adds	r3, #4
 800afc4:	1d34      	adds	r4, r6, #4
 800afc6:	3502      	adds	r5, #2
 800afc8:	58c6      	ldr	r6, [r0, r3]
 800afca:	5907      	ldr	r7, [r0, r4]
 800afcc:	50c7      	str	r7, [r0, r3]
 800afce:	428d      	cmp	r5, r1
 800afd0:	5106      	str	r6, [r0, r4]
 800afd2:	d3e6      	bcc.n	800afa2 <arm_bitreversal_32+0xa>
 800afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd6:	4770      	bx	lr

0800afd8 <arm_cmplx_mag_f32>:
 800afd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800afdc:	ed2d 8b02 	vpush	{d8}
 800afe0:	0897      	lsrs	r7, r2, #2
 800afe2:	b084      	sub	sp, #16
 800afe4:	d077      	beq.n	800b0d6 <arm_cmplx_mag_f32+0xfe>
 800afe6:	f04f 0800 	mov.w	r8, #0
 800afea:	f100 0420 	add.w	r4, r0, #32
 800afee:	f101 0510 	add.w	r5, r1, #16
 800aff2:	463e      	mov	r6, r7
 800aff4:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800aff8:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800affc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b000:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b004:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b008:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b00c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b010:	f2c0 80c5 	blt.w	800b19e <arm_cmplx_mag_f32+0x1c6>
 800b014:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b018:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b01c:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b020:	f100 80cb 	bmi.w	800b1ba <arm_cmplx_mag_f32+0x1e2>
 800b024:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b028:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b02c:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b030:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b034:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b038:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b03c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b044:	f2c0 80a8 	blt.w	800b198 <arm_cmplx_mag_f32+0x1c0>
 800b048:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b04c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b050:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b054:	f100 80a8 	bmi.w	800b1a8 <arm_cmplx_mag_f32+0x1d0>
 800b058:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b05c:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b060:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b064:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b068:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b06c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b070:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b078:	f2c0 808b 	blt.w	800b192 <arm_cmplx_mag_f32+0x1ba>
 800b07c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b084:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b088:	f100 80a9 	bmi.w	800b1de <arm_cmplx_mag_f32+0x206>
 800b08c:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b090:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b094:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b098:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b09c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0a0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0a4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0ac:	db6e      	blt.n	800b18c <arm_cmplx_mag_f32+0x1b4>
 800b0ae:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0b6:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b0ba:	f100 8087 	bmi.w	800b1cc <arm_cmplx_mag_f32+0x1f4>
 800b0be:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b0c2:	3e01      	subs	r6, #1
 800b0c4:	f104 0420 	add.w	r4, r4, #32
 800b0c8:	f105 0510 	add.w	r5, r5, #16
 800b0cc:	d192      	bne.n	800aff4 <arm_cmplx_mag_f32+0x1c>
 800b0ce:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b0d2:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b0d6:	f012 0203 	ands.w	r2, r2, #3
 800b0da:	d052      	beq.n	800b182 <arm_cmplx_mag_f32+0x1aa>
 800b0dc:	ed90 0a00 	vldr	s0, [r0]
 800b0e0:	edd0 7a01 	vldr	s15, [r0, #4]
 800b0e4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b0e8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b0f2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0fa:	bfb8      	it	lt
 800b0fc:	600b      	strlt	r3, [r1, #0]
 800b0fe:	db08      	blt.n	800b112 <arm_cmplx_mag_f32+0x13a>
 800b100:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b104:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b108:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b10c:	d479      	bmi.n	800b202 <arm_cmplx_mag_f32+0x22a>
 800b10e:	ed81 8a00 	vstr	s16, [r1]
 800b112:	3a01      	subs	r2, #1
 800b114:	d035      	beq.n	800b182 <arm_cmplx_mag_f32+0x1aa>
 800b116:	ed90 0a02 	vldr	s0, [r0, #8]
 800b11a:	edd0 7a03 	vldr	s15, [r0, #12]
 800b11e:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b122:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b126:	2300      	movs	r3, #0
 800b128:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b12c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b134:	bfb8      	it	lt
 800b136:	604b      	strlt	r3, [r1, #4]
 800b138:	db08      	blt.n	800b14c <arm_cmplx_mag_f32+0x174>
 800b13a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b13e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b142:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b146:	d453      	bmi.n	800b1f0 <arm_cmplx_mag_f32+0x218>
 800b148:	ed81 8a01 	vstr	s16, [r1, #4]
 800b14c:	2a01      	cmp	r2, #1
 800b14e:	d018      	beq.n	800b182 <arm_cmplx_mag_f32+0x1aa>
 800b150:	ed90 0a04 	vldr	s0, [r0, #16]
 800b154:	edd0 7a05 	vldr	s15, [r0, #20]
 800b158:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b15c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b160:	2300      	movs	r3, #0
 800b162:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b166:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b16a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b16e:	db19      	blt.n	800b1a4 <arm_cmplx_mag_f32+0x1cc>
 800b170:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b178:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b17c:	d44a      	bmi.n	800b214 <arm_cmplx_mag_f32+0x23c>
 800b17e:	ed81 8a02 	vstr	s16, [r1, #8]
 800b182:	b004      	add	sp, #16
 800b184:	ecbd 8b02 	vpop	{d8}
 800b188:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b18c:	f845 8c04 	str.w	r8, [r5, #-4]
 800b190:	e797      	b.n	800b0c2 <arm_cmplx_mag_f32+0xea>
 800b192:	f845 8c08 	str.w	r8, [r5, #-8]
 800b196:	e77b      	b.n	800b090 <arm_cmplx_mag_f32+0xb8>
 800b198:	f845 8c0c 	str.w	r8, [r5, #-12]
 800b19c:	e75e      	b.n	800b05c <arm_cmplx_mag_f32+0x84>
 800b19e:	f845 8c10 	str.w	r8, [r5, #-16]
 800b1a2:	e741      	b.n	800b028 <arm_cmplx_mag_f32+0x50>
 800b1a4:	608b      	str	r3, [r1, #8]
 800b1a6:	e7ec      	b.n	800b182 <arm_cmplx_mag_f32+0x1aa>
 800b1a8:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b1ac:	9001      	str	r0, [sp, #4]
 800b1ae:	f000 fcd1 	bl	800bb54 <sqrtf>
 800b1b2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b1b6:	9801      	ldr	r0, [sp, #4]
 800b1b8:	e74e      	b.n	800b058 <arm_cmplx_mag_f32+0x80>
 800b1ba:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b1be:	9001      	str	r0, [sp, #4]
 800b1c0:	f000 fcc8 	bl	800bb54 <sqrtf>
 800b1c4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b1c8:	9801      	ldr	r0, [sp, #4]
 800b1ca:	e72b      	b.n	800b024 <arm_cmplx_mag_f32+0x4c>
 800b1cc:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b1d0:	9001      	str	r0, [sp, #4]
 800b1d2:	f000 fcbf 	bl	800bb54 <sqrtf>
 800b1d6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b1da:	9801      	ldr	r0, [sp, #4]
 800b1dc:	e76f      	b.n	800b0be <arm_cmplx_mag_f32+0xe6>
 800b1de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800b1e2:	9001      	str	r0, [sp, #4]
 800b1e4:	f000 fcb6 	bl	800bb54 <sqrtf>
 800b1e8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800b1ec:	9801      	ldr	r0, [sp, #4]
 800b1ee:	e74d      	b.n	800b08c <arm_cmplx_mag_f32+0xb4>
 800b1f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1f4:	9201      	str	r2, [sp, #4]
 800b1f6:	f000 fcad 	bl	800bb54 <sqrtf>
 800b1fa:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b1fe:	9903      	ldr	r1, [sp, #12]
 800b200:	e7a2      	b.n	800b148 <arm_cmplx_mag_f32+0x170>
 800b202:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b206:	9201      	str	r2, [sp, #4]
 800b208:	f000 fca4 	bl	800bb54 <sqrtf>
 800b20c:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800b210:	9903      	ldr	r1, [sp, #12]
 800b212:	e77c      	b.n	800b10e <arm_cmplx_mag_f32+0x136>
 800b214:	9101      	str	r1, [sp, #4]
 800b216:	f000 fc9d 	bl	800bb54 <sqrtf>
 800b21a:	9901      	ldr	r1, [sp, #4]
 800b21c:	e7af      	b.n	800b17e <arm_cmplx_mag_f32+0x1a6>
 800b21e:	bf00      	nop

0800b220 <arm_cfft_init_f32>:
 800b220:	4603      	mov	r3, r0
 800b222:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800b226:	f04f 0000 	mov.w	r0, #0
 800b22a:	b410      	push	{r4}
 800b22c:	8019      	strh	r1, [r3, #0]
 800b22e:	6058      	str	r0, [r3, #4]
 800b230:	d033      	beq.n	800b29a <arm_cfft_init_f32+0x7a>
 800b232:	d918      	bls.n	800b266 <arm_cfft_init_f32+0x46>
 800b234:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800b238:	d027      	beq.n	800b28a <arm_cfft_init_f32+0x6a>
 800b23a:	d90c      	bls.n	800b256 <arm_cfft_init_f32+0x36>
 800b23c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800b240:	d11e      	bne.n	800b280 <arm_cfft_init_f32+0x60>
 800b242:	4a17      	ldr	r2, [pc, #92]	@ (800b2a0 <arm_cfft_init_f32+0x80>)
 800b244:	8994      	ldrh	r4, [r2, #12]
 800b246:	819c      	strh	r4, [r3, #12]
 800b248:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800b24c:	e9c3 2101 	strd	r2, r1, [r3, #4]
 800b250:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b254:	4770      	bx	lr
 800b256:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800b25a:	d018      	beq.n	800b28e <arm_cfft_init_f32+0x6e>
 800b25c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800b260:	d10e      	bne.n	800b280 <arm_cfft_init_f32+0x60>
 800b262:	4a10      	ldr	r2, [pc, #64]	@ (800b2a4 <arm_cfft_init_f32+0x84>)
 800b264:	e7ee      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b266:	2940      	cmp	r1, #64	@ 0x40
 800b268:	d013      	beq.n	800b292 <arm_cfft_init_f32+0x72>
 800b26a:	d903      	bls.n	800b274 <arm_cfft_init_f32+0x54>
 800b26c:	2980      	cmp	r1, #128	@ 0x80
 800b26e:	d107      	bne.n	800b280 <arm_cfft_init_f32+0x60>
 800b270:	4a0d      	ldr	r2, [pc, #52]	@ (800b2a8 <arm_cfft_init_f32+0x88>)
 800b272:	e7e7      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b274:	2910      	cmp	r1, #16
 800b276:	d00e      	beq.n	800b296 <arm_cfft_init_f32+0x76>
 800b278:	2920      	cmp	r1, #32
 800b27a:	d101      	bne.n	800b280 <arm_cfft_init_f32+0x60>
 800b27c:	4a0b      	ldr	r2, [pc, #44]	@ (800b2ac <arm_cfft_init_f32+0x8c>)
 800b27e:	e7e1      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b280:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b284:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b288:	4770      	bx	lr
 800b28a:	4a09      	ldr	r2, [pc, #36]	@ (800b2b0 <arm_cfft_init_f32+0x90>)
 800b28c:	e7da      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b28e:	4a09      	ldr	r2, [pc, #36]	@ (800b2b4 <arm_cfft_init_f32+0x94>)
 800b290:	e7d8      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b292:	4a09      	ldr	r2, [pc, #36]	@ (800b2b8 <arm_cfft_init_f32+0x98>)
 800b294:	e7d6      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b296:	4a09      	ldr	r2, [pc, #36]	@ (800b2bc <arm_cfft_init_f32+0x9c>)
 800b298:	e7d4      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b29a:	4a09      	ldr	r2, [pc, #36]	@ (800b2c0 <arm_cfft_init_f32+0xa0>)
 800b29c:	e7d2      	b.n	800b244 <arm_cfft_init_f32+0x24>
 800b29e:	bf00      	nop
 800b2a0:	0802a504 	.word	0x0802a504
 800b2a4:	0802a4a4 	.word	0x0802a4a4
 800b2a8:	0802a4b4 	.word	0x0802a4b4
 800b2ac:	0802a4f4 	.word	0x0802a4f4
 800b2b0:	0802a4d4 	.word	0x0802a4d4
 800b2b4:	0802a514 	.word	0x0802a514
 800b2b8:	0802a524 	.word	0x0802a524
 800b2bc:	0802a4c4 	.word	0x0802a4c4
 800b2c0:	0802a4e4 	.word	0x0802a4e4

0800b2c4 <arm_radix8_butterfly_f32>:
 800b2c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2c8:	ed2d 8b10 	vpush	{d8-d15}
 800b2cc:	b093      	sub	sp, #76	@ 0x4c
 800b2ce:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800b2d2:	4603      	mov	r3, r0
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	ed9f bac0 	vldr	s22, [pc, #768]	@ 800b5d8 <arm_radix8_butterfly_f32+0x314>
 800b2da:	9010      	str	r0, [sp, #64]	@ 0x40
 800b2dc:	468b      	mov	fp, r1
 800b2de:	9311      	str	r3, [sp, #68]	@ 0x44
 800b2e0:	4689      	mov	r9, r1
 800b2e2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800b2e4:	ea4f 05db 	mov.w	r5, fp, lsr #3
 800b2e8:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800b2ec:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 800b2f0:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800b2f4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800b2f8:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800b2fc:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 800b300:	9100      	str	r1, [sp, #0]
 800b302:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800b306:	f108 0004 	add.w	r0, r8, #4
 800b30a:	f10e 0104 	add.w	r1, lr, #4
 800b30e:	462e      	mov	r6, r5
 800b310:	4420      	add	r0, r4
 800b312:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b316:	4421      	add	r1, r4
 800b318:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 800b31c:	960d      	str	r6, [sp, #52]	@ 0x34
 800b31e:	9402      	str	r4, [sp, #8]
 800b320:	012c      	lsls	r4, r5, #4
 800b322:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800b326:	9403      	str	r4, [sp, #12]
 800b328:	00ec      	lsls	r4, r5, #3
 800b32a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800b32c:	9404      	str	r4, [sp, #16]
 800b32e:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800b332:	9405      	str	r4, [sp, #20]
 800b334:	016c      	lsls	r4, r5, #5
 800b336:	9401      	str	r4, [sp, #4]
 800b338:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800b33a:	9c00      	ldr	r4, [sp, #0]
 800b33c:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 800b340:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800b344:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800b348:	f04f 0c00 	mov.w	ip, #0
 800b34c:	edd6 6a00 	vldr	s13, [r6]
 800b350:	edd7 1a00 	vldr	s3, [r7]
 800b354:	ed15 aa01 	vldr	s20, [r5, #-4]
 800b358:	edd2 5a00 	vldr	s11, [r2]
 800b35c:	ed51 9a01 	vldr	s19, [r1, #-4]
 800b360:	ed94 6a00 	vldr	s12, [r4]
 800b364:	ed50 7a01 	vldr	s15, [r0, #-4]
 800b368:	ed93 3a00 	vldr	s6, [r3]
 800b36c:	ee39 0a86 	vadd.f32	s0, s19, s12
 800b370:	ee33 2a21 	vadd.f32	s4, s6, s3
 800b374:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800b378:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800b37c:	ee35 7a02 	vadd.f32	s14, s10, s4
 800b380:	ee34 4a80 	vadd.f32	s8, s9, s0
 800b384:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b388:	ee74 6a07 	vadd.f32	s13, s8, s14
 800b38c:	ee34 4a47 	vsub.f32	s8, s8, s14
 800b390:	ed45 6a01 	vstr	s13, [r5, #-4]
 800b394:	ed82 4a00 	vstr	s8, [r2]
 800b398:	edd0 6a00 	vldr	s13, [r0]
 800b39c:	ed96 9a01 	vldr	s18, [r6, #4]
 800b3a0:	edd3 2a01 	vldr	s5, [r3, #4]
 800b3a4:	edd7 8a01 	vldr	s17, [r7, #4]
 800b3a8:	edd5 0a00 	vldr	s1, [r5]
 800b3ac:	edd2 3a01 	vldr	s7, [r2, #4]
 800b3b0:	ed94 8a01 	vldr	s16, [r4, #4]
 800b3b4:	ed91 7a00 	vldr	s14, [r1]
 800b3b8:	ee33 3a61 	vsub.f32	s6, s6, s3
 800b3bc:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800b3c0:	ee72 aae8 	vsub.f32	s21, s5, s17
 800b3c4:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800b3c8:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800b3cc:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b3d0:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800b3d4:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800b3d8:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800b3dc:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800b3e0:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800b3e4:	ee77 0a08 	vadd.f32	s1, s14, s16
 800b3e8:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800b3ec:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b3f0:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800b3f4:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800b3f8:	ee76 6a89 	vadd.f32	s13, s13, s18
 800b3fc:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800b400:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b404:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800b408:	ee35 5a42 	vsub.f32	s10, s10, s4
 800b40c:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800b410:	ee33 2a20 	vadd.f32	s4, s6, s1
 800b414:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800b418:	ee33 3a60 	vsub.f32	s6, s6, s1
 800b41c:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800b420:	ee77 0a01 	vadd.f32	s1, s14, s2
 800b424:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800b428:	ee37 7a41 	vsub.f32	s14, s14, s2
 800b42c:	ee73 1a84 	vadd.f32	s3, s7, s8
 800b430:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800b434:	ee76 3a27 	vadd.f32	s7, s12, s15
 800b438:	ee76 7a67 	vsub.f32	s15, s12, s15
 800b43c:	ee32 8a00 	vadd.f32	s16, s4, s0
 800b440:	ee33 1a45 	vsub.f32	s2, s6, s10
 800b444:	ee32 2a40 	vsub.f32	s4, s4, s0
 800b448:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b44c:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800b450:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800b454:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800b458:	ee34 6a67 	vsub.f32	s12, s8, s15
 800b45c:	ee75 4a87 	vadd.f32	s9, s11, s14
 800b460:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800b464:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800b468:	ee77 7a84 	vadd.f32	s15, s15, s8
 800b46c:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800b470:	44dc      	add	ip, fp
 800b472:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b476:	45e1      	cmp	r9, ip
 800b478:	ed85 8a00 	vstr	s16, [r5]
 800b47c:	ed82 2a01 	vstr	s4, [r2, #4]
 800b480:	4455      	add	r5, sl
 800b482:	ed01 0a01 	vstr	s0, [r1, #-4]
 800b486:	4452      	add	r2, sl
 800b488:	edc4 6a00 	vstr	s13, [r4]
 800b48c:	ed81 1a00 	vstr	s2, [r1]
 800b490:	ed84 5a01 	vstr	s10, [r4, #4]
 800b494:	4451      	add	r1, sl
 800b496:	ed00 3a01 	vstr	s6, [r0, #-4]
 800b49a:	4454      	add	r4, sl
 800b49c:	edc7 2a00 	vstr	s5, [r7]
 800b4a0:	edc6 4a00 	vstr	s9, [r6]
 800b4a4:	ed83 7a00 	vstr	s14, [r3]
 800b4a8:	edc0 5a00 	vstr	s11, [r0]
 800b4ac:	edc7 3a01 	vstr	s7, [r7, #4]
 800b4b0:	4450      	add	r0, sl
 800b4b2:	ed86 6a01 	vstr	s12, [r6, #4]
 800b4b6:	4457      	add	r7, sl
 800b4b8:	edc3 7a01 	vstr	s15, [r3, #4]
 800b4bc:	4456      	add	r6, sl
 800b4be:	4453      	add	r3, sl
 800b4c0:	f63f af44 	bhi.w	800b34c <arm_radix8_butterfly_f32+0x88>
 800b4c4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b4c6:	2b07      	cmp	r3, #7
 800b4c8:	f240 81c3 	bls.w	800b852 <arm_radix8_butterfly_f32+0x58e>
 800b4cc:	9805      	ldr	r0, [sp, #20]
 800b4ce:	9a01      	ldr	r2, [sp, #4]
 800b4d0:	9b03      	ldr	r3, [sp, #12]
 800b4d2:	9d04      	ldr	r5, [sp, #16]
 800b4d4:	9902      	ldr	r1, [sp, #8]
 800b4d6:	f100 0c08 	add.w	ip, r0, #8
 800b4da:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800b4dc:	3208      	adds	r2, #8
 800b4de:	1882      	adds	r2, r0, r2
 800b4e0:	3308      	adds	r3, #8
 800b4e2:	920a      	str	r2, [sp, #40]	@ 0x28
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	18d3      	adds	r3, r2, r3
 800b4e8:	3108      	adds	r1, #8
 800b4ea:	3508      	adds	r5, #8
 800b4ec:	1851      	adds	r1, r2, r1
 800b4ee:	9307      	str	r3, [sp, #28]
 800b4f0:	4613      	mov	r3, r2
 800b4f2:	442a      	add	r2, r5
 800b4f4:	9206      	str	r2, [sp, #24]
 800b4f6:	461a      	mov	r2, r3
 800b4f8:	4462      	add	r2, ip
 800b4fa:	f10e 0e0c 	add.w	lr, lr, #12
 800b4fe:	9205      	str	r2, [sp, #20]
 800b500:	461a      	mov	r2, r3
 800b502:	4472      	add	r2, lr
 800b504:	f108 0808 	add.w	r8, r8, #8
 800b508:	330c      	adds	r3, #12
 800b50a:	4440      	add	r0, r8
 800b50c:	f04f 0e00 	mov.w	lr, #0
 800b510:	9203      	str	r2, [sp, #12]
 800b512:	9304      	str	r3, [sp, #16]
 800b514:	465a      	mov	r2, fp
 800b516:	464b      	mov	r3, r9
 800b518:	46f3      	mov	fp, lr
 800b51a:	46d1      	mov	r9, sl
 800b51c:	9009      	str	r0, [sp, #36]	@ 0x24
 800b51e:	9108      	str	r1, [sp, #32]
 800b520:	f04f 0801 	mov.w	r8, #1
 800b524:	469a      	mov	sl, r3
 800b526:	4696      	mov	lr, r2
 800b528:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b52a:	449b      	add	fp, r3
 800b52c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b52e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b532:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800b536:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 800b53a:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 800b53e:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800b542:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 800b546:	930c      	str	r3, [sp, #48]	@ 0x30
 800b548:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 800b54c:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 800b550:	920b      	str	r2, [sp, #44]	@ 0x2c
 800b552:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 800b556:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 800b55a:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 800b55e:	9202      	str	r2, [sp, #8]
 800b560:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800b564:	9301      	str	r3, [sp, #4]
 800b566:	4613      	mov	r3, r2
 800b568:	edd3 da01 	vldr	s27, [r3, #4]
 800b56c:	9b01      	ldr	r3, [sp, #4]
 800b56e:	edd0 7a00 	vldr	s15, [r0]
 800b572:	ed93 da01 	vldr	s26, [r3, #4]
 800b576:	9b02      	ldr	r3, [sp, #8]
 800b578:	edcd 7a02 	vstr	s15, [sp, #8]
 800b57c:	ed93 ca01 	vldr	s24, [r3, #4]
 800b580:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b582:	eddc ca01 	vldr	s25, [ip, #4]
 800b586:	edd3 7a00 	vldr	s15, [r3]
 800b58a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b58c:	edcd 7a01 	vstr	s15, [sp, #4]
 800b590:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800b594:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 800b598:	9200      	str	r2, [sp, #0]
 800b59a:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 800b59e:	edd3 7a00 	vldr	s15, [r3]
 800b5a2:	ed92 fa01 	vldr	s30, [r2, #4]
 800b5a6:	9a00      	ldr	r2, [sp, #0]
 800b5a8:	edd1 ea01 	vldr	s29, [r1, #4]
 800b5ac:	ed92 ea01 	vldr	s28, [r2, #4]
 800b5b0:	edd7 ba00 	vldr	s23, [r7]
 800b5b4:	edd6 aa00 	vldr	s21, [r6]
 800b5b8:	ed95 aa00 	vldr	s20, [r5]
 800b5bc:	edd4 9a00 	vldr	s19, [r4]
 800b5c0:	edcd 7a00 	vstr	s15, [sp]
 800b5c4:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 800b5c8:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 800b5cc:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800b5d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800b5d4:	46c4      	mov	ip, r8
 800b5d6:	e001      	b.n	800b5dc <arm_radix8_butterfly_f32+0x318>
 800b5d8:	3f3504f3 	.word	0x3f3504f3
 800b5dc:	ed91 6a00 	vldr	s12, [r1]
 800b5e0:	ed93 5a00 	vldr	s10, [r3]
 800b5e4:	edd0 fa00 	vldr	s31, [r0]
 800b5e8:	edd4 7a00 	vldr	s15, [r4]
 800b5ec:	ed95 7a00 	vldr	s14, [r5]
 800b5f0:	ed56 3a01 	vldr	s7, [r6, #-4]
 800b5f4:	ed17 3a01 	vldr	s6, [r7, #-4]
 800b5f8:	ed92 2a00 	vldr	s4, [r2]
 800b5fc:	ed96 0a00 	vldr	s0, [r6]
 800b600:	ee33 8a85 	vadd.f32	s16, s7, s10
 800b604:	ee32 1a06 	vadd.f32	s2, s4, s12
 800b608:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800b60c:	ee77 4a87 	vadd.f32	s9, s15, s14
 800b610:	ee78 1a04 	vadd.f32	s3, s16, s8
 800b614:	ee71 6a24 	vadd.f32	s13, s2, s9
 800b618:	ee32 2a46 	vsub.f32	s4, s4, s12
 800b61c:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800b620:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b624:	ed06 6a01 	vstr	s12, [r6, #-4]
 800b628:	edd4 8a01 	vldr	s17, [r4, #4]
 800b62c:	ed92 9a01 	vldr	s18, [r2, #4]
 800b630:	edd7 0a00 	vldr	s1, [r7]
 800b634:	edd1 2a01 	vldr	s5, [r1, #4]
 800b638:	ed95 7a01 	vldr	s14, [r5, #4]
 800b63c:	ed93 6a01 	vldr	s12, [r3, #4]
 800b640:	edd0 5a01 	vldr	s11, [r0, #4]
 800b644:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800b648:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800b64c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800b650:	ee78 fac7 	vsub.f32	s31, s17, s14
 800b654:	ee38 4a44 	vsub.f32	s8, s16, s8
 800b658:	ee38 7a87 	vadd.f32	s14, s17, s14
 800b65c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800b660:	ee79 2a22 	vadd.f32	s5, s18, s5
 800b664:	ee32 9a27 	vadd.f32	s18, s4, s15
 800b668:	ee72 7a67 	vsub.f32	s15, s4, s15
 800b66c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800b670:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800b674:	ee71 4a64 	vsub.f32	s9, s2, s9
 800b678:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800b67c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800b680:	ee72 fa87 	vadd.f32	s31, s5, s14
 800b684:	ee32 2a48 	vsub.f32	s4, s4, s16
 800b688:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800b68c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800b690:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800b694:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800b698:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800b69c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800b6a0:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800b6a4:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800b6a8:	ee30 6a46 	vsub.f32	s12, s0, s12
 800b6ac:	ee74 0a22 	vadd.f32	s1, s8, s5
 800b6b0:	ee36 0a28 	vadd.f32	s0, s12, s17
 800b6b4:	ee74 2a62 	vsub.f32	s5, s8, s5
 800b6b8:	ee36 6a68 	vsub.f32	s12, s12, s17
 800b6bc:	ee32 4a64 	vsub.f32	s8, s4, s9
 800b6c0:	ee73 8a09 	vadd.f32	s17, s6, s18
 800b6c4:	ee74 4a82 	vadd.f32	s9, s9, s4
 800b6c8:	ee33 9a49 	vsub.f32	s18, s6, s18
 800b6cc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800b6d0:	ee35 3a85 	vadd.f32	s6, s11, s10
 800b6d4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800b6d8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800b6dc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800b6e0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800b6e4:	ee30 7a68 	vsub.f32	s14, s0, s17
 800b6e8:	ee35 8a03 	vadd.f32	s16, s10, s6
 800b6ec:	ee38 0a80 	vadd.f32	s0, s17, s0
 800b6f0:	ee73 3a82 	vadd.f32	s7, s7, s4
 800b6f4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800b6f8:	ed9d 2a00 	vldr	s4, [sp]
 800b6fc:	eddd 1a01 	vldr	s3, [sp, #4]
 800b700:	ee35 5a43 	vsub.f32	s10, s10, s6
 800b704:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800b708:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800b70c:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800b710:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b714:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800b718:	ee76 5a49 	vsub.f32	s11, s12, s18
 800b71c:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800b720:	ee39 6a06 	vadd.f32	s12, s18, s12
 800b724:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800b728:	ee21 4a84 	vmul.f32	s8, s3, s8
 800b72c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800b730:	ee22 7a07 	vmul.f32	s14, s4, s14
 800b734:	ee22 2a08 	vmul.f32	s4, s4, s16
 800b738:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800b73c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800b740:	ee31 1a09 	vadd.f32	s2, s2, s18
 800b744:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800b748:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800b74c:	ee74 0a60 	vsub.f32	s1, s8, s1
 800b750:	ee37 7a48 	vsub.f32	s14, s14, s16
 800b754:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800b758:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800b75c:	ee72 1a21 	vadd.f32	s3, s4, s3
 800b760:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800b764:	ee38 2a89 	vadd.f32	s4, s17, s18
 800b768:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800b76c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800b770:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800b774:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800b778:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800b77c:	eddd 5a02 	vldr	s11, [sp, #8]
 800b780:	edc6 fa00 	vstr	s31, [r6]
 800b784:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800b788:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800b78c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800b790:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800b794:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800b798:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800b79c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800b7a0:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800b7a4:	ee25 6a86 	vmul.f32	s12, s11, s12
 800b7a8:	ee74 4a89 	vadd.f32	s9, s9, s18
 800b7ac:	ee34 3a43 	vsub.f32	s6, s8, s6
 800b7b0:	ee78 8a85 	vadd.f32	s17, s17, s10
 800b7b4:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b7b8:	44f4      	add	ip, lr
 800b7ba:	45e2      	cmp	sl, ip
 800b7bc:	edc3 3a00 	vstr	s7, [r3]
 800b7c0:	edc3 6a01 	vstr	s13, [r3, #4]
 800b7c4:	444e      	add	r6, r9
 800b7c6:	ed07 1a01 	vstr	s2, [r7, #-4]
 800b7ca:	edc7 0a00 	vstr	s1, [r7]
 800b7ce:	444b      	add	r3, r9
 800b7d0:	ed80 2a00 	vstr	s4, [r0]
 800b7d4:	edc0 2a01 	vstr	s5, [r0, #4]
 800b7d8:	444f      	add	r7, r9
 800b7da:	edc2 1a00 	vstr	s3, [r2]
 800b7de:	ed82 7a01 	vstr	s14, [r2, #4]
 800b7e2:	4448      	add	r0, r9
 800b7e4:	ed85 8a00 	vstr	s16, [r5]
 800b7e8:	ed85 0a01 	vstr	s0, [r5, #4]
 800b7ec:	444a      	add	r2, r9
 800b7ee:	edc1 4a00 	vstr	s9, [r1]
 800b7f2:	444d      	add	r5, r9
 800b7f4:	ed81 3a01 	vstr	s6, [r1, #4]
 800b7f8:	edc4 8a00 	vstr	s17, [r4]
 800b7fc:	ed84 6a01 	vstr	s12, [r4, #4]
 800b800:	4449      	add	r1, r9
 800b802:	444c      	add	r4, r9
 800b804:	f63f aeea 	bhi.w	800b5dc <arm_radix8_butterfly_f32+0x318>
 800b808:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b80a:	3308      	adds	r3, #8
 800b80c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b80e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b810:	3308      	adds	r3, #8
 800b812:	9309      	str	r3, [sp, #36]	@ 0x24
 800b814:	9b08      	ldr	r3, [sp, #32]
 800b816:	3308      	adds	r3, #8
 800b818:	9308      	str	r3, [sp, #32]
 800b81a:	9b07      	ldr	r3, [sp, #28]
 800b81c:	3308      	adds	r3, #8
 800b81e:	9307      	str	r3, [sp, #28]
 800b820:	9b06      	ldr	r3, [sp, #24]
 800b822:	3308      	adds	r3, #8
 800b824:	9306      	str	r3, [sp, #24]
 800b826:	9b05      	ldr	r3, [sp, #20]
 800b828:	3308      	adds	r3, #8
 800b82a:	9305      	str	r3, [sp, #20]
 800b82c:	9b04      	ldr	r3, [sp, #16]
 800b82e:	3308      	adds	r3, #8
 800b830:	9304      	str	r3, [sp, #16]
 800b832:	9b03      	ldr	r3, [sp, #12]
 800b834:	3308      	adds	r3, #8
 800b836:	9303      	str	r3, [sp, #12]
 800b838:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b83a:	f108 0801 	add.w	r8, r8, #1
 800b83e:	4543      	cmp	r3, r8
 800b840:	f47f ae72 	bne.w	800b528 <arm_radix8_butterfly_f32+0x264>
 800b844:	469b      	mov	fp, r3
 800b846:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b848:	00db      	lsls	r3, r3, #3
 800b84a:	b29b      	uxth	r3, r3
 800b84c:	46d1      	mov	r9, sl
 800b84e:	930e      	str	r3, [sp, #56]	@ 0x38
 800b850:	e547      	b.n	800b2e2 <arm_radix8_butterfly_f32+0x1e>
 800b852:	b013      	add	sp, #76	@ 0x4c
 800b854:	ecbd 8b10 	vpop	{d8-d15}
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b85c <memset>:
 800b85c:	4402      	add	r2, r0
 800b85e:	4603      	mov	r3, r0
 800b860:	4293      	cmp	r3, r2
 800b862:	d100      	bne.n	800b866 <memset+0xa>
 800b864:	4770      	bx	lr
 800b866:	f803 1b01 	strb.w	r1, [r3], #1
 800b86a:	e7f9      	b.n	800b860 <memset+0x4>

0800b86c <_reclaim_reent>:
 800b86c:	4b2d      	ldr	r3, [pc, #180]	@ (800b924 <_reclaim_reent+0xb8>)
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	4283      	cmp	r3, r0
 800b872:	b570      	push	{r4, r5, r6, lr}
 800b874:	4604      	mov	r4, r0
 800b876:	d053      	beq.n	800b920 <_reclaim_reent+0xb4>
 800b878:	69c3      	ldr	r3, [r0, #28]
 800b87a:	b31b      	cbz	r3, 800b8c4 <_reclaim_reent+0x58>
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	b163      	cbz	r3, 800b89a <_reclaim_reent+0x2e>
 800b880:	2500      	movs	r5, #0
 800b882:	69e3      	ldr	r3, [r4, #28]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	5959      	ldr	r1, [r3, r5]
 800b888:	b9b1      	cbnz	r1, 800b8b8 <_reclaim_reent+0x4c>
 800b88a:	3504      	adds	r5, #4
 800b88c:	2d80      	cmp	r5, #128	@ 0x80
 800b88e:	d1f8      	bne.n	800b882 <_reclaim_reent+0x16>
 800b890:	69e3      	ldr	r3, [r4, #28]
 800b892:	4620      	mov	r0, r4
 800b894:	68d9      	ldr	r1, [r3, #12]
 800b896:	f000 f881 	bl	800b99c <_free_r>
 800b89a:	69e3      	ldr	r3, [r4, #28]
 800b89c:	6819      	ldr	r1, [r3, #0]
 800b89e:	b111      	cbz	r1, 800b8a6 <_reclaim_reent+0x3a>
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 f87b 	bl	800b99c <_free_r>
 800b8a6:	69e3      	ldr	r3, [r4, #28]
 800b8a8:	689d      	ldr	r5, [r3, #8]
 800b8aa:	b15d      	cbz	r5, 800b8c4 <_reclaim_reent+0x58>
 800b8ac:	4629      	mov	r1, r5
 800b8ae:	4620      	mov	r0, r4
 800b8b0:	682d      	ldr	r5, [r5, #0]
 800b8b2:	f000 f873 	bl	800b99c <_free_r>
 800b8b6:	e7f8      	b.n	800b8aa <_reclaim_reent+0x3e>
 800b8b8:	680e      	ldr	r6, [r1, #0]
 800b8ba:	4620      	mov	r0, r4
 800b8bc:	f000 f86e 	bl	800b99c <_free_r>
 800b8c0:	4631      	mov	r1, r6
 800b8c2:	e7e1      	b.n	800b888 <_reclaim_reent+0x1c>
 800b8c4:	6961      	ldr	r1, [r4, #20]
 800b8c6:	b111      	cbz	r1, 800b8ce <_reclaim_reent+0x62>
 800b8c8:	4620      	mov	r0, r4
 800b8ca:	f000 f867 	bl	800b99c <_free_r>
 800b8ce:	69e1      	ldr	r1, [r4, #28]
 800b8d0:	b111      	cbz	r1, 800b8d8 <_reclaim_reent+0x6c>
 800b8d2:	4620      	mov	r0, r4
 800b8d4:	f000 f862 	bl	800b99c <_free_r>
 800b8d8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800b8da:	b111      	cbz	r1, 800b8e2 <_reclaim_reent+0x76>
 800b8dc:	4620      	mov	r0, r4
 800b8de:	f000 f85d 	bl	800b99c <_free_r>
 800b8e2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b8e4:	b111      	cbz	r1, 800b8ec <_reclaim_reent+0x80>
 800b8e6:	4620      	mov	r0, r4
 800b8e8:	f000 f858 	bl	800b99c <_free_r>
 800b8ec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800b8ee:	b111      	cbz	r1, 800b8f6 <_reclaim_reent+0x8a>
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	f000 f853 	bl	800b99c <_free_r>
 800b8f6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800b8f8:	b111      	cbz	r1, 800b900 <_reclaim_reent+0x94>
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 f84e 	bl	800b99c <_free_r>
 800b900:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800b902:	b111      	cbz	r1, 800b90a <_reclaim_reent+0x9e>
 800b904:	4620      	mov	r0, r4
 800b906:	f000 f849 	bl	800b99c <_free_r>
 800b90a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b90c:	b111      	cbz	r1, 800b914 <_reclaim_reent+0xa8>
 800b90e:	4620      	mov	r0, r4
 800b910:	f000 f844 	bl	800b99c <_free_r>
 800b914:	6a23      	ldr	r3, [r4, #32]
 800b916:	b11b      	cbz	r3, 800b920 <_reclaim_reent+0xb4>
 800b918:	4620      	mov	r0, r4
 800b91a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b91e:	4718      	bx	r3
 800b920:	bd70      	pop	{r4, r5, r6, pc}
 800b922:	bf00      	nop
 800b924:	20000410 	.word	0x20000410

0800b928 <__errno>:
 800b928:	4b01      	ldr	r3, [pc, #4]	@ (800b930 <__errno+0x8>)
 800b92a:	6818      	ldr	r0, [r3, #0]
 800b92c:	4770      	bx	lr
 800b92e:	bf00      	nop
 800b930:	20000410 	.word	0x20000410

0800b934 <__libc_init_array>:
 800b934:	b570      	push	{r4, r5, r6, lr}
 800b936:	4d0d      	ldr	r5, [pc, #52]	@ (800b96c <__libc_init_array+0x38>)
 800b938:	4c0d      	ldr	r4, [pc, #52]	@ (800b970 <__libc_init_array+0x3c>)
 800b93a:	1b64      	subs	r4, r4, r5
 800b93c:	10a4      	asrs	r4, r4, #2
 800b93e:	2600      	movs	r6, #0
 800b940:	42a6      	cmp	r6, r4
 800b942:	d109      	bne.n	800b958 <__libc_init_array+0x24>
 800b944:	4d0b      	ldr	r5, [pc, #44]	@ (800b974 <__libc_init_array+0x40>)
 800b946:	4c0c      	ldr	r4, [pc, #48]	@ (800b978 <__libc_init_array+0x44>)
 800b948:	f001 fac6 	bl	800ced8 <_init>
 800b94c:	1b64      	subs	r4, r4, r5
 800b94e:	10a4      	asrs	r4, r4, #2
 800b950:	2600      	movs	r6, #0
 800b952:	42a6      	cmp	r6, r4
 800b954:	d105      	bne.n	800b962 <__libc_init_array+0x2e>
 800b956:	bd70      	pop	{r4, r5, r6, pc}
 800b958:	f855 3b04 	ldr.w	r3, [r5], #4
 800b95c:	4798      	blx	r3
 800b95e:	3601      	adds	r6, #1
 800b960:	e7ee      	b.n	800b940 <__libc_init_array+0xc>
 800b962:	f855 3b04 	ldr.w	r3, [r5], #4
 800b966:	4798      	blx	r3
 800b968:	3601      	adds	r6, #1
 800b96a:	e7f2      	b.n	800b952 <__libc_init_array+0x1e>
 800b96c:	0802a928 	.word	0x0802a928
 800b970:	0802a928 	.word	0x0802a928
 800b974:	0802a928 	.word	0x0802a928
 800b978:	0802a92c 	.word	0x0802a92c

0800b97c <__retarget_lock_acquire_recursive>:
 800b97c:	4770      	bx	lr

0800b97e <__retarget_lock_release_recursive>:
 800b97e:	4770      	bx	lr

0800b980 <memcpy>:
 800b980:	440a      	add	r2, r1
 800b982:	4291      	cmp	r1, r2
 800b984:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800b988:	d100      	bne.n	800b98c <memcpy+0xc>
 800b98a:	4770      	bx	lr
 800b98c:	b510      	push	{r4, lr}
 800b98e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b992:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b996:	4291      	cmp	r1, r2
 800b998:	d1f9      	bne.n	800b98e <memcpy+0xe>
 800b99a:	bd10      	pop	{r4, pc}

0800b99c <_free_r>:
 800b99c:	b538      	push	{r3, r4, r5, lr}
 800b99e:	4605      	mov	r5, r0
 800b9a0:	2900      	cmp	r1, #0
 800b9a2:	d041      	beq.n	800ba28 <_free_r+0x8c>
 800b9a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b9a8:	1f0c      	subs	r4, r1, #4
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	bfb8      	it	lt
 800b9ae:	18e4      	addlt	r4, r4, r3
 800b9b0:	f000 f83e 	bl	800ba30 <__malloc_lock>
 800b9b4:	4a1d      	ldr	r2, [pc, #116]	@ (800ba2c <_free_r+0x90>)
 800b9b6:	6813      	ldr	r3, [r2, #0]
 800b9b8:	b933      	cbnz	r3, 800b9c8 <_free_r+0x2c>
 800b9ba:	6063      	str	r3, [r4, #4]
 800b9bc:	6014      	str	r4, [r2, #0]
 800b9be:	4628      	mov	r0, r5
 800b9c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b9c4:	f000 b83a 	b.w	800ba3c <__malloc_unlock>
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	d908      	bls.n	800b9de <_free_r+0x42>
 800b9cc:	6820      	ldr	r0, [r4, #0]
 800b9ce:	1821      	adds	r1, r4, r0
 800b9d0:	428b      	cmp	r3, r1
 800b9d2:	bf01      	itttt	eq
 800b9d4:	6819      	ldreq	r1, [r3, #0]
 800b9d6:	685b      	ldreq	r3, [r3, #4]
 800b9d8:	1809      	addeq	r1, r1, r0
 800b9da:	6021      	streq	r1, [r4, #0]
 800b9dc:	e7ed      	b.n	800b9ba <_free_r+0x1e>
 800b9de:	461a      	mov	r2, r3
 800b9e0:	685b      	ldr	r3, [r3, #4]
 800b9e2:	b10b      	cbz	r3, 800b9e8 <_free_r+0x4c>
 800b9e4:	42a3      	cmp	r3, r4
 800b9e6:	d9fa      	bls.n	800b9de <_free_r+0x42>
 800b9e8:	6811      	ldr	r1, [r2, #0]
 800b9ea:	1850      	adds	r0, r2, r1
 800b9ec:	42a0      	cmp	r0, r4
 800b9ee:	d10b      	bne.n	800ba08 <_free_r+0x6c>
 800b9f0:	6820      	ldr	r0, [r4, #0]
 800b9f2:	4401      	add	r1, r0
 800b9f4:	1850      	adds	r0, r2, r1
 800b9f6:	4283      	cmp	r3, r0
 800b9f8:	6011      	str	r1, [r2, #0]
 800b9fa:	d1e0      	bne.n	800b9be <_free_r+0x22>
 800b9fc:	6818      	ldr	r0, [r3, #0]
 800b9fe:	685b      	ldr	r3, [r3, #4]
 800ba00:	6053      	str	r3, [r2, #4]
 800ba02:	4408      	add	r0, r1
 800ba04:	6010      	str	r0, [r2, #0]
 800ba06:	e7da      	b.n	800b9be <_free_r+0x22>
 800ba08:	d902      	bls.n	800ba10 <_free_r+0x74>
 800ba0a:	230c      	movs	r3, #12
 800ba0c:	602b      	str	r3, [r5, #0]
 800ba0e:	e7d6      	b.n	800b9be <_free_r+0x22>
 800ba10:	6820      	ldr	r0, [r4, #0]
 800ba12:	1821      	adds	r1, r4, r0
 800ba14:	428b      	cmp	r3, r1
 800ba16:	bf04      	itt	eq
 800ba18:	6819      	ldreq	r1, [r3, #0]
 800ba1a:	685b      	ldreq	r3, [r3, #4]
 800ba1c:	6063      	str	r3, [r4, #4]
 800ba1e:	bf04      	itt	eq
 800ba20:	1809      	addeq	r1, r1, r0
 800ba22:	6021      	streq	r1, [r4, #0]
 800ba24:	6054      	str	r4, [r2, #4]
 800ba26:	e7ca      	b.n	800b9be <_free_r+0x22>
 800ba28:	bd38      	pop	{r3, r4, r5, pc}
 800ba2a:	bf00      	nop
 800ba2c:	2000aaac 	.word	0x2000aaac

0800ba30 <__malloc_lock>:
 800ba30:	4801      	ldr	r0, [pc, #4]	@ (800ba38 <__malloc_lock+0x8>)
 800ba32:	f7ff bfa3 	b.w	800b97c <__retarget_lock_acquire_recursive>
 800ba36:	bf00      	nop
 800ba38:	2000aaa8 	.word	0x2000aaa8

0800ba3c <__malloc_unlock>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	@ (800ba44 <__malloc_unlock+0x8>)
 800ba3e:	f7ff bf9e 	b.w	800b97e <__retarget_lock_release_recursive>
 800ba42:	bf00      	nop
 800ba44:	2000aaa8 	.word	0x2000aaa8

0800ba48 <log10f>:
 800ba48:	b508      	push	{r3, lr}
 800ba4a:	ed2d 8b02 	vpush	{d8}
 800ba4e:	eeb0 8a40 	vmov.f32	s16, s0
 800ba52:	f000 f9b9 	bl	800bdc8 <__ieee754_log10f>
 800ba56:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba5e:	d60f      	bvs.n	800ba80 <log10f+0x38>
 800ba60:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ba64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba68:	d80a      	bhi.n	800ba80 <log10f+0x38>
 800ba6a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ba6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba72:	d108      	bne.n	800ba86 <log10f+0x3e>
 800ba74:	f7ff ff58 	bl	800b928 <__errno>
 800ba78:	2322      	movs	r3, #34	@ 0x22
 800ba7a:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ba9c <log10f+0x54>
 800ba7e:	6003      	str	r3, [r0, #0]
 800ba80:	ecbd 8b02 	vpop	{d8}
 800ba84:	bd08      	pop	{r3, pc}
 800ba86:	f7ff ff4f 	bl	800b928 <__errno>
 800ba8a:	ecbd 8b02 	vpop	{d8}
 800ba8e:	2321      	movs	r3, #33	@ 0x21
 800ba90:	6003      	str	r3, [r0, #0]
 800ba92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ba96:	4802      	ldr	r0, [pc, #8]	@ (800baa0 <log10f+0x58>)
 800ba98:	f000 b8c8 	b.w	800bc2c <nanf>
 800ba9c:	ff800000 	.word	0xff800000
 800baa0:	0802a534 	.word	0x0802a534

0800baa4 <powf>:
 800baa4:	b508      	push	{r3, lr}
 800baa6:	ed2d 8b04 	vpush	{d8-d9}
 800baaa:	eeb0 8a60 	vmov.f32	s16, s1
 800baae:	eeb0 9a40 	vmov.f32	s18, s0
 800bab2:	f000 f9e1 	bl	800be78 <__ieee754_powf>
 800bab6:	eeb4 8a48 	vcmp.f32	s16, s16
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	eef0 8a40 	vmov.f32	s17, s0
 800bac2:	d63e      	bvs.n	800bb42 <powf+0x9e>
 800bac4:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800bac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bacc:	d112      	bne.n	800baf4 <powf+0x50>
 800bace:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bad6:	d039      	beq.n	800bb4c <powf+0xa8>
 800bad8:	eeb0 0a48 	vmov.f32	s0, s16
 800badc:	f000 f89c 	bl	800bc18 <finitef>
 800bae0:	b378      	cbz	r0, 800bb42 <powf+0x9e>
 800bae2:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bae6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800baea:	d52a      	bpl.n	800bb42 <powf+0x9e>
 800baec:	f7ff ff1c 	bl	800b928 <__errno>
 800baf0:	2322      	movs	r3, #34	@ 0x22
 800baf2:	e014      	b.n	800bb1e <powf+0x7a>
 800baf4:	f000 f890 	bl	800bc18 <finitef>
 800baf8:	b998      	cbnz	r0, 800bb22 <powf+0x7e>
 800bafa:	eeb0 0a49 	vmov.f32	s0, s18
 800bafe:	f000 f88b 	bl	800bc18 <finitef>
 800bb02:	b170      	cbz	r0, 800bb22 <powf+0x7e>
 800bb04:	eeb0 0a48 	vmov.f32	s0, s16
 800bb08:	f000 f886 	bl	800bc18 <finitef>
 800bb0c:	b148      	cbz	r0, 800bb22 <powf+0x7e>
 800bb0e:	eef4 8a68 	vcmp.f32	s17, s17
 800bb12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb16:	d7e9      	bvc.n	800baec <powf+0x48>
 800bb18:	f7ff ff06 	bl	800b928 <__errno>
 800bb1c:	2321      	movs	r3, #33	@ 0x21
 800bb1e:	6003      	str	r3, [r0, #0]
 800bb20:	e00f      	b.n	800bb42 <powf+0x9e>
 800bb22:	eef5 8a40 	vcmp.f32	s17, #0.0
 800bb26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb2a:	d10a      	bne.n	800bb42 <powf+0x9e>
 800bb2c:	eeb0 0a49 	vmov.f32	s0, s18
 800bb30:	f000 f872 	bl	800bc18 <finitef>
 800bb34:	b128      	cbz	r0, 800bb42 <powf+0x9e>
 800bb36:	eeb0 0a48 	vmov.f32	s0, s16
 800bb3a:	f000 f86d 	bl	800bc18 <finitef>
 800bb3e:	2800      	cmp	r0, #0
 800bb40:	d1d4      	bne.n	800baec <powf+0x48>
 800bb42:	eeb0 0a68 	vmov.f32	s0, s17
 800bb46:	ecbd 8b04 	vpop	{d8-d9}
 800bb4a:	bd08      	pop	{r3, pc}
 800bb4c:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800bb50:	e7f7      	b.n	800bb42 <powf+0x9e>
	...

0800bb54 <sqrtf>:
 800bb54:	b508      	push	{r3, lr}
 800bb56:	ed2d 8b02 	vpush	{d8}
 800bb5a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb5e:	f000 f86b 	bl	800bc38 <__ieee754_sqrtf>
 800bb62:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb6a:	d60c      	bvs.n	800bb86 <sqrtf+0x32>
 800bb6c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800bb8c <sqrtf+0x38>
 800bb70:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	d505      	bpl.n	800bb86 <sqrtf+0x32>
 800bb7a:	f7ff fed5 	bl	800b928 <__errno>
 800bb7e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800bb82:	2321      	movs	r3, #33	@ 0x21
 800bb84:	6003      	str	r3, [r0, #0]
 800bb86:	ecbd 8b02 	vpop	{d8}
 800bb8a:	bd08      	pop	{r3, pc}
 800bb8c:	00000000 	.word	0x00000000

0800bb90 <cosf>:
 800bb90:	ee10 3a10 	vmov	r3, s0
 800bb94:	b507      	push	{r0, r1, r2, lr}
 800bb96:	4a1e      	ldr	r2, [pc, #120]	@ (800bc10 <cosf+0x80>)
 800bb98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bb9c:	4293      	cmp	r3, r2
 800bb9e:	d806      	bhi.n	800bbae <cosf+0x1e>
 800bba0:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800bc14 <cosf+0x84>
 800bba4:	b003      	add	sp, #12
 800bba6:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbaa:	f000 b86d 	b.w	800bc88 <__kernel_cosf>
 800bbae:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bbb2:	d304      	bcc.n	800bbbe <cosf+0x2e>
 800bbb4:	ee30 0a40 	vsub.f32	s0, s0, s0
 800bbb8:	b003      	add	sp, #12
 800bbba:	f85d fb04 	ldr.w	pc, [sp], #4
 800bbbe:	4668      	mov	r0, sp
 800bbc0:	f000 fc28 	bl	800c414 <__ieee754_rem_pio2f>
 800bbc4:	f000 0003 	and.w	r0, r0, #3
 800bbc8:	2801      	cmp	r0, #1
 800bbca:	d009      	beq.n	800bbe0 <cosf+0x50>
 800bbcc:	2802      	cmp	r0, #2
 800bbce:	d010      	beq.n	800bbf2 <cosf+0x62>
 800bbd0:	b9b0      	cbnz	r0, 800bc00 <cosf+0x70>
 800bbd2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbd6:	ed9d 0a00 	vldr	s0, [sp]
 800bbda:	f000 f855 	bl	800bc88 <__kernel_cosf>
 800bbde:	e7eb      	b.n	800bbb8 <cosf+0x28>
 800bbe0:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbe4:	ed9d 0a00 	vldr	s0, [sp]
 800bbe8:	f000 f8a6 	bl	800bd38 <__kernel_sinf>
 800bbec:	eeb1 0a40 	vneg.f32	s0, s0
 800bbf0:	e7e2      	b.n	800bbb8 <cosf+0x28>
 800bbf2:	eddd 0a01 	vldr	s1, [sp, #4]
 800bbf6:	ed9d 0a00 	vldr	s0, [sp]
 800bbfa:	f000 f845 	bl	800bc88 <__kernel_cosf>
 800bbfe:	e7f5      	b.n	800bbec <cosf+0x5c>
 800bc00:	eddd 0a01 	vldr	s1, [sp, #4]
 800bc04:	ed9d 0a00 	vldr	s0, [sp]
 800bc08:	2001      	movs	r0, #1
 800bc0a:	f000 f895 	bl	800bd38 <__kernel_sinf>
 800bc0e:	e7d3      	b.n	800bbb8 <cosf+0x28>
 800bc10:	3f490fd8 	.word	0x3f490fd8
 800bc14:	00000000 	.word	0x00000000

0800bc18 <finitef>:
 800bc18:	ee10 3a10 	vmov	r3, s0
 800bc1c:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800bc20:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800bc24:	bfac      	ite	ge
 800bc26:	2000      	movge	r0, #0
 800bc28:	2001      	movlt	r0, #1
 800bc2a:	4770      	bx	lr

0800bc2c <nanf>:
 800bc2c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800bc34 <nanf+0x8>
 800bc30:	4770      	bx	lr
 800bc32:	bf00      	nop
 800bc34:	7fc00000 	.word	0x7fc00000

0800bc38 <__ieee754_sqrtf>:
 800bc38:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800bc3c:	4770      	bx	lr
	...

0800bc40 <roundf>:
 800bc40:	ee10 0a10 	vmov	r0, s0
 800bc44:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800bc48:	3a7f      	subs	r2, #127	@ 0x7f
 800bc4a:	2a16      	cmp	r2, #22
 800bc4c:	dc15      	bgt.n	800bc7a <roundf+0x3a>
 800bc4e:	2a00      	cmp	r2, #0
 800bc50:	da08      	bge.n	800bc64 <roundf+0x24>
 800bc52:	3201      	adds	r2, #1
 800bc54:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800bc58:	d101      	bne.n	800bc5e <roundf+0x1e>
 800bc5a:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800bc5e:	ee00 3a10 	vmov	s0, r3
 800bc62:	4770      	bx	lr
 800bc64:	4907      	ldr	r1, [pc, #28]	@ (800bc84 <roundf+0x44>)
 800bc66:	4111      	asrs	r1, r2
 800bc68:	4201      	tst	r1, r0
 800bc6a:	d0fa      	beq.n	800bc62 <roundf+0x22>
 800bc6c:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800bc70:	4113      	asrs	r3, r2
 800bc72:	4403      	add	r3, r0
 800bc74:	ea23 0301 	bic.w	r3, r3, r1
 800bc78:	e7f1      	b.n	800bc5e <roundf+0x1e>
 800bc7a:	2a80      	cmp	r2, #128	@ 0x80
 800bc7c:	d1f1      	bne.n	800bc62 <roundf+0x22>
 800bc7e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800bc82:	4770      	bx	lr
 800bc84:	007fffff 	.word	0x007fffff

0800bc88 <__kernel_cosf>:
 800bc88:	ee10 3a10 	vmov	r3, s0
 800bc8c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bc90:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bc94:	eef0 6a40 	vmov.f32	s13, s0
 800bc98:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800bc9c:	d204      	bcs.n	800bca8 <__kernel_cosf+0x20>
 800bc9e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800bca2:	ee17 2a90 	vmov	r2, s15
 800bca6:	b342      	cbz	r2, 800bcfa <__kernel_cosf+0x72>
 800bca8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800bcac:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800bd18 <__kernel_cosf+0x90>
 800bcb0:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800bd1c <__kernel_cosf+0x94>
 800bcb4:	4a1a      	ldr	r2, [pc, #104]	@ (800bd20 <__kernel_cosf+0x98>)
 800bcb6:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bcba:	4293      	cmp	r3, r2
 800bcbc:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800bd24 <__kernel_cosf+0x9c>
 800bcc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bcc4:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800bd28 <__kernel_cosf+0xa0>
 800bcc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bccc:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800bd2c <__kernel_cosf+0xa4>
 800bcd0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bcd4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800bd30 <__kernel_cosf+0xa8>
 800bcd8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bcdc:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800bce0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800bce4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bce8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800bcec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bcf0:	d804      	bhi.n	800bcfc <__kernel_cosf+0x74>
 800bcf2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800bcf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bcfa:	4770      	bx	lr
 800bcfc:	4a0d      	ldr	r2, [pc, #52]	@ (800bd34 <__kernel_cosf+0xac>)
 800bcfe:	4293      	cmp	r3, r2
 800bd00:	bf9a      	itte	ls
 800bd02:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800bd06:	ee07 3a10 	vmovls	s14, r3
 800bd0a:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800bd0e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800bd12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bd16:	e7ec      	b.n	800bcf2 <__kernel_cosf+0x6a>
 800bd18:	ad47d74e 	.word	0xad47d74e
 800bd1c:	310f74f6 	.word	0x310f74f6
 800bd20:	3e999999 	.word	0x3e999999
 800bd24:	b493f27c 	.word	0xb493f27c
 800bd28:	37d00d01 	.word	0x37d00d01
 800bd2c:	bab60b61 	.word	0xbab60b61
 800bd30:	3d2aaaab 	.word	0x3d2aaaab
 800bd34:	3f480000 	.word	0x3f480000

0800bd38 <__kernel_sinf>:
 800bd38:	ee10 3a10 	vmov	r3, s0
 800bd3c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800bd40:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800bd44:	d204      	bcs.n	800bd50 <__kernel_sinf+0x18>
 800bd46:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800bd4a:	ee17 3a90 	vmov	r3, s15
 800bd4e:	b35b      	cbz	r3, 800bda8 <__kernel_sinf+0x70>
 800bd50:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bd54:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800bdac <__kernel_sinf+0x74>
 800bd58:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800bdb0 <__kernel_sinf+0x78>
 800bd5c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd60:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800bdb4 <__kernel_sinf+0x7c>
 800bd64:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd68:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800bdb8 <__kernel_sinf+0x80>
 800bd6c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800bd70:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800bdbc <__kernel_sinf+0x84>
 800bd74:	ee60 6a07 	vmul.f32	s13, s0, s14
 800bd78:	eee6 7a07 	vfma.f32	s15, s12, s14
 800bd7c:	b930      	cbnz	r0, 800bd8c <__kernel_sinf+0x54>
 800bd7e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800bdc0 <__kernel_sinf+0x88>
 800bd82:	eea7 6a27 	vfma.f32	s12, s14, s15
 800bd86:	eea6 0a26 	vfma.f32	s0, s12, s13
 800bd8a:	4770      	bx	lr
 800bd8c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800bd90:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800bd94:	eee0 7a86 	vfma.f32	s15, s1, s12
 800bd98:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800bd9c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800bdc4 <__kernel_sinf+0x8c>
 800bda0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800bda4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800bda8:	4770      	bx	lr
 800bdaa:	bf00      	nop
 800bdac:	2f2ec9d3 	.word	0x2f2ec9d3
 800bdb0:	b2d72f34 	.word	0xb2d72f34
 800bdb4:	3638ef1b 	.word	0x3638ef1b
 800bdb8:	b9500d01 	.word	0xb9500d01
 800bdbc:	3c088889 	.word	0x3c088889
 800bdc0:	be2aaaab 	.word	0xbe2aaaab
 800bdc4:	3e2aaaab 	.word	0x3e2aaaab

0800bdc8 <__ieee754_log10f>:
 800bdc8:	b508      	push	{r3, lr}
 800bdca:	ee10 3a10 	vmov	r3, s0
 800bdce:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800bdd2:	ed2d 8b02 	vpush	{d8}
 800bdd6:	d108      	bne.n	800bdea <__ieee754_log10f+0x22>
 800bdd8:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800be60 <__ieee754_log10f+0x98>
 800bddc:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800be64 <__ieee754_log10f+0x9c>
 800bde0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800bde4:	ecbd 8b02 	vpop	{d8}
 800bde8:	bd08      	pop	{r3, pc}
 800bdea:	2b00      	cmp	r3, #0
 800bdec:	461a      	mov	r2, r3
 800bdee:	da02      	bge.n	800bdf6 <__ieee754_log10f+0x2e>
 800bdf0:	ee30 7a40 	vsub.f32	s14, s0, s0
 800bdf4:	e7f2      	b.n	800bddc <__ieee754_log10f+0x14>
 800bdf6:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800bdfa:	db02      	blt.n	800be02 <__ieee754_log10f+0x3a>
 800bdfc:	ee30 0a00 	vadd.f32	s0, s0, s0
 800be00:	e7f0      	b.n	800bde4 <__ieee754_log10f+0x1c>
 800be02:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800be06:	bfbf      	itttt	lt
 800be08:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800be68 <__ieee754_log10f+0xa0>
 800be0c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800be10:	f06f 0118 	mvnlt.w	r1, #24
 800be14:	ee17 2a90 	vmovlt	r2, s15
 800be18:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800be1c:	bfa8      	it	ge
 800be1e:	2100      	movge	r1, #0
 800be20:	3b7f      	subs	r3, #127	@ 0x7f
 800be22:	440b      	add	r3, r1
 800be24:	0fd9      	lsrs	r1, r3, #31
 800be26:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800be2a:	ee07 3a90 	vmov	s15, r3
 800be2e:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800be32:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800be36:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800be3a:	ee00 3a10 	vmov	s0, r3
 800be3e:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800be42:	f000 ff13 	bl	800cc6c <__ieee754_logf>
 800be46:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800be6c <__ieee754_log10f+0xa4>
 800be4a:	ee20 0a27 	vmul.f32	s0, s0, s15
 800be4e:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800be70 <__ieee754_log10f+0xa8>
 800be52:	eea8 0a27 	vfma.f32	s0, s16, s15
 800be56:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800be74 <__ieee754_log10f+0xac>
 800be5a:	eea8 0a27 	vfma.f32	s0, s16, s15
 800be5e:	e7c1      	b.n	800bde4 <__ieee754_log10f+0x1c>
 800be60:	cc000000 	.word	0xcc000000
 800be64:	00000000 	.word	0x00000000
 800be68:	4c000000 	.word	0x4c000000
 800be6c:	3ede5bd9 	.word	0x3ede5bd9
 800be70:	355427db 	.word	0x355427db
 800be74:	3e9a2080 	.word	0x3e9a2080

0800be78 <__ieee754_powf>:
 800be78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be7c:	ee10 4a90 	vmov	r4, s1
 800be80:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800be84:	ed2d 8b02 	vpush	{d8}
 800be88:	ee10 6a10 	vmov	r6, s0
 800be8c:	eeb0 8a40 	vmov.f32	s16, s0
 800be90:	eef0 8a60 	vmov.f32	s17, s1
 800be94:	d10c      	bne.n	800beb0 <__ieee754_powf+0x38>
 800be96:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800be9a:	0076      	lsls	r6, r6, #1
 800be9c:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800bea0:	f240 8274 	bls.w	800c38c <__ieee754_powf+0x514>
 800bea4:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bea8:	ecbd 8b02 	vpop	{d8}
 800beac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb0:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800beb4:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800beb8:	d802      	bhi.n	800bec0 <__ieee754_powf+0x48>
 800beba:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bebe:	d908      	bls.n	800bed2 <__ieee754_powf+0x5a>
 800bec0:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800bec4:	d1ee      	bne.n	800bea4 <__ieee754_powf+0x2c>
 800bec6:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800beca:	0064      	lsls	r4, r4, #1
 800becc:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800bed0:	e7e6      	b.n	800bea0 <__ieee754_powf+0x28>
 800bed2:	2e00      	cmp	r6, #0
 800bed4:	da1f      	bge.n	800bf16 <__ieee754_powf+0x9e>
 800bed6:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800beda:	f080 8260 	bcs.w	800c39e <__ieee754_powf+0x526>
 800bede:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bee2:	d32f      	bcc.n	800bf44 <__ieee754_powf+0xcc>
 800bee4:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800bee8:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800beec:	fa49 f503 	asr.w	r5, r9, r3
 800bef0:	fa05 f303 	lsl.w	r3, r5, r3
 800bef4:	454b      	cmp	r3, r9
 800bef6:	d123      	bne.n	800bf40 <__ieee754_powf+0xc8>
 800bef8:	f005 0501 	and.w	r5, r5, #1
 800befc:	f1c5 0502 	rsb	r5, r5, #2
 800bf00:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800bf04:	d11f      	bne.n	800bf46 <__ieee754_powf+0xce>
 800bf06:	2c00      	cmp	r4, #0
 800bf08:	f280 8246 	bge.w	800c398 <__ieee754_powf+0x520>
 800bf0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bf10:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800bf14:	e7c8      	b.n	800bea8 <__ieee754_powf+0x30>
 800bf16:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bf1a:	d111      	bne.n	800bf40 <__ieee754_powf+0xc8>
 800bf1c:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800bf20:	f000 8234 	beq.w	800c38c <__ieee754_powf+0x514>
 800bf24:	d906      	bls.n	800bf34 <__ieee754_powf+0xbc>
 800bf26:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800c23c <__ieee754_powf+0x3c4>
 800bf2a:	2c00      	cmp	r4, #0
 800bf2c:	bfa8      	it	ge
 800bf2e:	eeb0 0a68 	vmovge.f32	s0, s17
 800bf32:	e7b9      	b.n	800bea8 <__ieee754_powf+0x30>
 800bf34:	2c00      	cmp	r4, #0
 800bf36:	f280 822c 	bge.w	800c392 <__ieee754_powf+0x51a>
 800bf3a:	eeb1 0a68 	vneg.f32	s0, s17
 800bf3e:	e7b3      	b.n	800bea8 <__ieee754_powf+0x30>
 800bf40:	2500      	movs	r5, #0
 800bf42:	e7dd      	b.n	800bf00 <__ieee754_powf+0x88>
 800bf44:	2500      	movs	r5, #0
 800bf46:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800bf4a:	d102      	bne.n	800bf52 <__ieee754_powf+0xda>
 800bf4c:	ee28 0a08 	vmul.f32	s0, s16, s16
 800bf50:	e7aa      	b.n	800bea8 <__ieee754_powf+0x30>
 800bf52:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800bf56:	f040 8227 	bne.w	800c3a8 <__ieee754_powf+0x530>
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	f2c0 8224 	blt.w	800c3a8 <__ieee754_powf+0x530>
 800bf60:	eeb0 0a48 	vmov.f32	s0, s16
 800bf64:	ecbd 8b02 	vpop	{d8}
 800bf68:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf6c:	f7ff be64 	b.w	800bc38 <__ieee754_sqrtf>
 800bf70:	2d01      	cmp	r5, #1
 800bf72:	d199      	bne.n	800bea8 <__ieee754_powf+0x30>
 800bf74:	eeb1 0a40 	vneg.f32	s0, s0
 800bf78:	e796      	b.n	800bea8 <__ieee754_powf+0x30>
 800bf7a:	0ff0      	lsrs	r0, r6, #31
 800bf7c:	3801      	subs	r0, #1
 800bf7e:	ea55 0300 	orrs.w	r3, r5, r0
 800bf82:	d104      	bne.n	800bf8e <__ieee754_powf+0x116>
 800bf84:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bf88:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bf8c:	e78c      	b.n	800bea8 <__ieee754_powf+0x30>
 800bf8e:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800bf92:	d96d      	bls.n	800c070 <__ieee754_powf+0x1f8>
 800bf94:	4baa      	ldr	r3, [pc, #680]	@ (800c240 <__ieee754_powf+0x3c8>)
 800bf96:	4598      	cmp	r8, r3
 800bf98:	d808      	bhi.n	800bfac <__ieee754_powf+0x134>
 800bf9a:	2c00      	cmp	r4, #0
 800bf9c:	da0b      	bge.n	800bfb6 <__ieee754_powf+0x13e>
 800bf9e:	2000      	movs	r0, #0
 800bfa0:	ecbd 8b02 	vpop	{d8}
 800bfa4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfa8:	f000 bbf2 	b.w	800c790 <__math_oflowf>
 800bfac:	4ba5      	ldr	r3, [pc, #660]	@ (800c244 <__ieee754_powf+0x3cc>)
 800bfae:	4598      	cmp	r8, r3
 800bfb0:	d908      	bls.n	800bfc4 <__ieee754_powf+0x14c>
 800bfb2:	2c00      	cmp	r4, #0
 800bfb4:	dcf3      	bgt.n	800bf9e <__ieee754_powf+0x126>
 800bfb6:	2000      	movs	r0, #0
 800bfb8:	ecbd 8b02 	vpop	{d8}
 800bfbc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc0:	f000 bbe0 	b.w	800c784 <__math_uflowf>
 800bfc4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bfc8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bfcc:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800c248 <__ieee754_powf+0x3d0>
 800bfd0:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800bfd4:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bfd8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bfdc:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bfe0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bfe4:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800c24c <__ieee754_powf+0x3d4>
 800bfe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bfec:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800c250 <__ieee754_powf+0x3d8>
 800bff0:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800bff4:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800c254 <__ieee754_powf+0x3dc>
 800bff8:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bffc:	eeb0 7a67 	vmov.f32	s14, s15
 800c000:	eea0 7a26 	vfma.f32	s14, s0, s13
 800c004:	ee17 3a10 	vmov	r3, s14
 800c008:	f36f 030b 	bfc	r3, #0, #12
 800c00c:	ee07 3a10 	vmov	s14, r3
 800c010:	eeb0 6a47 	vmov.f32	s12, s14
 800c014:	eea0 6a66 	vfms.f32	s12, s0, s13
 800c018:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c01c:	3d01      	subs	r5, #1
 800c01e:	4305      	orrs	r5, r0
 800c020:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c024:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800c028:	f36f 040b 	bfc	r4, #0, #12
 800c02c:	bf18      	it	ne
 800c02e:	eeb0 8a66 	vmovne.f32	s16, s13
 800c032:	ee06 4a90 	vmov	s13, r4
 800c036:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800c03a:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800c03e:	ee67 7a26 	vmul.f32	s15, s14, s13
 800c042:	eee6 0a07 	vfma.f32	s1, s12, s14
 800c046:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800c04a:	ee17 1a10 	vmov	r1, s14
 800c04e:	2900      	cmp	r1, #0
 800c050:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c054:	f340 80dd 	ble.w	800c212 <__ieee754_powf+0x39a>
 800c058:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800c05c:	f240 80ca 	bls.w	800c1f4 <__ieee754_powf+0x37c>
 800c060:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c068:	bf4c      	ite	mi
 800c06a:	2001      	movmi	r0, #1
 800c06c:	2000      	movpl	r0, #0
 800c06e:	e797      	b.n	800bfa0 <__ieee754_powf+0x128>
 800c070:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800c074:	bf01      	itttt	eq
 800c076:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c258 <__ieee754_powf+0x3e0>
 800c07a:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800c07e:	f06f 0317 	mvneq.w	r3, #23
 800c082:	ee17 7a90 	vmoveq	r7, s15
 800c086:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800c08a:	bf18      	it	ne
 800c08c:	2300      	movne	r3, #0
 800c08e:	3a7f      	subs	r2, #127	@ 0x7f
 800c090:	441a      	add	r2, r3
 800c092:	4b72      	ldr	r3, [pc, #456]	@ (800c25c <__ieee754_powf+0x3e4>)
 800c094:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c098:	429f      	cmp	r7, r3
 800c09a:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c09e:	dd06      	ble.n	800c0ae <__ieee754_powf+0x236>
 800c0a0:	4b6f      	ldr	r3, [pc, #444]	@ (800c260 <__ieee754_powf+0x3e8>)
 800c0a2:	429f      	cmp	r7, r3
 800c0a4:	f340 80a4 	ble.w	800c1f0 <__ieee754_powf+0x378>
 800c0a8:	3201      	adds	r2, #1
 800c0aa:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c0ae:	2600      	movs	r6, #0
 800c0b0:	4b6c      	ldr	r3, [pc, #432]	@ (800c264 <__ieee754_powf+0x3ec>)
 800c0b2:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c0b6:	ee07 1a10 	vmov	s14, r1
 800c0ba:	edd3 5a00 	vldr	s11, [r3]
 800c0be:	4b6a      	ldr	r3, [pc, #424]	@ (800c268 <__ieee754_powf+0x3f0>)
 800c0c0:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c0c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c0c8:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c0cc:	1049      	asrs	r1, r1, #1
 800c0ce:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c0d2:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c0d6:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c0da:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c0de:	ee07 1a90 	vmov	s15, r1
 800c0e2:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c0e6:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c0ea:	ee15 7a10 	vmov	r7, s10
 800c0ee:	401f      	ands	r7, r3
 800c0f0:	ee06 7a90 	vmov	s13, r7
 800c0f4:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c0f8:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c0fc:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c100:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c104:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c26c <__ieee754_powf+0x3f4>
 800c108:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c270 <__ieee754_powf+0x3f8>
 800c10c:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c110:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c274 <__ieee754_powf+0x3fc>
 800c114:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c118:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c248 <__ieee754_powf+0x3d0>
 800c11c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c120:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c278 <__ieee754_powf+0x400>
 800c124:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c128:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c27c <__ieee754_powf+0x404>
 800c12c:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c130:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c134:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c138:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c13c:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c140:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c144:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c148:	eef0 5a67 	vmov.f32	s11, s15
 800c14c:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c150:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c154:	ee15 1a90 	vmov	r1, s11
 800c158:	4019      	ands	r1, r3
 800c15a:	ee05 1a90 	vmov	s11, r1
 800c15e:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c162:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c166:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c16a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c16e:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c172:	eeb0 6a67 	vmov.f32	s12, s15
 800c176:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c17a:	ee16 1a10 	vmov	r1, s12
 800c17e:	4019      	ands	r1, r3
 800c180:	ee06 1a10 	vmov	s12, r1
 800c184:	eeb0 7a46 	vmov.f32	s14, s12
 800c188:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c18c:	493c      	ldr	r1, [pc, #240]	@ (800c280 <__ieee754_powf+0x408>)
 800c18e:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c192:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c196:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c284 <__ieee754_powf+0x40c>
 800c19a:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c288 <__ieee754_powf+0x410>
 800c19e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c1a2:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c28c <__ieee754_powf+0x414>
 800c1a6:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c1aa:	ed91 7a00 	vldr	s14, [r1]
 800c1ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c1b2:	ee07 2a10 	vmov	s14, r2
 800c1b6:	4a36      	ldr	r2, [pc, #216]	@ (800c290 <__ieee754_powf+0x418>)
 800c1b8:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800c1bc:	eeb0 7a67 	vmov.f32	s14, s15
 800c1c0:	eea6 7a25 	vfma.f32	s14, s12, s11
 800c1c4:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c1c8:	ed92 5a00 	vldr	s10, [r2]
 800c1cc:	ee37 7a05 	vadd.f32	s14, s14, s10
 800c1d0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c1d4:	ee17 2a10 	vmov	r2, s14
 800c1d8:	401a      	ands	r2, r3
 800c1da:	ee07 2a10 	vmov	s14, r2
 800c1de:	ee77 6a66 	vsub.f32	s13, s14, s13
 800c1e2:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800c1e6:	eee6 6a65 	vfms.f32	s13, s12, s11
 800c1ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c1ee:	e715      	b.n	800c01c <__ieee754_powf+0x1a4>
 800c1f0:	2601      	movs	r6, #1
 800c1f2:	e75d      	b.n	800c0b0 <__ieee754_powf+0x238>
 800c1f4:	d152      	bne.n	800c29c <__ieee754_powf+0x424>
 800c1f6:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c294 <__ieee754_powf+0x41c>
 800c1fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1fe:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c202:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c20a:	f73f af29 	bgt.w	800c060 <__ieee754_powf+0x1e8>
 800c20e:	2386      	movs	r3, #134	@ 0x86
 800c210:	e048      	b.n	800c2a4 <__ieee754_powf+0x42c>
 800c212:	4a21      	ldr	r2, [pc, #132]	@ (800c298 <__ieee754_powf+0x420>)
 800c214:	4293      	cmp	r3, r2
 800c216:	d907      	bls.n	800c228 <__ieee754_powf+0x3b0>
 800c218:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c220:	bf4c      	ite	mi
 800c222:	2001      	movmi	r0, #1
 800c224:	2000      	movpl	r0, #0
 800c226:	e6c7      	b.n	800bfb8 <__ieee754_powf+0x140>
 800c228:	d138      	bne.n	800c29c <__ieee754_powf+0x424>
 800c22a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c22e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c236:	dbea      	blt.n	800c20e <__ieee754_powf+0x396>
 800c238:	e7ee      	b.n	800c218 <__ieee754_powf+0x3a0>
 800c23a:	bf00      	nop
 800c23c:	00000000 	.word	0x00000000
 800c240:	3f7ffff3 	.word	0x3f7ffff3
 800c244:	3f800007 	.word	0x3f800007
 800c248:	3eaaaaab 	.word	0x3eaaaaab
 800c24c:	3fb8aa00 	.word	0x3fb8aa00
 800c250:	3fb8aa3b 	.word	0x3fb8aa3b
 800c254:	36eca570 	.word	0x36eca570
 800c258:	4b800000 	.word	0x4b800000
 800c25c:	001cc471 	.word	0x001cc471
 800c260:	005db3d6 	.word	0x005db3d6
 800c264:	0802a548 	.word	0x0802a548
 800c268:	fffff000 	.word	0xfffff000
 800c26c:	3e6c3255 	.word	0x3e6c3255
 800c270:	3e53f142 	.word	0x3e53f142
 800c274:	3e8ba305 	.word	0x3e8ba305
 800c278:	3edb6db7 	.word	0x3edb6db7
 800c27c:	3f19999a 	.word	0x3f19999a
 800c280:	0802a538 	.word	0x0802a538
 800c284:	3f76384f 	.word	0x3f76384f
 800c288:	3f763800 	.word	0x3f763800
 800c28c:	369dc3a0 	.word	0x369dc3a0
 800c290:	0802a540 	.word	0x0802a540
 800c294:	3338aa3c 	.word	0x3338aa3c
 800c298:	43160000 	.word	0x43160000
 800c29c:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c2a0:	d96f      	bls.n	800c382 <__ieee754_powf+0x50a>
 800c2a2:	15db      	asrs	r3, r3, #23
 800c2a4:	3b7e      	subs	r3, #126	@ 0x7e
 800c2a6:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c2aa:	4118      	asrs	r0, r3
 800c2ac:	4408      	add	r0, r1
 800c2ae:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c2b2:	4a4e      	ldr	r2, [pc, #312]	@ (800c3ec <__ieee754_powf+0x574>)
 800c2b4:	3b7f      	subs	r3, #127	@ 0x7f
 800c2b6:	411a      	asrs	r2, r3
 800c2b8:	4002      	ands	r2, r0
 800c2ba:	ee07 2a10 	vmov	s14, r2
 800c2be:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c2c2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c2c6:	f1c3 0317 	rsb	r3, r3, #23
 800c2ca:	4118      	asrs	r0, r3
 800c2cc:	2900      	cmp	r1, #0
 800c2ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c2d2:	bfb8      	it	lt
 800c2d4:	4240      	neglt	r0, r0
 800c2d6:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800c2da:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800c3f0 <__ieee754_powf+0x578>
 800c2de:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800c3f4 <__ieee754_powf+0x57c>
 800c2e2:	ee16 3a90 	vmov	r3, s13
 800c2e6:	f36f 030b 	bfc	r3, #0, #12
 800c2ea:	ee06 3a90 	vmov	s13, r3
 800c2ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c2f2:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c2f6:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c2fa:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800c3f8 <__ieee754_powf+0x580>
 800c2fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800c302:	eee0 7a87 	vfma.f32	s15, s1, s14
 800c306:	eeb0 7a67 	vmov.f32	s14, s15
 800c30a:	eea6 7a86 	vfma.f32	s14, s13, s12
 800c30e:	eef0 5a47 	vmov.f32	s11, s14
 800c312:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800c316:	ee67 6a07 	vmul.f32	s13, s14, s14
 800c31a:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c31e:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800c3fc <__ieee754_powf+0x584>
 800c322:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800c400 <__ieee754_powf+0x588>
 800c326:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c32a:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800c404 <__ieee754_powf+0x58c>
 800c32e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800c332:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800c408 <__ieee754_powf+0x590>
 800c336:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800c33a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800c40c <__ieee754_powf+0x594>
 800c33e:	eee6 5a26 	vfma.f32	s11, s12, s13
 800c342:	eeb0 6a47 	vmov.f32	s12, s14
 800c346:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800c34a:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800c34e:	ee67 5a06 	vmul.f32	s11, s14, s12
 800c352:	ee36 6a66 	vsub.f32	s12, s12, s13
 800c356:	eee7 7a27 	vfma.f32	s15, s14, s15
 800c35a:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800c35e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800c362:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c366:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c36a:	ee10 3a10 	vmov	r3, s0
 800c36e:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c372:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c376:	da06      	bge.n	800c386 <__ieee754_powf+0x50e>
 800c378:	f000 f984 	bl	800c684 <scalbnf>
 800c37c:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c380:	e592      	b.n	800bea8 <__ieee754_powf+0x30>
 800c382:	2000      	movs	r0, #0
 800c384:	e7a7      	b.n	800c2d6 <__ieee754_powf+0x45e>
 800c386:	ee00 3a10 	vmov	s0, r3
 800c38a:	e7f7      	b.n	800c37c <__ieee754_powf+0x504>
 800c38c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c390:	e58a      	b.n	800bea8 <__ieee754_powf+0x30>
 800c392:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800c410 <__ieee754_powf+0x598>
 800c396:	e587      	b.n	800bea8 <__ieee754_powf+0x30>
 800c398:	eeb0 0a48 	vmov.f32	s0, s16
 800c39c:	e584      	b.n	800bea8 <__ieee754_powf+0x30>
 800c39e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800c3a2:	f43f adbb 	beq.w	800bf1c <__ieee754_powf+0xa4>
 800c3a6:	2502      	movs	r5, #2
 800c3a8:	eeb0 0a48 	vmov.f32	s0, s16
 800c3ac:	f000 f962 	bl	800c674 <fabsf>
 800c3b0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800c3b4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800c3b8:	4647      	mov	r7, r8
 800c3ba:	d003      	beq.n	800c3c4 <__ieee754_powf+0x54c>
 800c3bc:	f1b8 0f00 	cmp.w	r8, #0
 800c3c0:	f47f addb 	bne.w	800bf7a <__ieee754_powf+0x102>
 800c3c4:	2c00      	cmp	r4, #0
 800c3c6:	bfbc      	itt	lt
 800c3c8:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800c3cc:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800c3d0:	2e00      	cmp	r6, #0
 800c3d2:	f6bf ad69 	bge.w	800bea8 <__ieee754_powf+0x30>
 800c3d6:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800c3da:	ea58 0805 	orrs.w	r8, r8, r5
 800c3de:	f47f adc7 	bne.w	800bf70 <__ieee754_powf+0xf8>
 800c3e2:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c3e6:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c3ea:	e55d      	b.n	800bea8 <__ieee754_powf+0x30>
 800c3ec:	ff800000 	.word	0xff800000
 800c3f0:	3f317218 	.word	0x3f317218
 800c3f4:	3f317200 	.word	0x3f317200
 800c3f8:	35bfbe8c 	.word	0x35bfbe8c
 800c3fc:	b5ddea0e 	.word	0xb5ddea0e
 800c400:	3331bb4c 	.word	0x3331bb4c
 800c404:	388ab355 	.word	0x388ab355
 800c408:	bb360b61 	.word	0xbb360b61
 800c40c:	3e2aaaab 	.word	0x3e2aaaab
 800c410:	00000000 	.word	0x00000000

0800c414 <__ieee754_rem_pio2f>:
 800c414:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c416:	ee10 6a10 	vmov	r6, s0
 800c41a:	4b88      	ldr	r3, [pc, #544]	@ (800c63c <__ieee754_rem_pio2f+0x228>)
 800c41c:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800c420:	429d      	cmp	r5, r3
 800c422:	b087      	sub	sp, #28
 800c424:	4604      	mov	r4, r0
 800c426:	d805      	bhi.n	800c434 <__ieee754_rem_pio2f+0x20>
 800c428:	2300      	movs	r3, #0
 800c42a:	ed80 0a00 	vstr	s0, [r0]
 800c42e:	6043      	str	r3, [r0, #4]
 800c430:	2000      	movs	r0, #0
 800c432:	e022      	b.n	800c47a <__ieee754_rem_pio2f+0x66>
 800c434:	4b82      	ldr	r3, [pc, #520]	@ (800c640 <__ieee754_rem_pio2f+0x22c>)
 800c436:	429d      	cmp	r5, r3
 800c438:	d83a      	bhi.n	800c4b0 <__ieee754_rem_pio2f+0x9c>
 800c43a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c43e:	2e00      	cmp	r6, #0
 800c440:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800c644 <__ieee754_rem_pio2f+0x230>
 800c444:	4a80      	ldr	r2, [pc, #512]	@ (800c648 <__ieee754_rem_pio2f+0x234>)
 800c446:	f023 030f 	bic.w	r3, r3, #15
 800c44a:	dd18      	ble.n	800c47e <__ieee754_rem_pio2f+0x6a>
 800c44c:	4293      	cmp	r3, r2
 800c44e:	ee70 7a47 	vsub.f32	s15, s0, s14
 800c452:	bf09      	itett	eq
 800c454:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800c64c <__ieee754_rem_pio2f+0x238>
 800c458:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800c650 <__ieee754_rem_pio2f+0x23c>
 800c45c:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800c654 <__ieee754_rem_pio2f+0x240>
 800c460:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800c464:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800c468:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c46c:	ed80 7a00 	vstr	s14, [r0]
 800c470:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c474:	edc0 7a01 	vstr	s15, [r0, #4]
 800c478:	2001      	movs	r0, #1
 800c47a:	b007      	add	sp, #28
 800c47c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c47e:	4293      	cmp	r3, r2
 800c480:	ee70 7a07 	vadd.f32	s15, s0, s14
 800c484:	bf09      	itett	eq
 800c486:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800c64c <__ieee754_rem_pio2f+0x238>
 800c48a:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800c650 <__ieee754_rem_pio2f+0x23c>
 800c48e:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800c654 <__ieee754_rem_pio2f+0x240>
 800c492:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800c496:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800c49a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c49e:	ed80 7a00 	vstr	s14, [r0]
 800c4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c4a6:	edc0 7a01 	vstr	s15, [r0, #4]
 800c4aa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c4ae:	e7e4      	b.n	800c47a <__ieee754_rem_pio2f+0x66>
 800c4b0:	4b69      	ldr	r3, [pc, #420]	@ (800c658 <__ieee754_rem_pio2f+0x244>)
 800c4b2:	429d      	cmp	r5, r3
 800c4b4:	d873      	bhi.n	800c59e <__ieee754_rem_pio2f+0x18a>
 800c4b6:	f000 f8dd 	bl	800c674 <fabsf>
 800c4ba:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800c65c <__ieee754_rem_pio2f+0x248>
 800c4be:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c4c2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c4c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c4ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800c4ce:	ee17 0a90 	vmov	r0, s15
 800c4d2:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c644 <__ieee754_rem_pio2f+0x230>
 800c4d6:	eea7 0a67 	vfms.f32	s0, s14, s15
 800c4da:	281f      	cmp	r0, #31
 800c4dc:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800c650 <__ieee754_rem_pio2f+0x23c>
 800c4e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c4e4:	eeb1 6a47 	vneg.f32	s12, s14
 800c4e8:	ee70 6a67 	vsub.f32	s13, s0, s15
 800c4ec:	ee16 1a90 	vmov	r1, s13
 800c4f0:	dc09      	bgt.n	800c506 <__ieee754_rem_pio2f+0xf2>
 800c4f2:	4a5b      	ldr	r2, [pc, #364]	@ (800c660 <__ieee754_rem_pio2f+0x24c>)
 800c4f4:	1e47      	subs	r7, r0, #1
 800c4f6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800c4fa:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800c4fe:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800c502:	4293      	cmp	r3, r2
 800c504:	d107      	bne.n	800c516 <__ieee754_rem_pio2f+0x102>
 800c506:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800c50a:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800c50e:	2a08      	cmp	r2, #8
 800c510:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800c514:	dc14      	bgt.n	800c540 <__ieee754_rem_pio2f+0x12c>
 800c516:	6021      	str	r1, [r4, #0]
 800c518:	ed94 7a00 	vldr	s14, [r4]
 800c51c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800c520:	2e00      	cmp	r6, #0
 800c522:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c526:	ed84 0a01 	vstr	s0, [r4, #4]
 800c52a:	daa6      	bge.n	800c47a <__ieee754_rem_pio2f+0x66>
 800c52c:	eeb1 7a47 	vneg.f32	s14, s14
 800c530:	eeb1 0a40 	vneg.f32	s0, s0
 800c534:	ed84 7a00 	vstr	s14, [r4]
 800c538:	ed84 0a01 	vstr	s0, [r4, #4]
 800c53c:	4240      	negs	r0, r0
 800c53e:	e79c      	b.n	800c47a <__ieee754_rem_pio2f+0x66>
 800c540:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800c64c <__ieee754_rem_pio2f+0x238>
 800c544:	eef0 6a40 	vmov.f32	s13, s0
 800c548:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c54c:	ee70 7a66 	vsub.f32	s15, s0, s13
 800c550:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c554:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800c654 <__ieee754_rem_pio2f+0x240>
 800c558:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800c55c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800c560:	ee15 2a90 	vmov	r2, s11
 800c564:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800c568:	1a5b      	subs	r3, r3, r1
 800c56a:	2b19      	cmp	r3, #25
 800c56c:	dc04      	bgt.n	800c578 <__ieee754_rem_pio2f+0x164>
 800c56e:	edc4 5a00 	vstr	s11, [r4]
 800c572:	eeb0 0a66 	vmov.f32	s0, s13
 800c576:	e7cf      	b.n	800c518 <__ieee754_rem_pio2f+0x104>
 800c578:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800c664 <__ieee754_rem_pio2f+0x250>
 800c57c:	eeb0 0a66 	vmov.f32	s0, s13
 800c580:	eea6 0a25 	vfma.f32	s0, s12, s11
 800c584:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800c588:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800c668 <__ieee754_rem_pio2f+0x254>
 800c58c:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c590:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800c594:	ee30 7a67 	vsub.f32	s14, s0, s15
 800c598:	ed84 7a00 	vstr	s14, [r4]
 800c59c:	e7bc      	b.n	800c518 <__ieee754_rem_pio2f+0x104>
 800c59e:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800c5a2:	d306      	bcc.n	800c5b2 <__ieee754_rem_pio2f+0x19e>
 800c5a4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c5a8:	edc0 7a01 	vstr	s15, [r0, #4]
 800c5ac:	edc0 7a00 	vstr	s15, [r0]
 800c5b0:	e73e      	b.n	800c430 <__ieee754_rem_pio2f+0x1c>
 800c5b2:	15ea      	asrs	r2, r5, #23
 800c5b4:	3a86      	subs	r2, #134	@ 0x86
 800c5b6:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800c5ba:	ee07 3a90 	vmov	s15, r3
 800c5be:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c5c2:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800c66c <__ieee754_rem_pio2f+0x258>
 800c5c6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c5ca:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5ce:	ed8d 7a03 	vstr	s14, [sp, #12]
 800c5d2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5d6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800c5da:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c5de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c5e2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800c5e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800c5ea:	eef5 7a40 	vcmp.f32	s15, #0.0
 800c5ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c5f2:	edcd 7a05 	vstr	s15, [sp, #20]
 800c5f6:	d11e      	bne.n	800c636 <__ieee754_rem_pio2f+0x222>
 800c5f8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800c5fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c600:	bf0c      	ite	eq
 800c602:	2301      	moveq	r3, #1
 800c604:	2302      	movne	r3, #2
 800c606:	491a      	ldr	r1, [pc, #104]	@ (800c670 <__ieee754_rem_pio2f+0x25c>)
 800c608:	9101      	str	r1, [sp, #4]
 800c60a:	2102      	movs	r1, #2
 800c60c:	9100      	str	r1, [sp, #0]
 800c60e:	a803      	add	r0, sp, #12
 800c610:	4621      	mov	r1, r4
 800c612:	f000 f8c3 	bl	800c79c <__kernel_rem_pio2f>
 800c616:	2e00      	cmp	r6, #0
 800c618:	f6bf af2f 	bge.w	800c47a <__ieee754_rem_pio2f+0x66>
 800c61c:	edd4 7a00 	vldr	s15, [r4]
 800c620:	eef1 7a67 	vneg.f32	s15, s15
 800c624:	edc4 7a00 	vstr	s15, [r4]
 800c628:	edd4 7a01 	vldr	s15, [r4, #4]
 800c62c:	eef1 7a67 	vneg.f32	s15, s15
 800c630:	edc4 7a01 	vstr	s15, [r4, #4]
 800c634:	e782      	b.n	800c53c <__ieee754_rem_pio2f+0x128>
 800c636:	2303      	movs	r3, #3
 800c638:	e7e5      	b.n	800c606 <__ieee754_rem_pio2f+0x1f2>
 800c63a:	bf00      	nop
 800c63c:	3f490fd8 	.word	0x3f490fd8
 800c640:	4016cbe3 	.word	0x4016cbe3
 800c644:	3fc90f80 	.word	0x3fc90f80
 800c648:	3fc90fd0 	.word	0x3fc90fd0
 800c64c:	37354400 	.word	0x37354400
 800c650:	37354443 	.word	0x37354443
 800c654:	2e85a308 	.word	0x2e85a308
 800c658:	43490f80 	.word	0x43490f80
 800c65c:	3f22f984 	.word	0x3f22f984
 800c660:	0802a550 	.word	0x0802a550
 800c664:	2e85a300 	.word	0x2e85a300
 800c668:	248d3132 	.word	0x248d3132
 800c66c:	43800000 	.word	0x43800000
 800c670:	0802a5d0 	.word	0x0802a5d0

0800c674 <fabsf>:
 800c674:	ee10 3a10 	vmov	r3, s0
 800c678:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c67c:	ee00 3a10 	vmov	s0, r3
 800c680:	4770      	bx	lr
	...

0800c684 <scalbnf>:
 800c684:	ee10 3a10 	vmov	r3, s0
 800c688:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c68c:	d02b      	beq.n	800c6e6 <scalbnf+0x62>
 800c68e:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c692:	d302      	bcc.n	800c69a <scalbnf+0x16>
 800c694:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c698:	4770      	bx	lr
 800c69a:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c69e:	d123      	bne.n	800c6e8 <scalbnf+0x64>
 800c6a0:	4b24      	ldr	r3, [pc, #144]	@ (800c734 <scalbnf+0xb0>)
 800c6a2:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c738 <scalbnf+0xb4>
 800c6a6:	4298      	cmp	r0, r3
 800c6a8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c6ac:	db17      	blt.n	800c6de <scalbnf+0x5a>
 800c6ae:	ee10 3a10 	vmov	r3, s0
 800c6b2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c6b6:	3a19      	subs	r2, #25
 800c6b8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c6bc:	4288      	cmp	r0, r1
 800c6be:	dd15      	ble.n	800c6ec <scalbnf+0x68>
 800c6c0:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c73c <scalbnf+0xb8>
 800c6c4:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c740 <scalbnf+0xbc>
 800c6c8:	ee10 3a10 	vmov	r3, s0
 800c6cc:	eeb0 7a67 	vmov.f32	s14, s15
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	bfb8      	it	lt
 800c6d4:	eef0 7a66 	vmovlt.f32	s15, s13
 800c6d8:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c6dc:	4770      	bx	lr
 800c6de:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c744 <scalbnf+0xc0>
 800c6e2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c6e6:	4770      	bx	lr
 800c6e8:	0dd2      	lsrs	r2, r2, #23
 800c6ea:	e7e5      	b.n	800c6b8 <scalbnf+0x34>
 800c6ec:	4410      	add	r0, r2
 800c6ee:	28fe      	cmp	r0, #254	@ 0xfe
 800c6f0:	dce6      	bgt.n	800c6c0 <scalbnf+0x3c>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	dd06      	ble.n	800c704 <scalbnf+0x80>
 800c6f6:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c6fa:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c6fe:	ee00 3a10 	vmov	s0, r3
 800c702:	4770      	bx	lr
 800c704:	f110 0f16 	cmn.w	r0, #22
 800c708:	da09      	bge.n	800c71e <scalbnf+0x9a>
 800c70a:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c744 <scalbnf+0xc0>
 800c70e:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c748 <scalbnf+0xc4>
 800c712:	ee10 3a10 	vmov	r3, s0
 800c716:	eeb0 7a67 	vmov.f32	s14, s15
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	e7d9      	b.n	800c6d2 <scalbnf+0x4e>
 800c71e:	3019      	adds	r0, #25
 800c720:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c724:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c728:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c74c <scalbnf+0xc8>
 800c72c:	ee07 3a90 	vmov	s15, r3
 800c730:	e7d7      	b.n	800c6e2 <scalbnf+0x5e>
 800c732:	bf00      	nop
 800c734:	ffff3cb0 	.word	0xffff3cb0
 800c738:	4c000000 	.word	0x4c000000
 800c73c:	7149f2ca 	.word	0x7149f2ca
 800c740:	f149f2ca 	.word	0xf149f2ca
 800c744:	0da24260 	.word	0x0da24260
 800c748:	8da24260 	.word	0x8da24260
 800c74c:	33000000 	.word	0x33000000

0800c750 <with_errnof>:
 800c750:	b510      	push	{r4, lr}
 800c752:	ed2d 8b02 	vpush	{d8}
 800c756:	eeb0 8a40 	vmov.f32	s16, s0
 800c75a:	4604      	mov	r4, r0
 800c75c:	f7ff f8e4 	bl	800b928 <__errno>
 800c760:	eeb0 0a48 	vmov.f32	s0, s16
 800c764:	ecbd 8b02 	vpop	{d8}
 800c768:	6004      	str	r4, [r0, #0]
 800c76a:	bd10      	pop	{r4, pc}

0800c76c <xflowf>:
 800c76c:	b130      	cbz	r0, 800c77c <xflowf+0x10>
 800c76e:	eef1 7a40 	vneg.f32	s15, s0
 800c772:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c776:	2022      	movs	r0, #34	@ 0x22
 800c778:	f7ff bfea 	b.w	800c750 <with_errnof>
 800c77c:	eef0 7a40 	vmov.f32	s15, s0
 800c780:	e7f7      	b.n	800c772 <xflowf+0x6>
	...

0800c784 <__math_uflowf>:
 800c784:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c78c <__math_uflowf+0x8>
 800c788:	f7ff bff0 	b.w	800c76c <xflowf>
 800c78c:	10000000 	.word	0x10000000

0800c790 <__math_oflowf>:
 800c790:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c798 <__math_oflowf+0x8>
 800c794:	f7ff bfea 	b.w	800c76c <xflowf>
 800c798:	70000000 	.word	0x70000000

0800c79c <__kernel_rem_pio2f>:
 800c79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7a0:	ed2d 8b04 	vpush	{d8-d9}
 800c7a4:	b0d9      	sub	sp, #356	@ 0x164
 800c7a6:	4690      	mov	r8, r2
 800c7a8:	9001      	str	r0, [sp, #4]
 800c7aa:	4ab6      	ldr	r2, [pc, #728]	@ (800ca84 <__kernel_rem_pio2f+0x2e8>)
 800c7ac:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800c7ae:	f118 0f04 	cmn.w	r8, #4
 800c7b2:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800c7b6:	460f      	mov	r7, r1
 800c7b8:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800c7bc:	db26      	blt.n	800c80c <__kernel_rem_pio2f+0x70>
 800c7be:	f1b8 0203 	subs.w	r2, r8, #3
 800c7c2:	bf48      	it	mi
 800c7c4:	f108 0204 	addmi.w	r2, r8, #4
 800c7c8:	10d2      	asrs	r2, r2, #3
 800c7ca:	1c55      	adds	r5, r2, #1
 800c7cc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c7ce:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ca94 <__kernel_rem_pio2f+0x2f8>
 800c7d2:	00e8      	lsls	r0, r5, #3
 800c7d4:	eba2 060b 	sub.w	r6, r2, fp
 800c7d8:	9002      	str	r0, [sp, #8]
 800c7da:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800c7de:	eb0a 0c0b 	add.w	ip, sl, fp
 800c7e2:	ac1c      	add	r4, sp, #112	@ 0x70
 800c7e4:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800c7e8:	2000      	movs	r0, #0
 800c7ea:	4560      	cmp	r0, ip
 800c7ec:	dd10      	ble.n	800c810 <__kernel_rem_pio2f+0x74>
 800c7ee:	a91c      	add	r1, sp, #112	@ 0x70
 800c7f0:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800c7f4:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800c7f8:	2600      	movs	r6, #0
 800c7fa:	4556      	cmp	r6, sl
 800c7fc:	dc24      	bgt.n	800c848 <__kernel_rem_pio2f+0xac>
 800c7fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 800c802:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ca94 <__kernel_rem_pio2f+0x2f8>
 800c806:	4684      	mov	ip, r0
 800c808:	2400      	movs	r4, #0
 800c80a:	e016      	b.n	800c83a <__kernel_rem_pio2f+0x9e>
 800c80c:	2200      	movs	r2, #0
 800c80e:	e7dc      	b.n	800c7ca <__kernel_rem_pio2f+0x2e>
 800c810:	42c6      	cmn	r6, r0
 800c812:	bf5d      	ittte	pl
 800c814:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800c818:	ee07 1a90 	vmovpl	s15, r1
 800c81c:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800c820:	eef0 7a47 	vmovmi.f32	s15, s14
 800c824:	ece4 7a01 	vstmia	r4!, {s15}
 800c828:	3001      	adds	r0, #1
 800c82a:	e7de      	b.n	800c7ea <__kernel_rem_pio2f+0x4e>
 800c82c:	ecfe 6a01 	vldmia	lr!, {s13}
 800c830:	ed3c 7a01 	vldmdb	ip!, {s14}
 800c834:	eee6 7a87 	vfma.f32	s15, s13, s14
 800c838:	3401      	adds	r4, #1
 800c83a:	455c      	cmp	r4, fp
 800c83c:	ddf6      	ble.n	800c82c <__kernel_rem_pio2f+0x90>
 800c83e:	ece9 7a01 	vstmia	r9!, {s15}
 800c842:	3601      	adds	r6, #1
 800c844:	3004      	adds	r0, #4
 800c846:	e7d8      	b.n	800c7fa <__kernel_rem_pio2f+0x5e>
 800c848:	a908      	add	r1, sp, #32
 800c84a:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c84e:	9104      	str	r1, [sp, #16]
 800c850:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800c852:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800ca90 <__kernel_rem_pio2f+0x2f4>
 800c856:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800ca8c <__kernel_rem_pio2f+0x2f0>
 800c85a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800c85e:	9203      	str	r2, [sp, #12]
 800c860:	4654      	mov	r4, sl
 800c862:	00a2      	lsls	r2, r4, #2
 800c864:	9205      	str	r2, [sp, #20]
 800c866:	aa58      	add	r2, sp, #352	@ 0x160
 800c868:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800c86c:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800c870:	a944      	add	r1, sp, #272	@ 0x110
 800c872:	aa08      	add	r2, sp, #32
 800c874:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800c878:	4694      	mov	ip, r2
 800c87a:	4626      	mov	r6, r4
 800c87c:	2e00      	cmp	r6, #0
 800c87e:	dc4c      	bgt.n	800c91a <__kernel_rem_pio2f+0x17e>
 800c880:	4628      	mov	r0, r5
 800c882:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c886:	f7ff fefd 	bl	800c684 <scalbnf>
 800c88a:	eeb0 8a40 	vmov.f32	s16, s0
 800c88e:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800c892:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c896:	f000 fadb 	bl	800ce50 <floorf>
 800c89a:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800c89e:	eea0 8a67 	vfms.f32	s16, s0, s15
 800c8a2:	2d00      	cmp	r5, #0
 800c8a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c8a8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800c8ac:	ee17 9a90 	vmov	r9, s15
 800c8b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c8b4:	ee38 8a67 	vsub.f32	s16, s16, s15
 800c8b8:	dd41      	ble.n	800c93e <__kernel_rem_pio2f+0x1a2>
 800c8ba:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800c8be:	a908      	add	r1, sp, #32
 800c8c0:	f1c5 0e08 	rsb	lr, r5, #8
 800c8c4:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800c8c8:	fa46 f00e 	asr.w	r0, r6, lr
 800c8cc:	4481      	add	r9, r0
 800c8ce:	fa00 f00e 	lsl.w	r0, r0, lr
 800c8d2:	1a36      	subs	r6, r6, r0
 800c8d4:	f1c5 0007 	rsb	r0, r5, #7
 800c8d8:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800c8dc:	4106      	asrs	r6, r0
 800c8de:	2e00      	cmp	r6, #0
 800c8e0:	dd3c      	ble.n	800c95c <__kernel_rem_pio2f+0x1c0>
 800c8e2:	f04f 0e00 	mov.w	lr, #0
 800c8e6:	f109 0901 	add.w	r9, r9, #1
 800c8ea:	4670      	mov	r0, lr
 800c8ec:	4574      	cmp	r4, lr
 800c8ee:	dc68      	bgt.n	800c9c2 <__kernel_rem_pio2f+0x226>
 800c8f0:	2d00      	cmp	r5, #0
 800c8f2:	dd03      	ble.n	800c8fc <__kernel_rem_pio2f+0x160>
 800c8f4:	2d01      	cmp	r5, #1
 800c8f6:	d074      	beq.n	800c9e2 <__kernel_rem_pio2f+0x246>
 800c8f8:	2d02      	cmp	r5, #2
 800c8fa:	d07d      	beq.n	800c9f8 <__kernel_rem_pio2f+0x25c>
 800c8fc:	2e02      	cmp	r6, #2
 800c8fe:	d12d      	bne.n	800c95c <__kernel_rem_pio2f+0x1c0>
 800c900:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c904:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c908:	b340      	cbz	r0, 800c95c <__kernel_rem_pio2f+0x1c0>
 800c90a:	4628      	mov	r0, r5
 800c90c:	9306      	str	r3, [sp, #24]
 800c90e:	f7ff feb9 	bl	800c684 <scalbnf>
 800c912:	9b06      	ldr	r3, [sp, #24]
 800c914:	ee38 8a40 	vsub.f32	s16, s16, s0
 800c918:	e020      	b.n	800c95c <__kernel_rem_pio2f+0x1c0>
 800c91a:	ee60 7a28 	vmul.f32	s15, s0, s17
 800c91e:	3e01      	subs	r6, #1
 800c920:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800c924:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c928:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800c92c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800c930:	ecac 0a01 	vstmia	ip!, {s0}
 800c934:	ed30 0a01 	vldmdb	r0!, {s0}
 800c938:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c93c:	e79e      	b.n	800c87c <__kernel_rem_pio2f+0xe0>
 800c93e:	d105      	bne.n	800c94c <__kernel_rem_pio2f+0x1b0>
 800c940:	1e60      	subs	r0, r4, #1
 800c942:	a908      	add	r1, sp, #32
 800c944:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800c948:	11f6      	asrs	r6, r6, #7
 800c94a:	e7c8      	b.n	800c8de <__kernel_rem_pio2f+0x142>
 800c94c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800c950:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800c954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c958:	da31      	bge.n	800c9be <__kernel_rem_pio2f+0x222>
 800c95a:	2600      	movs	r6, #0
 800c95c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c964:	f040 8098 	bne.w	800ca98 <__kernel_rem_pio2f+0x2fc>
 800c968:	1e60      	subs	r0, r4, #1
 800c96a:	2200      	movs	r2, #0
 800c96c:	4550      	cmp	r0, sl
 800c96e:	da4b      	bge.n	800ca08 <__kernel_rem_pio2f+0x26c>
 800c970:	2a00      	cmp	r2, #0
 800c972:	d065      	beq.n	800ca40 <__kernel_rem_pio2f+0x2a4>
 800c974:	3c01      	subs	r4, #1
 800c976:	ab08      	add	r3, sp, #32
 800c978:	3d08      	subs	r5, #8
 800c97a:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800c97e:	2b00      	cmp	r3, #0
 800c980:	d0f8      	beq.n	800c974 <__kernel_rem_pio2f+0x1d8>
 800c982:	4628      	mov	r0, r5
 800c984:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c988:	f7ff fe7c 	bl	800c684 <scalbnf>
 800c98c:	1c63      	adds	r3, r4, #1
 800c98e:	aa44      	add	r2, sp, #272	@ 0x110
 800c990:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800ca90 <__kernel_rem_pio2f+0x2f4>
 800c994:	0099      	lsls	r1, r3, #2
 800c996:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800c99a:	4623      	mov	r3, r4
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f280 80a9 	bge.w	800caf4 <__kernel_rem_pio2f+0x358>
 800c9a2:	4623      	mov	r3, r4
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	f2c0 80c7 	blt.w	800cb38 <__kernel_rem_pio2f+0x39c>
 800c9aa:	aa44      	add	r2, sp, #272	@ 0x110
 800c9ac:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800c9b0:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800ca88 <__kernel_rem_pio2f+0x2ec>
 800c9b4:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ca94 <__kernel_rem_pio2f+0x2f8>
 800c9b8:	2000      	movs	r0, #0
 800c9ba:	1ae2      	subs	r2, r4, r3
 800c9bc:	e0b1      	b.n	800cb22 <__kernel_rem_pio2f+0x386>
 800c9be:	2602      	movs	r6, #2
 800c9c0:	e78f      	b.n	800c8e2 <__kernel_rem_pio2f+0x146>
 800c9c2:	f852 1b04 	ldr.w	r1, [r2], #4
 800c9c6:	b948      	cbnz	r0, 800c9dc <__kernel_rem_pio2f+0x240>
 800c9c8:	b121      	cbz	r1, 800c9d4 <__kernel_rem_pio2f+0x238>
 800c9ca:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800c9ce:	f842 1c04 	str.w	r1, [r2, #-4]
 800c9d2:	2101      	movs	r1, #1
 800c9d4:	f10e 0e01 	add.w	lr, lr, #1
 800c9d8:	4608      	mov	r0, r1
 800c9da:	e787      	b.n	800c8ec <__kernel_rem_pio2f+0x150>
 800c9dc:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800c9e0:	e7f5      	b.n	800c9ce <__kernel_rem_pio2f+0x232>
 800c9e2:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800c9e6:	aa08      	add	r2, sp, #32
 800c9e8:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800c9ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800c9f0:	a908      	add	r1, sp, #32
 800c9f2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800c9f6:	e781      	b.n	800c8fc <__kernel_rem_pio2f+0x160>
 800c9f8:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800c9fc:	aa08      	add	r2, sp, #32
 800c9fe:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800ca02:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800ca06:	e7f3      	b.n	800c9f0 <__kernel_rem_pio2f+0x254>
 800ca08:	a908      	add	r1, sp, #32
 800ca0a:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800ca0e:	3801      	subs	r0, #1
 800ca10:	430a      	orrs	r2, r1
 800ca12:	e7ab      	b.n	800c96c <__kernel_rem_pio2f+0x1d0>
 800ca14:	3201      	adds	r2, #1
 800ca16:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800ca1a:	2e00      	cmp	r6, #0
 800ca1c:	d0fa      	beq.n	800ca14 <__kernel_rem_pio2f+0x278>
 800ca1e:	9905      	ldr	r1, [sp, #20]
 800ca20:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800ca24:	eb0d 0001 	add.w	r0, sp, r1
 800ca28:	18e6      	adds	r6, r4, r3
 800ca2a:	a91c      	add	r1, sp, #112	@ 0x70
 800ca2c:	f104 0c01 	add.w	ip, r4, #1
 800ca30:	384c      	subs	r0, #76	@ 0x4c
 800ca32:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800ca36:	4422      	add	r2, r4
 800ca38:	4562      	cmp	r2, ip
 800ca3a:	da04      	bge.n	800ca46 <__kernel_rem_pio2f+0x2aa>
 800ca3c:	4614      	mov	r4, r2
 800ca3e:	e710      	b.n	800c862 <__kernel_rem_pio2f+0xc6>
 800ca40:	9804      	ldr	r0, [sp, #16]
 800ca42:	2201      	movs	r2, #1
 800ca44:	e7e7      	b.n	800ca16 <__kernel_rem_pio2f+0x27a>
 800ca46:	9903      	ldr	r1, [sp, #12]
 800ca48:	f8dd e004 	ldr.w	lr, [sp, #4]
 800ca4c:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800ca50:	9105      	str	r1, [sp, #20]
 800ca52:	ee07 1a90 	vmov	s15, r1
 800ca56:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca5a:	2400      	movs	r4, #0
 800ca5c:	ece6 7a01 	vstmia	r6!, {s15}
 800ca60:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ca94 <__kernel_rem_pio2f+0x2f8>
 800ca64:	46b1      	mov	r9, r6
 800ca66:	455c      	cmp	r4, fp
 800ca68:	dd04      	ble.n	800ca74 <__kernel_rem_pio2f+0x2d8>
 800ca6a:	ece0 7a01 	vstmia	r0!, {s15}
 800ca6e:	f10c 0c01 	add.w	ip, ip, #1
 800ca72:	e7e1      	b.n	800ca38 <__kernel_rem_pio2f+0x29c>
 800ca74:	ecfe 6a01 	vldmia	lr!, {s13}
 800ca78:	ed39 7a01 	vldmdb	r9!, {s14}
 800ca7c:	3401      	adds	r4, #1
 800ca7e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ca82:	e7f0      	b.n	800ca66 <__kernel_rem_pio2f+0x2ca>
 800ca84:	0802a914 	.word	0x0802a914
 800ca88:	0802a8e8 	.word	0x0802a8e8
 800ca8c:	43800000 	.word	0x43800000
 800ca90:	3b800000 	.word	0x3b800000
 800ca94:	00000000 	.word	0x00000000
 800ca98:	9b02      	ldr	r3, [sp, #8]
 800ca9a:	eeb0 0a48 	vmov.f32	s0, s16
 800ca9e:	eba3 0008 	sub.w	r0, r3, r8
 800caa2:	f7ff fdef 	bl	800c684 <scalbnf>
 800caa6:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800ca8c <__kernel_rem_pio2f+0x2f0>
 800caaa:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800caae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cab2:	db19      	blt.n	800cae8 <__kernel_rem_pio2f+0x34c>
 800cab4:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800ca90 <__kernel_rem_pio2f+0x2f4>
 800cab8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800cabc:	aa08      	add	r2, sp, #32
 800cabe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cac2:	3508      	adds	r5, #8
 800cac4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cac8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cacc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800cad0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800cad4:	ee10 3a10 	vmov	r3, s0
 800cad8:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cadc:	ee17 3a90 	vmov	r3, s15
 800cae0:	3401      	adds	r4, #1
 800cae2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800cae6:	e74c      	b.n	800c982 <__kernel_rem_pio2f+0x1e6>
 800cae8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800caec:	aa08      	add	r2, sp, #32
 800caee:	ee10 3a10 	vmov	r3, s0
 800caf2:	e7f6      	b.n	800cae2 <__kernel_rem_pio2f+0x346>
 800caf4:	a808      	add	r0, sp, #32
 800caf6:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800cafa:	9001      	str	r0, [sp, #4]
 800cafc:	ee07 0a90 	vmov	s15, r0
 800cb00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cb04:	3b01      	subs	r3, #1
 800cb06:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cb0a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800cb0e:	ed62 7a01 	vstmdb	r2!, {s15}
 800cb12:	e743      	b.n	800c99c <__kernel_rem_pio2f+0x200>
 800cb14:	ecfc 6a01 	vldmia	ip!, {s13}
 800cb18:	ecb5 7a01 	vldmia	r5!, {s14}
 800cb1c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800cb20:	3001      	adds	r0, #1
 800cb22:	4550      	cmp	r0, sl
 800cb24:	dc01      	bgt.n	800cb2a <__kernel_rem_pio2f+0x38e>
 800cb26:	4290      	cmp	r0, r2
 800cb28:	ddf4      	ble.n	800cb14 <__kernel_rem_pio2f+0x378>
 800cb2a:	a858      	add	r0, sp, #352	@ 0x160
 800cb2c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800cb30:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800cb34:	3b01      	subs	r3, #1
 800cb36:	e735      	b.n	800c9a4 <__kernel_rem_pio2f+0x208>
 800cb38:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cb3a:	2b02      	cmp	r3, #2
 800cb3c:	dc09      	bgt.n	800cb52 <__kernel_rem_pio2f+0x3b6>
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	dc27      	bgt.n	800cb92 <__kernel_rem_pio2f+0x3f6>
 800cb42:	d040      	beq.n	800cbc6 <__kernel_rem_pio2f+0x42a>
 800cb44:	f009 0007 	and.w	r0, r9, #7
 800cb48:	b059      	add	sp, #356	@ 0x164
 800cb4a:	ecbd 8b04 	vpop	{d8-d9}
 800cb4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb52:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800cb54:	2b03      	cmp	r3, #3
 800cb56:	d1f5      	bne.n	800cb44 <__kernel_rem_pio2f+0x3a8>
 800cb58:	aa30      	add	r2, sp, #192	@ 0xc0
 800cb5a:	1f0b      	subs	r3, r1, #4
 800cb5c:	4413      	add	r3, r2
 800cb5e:	461a      	mov	r2, r3
 800cb60:	4620      	mov	r0, r4
 800cb62:	2800      	cmp	r0, #0
 800cb64:	dc50      	bgt.n	800cc08 <__kernel_rem_pio2f+0x46c>
 800cb66:	4622      	mov	r2, r4
 800cb68:	2a01      	cmp	r2, #1
 800cb6a:	dc5d      	bgt.n	800cc28 <__kernel_rem_pio2f+0x48c>
 800cb6c:	ab30      	add	r3, sp, #192	@ 0xc0
 800cb6e:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ca94 <__kernel_rem_pio2f+0x2f8>
 800cb72:	440b      	add	r3, r1
 800cb74:	2c01      	cmp	r4, #1
 800cb76:	dc67      	bgt.n	800cc48 <__kernel_rem_pio2f+0x4ac>
 800cb78:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800cb7c:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800cb80:	2e00      	cmp	r6, #0
 800cb82:	d167      	bne.n	800cc54 <__kernel_rem_pio2f+0x4b8>
 800cb84:	edc7 6a00 	vstr	s13, [r7]
 800cb88:	ed87 7a01 	vstr	s14, [r7, #4]
 800cb8c:	edc7 7a02 	vstr	s15, [r7, #8]
 800cb90:	e7d8      	b.n	800cb44 <__kernel_rem_pio2f+0x3a8>
 800cb92:	ab30      	add	r3, sp, #192	@ 0xc0
 800cb94:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ca94 <__kernel_rem_pio2f+0x2f8>
 800cb98:	440b      	add	r3, r1
 800cb9a:	4622      	mov	r2, r4
 800cb9c:	2a00      	cmp	r2, #0
 800cb9e:	da24      	bge.n	800cbea <__kernel_rem_pio2f+0x44e>
 800cba0:	b34e      	cbz	r6, 800cbf6 <__kernel_rem_pio2f+0x45a>
 800cba2:	eef1 7a47 	vneg.f32	s15, s14
 800cba6:	edc7 7a00 	vstr	s15, [r7]
 800cbaa:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 800cbae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cbb2:	aa31      	add	r2, sp, #196	@ 0xc4
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	429c      	cmp	r4, r3
 800cbb8:	da20      	bge.n	800cbfc <__kernel_rem_pio2f+0x460>
 800cbba:	b10e      	cbz	r6, 800cbc0 <__kernel_rem_pio2f+0x424>
 800cbbc:	eef1 7a67 	vneg.f32	s15, s15
 800cbc0:	edc7 7a01 	vstr	s15, [r7, #4]
 800cbc4:	e7be      	b.n	800cb44 <__kernel_rem_pio2f+0x3a8>
 800cbc6:	ab30      	add	r3, sp, #192	@ 0xc0
 800cbc8:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ca94 <__kernel_rem_pio2f+0x2f8>
 800cbcc:	440b      	add	r3, r1
 800cbce:	2c00      	cmp	r4, #0
 800cbd0:	da05      	bge.n	800cbde <__kernel_rem_pio2f+0x442>
 800cbd2:	b10e      	cbz	r6, 800cbd8 <__kernel_rem_pio2f+0x43c>
 800cbd4:	eef1 7a67 	vneg.f32	s15, s15
 800cbd8:	edc7 7a00 	vstr	s15, [r7]
 800cbdc:	e7b2      	b.n	800cb44 <__kernel_rem_pio2f+0x3a8>
 800cbde:	ed33 7a01 	vldmdb	r3!, {s14}
 800cbe2:	3c01      	subs	r4, #1
 800cbe4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cbe8:	e7f1      	b.n	800cbce <__kernel_rem_pio2f+0x432>
 800cbea:	ed73 7a01 	vldmdb	r3!, {s15}
 800cbee:	3a01      	subs	r2, #1
 800cbf0:	ee37 7a27 	vadd.f32	s14, s14, s15
 800cbf4:	e7d2      	b.n	800cb9c <__kernel_rem_pio2f+0x400>
 800cbf6:	eef0 7a47 	vmov.f32	s15, s14
 800cbfa:	e7d4      	b.n	800cba6 <__kernel_rem_pio2f+0x40a>
 800cbfc:	ecb2 7a01 	vldmia	r2!, {s14}
 800cc00:	3301      	adds	r3, #1
 800cc02:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc06:	e7d6      	b.n	800cbb6 <__kernel_rem_pio2f+0x41a>
 800cc08:	ed72 7a01 	vldmdb	r2!, {s15}
 800cc0c:	edd2 6a01 	vldr	s13, [r2, #4]
 800cc10:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc14:	3801      	subs	r0, #1
 800cc16:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc1a:	ed82 7a00 	vstr	s14, [r2]
 800cc1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc22:	edc2 7a01 	vstr	s15, [r2, #4]
 800cc26:	e79c      	b.n	800cb62 <__kernel_rem_pio2f+0x3c6>
 800cc28:	ed73 7a01 	vldmdb	r3!, {s15}
 800cc2c:	edd3 6a01 	vldr	s13, [r3, #4]
 800cc30:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800cc34:	3a01      	subs	r2, #1
 800cc36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800cc3a:	ed83 7a00 	vstr	s14, [r3]
 800cc3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cc42:	edc3 7a01 	vstr	s15, [r3, #4]
 800cc46:	e78f      	b.n	800cb68 <__kernel_rem_pio2f+0x3cc>
 800cc48:	ed33 7a01 	vldmdb	r3!, {s14}
 800cc4c:	3c01      	subs	r4, #1
 800cc4e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cc52:	e78f      	b.n	800cb74 <__kernel_rem_pio2f+0x3d8>
 800cc54:	eef1 6a66 	vneg.f32	s13, s13
 800cc58:	eeb1 7a47 	vneg.f32	s14, s14
 800cc5c:	edc7 6a00 	vstr	s13, [r7]
 800cc60:	ed87 7a01 	vstr	s14, [r7, #4]
 800cc64:	eef1 7a67 	vneg.f32	s15, s15
 800cc68:	e790      	b.n	800cb8c <__kernel_rem_pio2f+0x3f0>
 800cc6a:	bf00      	nop

0800cc6c <__ieee754_logf>:
 800cc6c:	ee10 3a10 	vmov	r3, s0
 800cc70:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800cc74:	d106      	bne.n	800cc84 <__ieee754_logf+0x18>
 800cc76:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800ce10 <__ieee754_logf+0x1a4>
 800cc7a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 800ce14 <__ieee754_logf+0x1a8>
 800cc7e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800cc82:	4770      	bx	lr
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	461a      	mov	r2, r3
 800cc88:	da02      	bge.n	800cc90 <__ieee754_logf+0x24>
 800cc8a:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cc8e:	e7f4      	b.n	800cc7a <__ieee754_logf+0xe>
 800cc90:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800cc94:	db02      	blt.n	800cc9c <__ieee754_logf+0x30>
 800cc96:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc9a:	4770      	bx	lr
 800cc9c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800cca0:	bfb8      	it	lt
 800cca2:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 800ce18 <__ieee754_logf+0x1ac>
 800cca6:	485d      	ldr	r0, [pc, #372]	@ (800ce1c <__ieee754_logf+0x1b0>)
 800cca8:	bfbe      	ittt	lt
 800ccaa:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ccae:	f06f 0118 	mvnlt.w	r1, #24
 800ccb2:	ee17 2a90 	vmovlt	r2, s15
 800ccb6:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800ccba:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800ccbe:	4410      	add	r0, r2
 800ccc0:	bfa8      	it	ge
 800ccc2:	2100      	movge	r1, #0
 800ccc4:	3b7f      	subs	r3, #127	@ 0x7f
 800ccc6:	440b      	add	r3, r1
 800ccc8:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 800cccc:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 800ccd0:	4311      	orrs	r1, r2
 800ccd2:	ee00 1a10 	vmov	s0, r1
 800ccd6:	4952      	ldr	r1, [pc, #328]	@ (800ce20 <__ieee754_logf+0x1b4>)
 800ccd8:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 800ccdc:	f102 000f 	add.w	r0, r2, #15
 800cce0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800cce4:	4001      	ands	r1, r0
 800cce6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ccea:	bb89      	cbnz	r1, 800cd50 <__ieee754_logf+0xe4>
 800ccec:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ccf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccf4:	d10f      	bne.n	800cd16 <__ieee754_logf+0xaa>
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	f000 8087 	beq.w	800ce0a <__ieee754_logf+0x19e>
 800ccfc:	ee07 3a90 	vmov	s15, r3
 800cd00:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 800ce24 <__ieee754_logf+0x1b8>
 800cd04:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 800ce28 <__ieee754_logf+0x1bc>
 800cd08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd0c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cd10:	eea7 0a87 	vfma.f32	s0, s15, s14
 800cd14:	4770      	bx	lr
 800cd16:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800ce2c <__ieee754_logf+0x1c0>
 800cd1a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800cd1e:	eee0 7a66 	vfms.f32	s15, s0, s13
 800cd22:	ee20 7a00 	vmul.f32	s14, s0, s0
 800cd26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd2a:	b913      	cbnz	r3, 800cd32 <__ieee754_logf+0xc6>
 800cd2c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cd30:	4770      	bx	lr
 800cd32:	ee07 3a90 	vmov	s15, r3
 800cd36:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800ce24 <__ieee754_logf+0x1b8>
 800cd3a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd3e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cd42:	ee37 0a40 	vsub.f32	s0, s14, s0
 800cd46:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 800ce28 <__ieee754_logf+0x1bc>
 800cd4a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800cd4e:	4770      	bx	lr
 800cd50:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800cd54:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cd58:	eddf 5a35 	vldr	s11, [pc, #212]	@ 800ce30 <__ieee754_logf+0x1c4>
 800cd5c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 800ce34 <__ieee754_logf+0x1c8>
 800cd60:	4935      	ldr	r1, [pc, #212]	@ (800ce38 <__ieee754_logf+0x1cc>)
 800cd62:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800cd66:	4411      	add	r1, r2
 800cd68:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 800cd6c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 800cd70:	430a      	orrs	r2, r1
 800cd72:	2a00      	cmp	r2, #0
 800cd74:	ee07 3a90 	vmov	s15, r3
 800cd78:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cd7c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cd80:	ee25 7a05 	vmul.f32	s14, s10, s10
 800cd84:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 800ce3c <__ieee754_logf+0x1d0>
 800cd88:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cd8c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 800ce40 <__ieee754_logf+0x1d4>
 800cd90:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cd94:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 800ce44 <__ieee754_logf+0x1d8>
 800cd98:	eee7 7a24 	vfma.f32	s15, s14, s9
 800cd9c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 800ce48 <__ieee754_logf+0x1dc>
 800cda0:	eee7 4a87 	vfma.f32	s9, s15, s14
 800cda4:	eddf 7a29 	vldr	s15, [pc, #164]	@ 800ce4c <__ieee754_logf+0x1e0>
 800cda8:	eee4 7a87 	vfma.f32	s15, s9, s14
 800cdac:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cdb0:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cdb4:	dd1a      	ble.n	800cdec <__ieee754_logf+0x180>
 800cdb6:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800cdba:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cdbe:	ee27 7a00 	vmul.f32	s14, s14, s0
 800cdc2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdc6:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cdca:	b913      	cbnz	r3, 800cdd2 <__ieee754_logf+0x166>
 800cdcc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cdd0:	e7ac      	b.n	800cd2c <__ieee754_logf+0xc0>
 800cdd2:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 800ce24 <__ieee754_logf+0x1b8>
 800cdd6:	eee6 7a86 	vfma.f32	s15, s13, s12
 800cdda:	ee37 7a67 	vsub.f32	s14, s14, s15
 800cdde:	ee37 0a40 	vsub.f32	s0, s14, s0
 800cde2:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800ce28 <__ieee754_logf+0x1bc>
 800cde6:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800cdea:	4770      	bx	lr
 800cdec:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cdf0:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cdf4:	b913      	cbnz	r3, 800cdfc <__ieee754_logf+0x190>
 800cdf6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cdfa:	4770      	bx	lr
 800cdfc:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 800ce24 <__ieee754_logf+0x1b8>
 800ce00:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ce04:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ce08:	e7eb      	b.n	800cde2 <__ieee754_logf+0x176>
 800ce0a:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 800ce14 <__ieee754_logf+0x1a8>
 800ce0e:	4770      	bx	lr
 800ce10:	cc000000 	.word	0xcc000000
 800ce14:	00000000 	.word	0x00000000
 800ce18:	4c000000 	.word	0x4c000000
 800ce1c:	004afb20 	.word	0x004afb20
 800ce20:	007ffff0 	.word	0x007ffff0
 800ce24:	3717f7d1 	.word	0x3717f7d1
 800ce28:	3f317180 	.word	0x3f317180
 800ce2c:	3eaaaaab 	.word	0x3eaaaaab
 800ce30:	3e1cd04f 	.word	0x3e1cd04f
 800ce34:	3e178897 	.word	0x3e178897
 800ce38:	ffcf5c30 	.word	0xffcf5c30
 800ce3c:	3e638e29 	.word	0x3e638e29
 800ce40:	3ecccccd 	.word	0x3ecccccd
 800ce44:	3e3a3325 	.word	0x3e3a3325
 800ce48:	3e924925 	.word	0x3e924925
 800ce4c:	3f2aaaab 	.word	0x3f2aaaab

0800ce50 <floorf>:
 800ce50:	ee10 3a10 	vmov	r3, s0
 800ce54:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800ce58:	3a7f      	subs	r2, #127	@ 0x7f
 800ce5a:	2a16      	cmp	r2, #22
 800ce5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800ce60:	dc2b      	bgt.n	800ceba <floorf+0x6a>
 800ce62:	2a00      	cmp	r2, #0
 800ce64:	da12      	bge.n	800ce8c <floorf+0x3c>
 800ce66:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800cecc <floorf+0x7c>
 800ce6a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce6e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ce72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ce76:	dd06      	ble.n	800ce86 <floorf+0x36>
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	da24      	bge.n	800cec6 <floorf+0x76>
 800ce7c:	2900      	cmp	r1, #0
 800ce7e:	4b14      	ldr	r3, [pc, #80]	@ (800ced0 <floorf+0x80>)
 800ce80:	bf08      	it	eq
 800ce82:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800ce86:	ee00 3a10 	vmov	s0, r3
 800ce8a:	4770      	bx	lr
 800ce8c:	4911      	ldr	r1, [pc, #68]	@ (800ced4 <floorf+0x84>)
 800ce8e:	4111      	asrs	r1, r2
 800ce90:	420b      	tst	r3, r1
 800ce92:	d0fa      	beq.n	800ce8a <floorf+0x3a>
 800ce94:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 800cecc <floorf+0x7c>
 800ce98:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ce9c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800cea0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cea4:	ddef      	ble.n	800ce86 <floorf+0x36>
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	bfbe      	ittt	lt
 800ceaa:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 800ceae:	fa40 f202 	asrlt.w	r2, r0, r2
 800ceb2:	189b      	addlt	r3, r3, r2
 800ceb4:	ea23 0301 	bic.w	r3, r3, r1
 800ceb8:	e7e5      	b.n	800ce86 <floorf+0x36>
 800ceba:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800cebe:	d3e4      	bcc.n	800ce8a <floorf+0x3a>
 800cec0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cec4:	4770      	bx	lr
 800cec6:	2300      	movs	r3, #0
 800cec8:	e7dd      	b.n	800ce86 <floorf+0x36>
 800ceca:	bf00      	nop
 800cecc:	7149f2ca 	.word	0x7149f2ca
 800ced0:	bf800000 	.word	0xbf800000
 800ced4:	007fffff 	.word	0x007fffff

0800ced8 <_init>:
 800ced8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ceda:	bf00      	nop
 800cedc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cede:	bc08      	pop	{r3}
 800cee0:	469e      	mov	lr, r3
 800cee2:	4770      	bx	lr

0800cee4 <_fini>:
 800cee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cee6:	bf00      	nop
 800cee8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ceea:	bc08      	pop	{r3}
 800ceec:	469e      	mov	lr, r3
 800ceee:	4770      	bx	lr
