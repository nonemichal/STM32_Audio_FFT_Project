
audio_fft_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000101cc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0001e51c  08010360  08010360  00011360  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802e87c  0802e87c  000305e0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0802e87c  0802e87c  0002f87c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802e884  0802e884  000305e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802e884  0802e884  0002f884  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802e888  0802e888  0002f888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000005e0  20000000  0802e88c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000305e0  2**0
                  CONTENTS
 10 .bss          0000a660  200005e0  200005e0  000305e0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000ac40  2000ac40  000305e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000305e0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00029eb4  00000000  00000000  00030610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005a03  00000000  00000000  0005a4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a50  00000000  00000000  0005fec8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006df9  00000000  00000000  00061918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ed14  00000000  00000000  00068711  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd94c  00000000  00000000  00087425  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000137  00000000  00000000  00164d71  2**0
                  CONTENTS, READONLY
 20 .debug_rnglists 000012f6  00000000  00000000  00164ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00008078  00000000  00000000  001661a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006b  00000000  00000000  0016e218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_loc    0000391c  00000000  00000000  0016e283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_ranges 000001b0  00000000  00000000  00171b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005e0 	.word	0x200005e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010344 	.word	0x08010344

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005e4 	.word	0x200005e4
 80001cc:	08010344 	.word	0x08010344

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bbc:	f000 b988 	b.w	8000ed0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	468e      	mov	lr, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	4688      	mov	r8, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4617      	mov	r7, r2
 8000bec:	d962      	bls.n	8000cb4 <__udivmoddi4+0xdc>
 8000bee:	fab2 f682 	clz	r6, r2
 8000bf2:	b14e      	cbz	r6, 8000c08 <__udivmoddi4+0x30>
 8000bf4:	f1c6 0320 	rsb	r3, r6, #32
 8000bf8:	fa01 f806 	lsl.w	r8, r1, r6
 8000bfc:	fa20 f303 	lsr.w	r3, r0, r3
 8000c00:	40b7      	lsls	r7, r6
 8000c02:	ea43 0808 	orr.w	r8, r3, r8
 8000c06:	40b4      	lsls	r4, r6
 8000c08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c0c:	fa1f fc87 	uxth.w	ip, r7
 8000c10:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c14:	0c23      	lsrs	r3, r4, #16
 8000c16:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c1a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c1e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c22:	429a      	cmp	r2, r3
 8000c24:	d909      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c2c:	f080 80ea 	bcs.w	8000e04 <__udivmoddi4+0x22c>
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f240 80e7 	bls.w	8000e04 <__udivmoddi4+0x22c>
 8000c36:	3902      	subs	r1, #2
 8000c38:	443b      	add	r3, r7
 8000c3a:	1a9a      	subs	r2, r3, r2
 8000c3c:	b2a3      	uxth	r3, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c4a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c4e:	459c      	cmp	ip, r3
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0x8e>
 8000c52:	18fb      	adds	r3, r7, r3
 8000c54:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c58:	f080 80d6 	bcs.w	8000e08 <__udivmoddi4+0x230>
 8000c5c:	459c      	cmp	ip, r3
 8000c5e:	f240 80d3 	bls.w	8000e08 <__udivmoddi4+0x230>
 8000c62:	443b      	add	r3, r7
 8000c64:	3802      	subs	r0, #2
 8000c66:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6a:	eba3 030c 	sub.w	r3, r3, ip
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11d      	cbz	r5, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40f3      	lsrs	r3, r6
 8000c74:	2200      	movs	r2, #0
 8000c76:	e9c5 3200 	strd	r3, r2, [r5]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d905      	bls.n	8000c8e <__udivmoddi4+0xb6>
 8000c82:	b10d      	cbz	r5, 8000c88 <__udivmoddi4+0xb0>
 8000c84:	e9c5 0100 	strd	r0, r1, [r5]
 8000c88:	2100      	movs	r1, #0
 8000c8a:	4608      	mov	r0, r1
 8000c8c:	e7f5      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000c8e:	fab3 f183 	clz	r1, r3
 8000c92:	2900      	cmp	r1, #0
 8000c94:	d146      	bne.n	8000d24 <__udivmoddi4+0x14c>
 8000c96:	4573      	cmp	r3, lr
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xc8>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 8105 	bhi.w	8000eaa <__udivmoddi4+0x2d2>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4690      	mov	r8, r2
 8000caa:	2d00      	cmp	r5, #0
 8000cac:	d0e5      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cae:	e9c5 4800 	strd	r4, r8, [r5]
 8000cb2:	e7e2      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	2a00      	cmp	r2, #0
 8000cb6:	f000 8090 	beq.w	8000dda <__udivmoddi4+0x202>
 8000cba:	fab2 f682 	clz	r6, r2
 8000cbe:	2e00      	cmp	r6, #0
 8000cc0:	f040 80a4 	bne.w	8000e0c <__udivmoddi4+0x234>
 8000cc4:	1a8a      	subs	r2, r1, r2
 8000cc6:	0c03      	lsrs	r3, r0, #16
 8000cc8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ccc:	b280      	uxth	r0, r0
 8000cce:	b2bc      	uxth	r4, r7
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cd6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cda:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cde:	fb04 f20c 	mul.w	r2, r4, ip
 8000ce2:	429a      	cmp	r2, r3
 8000ce4:	d907      	bls.n	8000cf6 <__udivmoddi4+0x11e>
 8000ce6:	18fb      	adds	r3, r7, r3
 8000ce8:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000cec:	d202      	bcs.n	8000cf4 <__udivmoddi4+0x11c>
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	f200 80e0 	bhi.w	8000eb4 <__udivmoddi4+0x2dc>
 8000cf4:	46c4      	mov	ip, r8
 8000cf6:	1a9b      	subs	r3, r3, r2
 8000cf8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000cfc:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d00:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d04:	fb02 f404 	mul.w	r4, r2, r4
 8000d08:	429c      	cmp	r4, r3
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x144>
 8000d0c:	18fb      	adds	r3, r7, r3
 8000d0e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x142>
 8000d14:	429c      	cmp	r4, r3
 8000d16:	f200 80ca 	bhi.w	8000eae <__udivmoddi4+0x2d6>
 8000d1a:	4602      	mov	r2, r0
 8000d1c:	1b1b      	subs	r3, r3, r4
 8000d1e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d22:	e7a5      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d24:	f1c1 0620 	rsb	r6, r1, #32
 8000d28:	408b      	lsls	r3, r1
 8000d2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d2e:	431f      	orrs	r7, r3
 8000d30:	fa0e f401 	lsl.w	r4, lr, r1
 8000d34:	fa20 f306 	lsr.w	r3, r0, r6
 8000d38:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d3c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d40:	4323      	orrs	r3, r4
 8000d42:	fa00 f801 	lsl.w	r8, r0, r1
 8000d46:	fa1f fc87 	uxth.w	ip, r7
 8000d4a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d4e:	0c1c      	lsrs	r4, r3, #16
 8000d50:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d54:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d58:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d5c:	45a6      	cmp	lr, r4
 8000d5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d62:	d909      	bls.n	8000d78 <__udivmoddi4+0x1a0>
 8000d64:	193c      	adds	r4, r7, r4
 8000d66:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d6a:	f080 809c 	bcs.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d6e:	45a6      	cmp	lr, r4
 8000d70:	f240 8099 	bls.w	8000ea6 <__udivmoddi4+0x2ce>
 8000d74:	3802      	subs	r0, #2
 8000d76:	443c      	add	r4, r7
 8000d78:	eba4 040e 	sub.w	r4, r4, lr
 8000d7c:	fa1f fe83 	uxth.w	lr, r3
 8000d80:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d84:	fb09 4413 	mls	r4, r9, r3, r4
 8000d88:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000d8c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000d90:	45a4      	cmp	ip, r4
 8000d92:	d908      	bls.n	8000da6 <__udivmoddi4+0x1ce>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000d9a:	f080 8082 	bcs.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d9e:	45a4      	cmp	ip, r4
 8000da0:	d97f      	bls.n	8000ea2 <__udivmoddi4+0x2ca>
 8000da2:	3b02      	subs	r3, #2
 8000da4:	443c      	add	r4, r7
 8000da6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000daa:	eba4 040c 	sub.w	r4, r4, ip
 8000dae:	fba0 ec02 	umull	lr, ip, r0, r2
 8000db2:	4564      	cmp	r4, ip
 8000db4:	4673      	mov	r3, lr
 8000db6:	46e1      	mov	r9, ip
 8000db8:	d362      	bcc.n	8000e80 <__udivmoddi4+0x2a8>
 8000dba:	d05f      	beq.n	8000e7c <__udivmoddi4+0x2a4>
 8000dbc:	b15d      	cbz	r5, 8000dd6 <__udivmoddi4+0x1fe>
 8000dbe:	ebb8 0203 	subs.w	r2, r8, r3
 8000dc2:	eb64 0409 	sbc.w	r4, r4, r9
 8000dc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dca:	fa22 f301 	lsr.w	r3, r2, r1
 8000dce:	431e      	orrs	r6, r3
 8000dd0:	40cc      	lsrs	r4, r1
 8000dd2:	e9c5 6400 	strd	r6, r4, [r5]
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	e74f      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000dda:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dde:	0c01      	lsrs	r1, r0, #16
 8000de0:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000de4:	b280      	uxth	r0, r0
 8000de6:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000dea:	463b      	mov	r3, r7
 8000dec:	4638      	mov	r0, r7
 8000dee:	463c      	mov	r4, r7
 8000df0:	46b8      	mov	r8, r7
 8000df2:	46be      	mov	lr, r7
 8000df4:	2620      	movs	r6, #32
 8000df6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000dfa:	eba2 0208 	sub.w	r2, r2, r8
 8000dfe:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e02:	e766      	b.n	8000cd2 <__udivmoddi4+0xfa>
 8000e04:	4601      	mov	r1, r0
 8000e06:	e718      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e08:	4610      	mov	r0, r2
 8000e0a:	e72c      	b.n	8000c66 <__udivmoddi4+0x8e>
 8000e0c:	f1c6 0220 	rsb	r2, r6, #32
 8000e10:	fa2e f302 	lsr.w	r3, lr, r2
 8000e14:	40b7      	lsls	r7, r6
 8000e16:	40b1      	lsls	r1, r6
 8000e18:	fa20 f202 	lsr.w	r2, r0, r2
 8000e1c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e20:	430a      	orrs	r2, r1
 8000e22:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e26:	b2bc      	uxth	r4, r7
 8000e28:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e2c:	0c11      	lsrs	r1, r2, #16
 8000e2e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e32:	fb08 f904 	mul.w	r9, r8, r4
 8000e36:	40b0      	lsls	r0, r6
 8000e38:	4589      	cmp	r9, r1
 8000e3a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e3e:	b280      	uxth	r0, r0
 8000e40:	d93e      	bls.n	8000ec0 <__udivmoddi4+0x2e8>
 8000e42:	1879      	adds	r1, r7, r1
 8000e44:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e48:	d201      	bcs.n	8000e4e <__udivmoddi4+0x276>
 8000e4a:	4589      	cmp	r9, r1
 8000e4c:	d81f      	bhi.n	8000e8e <__udivmoddi4+0x2b6>
 8000e4e:	eba1 0109 	sub.w	r1, r1, r9
 8000e52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e56:	fb09 f804 	mul.w	r8, r9, r4
 8000e5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e5e:	b292      	uxth	r2, r2
 8000e60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e64:	4542      	cmp	r2, r8
 8000e66:	d229      	bcs.n	8000ebc <__udivmoddi4+0x2e4>
 8000e68:	18ba      	adds	r2, r7, r2
 8000e6a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e6e:	d2c4      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e70:	4542      	cmp	r2, r8
 8000e72:	d2c2      	bcs.n	8000dfa <__udivmoddi4+0x222>
 8000e74:	f1a9 0102 	sub.w	r1, r9, #2
 8000e78:	443a      	add	r2, r7
 8000e7a:	e7be      	b.n	8000dfa <__udivmoddi4+0x222>
 8000e7c:	45f0      	cmp	r8, lr
 8000e7e:	d29d      	bcs.n	8000dbc <__udivmoddi4+0x1e4>
 8000e80:	ebbe 0302 	subs.w	r3, lr, r2
 8000e84:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000e88:	3801      	subs	r0, #1
 8000e8a:	46e1      	mov	r9, ip
 8000e8c:	e796      	b.n	8000dbc <__udivmoddi4+0x1e4>
 8000e8e:	eba7 0909 	sub.w	r9, r7, r9
 8000e92:	4449      	add	r1, r9
 8000e94:	f1a8 0c02 	sub.w	ip, r8, #2
 8000e98:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e9c:	fb09 f804 	mul.w	r8, r9, r4
 8000ea0:	e7db      	b.n	8000e5a <__udivmoddi4+0x282>
 8000ea2:	4673      	mov	r3, lr
 8000ea4:	e77f      	b.n	8000da6 <__udivmoddi4+0x1ce>
 8000ea6:	4650      	mov	r0, sl
 8000ea8:	e766      	b.n	8000d78 <__udivmoddi4+0x1a0>
 8000eaa:	4608      	mov	r0, r1
 8000eac:	e6fd      	b.n	8000caa <__udivmoddi4+0xd2>
 8000eae:	443b      	add	r3, r7
 8000eb0:	3a02      	subs	r2, #2
 8000eb2:	e733      	b.n	8000d1c <__udivmoddi4+0x144>
 8000eb4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eb8:	443b      	add	r3, r7
 8000eba:	e71c      	b.n	8000cf6 <__udivmoddi4+0x11e>
 8000ebc:	4649      	mov	r1, r9
 8000ebe:	e79c      	b.n	8000dfa <__udivmoddi4+0x222>
 8000ec0:	eba1 0109 	sub.w	r1, r1, r9
 8000ec4:	46c4      	mov	ip, r8
 8000ec6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eca:	fb09 f804 	mul.w	r8, r9, r4
 8000ece:	e7c4      	b.n	8000e5a <__udivmoddi4+0x282>

08000ed0 <__aeabi_idiv0>:
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop

08000ed4 <ILI9341_Select>:
/* vim: set ai et ts=4 sw=4: */
#include "stm32f4xx_hal.h"
#include "ili9341.h"

static void ILI9341_Select() {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_RESET);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2120      	movs	r1, #32
 8000edc:	4802      	ldr	r0, [pc, #8]	@ (8000ee8 <ILI9341_Select+0x14>)
 8000ede:	f002 f9d9 	bl	8003294 <HAL_GPIO_WritePin>
}
 8000ee2:	bf00      	nop
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	40020800 	.word	0x40020800

08000eec <ILI9341_Unselect>:

void ILI9341_Unselect() {
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_CS_GPIO_Port, ILI9341_CS_Pin, GPIO_PIN_SET);
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	2120      	movs	r1, #32
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <ILI9341_Unselect+0x14>)
 8000ef6:	f002 f9cd 	bl	8003294 <HAL_GPIO_WritePin>
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	40020800 	.word	0x40020800

08000f04 <ILI9341_Reset>:

static void ILI9341_Reset() {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_RESET);
 8000f08:	2200      	movs	r2, #0
 8000f0a:	2110      	movs	r1, #16
 8000f0c:	4806      	ldr	r0, [pc, #24]	@ (8000f28 <ILI9341_Reset+0x24>)
 8000f0e:	f002 f9c1 	bl	8003294 <HAL_GPIO_WritePin>
    HAL_Delay(5);
 8000f12:	2005      	movs	r0, #5
 8000f14:	f001 fb90 	bl	8002638 <HAL_Delay>
    HAL_GPIO_WritePin(ILI9341_RES_GPIO_Port, ILI9341_RES_Pin, GPIO_PIN_SET);
 8000f18:	2201      	movs	r2, #1
 8000f1a:	2110      	movs	r1, #16
 8000f1c:	4802      	ldr	r0, [pc, #8]	@ (8000f28 <ILI9341_Reset+0x24>)
 8000f1e:	f002 f9b9 	bl	8003294 <HAL_GPIO_WritePin>
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	40020800 	.word	0x40020800

08000f2c <ILI9341_WriteCommand>:

static void ILI9341_WriteCommand(uint8_t cmd) {
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_RESET);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2101      	movs	r1, #1
 8000f3a:	4807      	ldr	r0, [pc, #28]	@ (8000f58 <ILI9341_WriteCommand+0x2c>)
 8000f3c:	f002 f9aa 	bl	8003294 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&ILI9341_SPI_PORT, &cmd, sizeof(cmd), HAL_MAX_DELAY);
 8000f40:	1df9      	adds	r1, r7, #7
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f46:	2201      	movs	r2, #1
 8000f48:	4804      	ldr	r0, [pc, #16]	@ (8000f5c <ILI9341_WriteCommand+0x30>)
 8000f4a:	f003 fde0 	bl	8004b0e <HAL_SPI_Transmit>
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	40020400 	.word	0x40020400
 8000f5c:	200006ac 	.word	0x200006ac

08000f60 <ILI9341_WriteData>:

static void ILI9341_WriteData(uint8_t* buff, size_t buff_size) {
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b084      	sub	sp, #16
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	2101      	movs	r1, #1
 8000f6e:	4811      	ldr	r0, [pc, #68]	@ (8000fb4 <ILI9341_WriteData+0x54>)
 8000f70:	f002 f990 	bl	8003294 <HAL_GPIO_WritePin>

    // split data in small chunks because HAL can't send more then 64K at once
    while(buff_size > 0) {
 8000f74:	e015      	b.n	8000fa2 <ILI9341_WriteData+0x42>
        uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8000f7c:	bf28      	it	cs
 8000f7e:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 8000f82:	81fb      	strh	r3, [r7, #14]
        HAL_SPI_Transmit(&ILI9341_SPI_PORT, buff, chunk_size, HAL_MAX_DELAY);
 8000f84:	89fa      	ldrh	r2, [r7, #14]
 8000f86:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	480a      	ldr	r0, [pc, #40]	@ (8000fb8 <ILI9341_WriteData+0x58>)
 8000f8e:	f003 fdbe 	bl	8004b0e <HAL_SPI_Transmit>
        buff += chunk_size;
 8000f92:	89fb      	ldrh	r3, [r7, #14]
 8000f94:	687a      	ldr	r2, [r7, #4]
 8000f96:	4413      	add	r3, r2
 8000f98:	607b      	str	r3, [r7, #4]
        buff_size -= chunk_size;
 8000f9a:	89fb      	ldrh	r3, [r7, #14]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	1ad3      	subs	r3, r2, r3
 8000fa0:	603b      	str	r3, [r7, #0]
    while(buff_size > 0) {
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d1e6      	bne.n	8000f76 <ILI9341_WriteData+0x16>
    }
}
 8000fa8:	bf00      	nop
 8000faa:	bf00      	nop
 8000fac:	3710      	adds	r7, #16
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	200006ac 	.word	0x200006ac

08000fbc <ILI9341_SetAddressWindow>:

static void ILI9341_SetAddressWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1) {
 8000fbc:	b590      	push	{r4, r7, lr}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	4604      	mov	r4, r0
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	4611      	mov	r1, r2
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4623      	mov	r3, r4
 8000fcc:	80fb      	strh	r3, [r7, #6]
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80bb      	strh	r3, [r7, #4]
 8000fd2:	460b      	mov	r3, r1
 8000fd4:	807b      	strh	r3, [r7, #2]
 8000fd6:	4613      	mov	r3, r2
 8000fd8:	803b      	strh	r3, [r7, #0]
    // column address set
    ILI9341_WriteCommand(0x2A); // CASET
 8000fda:	202a      	movs	r0, #42	@ 0x2a
 8000fdc:	f7ff ffa6 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF };
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	0a1b      	lsrs	r3, r3, #8
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	733b      	strb	r3, [r7, #12]
 8000fea:	88fb      	ldrh	r3, [r7, #6]
 8000fec:	b2db      	uxtb	r3, r3
 8000fee:	737b      	strb	r3, [r7, #13]
 8000ff0:	887b      	ldrh	r3, [r7, #2]
 8000ff2:	0a1b      	lsrs	r3, r3, #8
 8000ff4:	b29b      	uxth	r3, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	73bb      	strb	r3, [r7, #14]
 8000ffa:	887b      	ldrh	r3, [r7, #2]
 8000ffc:	b2db      	uxtb	r3, r3
 8000ffe:	73fb      	strb	r3, [r7, #15]
        ILI9341_WriteData(data, sizeof(data));
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	2104      	movs	r1, #4
 8001006:	4618      	mov	r0, r3
 8001008:	f7ff ffaa 	bl	8000f60 <ILI9341_WriteData>
    }

    // row address set
    ILI9341_WriteCommand(0x2B); // RASET
 800100c:	202b      	movs	r0, #43	@ 0x2b
 800100e:	f7ff ff8d 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { (y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF };
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	0a1b      	lsrs	r3, r3, #8
 8001016:	b29b      	uxth	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	723b      	strb	r3, [r7, #8]
 800101c:	88bb      	ldrh	r3, [r7, #4]
 800101e:	b2db      	uxtb	r3, r3
 8001020:	727b      	strb	r3, [r7, #9]
 8001022:	883b      	ldrh	r3, [r7, #0]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	b29b      	uxth	r3, r3
 8001028:	b2db      	uxtb	r3, r3
 800102a:	72bb      	strb	r3, [r7, #10]
 800102c:	883b      	ldrh	r3, [r7, #0]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	72fb      	strb	r3, [r7, #11]
        ILI9341_WriteData(data, sizeof(data));
 8001032:	f107 0308 	add.w	r3, r7, #8
 8001036:	2104      	movs	r1, #4
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff91 	bl	8000f60 <ILI9341_WriteData>
    }

    // write to RAM
    ILI9341_WriteCommand(0x2C); // RAMWR
 800103e:	202c      	movs	r0, #44	@ 0x2c
 8001040:	f7ff ff74 	bl	8000f2c <ILI9341_WriteCommand>
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	bd90      	pop	{r4, r7, pc}

0800104c <ILI9341_Init>:

void ILI9341_Init() {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b09b      	sub	sp, #108	@ 0x6c
 8001050:	af00      	add	r7, sp, #0
    ILI9341_Select();
 8001052:	f7ff ff3f 	bl	8000ed4 <ILI9341_Select>
    ILI9341_Reset();
 8001056:	f7ff ff55 	bl	8000f04 <ILI9341_Reset>

    // command list is based on https://github.com/martnak/STM32-ILI9341

    // SOFTWARE RESET
    ILI9341_WriteCommand(0x01);
 800105a:	2001      	movs	r0, #1
 800105c:	f7ff ff66 	bl	8000f2c <ILI9341_WriteCommand>
    HAL_Delay(1000);
 8001060:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001064:	f001 fae8 	bl	8002638 <HAL_Delay>
        
    // POWER CONTROL A
    ILI9341_WriteCommand(0xCB);
 8001068:	20cb      	movs	r0, #203	@ 0xcb
 800106a:	f7ff ff5f 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x39, 0x2C, 0x00, 0x34, 0x02 };
 800106e:	4a87      	ldr	r2, [pc, #540]	@ (800128c <ILI9341_Init+0x240>)
 8001070:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001074:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001078:	6018      	str	r0, [r3, #0]
 800107a:	3304      	adds	r3, #4
 800107c:	7019      	strb	r1, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 800107e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001082:	2105      	movs	r1, #5
 8001084:	4618      	mov	r0, r3
 8001086:	f7ff ff6b 	bl	8000f60 <ILI9341_WriteData>
    }

    // POWER CONTROL B
    ILI9341_WriteCommand(0xCF);
 800108a:	20cf      	movs	r0, #207	@ 0xcf
 800108c:	f7ff ff4e 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0xC1, 0x30 };
 8001090:	4a7f      	ldr	r2, [pc, #508]	@ (8001290 <ILI9341_Init+0x244>)
 8001092:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8001096:	6812      	ldr	r2, [r2, #0]
 8001098:	4611      	mov	r1, r2
 800109a:	8019      	strh	r1, [r3, #0]
 800109c:	3302      	adds	r3, #2
 800109e:	0c12      	lsrs	r2, r2, #16
 80010a0:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010a2:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80010a6:	2103      	movs	r1, #3
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff ff59 	bl	8000f60 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL A
    ILI9341_WriteCommand(0xE8);
 80010ae:	20e8      	movs	r0, #232	@ 0xe8
 80010b0:	f7ff ff3c 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x85, 0x00, 0x78 };
 80010b4:	4a77      	ldr	r2, [pc, #476]	@ (8001294 <ILI9341_Init+0x248>)
 80010b6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	4611      	mov	r1, r2
 80010be:	8019      	strh	r1, [r3, #0]
 80010c0:	3302      	adds	r3, #2
 80010c2:	0c12      	lsrs	r2, r2, #16
 80010c4:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80010c6:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 80010ca:	2103      	movs	r1, #3
 80010cc:	4618      	mov	r0, r3
 80010ce:	f7ff ff47 	bl	8000f60 <ILI9341_WriteData>
    }

    // DRIVER TIMING CONTROL B
    ILI9341_WriteCommand(0xEA);
 80010d2:	20ea      	movs	r0, #234	@ 0xea
 80010d4:	f7ff ff2a 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x00 };
 80010d8:	2300      	movs	r3, #0
 80010da:	f8a7 3054 	strh.w	r3, [r7, #84]	@ 0x54
        ILI9341_WriteData(data, sizeof(data));
 80010de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010e2:	2102      	movs	r1, #2
 80010e4:	4618      	mov	r0, r3
 80010e6:	f7ff ff3b 	bl	8000f60 <ILI9341_WriteData>
    }

    // POWER ON SEQUENCE CONTROL
    ILI9341_WriteCommand(0xED);
 80010ea:	20ed      	movs	r0, #237	@ 0xed
 80010ec:	f7ff ff1e 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x64, 0x03, 0x12, 0x81 };
 80010f0:	4b69      	ldr	r3, [pc, #420]	@ (8001298 <ILI9341_Init+0x24c>)
 80010f2:	653b      	str	r3, [r7, #80]	@ 0x50
        ILI9341_WriteData(data, sizeof(data));
 80010f4:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80010f8:	2104      	movs	r1, #4
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff ff30 	bl	8000f60 <ILI9341_WriteData>
    }

    // PUMP RATIO CONTROL
    ILI9341_WriteCommand(0xF7);
 8001100:	20f7      	movs	r0, #247	@ 0xf7
 8001102:	f7ff ff13 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x20 };
 8001106:	2320      	movs	r3, #32
 8001108:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
        ILI9341_WriteData(data, sizeof(data));
 800110c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8001110:	2101      	movs	r1, #1
 8001112:	4618      	mov	r0, r3
 8001114:	f7ff ff24 	bl	8000f60 <ILI9341_WriteData>
    }

    // POWER CONTROL,VRH[5:0]
    ILI9341_WriteCommand(0xC0);
 8001118:	20c0      	movs	r0, #192	@ 0xc0
 800111a:	f7ff ff07 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x23 };
 800111e:	2323      	movs	r3, #35	@ 0x23
 8001120:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
        ILI9341_WriteData(data, sizeof(data));
 8001124:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001128:	2101      	movs	r1, #1
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff ff18 	bl	8000f60 <ILI9341_WriteData>
    }

    // POWER CONTROL,SAP[2:0];BT[3:0]
    ILI9341_WriteCommand(0xC1);
 8001130:	20c1      	movs	r0, #193	@ 0xc1
 8001132:	f7ff fefb 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x10 };
 8001136:	2310      	movs	r3, #16
 8001138:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
        ILI9341_WriteData(data, sizeof(data));
 800113c:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8001140:	2101      	movs	r1, #1
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ff0c 	bl	8000f60 <ILI9341_WriteData>
    }

    // VCM CONTROL
    ILI9341_WriteCommand(0xC5);
 8001148:	20c5      	movs	r0, #197	@ 0xc5
 800114a:	f7ff feef 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x3E, 0x28 };
 800114e:	f642 033e 	movw	r3, #10302	@ 0x283e
 8001152:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        ILI9341_WriteData(data, sizeof(data));
 8001156:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800115a:	2102      	movs	r1, #2
 800115c:	4618      	mov	r0, r3
 800115e:	f7ff feff 	bl	8000f60 <ILI9341_WriteData>
    }

    // VCM CONTROL 2
    ILI9341_WriteCommand(0xC7);
 8001162:	20c7      	movs	r0, #199	@ 0xc7
 8001164:	f7ff fee2 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x86 };
 8001168:	2386      	movs	r3, #134	@ 0x86
 800116a:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
        ILI9341_WriteData(data, sizeof(data));
 800116e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8001172:	2101      	movs	r1, #1
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff fef3 	bl	8000f60 <ILI9341_WriteData>
    }

    // MEMORY ACCESS CONTROL
    ILI9341_WriteCommand(0x36);
 800117a:	2036      	movs	r0, #54	@ 0x36
 800117c:	f7ff fed6 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x48 };
 8001180:	2348      	movs	r3, #72	@ 0x48
 8001182:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
        ILI9341_WriteData(data, sizeof(data));
 8001186:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 800118a:	2101      	movs	r1, #1
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff fee7 	bl	8000f60 <ILI9341_WriteData>
    }

    // PIXEL FORMAT
    ILI9341_WriteCommand(0x3A);
 8001192:	203a      	movs	r0, #58	@ 0x3a
 8001194:	f7ff feca 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x55 };
 8001198:	2355      	movs	r3, #85	@ 0x55
 800119a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
        ILI9341_WriteData(data, sizeof(data));
 800119e:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80011a2:	2101      	movs	r1, #1
 80011a4:	4618      	mov	r0, r3
 80011a6:	f7ff fedb 	bl	8000f60 <ILI9341_WriteData>
    }

    // FRAME RATIO CONTROL, STANDARD RGB COLOR
    ILI9341_WriteCommand(0xB1);
 80011aa:	20b1      	movs	r0, #177	@ 0xb1
 80011ac:	f7ff febe 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x18 };
 80011b0:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80011b4:	863b      	strh	r3, [r7, #48]	@ 0x30
        ILI9341_WriteData(data, sizeof(data));
 80011b6:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80011ba:	2102      	movs	r1, #2
 80011bc:	4618      	mov	r0, r3
 80011be:	f7ff fecf 	bl	8000f60 <ILI9341_WriteData>
    }

    // DISPLAY FUNCTION CONTROL
    ILI9341_WriteCommand(0xB6);
 80011c2:	20b6      	movs	r0, #182	@ 0xb6
 80011c4:	f7ff feb2 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x08, 0x82, 0x27 };
 80011c8:	4a34      	ldr	r2, [pc, #208]	@ (800129c <ILI9341_Init+0x250>)
 80011ca:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	8019      	strh	r1, [r3, #0]
 80011d4:	3302      	adds	r3, #2
 80011d6:	0c12      	lsrs	r2, r2, #16
 80011d8:	701a      	strb	r2, [r3, #0]
        ILI9341_WriteData(data, sizeof(data));
 80011da:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80011de:	2103      	movs	r1, #3
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff febd 	bl	8000f60 <ILI9341_WriteData>
    }

    // 3GAMMA FUNCTION DISABLE
    ILI9341_WriteCommand(0xF2);
 80011e6:	20f2      	movs	r0, #242	@ 0xf2
 80011e8:	f7ff fea0 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00 };
 80011ec:	2300      	movs	r3, #0
 80011ee:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        ILI9341_WriteData(data, sizeof(data));
 80011f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011f6:	2101      	movs	r1, #1
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff feb1 	bl	8000f60 <ILI9341_WriteData>
    }

    // GAMMA CURVE SELECTED
    ILI9341_WriteCommand(0x26);
 80011fe:	2026      	movs	r0, #38	@ 0x26
 8001200:	f7ff fe94 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x01 };
 8001204:	2301      	movs	r3, #1
 8001206:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        ILI9341_WriteData(data, sizeof(data));
 800120a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800120e:	2101      	movs	r1, #1
 8001210:	4618      	mov	r0, r3
 8001212:	f7ff fea5 	bl	8000f60 <ILI9341_WriteData>
    }

    // POSITIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE0);
 8001216:	20e0      	movs	r0, #224	@ 0xe0
 8001218:	f7ff fe88 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x0F, 0x31, 0x2B, 0x0C, 0x0E, 0x08, 0x4E, 0xF1,
 800121c:	4b20      	ldr	r3, [pc, #128]	@ (80012a0 <ILI9341_Init+0x254>)
 800121e:	f107 0414 	add.w	r4, r7, #20
 8001222:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001224:	c407      	stmia	r4!, {r0, r1, r2}
 8001226:	8023      	strh	r3, [r4, #0]
 8001228:	3402      	adds	r4, #2
 800122a:	0c1b      	lsrs	r3, r3, #16
 800122c:	7023      	strb	r3, [r4, #0]
                           0x37, 0x07, 0x10, 0x03, 0x0E, 0x09, 0x00 };
        ILI9341_WriteData(data, sizeof(data));
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	210f      	movs	r1, #15
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe93 	bl	8000f60 <ILI9341_WriteData>
    }

    // NEGATIVE GAMMA CORRECTION
    ILI9341_WriteCommand(0xE1);
 800123a:	20e1      	movs	r0, #225	@ 0xe1
 800123c:	f7ff fe76 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { 0x00, 0x0E, 0x14, 0x03, 0x11, 0x07, 0x31, 0xC1,
 8001240:	4b18      	ldr	r3, [pc, #96]	@ (80012a4 <ILI9341_Init+0x258>)
 8001242:	1d3c      	adds	r4, r7, #4
 8001244:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001246:	c407      	stmia	r4!, {r0, r1, r2}
 8001248:	8023      	strh	r3, [r4, #0]
 800124a:	3402      	adds	r4, #2
 800124c:	0c1b      	lsrs	r3, r3, #16
 800124e:	7023      	strb	r3, [r4, #0]
                           0x48, 0x08, 0x0F, 0x0C, 0x31, 0x36, 0x0F };
        ILI9341_WriteData(data, sizeof(data));
 8001250:	1d3b      	adds	r3, r7, #4
 8001252:	210f      	movs	r1, #15
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fe83 	bl	8000f60 <ILI9341_WriteData>
    }

    // EXIT SLEEP
    ILI9341_WriteCommand(0x11);
 800125a:	2011      	movs	r0, #17
 800125c:	f7ff fe66 	bl	8000f2c <ILI9341_WriteCommand>
    HAL_Delay(120);
 8001260:	2078      	movs	r0, #120	@ 0x78
 8001262:	f001 f9e9 	bl	8002638 <HAL_Delay>

    // TURN ON DISPLAY
    ILI9341_WriteCommand(0x29);
 8001266:	2029      	movs	r0, #41	@ 0x29
 8001268:	f7ff fe60 	bl	8000f2c <ILI9341_WriteCommand>

    // MADCTL
    ILI9341_WriteCommand(0x36);
 800126c:	2036      	movs	r0, #54	@ 0x36
 800126e:	f7ff fe5d 	bl	8000f2c <ILI9341_WriteCommand>
    {
        uint8_t data[] = { ILI9341_ROTATION };
 8001272:	2328      	movs	r3, #40	@ 0x28
 8001274:	703b      	strb	r3, [r7, #0]
        ILI9341_WriteData(data, sizeof(data));
 8001276:	463b      	mov	r3, r7
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fe70 	bl	8000f60 <ILI9341_WriteData>
    }

    ILI9341_Unselect();
 8001280:	f7ff fe34 	bl	8000eec <ILI9341_Unselect>
}
 8001284:	bf00      	nop
 8001286:	376c      	adds	r7, #108	@ 0x6c
 8001288:	46bd      	mov	sp, r7
 800128a:	bd90      	pop	{r4, r7, pc}
 800128c:	08010360 	.word	0x08010360
 8001290:	08010368 	.word	0x08010368
 8001294:	0801036c 	.word	0x0801036c
 8001298:	81120364 	.word	0x81120364
 800129c:	08010370 	.word	0x08010370
 80012a0:	08010374 	.word	0x08010374
 80012a4:	08010384 	.word	0x08010384

080012a8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	80fb      	strh	r3, [r7, #6]
 80012b2:	460b      	mov	r3, r1
 80012b4:	80bb      	strh	r3, [r7, #4]
 80012b6:	4613      	mov	r3, r2
 80012b8:	807b      	strh	r3, [r7, #2]
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT))
 80012ba:	88fb      	ldrh	r3, [r7, #6]
 80012bc:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80012c0:	d21f      	bcs.n	8001302 <ILI9341_DrawPixel+0x5a>
 80012c2:	88bb      	ldrh	r3, [r7, #4]
 80012c4:	2bef      	cmp	r3, #239	@ 0xef
 80012c6:	d81c      	bhi.n	8001302 <ILI9341_DrawPixel+0x5a>
        return;

    ILI9341_Select();
 80012c8:	f7ff fe04 	bl	8000ed4 <ILI9341_Select>

    ILI9341_SetAddressWindow(x, y, x+1, y+1);
 80012cc:	88fb      	ldrh	r3, [r7, #6]
 80012ce:	3301      	adds	r3, #1
 80012d0:	b29a      	uxth	r2, r3
 80012d2:	88bb      	ldrh	r3, [r7, #4]
 80012d4:	3301      	adds	r3, #1
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	88b9      	ldrh	r1, [r7, #4]
 80012da:	88f8      	ldrh	r0, [r7, #6]
 80012dc:	f7ff fe6e 	bl	8000fbc <ILI9341_SetAddressWindow>
    uint8_t data[] = { color >> 8, color & 0xFF };
 80012e0:	887b      	ldrh	r3, [r7, #2]
 80012e2:	0a1b      	lsrs	r3, r3, #8
 80012e4:	b29b      	uxth	r3, r3
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	733b      	strb	r3, [r7, #12]
 80012ea:	887b      	ldrh	r3, [r7, #2]
 80012ec:	b2db      	uxtb	r3, r3
 80012ee:	737b      	strb	r3, [r7, #13]
    ILI9341_WriteData(data, sizeof(data));
 80012f0:	f107 030c 	add.w	r3, r7, #12
 80012f4:	2102      	movs	r1, #2
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fe32 	bl	8000f60 <ILI9341_WriteData>

    ILI9341_Unselect();
 80012fc:	f7ff fdf6 	bl	8000eec <ILI9341_Unselect>
 8001300:	e000      	b.n	8001304 <ILI9341_DrawPixel+0x5c>
        return;
 8001302:	bf00      	nop
}
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}

0800130a <ILI9341_WriteChar>:

static void ILI9341_WriteChar(uint16_t x, uint16_t y, char ch, FontDef font, uint16_t color, uint16_t bgcolor) {
 800130a:	b082      	sub	sp, #8
 800130c:	b580      	push	{r7, lr}
 800130e:	b088      	sub	sp, #32
 8001310:	af00      	add	r7, sp, #0
 8001312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001314:	4603      	mov	r3, r0
 8001316:	80fb      	strh	r3, [r7, #6]
 8001318:	460b      	mov	r3, r1
 800131a:	80bb      	strh	r3, [r7, #4]
 800131c:	4613      	mov	r3, r2
 800131e:	70fb      	strb	r3, [r7, #3]
    uint32_t i, b, j;

    ILI9341_SetAddressWindow(x, y, x+font.width-1, y+font.height-1);
 8001320:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001324:	461a      	mov	r2, r3
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4413      	add	r3, r2
 800132a:	b29b      	uxth	r3, r3
 800132c:	3b01      	subs	r3, #1
 800132e:	b29a      	uxth	r2, r3
 8001330:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001334:	4619      	mov	r1, r3
 8001336:	88bb      	ldrh	r3, [r7, #4]
 8001338:	440b      	add	r3, r1
 800133a:	b29b      	uxth	r3, r3
 800133c:	3b01      	subs	r3, #1
 800133e:	b29b      	uxth	r3, r3
 8001340:	88b9      	ldrh	r1, [r7, #4]
 8001342:	88f8      	ldrh	r0, [r7, #6]
 8001344:	f7ff fe3a 	bl	8000fbc <ILI9341_SetAddressWindow>

    for(i = 0; i < font.height; i++) {
 8001348:	2300      	movs	r3, #0
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	e041      	b.n	80013d2 <ILI9341_WriteChar+0xc8>
        b = font.data[(ch - 32) * font.height + i];
 800134e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8001350:	78fb      	ldrb	r3, [r7, #3]
 8001352:	3b20      	subs	r3, #32
 8001354:	f897 102d 	ldrb.w	r1, [r7, #45]	@ 0x2d
 8001358:	fb01 f303 	mul.w	r3, r1, r3
 800135c:	4619      	mov	r1, r3
 800135e:	69fb      	ldr	r3, [r7, #28]
 8001360:	440b      	add	r3, r1
 8001362:	005b      	lsls	r3, r3, #1
 8001364:	4413      	add	r3, r2
 8001366:	881b      	ldrh	r3, [r3, #0]
 8001368:	617b      	str	r3, [r7, #20]
        for(j = 0; j < font.width; j++) {
 800136a:	2300      	movs	r3, #0
 800136c:	61bb      	str	r3, [r7, #24]
 800136e:	e027      	b.n	80013c0 <ILI9341_WriteChar+0xb6>
            if((b << j) & 0x8000)  {
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	69bb      	ldr	r3, [r7, #24]
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800137c:	2b00      	cmp	r3, #0
 800137e:	d00e      	beq.n	800139e <ILI9341_WriteChar+0x94>
                uint8_t data[] = { color >> 8, color & 0xFF };
 8001380:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8001382:	0a1b      	lsrs	r3, r3, #8
 8001384:	b29b      	uxth	r3, r3
 8001386:	b2db      	uxtb	r3, r3
 8001388:	743b      	strb	r3, [r7, #16]
 800138a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 800138c:	b2db      	uxtb	r3, r3
 800138e:	747b      	strb	r3, [r7, #17]
                ILI9341_WriteData(data, sizeof(data));
 8001390:	f107 0310 	add.w	r3, r7, #16
 8001394:	2102      	movs	r1, #2
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fde2 	bl	8000f60 <ILI9341_WriteData>
 800139c:	e00d      	b.n	80013ba <ILI9341_WriteChar+0xb0>
            } else {
                uint8_t data[] = { bgcolor >> 8, bgcolor & 0xFF };
 800139e:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80013a0:	0a1b      	lsrs	r3, r3, #8
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	733b      	strb	r3, [r7, #12]
 80013a8:	8f3b      	ldrh	r3, [r7, #56]	@ 0x38
 80013aa:	b2db      	uxtb	r3, r3
 80013ac:	737b      	strb	r3, [r7, #13]
                ILI9341_WriteData(data, sizeof(data));
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2102      	movs	r1, #2
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff fdd3 	bl	8000f60 <ILI9341_WriteData>
        for(j = 0; j < font.width; j++) {
 80013ba:	69bb      	ldr	r3, [r7, #24]
 80013bc:	3301      	adds	r3, #1
 80013be:	61bb      	str	r3, [r7, #24]
 80013c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80013c4:	461a      	mov	r2, r3
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d3d1      	bcc.n	8001370 <ILI9341_WriteChar+0x66>
    for(i = 0; i < font.height; i++) {
 80013cc:	69fb      	ldr	r3, [r7, #28]
 80013ce:	3301      	adds	r3, #1
 80013d0:	61fb      	str	r3, [r7, #28]
 80013d2:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 80013d6:	461a      	mov	r2, r3
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	4293      	cmp	r3, r2
 80013dc:	d3b7      	bcc.n	800134e <ILI9341_WriteChar+0x44>
            }
        }
    }
}
 80013de:	bf00      	nop
 80013e0:	bf00      	nop
 80013e2:	3720      	adds	r7, #32
 80013e4:	46bd      	mov	sp, r7
 80013e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80013ea:	b002      	add	sp, #8
 80013ec:	4770      	bx	lr

080013ee <ILI9341_WriteString>:

void ILI9341_WriteString(uint16_t x, uint16_t y, const char* str, FontDef font, uint16_t color, uint16_t bgcolor) {
 80013ee:	b082      	sub	sp, #8
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b086      	sub	sp, #24
 80013f4:	af04      	add	r7, sp, #16
 80013f6:	603a      	str	r2, [r7, #0]
 80013f8:	617b      	str	r3, [r7, #20]
 80013fa:	4603      	mov	r3, r0
 80013fc:	80fb      	strh	r3, [r7, #6]
 80013fe:	460b      	mov	r3, r1
 8001400:	80bb      	strh	r3, [r7, #4]
    ILI9341_Select();
 8001402:	f7ff fd67 	bl	8000ed4 <ILI9341_Select>

    while(*str) {
 8001406:	e02e      	b.n	8001466 <ILI9341_WriteString+0x78>
        if(x + font.width >= ILI9341_WIDTH) {
 8001408:	88fb      	ldrh	r3, [r7, #6]
 800140a:	7d3a      	ldrb	r2, [r7, #20]
 800140c:	4413      	add	r3, r2
 800140e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8001412:	db13      	blt.n	800143c <ILI9341_WriteString+0x4e>
            x = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	80fb      	strh	r3, [r7, #6]
            y += font.height;
 8001418:	7d7b      	ldrb	r3, [r7, #21]
 800141a:	461a      	mov	r2, r3
 800141c:	88bb      	ldrh	r3, [r7, #4]
 800141e:	4413      	add	r3, r2
 8001420:	80bb      	strh	r3, [r7, #4]
            if(y + font.height >= ILI9341_HEIGHT) {
 8001422:	88bb      	ldrh	r3, [r7, #4]
 8001424:	7d7a      	ldrb	r2, [r7, #21]
 8001426:	4413      	add	r3, r2
 8001428:	2bef      	cmp	r3, #239	@ 0xef
 800142a:	dc21      	bgt.n	8001470 <ILI9341_WriteString+0x82>
                break;
            }

            if(*str == ' ') {
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b20      	cmp	r3, #32
 8001432:	d103      	bne.n	800143c <ILI9341_WriteString+0x4e>
                // skip spaces in the beginning of the new line
                str++;
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	3301      	adds	r3, #1
 8001438:	603b      	str	r3, [r7, #0]
                continue;
 800143a:	e014      	b.n	8001466 <ILI9341_WriteString+0x78>
            }
        }

        ILI9341_WriteChar(x, y, *str, font, color, bgcolor);
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	781a      	ldrb	r2, [r3, #0]
 8001440:	88b9      	ldrh	r1, [r7, #4]
 8001442:	88f8      	ldrh	r0, [r7, #6]
 8001444:	8c3b      	ldrh	r3, [r7, #32]
 8001446:	9302      	str	r3, [sp, #8]
 8001448:	8bbb      	ldrh	r3, [r7, #28]
 800144a:	9301      	str	r3, [sp, #4]
 800144c:	69bb      	ldr	r3, [r7, #24]
 800144e:	9300      	str	r3, [sp, #0]
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	f7ff ff5a 	bl	800130a <ILI9341_WriteChar>
        x += font.width;
 8001456:	7d3b      	ldrb	r3, [r7, #20]
 8001458:	461a      	mov	r2, r3
 800145a:	88fb      	ldrh	r3, [r7, #6]
 800145c:	4413      	add	r3, r2
 800145e:	80fb      	strh	r3, [r7, #6]
        str++;
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	3301      	adds	r3, #1
 8001464:	603b      	str	r3, [r7, #0]
    while(*str) {
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d1cc      	bne.n	8001408 <ILI9341_WriteString+0x1a>
 800146e:	e000      	b.n	8001472 <ILI9341_WriteString+0x84>
                break;
 8001470:	bf00      	nop
    }

    ILI9341_Unselect();
 8001472:	f7ff fd3b 	bl	8000eec <ILI9341_Unselect>
}
 8001476:	bf00      	nop
 8001478:	3708      	adds	r7, #8
 800147a:	46bd      	mov	sp, r7
 800147c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001480:	b002      	add	sp, #8
 8001482:	4770      	bx	lr

08001484 <ILI9341_FillRectangle>:

void ILI9341_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8001484:	b590      	push	{r4, r7, lr}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	4604      	mov	r4, r0
 800148c:	4608      	mov	r0, r1
 800148e:	4611      	mov	r1, r2
 8001490:	461a      	mov	r2, r3
 8001492:	4623      	mov	r3, r4
 8001494:	80fb      	strh	r3, [r7, #6]
 8001496:	4603      	mov	r3, r0
 8001498:	80bb      	strh	r3, [r7, #4]
 800149a:	460b      	mov	r3, r1
 800149c:	807b      	strh	r3, [r7, #2]
 800149e:	4613      	mov	r3, r2
 80014a0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 80014a2:	88fb      	ldrh	r3, [r7, #6]
 80014a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014a8:	d252      	bcs.n	8001550 <ILI9341_FillRectangle+0xcc>
 80014aa:	88bb      	ldrh	r3, [r7, #4]
 80014ac:	2bef      	cmp	r3, #239	@ 0xef
 80014ae:	d84f      	bhi.n	8001550 <ILI9341_FillRectangle+0xcc>
    if((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 80014b0:	88fa      	ldrh	r2, [r7, #6]
 80014b2:	887b      	ldrh	r3, [r7, #2]
 80014b4:	4413      	add	r3, r2
 80014b6:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80014ba:	dd03      	ble.n	80014c4 <ILI9341_FillRectangle+0x40>
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 80014c2:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 80014c4:	88ba      	ldrh	r2, [r7, #4]
 80014c6:	883b      	ldrh	r3, [r7, #0]
 80014c8:	4413      	add	r3, r2
 80014ca:	2bf0      	cmp	r3, #240	@ 0xf0
 80014cc:	dd03      	ble.n	80014d6 <ILI9341_FillRectangle+0x52>
 80014ce:	88bb      	ldrh	r3, [r7, #4]
 80014d0:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 80014d4:	803b      	strh	r3, [r7, #0]

    ILI9341_Select();
 80014d6:	f7ff fcfd 	bl	8000ed4 <ILI9341_Select>
    ILI9341_SetAddressWindow(x, y, x+w-1, y+h-1);
 80014da:	88fa      	ldrh	r2, [r7, #6]
 80014dc:	887b      	ldrh	r3, [r7, #2]
 80014de:	4413      	add	r3, r2
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	3b01      	subs	r3, #1
 80014e4:	b29c      	uxth	r4, r3
 80014e6:	88ba      	ldrh	r2, [r7, #4]
 80014e8:	883b      	ldrh	r3, [r7, #0]
 80014ea:	4413      	add	r3, r2
 80014ec:	b29b      	uxth	r3, r3
 80014ee:	3b01      	subs	r3, #1
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	88b9      	ldrh	r1, [r7, #4]
 80014f4:	88f8      	ldrh	r0, [r7, #6]
 80014f6:	4622      	mov	r2, r4
 80014f8:	f7ff fd60 	bl	8000fbc <ILI9341_SetAddressWindow>

    uint8_t data[] = { color >> 8, color & 0xFF };
 80014fc:	8c3b      	ldrh	r3, [r7, #32]
 80014fe:	0a1b      	lsrs	r3, r3, #8
 8001500:	b29b      	uxth	r3, r3
 8001502:	b2db      	uxtb	r3, r3
 8001504:	733b      	strb	r3, [r7, #12]
 8001506:	8c3b      	ldrh	r3, [r7, #32]
 8001508:	b2db      	uxtb	r3, r3
 800150a:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(ILI9341_DC_GPIO_Port, ILI9341_DC_Pin, GPIO_PIN_SET);
 800150c:	2201      	movs	r2, #1
 800150e:	2101      	movs	r1, #1
 8001510:	4811      	ldr	r0, [pc, #68]	@ (8001558 <ILI9341_FillRectangle+0xd4>)
 8001512:	f001 febf 	bl	8003294 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8001516:	883b      	ldrh	r3, [r7, #0]
 8001518:	80bb      	strh	r3, [r7, #4]
 800151a:	e013      	b.n	8001544 <ILI9341_FillRectangle+0xc0>
        for(x = w; x > 0; x--) {
 800151c:	887b      	ldrh	r3, [r7, #2]
 800151e:	80fb      	strh	r3, [r7, #6]
 8001520:	e00a      	b.n	8001538 <ILI9341_FillRectangle+0xb4>
            HAL_SPI_Transmit(&ILI9341_SPI_PORT, data, sizeof(data), HAL_MAX_DELAY);
 8001522:	f107 010c 	add.w	r1, r7, #12
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800152a:	2202      	movs	r2, #2
 800152c:	480b      	ldr	r0, [pc, #44]	@ (800155c <ILI9341_FillRectangle+0xd8>)
 800152e:	f003 faee 	bl	8004b0e <HAL_SPI_Transmit>
        for(x = w; x > 0; x--) {
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	3b01      	subs	r3, #1
 8001536:	80fb      	strh	r3, [r7, #6]
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	2b00      	cmp	r3, #0
 800153c:	d1f1      	bne.n	8001522 <ILI9341_FillRectangle+0x9e>
    for(y = h; y > 0; y--) {
 800153e:	88bb      	ldrh	r3, [r7, #4]
 8001540:	3b01      	subs	r3, #1
 8001542:	80bb      	strh	r3, [r7, #4]
 8001544:	88bb      	ldrh	r3, [r7, #4]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d1e8      	bne.n	800151c <ILI9341_FillRectangle+0x98>
        }
    }

    ILI9341_Unselect();
 800154a:	f7ff fccf 	bl	8000eec <ILI9341_Unselect>
 800154e:	e000      	b.n	8001552 <ILI9341_FillRectangle+0xce>
    if((x >= ILI9341_WIDTH) || (y >= ILI9341_HEIGHT)) return;
 8001550:	bf00      	nop
}
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	bd90      	pop	{r4, r7, pc}
 8001558:	40020400 	.word	0x40020400
 800155c:	200006ac 	.word	0x200006ac

08001560 <ILI9341_FillScreen>:

void ILI9341_FillScreen(uint16_t color) {
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af02      	add	r7, sp, #8
 8001566:	4603      	mov	r3, r0
 8001568:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRectangle(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 800156a:	88fb      	ldrh	r3, [r7, #6]
 800156c:	9300      	str	r3, [sp, #0]
 800156e:	23f0      	movs	r3, #240	@ 0xf0
 8001570:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001574:	2100      	movs	r1, #0
 8001576:	2000      	movs	r0, #0
 8001578:	f7ff ff84 	bl	8001484 <ILI9341_FillRectangle>
}
 800157c:	bf00      	nop
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001588:	f001 f814 	bl	80025b4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800158c:	f000 f888 	bl	80016a0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001590:	f000 f990 	bl	80018b4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001594:	f000 f96e 	bl	8001874 <MX_DMA_Init>
	MX_CRC_Init();
 8001598:	f000 f8ec 	bl	8001774 <MX_CRC_Init>
	MX_I2S2_Init();
 800159c:	f000 f906 	bl	80017ac <MX_I2S2_Init>
	MX_PDM2PCM_Init();
 80015a0:	f007 fd02 	bl	8008fa8 <MX_PDM2PCM_Init>
	MX_SPI1_Init();
 80015a4:	f000 f930 	bl	8001808 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */

	/* Display driver initialize */
	ILI9341_Init();
 80015a8:	f7ff fd50 	bl	800104c <ILI9341_Init>
	ILI9341_FillScreen(ILI9341_BLACK);
 80015ac:	2000      	movs	r0, #0
 80015ae:	f7ff ffd7 	bl	8001560 <ILI9341_FillScreen>
#if TEST
	ILI9341_DrawImage(0, 0, 240, 240, (uint16_t*) test_img_240x240);
#endif

	/* DMA initialize */
	HAL_I2S_Receive_DMA(&hi2s2, (uint16_t*) rx_buff, RX_BUFFER_SIZE);
 80015b2:	2280      	movs	r2, #128	@ 0x80
 80015b4:	4923      	ldr	r1, [pc, #140]	@ (8001644 <main+0xc0>)
 80015b6:	4824      	ldr	r0, [pc, #144]	@ (8001648 <main+0xc4>)
 80015b8:	f001 ffc6 	bl	8003548 <HAL_I2S_Receive_DMA>

	/* FFT initialize */
	arm_rfft_fast_init_f32(&fft_audio_instance, FFT_LENGTH);
 80015bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80015c0:	4822      	ldr	r0, [pc, #136]	@ (800164c <main+0xc8>)
 80015c2:	f009 fcb3 	bl	800af2c <arm_rfft_fast_init_f32>

	/* Init Hann multipliers */
	init_hann_window(hann_table);
 80015c6:	4822      	ldr	r0, [pc, #136]	@ (8001650 <main+0xcc>)
 80015c8:	f000 fa58 	bl	8001a7c <init_hann_window>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 80015cc:	f003 ffa0 	bl	8005510 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of NormalizedMutex */
	NormalizedMutexHandle = osMutexNew(&NormalizedMutex_attributes);
 80015d0:	4820      	ldr	r0, [pc, #128]	@ (8001654 <main+0xd0>)
 80015d2:	f004 f960 	bl	8005896 <osMutexNew>
 80015d6:	4603      	mov	r3, r0
 80015d8:	4a1f      	ldr	r2, [pc, #124]	@ (8001658 <main+0xd4>)
 80015da:	6013      	str	r3, [r2, #0]

	/* creation of FFTMagMutex */
	FFTMagMutexHandle = osMutexNew(&FFTMagMutex_attributes);
 80015dc:	481f      	ldr	r0, [pc, #124]	@ (800165c <main+0xd8>)
 80015de:	f004 f95a 	bl	8005896 <osMutexNew>
 80015e2:	4603      	mov	r3, r0
 80015e4:	4a1e      	ldr	r2, [pc, #120]	@ (8001660 <main+0xdc>)
 80015e6:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of AudioCapture */
	AudioCaptureHandle = osThreadNew(AudioCaptureTask, NULL,
 80015e8:	4a1e      	ldr	r2, [pc, #120]	@ (8001664 <main+0xe0>)
 80015ea:	2100      	movs	r1, #0
 80015ec:	481e      	ldr	r0, [pc, #120]	@ (8001668 <main+0xe4>)
 80015ee:	f003 ffd9 	bl	80055a4 <osThreadNew>
 80015f2:	4603      	mov	r3, r0
 80015f4:	4a1d      	ldr	r2, [pc, #116]	@ (800166c <main+0xe8>)
 80015f6:	6013      	str	r3, [r2, #0]
			&AudioCapture_attributes);

	/* creation of FFTProcessing */
	FFTProcessingHandle = osThreadNew(FFTProcessingTask, NULL,
 80015f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001670 <main+0xec>)
 80015fa:	2100      	movs	r1, #0
 80015fc:	481d      	ldr	r0, [pc, #116]	@ (8001674 <main+0xf0>)
 80015fe:	f003 ffd1 	bl	80055a4 <osThreadNew>
 8001602:	4603      	mov	r3, r0
 8001604:	4a1c      	ldr	r2, [pc, #112]	@ (8001678 <main+0xf4>)
 8001606:	6013      	str	r3, [r2, #0]
			&FFTProcessing_attributes);

	/* creation of DisplayOutput */
	DisplayOutputHandle = osThreadNew(DisplayOutputTask, NULL,
 8001608:	4a1c      	ldr	r2, [pc, #112]	@ (800167c <main+0xf8>)
 800160a:	2100      	movs	r1, #0
 800160c:	481c      	ldr	r0, [pc, #112]	@ (8001680 <main+0xfc>)
 800160e:	f003 ffc9 	bl	80055a4 <osThreadNew>
 8001612:	4603      	mov	r3, r0
 8001614:	4a1b      	ldr	r2, [pc, #108]	@ (8001684 <main+0x100>)
 8001616:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
	/* USER CODE END RTOS_THREADS */

	/* creation of AudioCallbackReady */
	AudioCallbackReadyHandle = osEventFlagsNew(&AudioCallbackReady_attributes);
 8001618:	481b      	ldr	r0, [pc, #108]	@ (8001688 <main+0x104>)
 800161a:	f004 f855 	bl	80056c8 <osEventFlagsNew>
 800161e:	4603      	mov	r3, r0
 8001620:	4a1a      	ldr	r2, [pc, #104]	@ (800168c <main+0x108>)
 8001622:	6013      	str	r3, [r2, #0]

	/* creation of FFTReady */
	FFTReadyHandle = osEventFlagsNew(&FFTReady_attributes);
 8001624:	481a      	ldr	r0, [pc, #104]	@ (8001690 <main+0x10c>)
 8001626:	f004 f84f 	bl	80056c8 <osEventFlagsNew>
 800162a:	4603      	mov	r3, r0
 800162c:	4a19      	ldr	r2, [pc, #100]	@ (8001694 <main+0x110>)
 800162e:	6013      	str	r3, [r2, #0]

	/* creation of AudioBuffReady */
	AudioBuffReadyHandle = osEventFlagsNew(&AudioBuffReady_attributes);
 8001630:	4819      	ldr	r0, [pc, #100]	@ (8001698 <main+0x114>)
 8001632:	f004 f849 	bl	80056c8 <osEventFlagsNew>
 8001636:	4603      	mov	r3, r0
 8001638:	4a18      	ldr	r2, [pc, #96]	@ (800169c <main+0x118>)
 800163a:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 800163c:	f003 ff8c 	bl	8005558 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <main+0xbc>
 8001644:	2000073c 	.word	0x2000073c
 8001648:	20000604 	.word	0x20000604
 800164c:	20000724 	.word	0x20000724
 8001650:	2000183c 	.word	0x2000183c
 8001654:	08010c0c 	.word	0x08010c0c
 8001658:	20000710 	.word	0x20000710
 800165c:	08010c1c 	.word	0x08010c1c
 8001660:	20000714 	.word	0x20000714
 8001664:	08010ba0 	.word	0x08010ba0
 8001668:	08001ca9 	.word	0x08001ca9
 800166c:	20000704 	.word	0x20000704
 8001670:	08010bc4 	.word	0x08010bc4
 8001674:	08001d69 	.word	0x08001d69
 8001678:	20000708 	.word	0x20000708
 800167c:	08010be8 	.word	0x08010be8
 8001680:	08001df5 	.word	0x08001df5
 8001684:	2000070c 	.word	0x2000070c
 8001688:	08010c2c 	.word	0x08010c2c
 800168c:	20000718 	.word	0x20000718
 8001690:	08010c3c 	.word	0x08010c3c
 8001694:	2000071c 	.word	0x2000071c
 8001698:	08010c4c 	.word	0x08010c4c
 800169c:	20000720 	.word	0x20000720

080016a0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b094      	sub	sp, #80	@ 0x50
 80016a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80016a6:	f107 0320 	add.w	r3, r7, #32
 80016aa:	2230      	movs	r2, #48	@ 0x30
 80016ac:	2100      	movs	r1, #0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f00b fad5 	bl	800cc5e <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80016b4:	f107 030c 	add.w	r3, r7, #12
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
 80016bc:	605a      	str	r2, [r3, #4]
 80016be:	609a      	str	r2, [r3, #8]
 80016c0:	60da      	str	r2, [r3, #12]
 80016c2:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80016c4:	2300      	movs	r3, #0
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	4b28      	ldr	r3, [pc, #160]	@ (800176c <SystemClock_Config+0xcc>)
 80016ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016cc:	4a27      	ldr	r2, [pc, #156]	@ (800176c <SystemClock_Config+0xcc>)
 80016ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80016d4:	4b25      	ldr	r3, [pc, #148]	@ (800176c <SystemClock_Config+0xcc>)
 80016d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016dc:	60bb      	str	r3, [r7, #8]
 80016de:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80016e0:	2300      	movs	r3, #0
 80016e2:	607b      	str	r3, [r7, #4]
 80016e4:	4b22      	ldr	r3, [pc, #136]	@ (8001770 <SystemClock_Config+0xd0>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	4a21      	ldr	r2, [pc, #132]	@ (8001770 <SystemClock_Config+0xd0>)
 80016ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016ee:	6013      	str	r3, [r2, #0]
 80016f0:	4b1f      	ldr	r3, [pc, #124]	@ (8001770 <SystemClock_Config+0xd0>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016f8:	607b      	str	r3, [r7, #4]
 80016fa:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016fc:	2301      	movs	r3, #1
 80016fe:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001700:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001704:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001706:	2302      	movs	r3, #2
 8001708:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800170a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800170e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001710:	2308      	movs	r3, #8
 8001712:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 8001714:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001718:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800171a:	2302      	movs	r3, #2
 800171c:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 800171e:	2307      	movs	r3, #7
 8001720:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001722:	f107 0320 	add.w	r3, r7, #32
 8001726:	4618      	mov	r0, r3
 8001728:	f002 fb70 	bl	8003e0c <HAL_RCC_OscConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x96>
		Error_Handler();
 8001732:	f000 fc3f 	bl	8001fb4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001736:	230f      	movs	r3, #15
 8001738:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800173a:	2302      	movs	r3, #2
 800173c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800173e:	2300      	movs	r3, #0
 8001740:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001742:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001746:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001748:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800174c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK) {
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	2105      	movs	r1, #5
 8001754:	4618      	mov	r0, r3
 8001756:	f002 fdd1 	bl	80042fc <HAL_RCC_ClockConfig>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <SystemClock_Config+0xc4>
		Error_Handler();
 8001760:	f000 fc28 	bl	8001fb4 <Error_Handler>
	}
}
 8001764:	bf00      	nop
 8001766:	3750      	adds	r7, #80	@ 0x50
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	40023800 	.word	0x40023800
 8001770:	40007000 	.word	0x40007000

08001774 <MX_CRC_Init>:
/**
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void) {
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8001778:	4b0a      	ldr	r3, [pc, #40]	@ (80017a4 <MX_CRC_Init+0x30>)
 800177a:	4a0b      	ldr	r2, [pc, #44]	@ (80017a8 <MX_CRC_Init+0x34>)
 800177c:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK) {
 800177e:	4809      	ldr	r0, [pc, #36]	@ (80017a4 <MX_CRC_Init+0x30>)
 8001780:	f001 f860 	bl	8002844 <HAL_CRC_Init>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_CRC_Init+0x1a>
		Error_Handler();
 800178a:	f000 fc13 	bl	8001fb4 <Error_Handler>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 800178e:	4b05      	ldr	r3, [pc, #20]	@ (80017a4 <MX_CRC_Init+0x30>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	4b03      	ldr	r3, [pc, #12]	@ (80017a4 <MX_CRC_Init+0x30>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f042 0201 	orr.w	r2, r2, #1
 800179c:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800179e:	bf00      	nop
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop
 80017a4:	200005fc 	.word	0x200005fc
 80017a8:	40023000 	.word	0x40023000

080017ac <MX_I2S2_Init>:
/**
 * @brief I2S2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2S2_Init(void) {
 80017ac:	b580      	push	{r7, lr}
 80017ae:	af00      	add	r7, sp, #0
	/* USER CODE END I2S2_Init 0 */

	/* USER CODE BEGIN I2S2_Init 1 */

	/* USER CODE END I2S2_Init 1 */
	hi2s2.Instance = SPI2;
 80017b0:	4b13      	ldr	r3, [pc, #76]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017b2:	4a14      	ldr	r2, [pc, #80]	@ (8001804 <MX_I2S2_Init+0x58>)
 80017b4:	601a      	str	r2, [r3, #0]
	hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80017b6:	4b12      	ldr	r3, [pc, #72]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017b8:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80017bc:	605a      	str	r2, [r3, #4]
	hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80017be:	4b10      	ldr	r3, [pc, #64]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	609a      	str	r2, [r3, #8]
	hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	60da      	str	r2, [r3, #12]
	hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80017ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	611a      	str	r2, [r3, #16]
	hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017d2:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 80017d6:	615a      	str	r2, [r3, #20]
	hi2s2.Init.CPOL = I2S_CPOL_LOW;
 80017d8:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017da:	2200      	movs	r2, #0
 80017dc:	619a      	str	r2, [r3, #24]
	hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 80017de:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	61da      	str	r2, [r3, #28]
	hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80017e4:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	621a      	str	r2, [r3, #32]
	if (HAL_I2S_Init(&hi2s2) != HAL_OK) {
 80017ea:	4805      	ldr	r0, [pc, #20]	@ (8001800 <MX_I2S2_Init+0x54>)
 80017ec:	f001 fd6c 	bl	80032c8 <HAL_I2S_Init>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d001      	beq.n	80017fa <MX_I2S2_Init+0x4e>
		Error_Handler();
 80017f6:	f000 fbdd 	bl	8001fb4 <Error_Handler>
	}
	/* USER CODE BEGIN I2S2_Init 2 */

	/* USER CODE END I2S2_Init 2 */

}
 80017fa:	bf00      	nop
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	20000604 	.word	0x20000604
 8001804:	40003800 	.word	0x40003800

08001808 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 800180c:	4b17      	ldr	r3, [pc, #92]	@ (800186c <MX_SPI1_Init+0x64>)
 800180e:	4a18      	ldr	r2, [pc, #96]	@ (8001870 <MX_SPI1_Init+0x68>)
 8001810:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001812:	4b16      	ldr	r3, [pc, #88]	@ (800186c <MX_SPI1_Init+0x64>)
 8001814:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001818:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800181a:	4b14      	ldr	r3, [pc, #80]	@ (800186c <MX_SPI1_Init+0x64>)
 800181c:	2200      	movs	r2, #0
 800181e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001820:	4b12      	ldr	r3, [pc, #72]	@ (800186c <MX_SPI1_Init+0x64>)
 8001822:	2200      	movs	r2, #0
 8001824:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001826:	4b11      	ldr	r3, [pc, #68]	@ (800186c <MX_SPI1_Init+0x64>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800182c:	4b0f      	ldr	r3, [pc, #60]	@ (800186c <MX_SPI1_Init+0x64>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001832:	4b0e      	ldr	r3, [pc, #56]	@ (800186c <MX_SPI1_Init+0x64>)
 8001834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001838:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800183a:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <MX_SPI1_Init+0x64>)
 800183c:	2210      	movs	r2, #16
 800183e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001840:	4b0a      	ldr	r3, [pc, #40]	@ (800186c <MX_SPI1_Init+0x64>)
 8001842:	2200      	movs	r2, #0
 8001844:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001846:	4b09      	ldr	r3, [pc, #36]	@ (800186c <MX_SPI1_Init+0x64>)
 8001848:	2200      	movs	r2, #0
 800184a:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184c:	4b07      	ldr	r3, [pc, #28]	@ (800186c <MX_SPI1_Init+0x64>)
 800184e:	2200      	movs	r2, #0
 8001850:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001852:	4b06      	ldr	r3, [pc, #24]	@ (800186c <MX_SPI1_Init+0x64>)
 8001854:	220a      	movs	r2, #10
 8001856:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001858:	4804      	ldr	r0, [pc, #16]	@ (800186c <MX_SPI1_Init+0x64>)
 800185a:	f003 f8cf 	bl	80049fc <HAL_SPI_Init>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001864:	f000 fba6 	bl	8001fb4 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001868:	bf00      	nop
 800186a:	bd80      	pop	{r7, pc}
 800186c:	200006ac 	.word	0x200006ac
 8001870:	40013000 	.word	0x40013000

08001874 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 8001874:	b580      	push	{r7, lr}
 8001876:	b082      	sub	sp, #8
 8001878:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	607b      	str	r3, [r7, #4]
 800187e:	4b0c      	ldr	r3, [pc, #48]	@ (80018b0 <MX_DMA_Init+0x3c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001882:	4a0b      	ldr	r2, [pc, #44]	@ (80018b0 <MX_DMA_Init+0x3c>)
 8001884:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001888:	6313      	str	r3, [r2, #48]	@ 0x30
 800188a:	4b09      	ldr	r3, [pc, #36]	@ (80018b0 <MX_DMA_Init+0x3c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800188e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001892:	607b      	str	r3, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8001896:	2200      	movs	r2, #0
 8001898:	2105      	movs	r1, #5
 800189a:	200e      	movs	r0, #14
 800189c:	f000 ffa8 	bl	80027f0 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 80018a0:	200e      	movs	r0, #14
 80018a2:	f000 ffc1 	bl	8002828 <HAL_NVIC_EnableIRQ>

}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	40023800 	.word	0x40023800

080018b4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b08a      	sub	sp, #40	@ 0x28
 80018b8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80018ba:	f107 0314 	add.w	r3, r7, #20
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]
 80018c2:	605a      	str	r2, [r3, #4]
 80018c4:	609a      	str	r2, [r3, #8]
 80018c6:	60da      	str	r2, [r3, #12]
 80018c8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	613b      	str	r3, [r7, #16]
 80018ce:	4b4e      	ldr	r3, [pc, #312]	@ (8001a08 <MX_GPIO_Init+0x154>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018d2:	4a4d      	ldr	r2, [pc, #308]	@ (8001a08 <MX_GPIO_Init+0x154>)
 80018d4:	f043 0304 	orr.w	r3, r3, #4
 80018d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018da:	4b4b      	ldr	r3, [pc, #300]	@ (8001a08 <MX_GPIO_Init+0x154>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018de:	f003 0304 	and.w	r3, r3, #4
 80018e2:	613b      	str	r3, [r7, #16]
 80018e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	4b47      	ldr	r3, [pc, #284]	@ (8001a08 <MX_GPIO_Init+0x154>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018ee:	4a46      	ldr	r2, [pc, #280]	@ (8001a08 <MX_GPIO_Init+0x154>)
 80018f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80018f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80018f6:	4b44      	ldr	r3, [pc, #272]	@ (8001a08 <MX_GPIO_Init+0x154>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80018fe:	60fb      	str	r3, [r7, #12]
 8001900:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001902:	2300      	movs	r3, #0
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	4b40      	ldr	r3, [pc, #256]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800190a:	4a3f      	ldr	r2, [pc, #252]	@ (8001a08 <MX_GPIO_Init+0x154>)
 800190c:	f043 0301 	orr.w	r3, r3, #1
 8001910:	6313      	str	r3, [r2, #48]	@ 0x30
 8001912:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001916:	f003 0301 	and.w	r3, r3, #1
 800191a:	60bb      	str	r3, [r7, #8]
 800191c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b39      	ldr	r3, [pc, #228]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001926:	4a38      	ldr	r2, [pc, #224]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001928:	f043 0302 	orr.w	r3, r3, #2
 800192c:	6313      	str	r3, [r2, #48]	@ 0x30
 800192e:	4b36      	ldr	r3, [pc, #216]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b32      	ldr	r3, [pc, #200]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001942:	4a31      	ldr	r2, [pc, #196]	@ (8001a08 <MX_GPIO_Init+0x154>)
 8001944:	f043 0308 	orr.w	r3, r3, #8
 8001948:	6313      	str	r3, [r2, #48]	@ 0x30
 800194a:	4b2f      	ldr	r3, [pc, #188]	@ (8001a08 <MX_GPIO_Init+0x154>)
 800194c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194e:	f003 0308 	and.w	r3, r3, #8
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, SPI1_RES_Pin | SPI1_CS_Pin, GPIO_PIN_RESET);
 8001956:	2200      	movs	r2, #0
 8001958:	2130      	movs	r1, #48	@ 0x30
 800195a:	482c      	ldr	r0, [pc, #176]	@ (8001a0c <MX_GPIO_Init+0x158>)
 800195c:	f001 fc9a 	bl	8003294 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI1_DC_GPIO_Port, SPI1_DC_Pin, GPIO_PIN_RESET);
 8001960:	2200      	movs	r2, #0
 8001962:	2101      	movs	r1, #1
 8001964:	482a      	ldr	r0, [pc, #168]	@ (8001a10 <MX_GPIO_Init+0x15c>)
 8001966:	f001 fc95 	bl	8003294 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin,
 800196a:	2200      	movs	r2, #0
 800196c:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001970:	4828      	ldr	r0, [pc, #160]	@ (8001a14 <MX_GPIO_Init+0x160>)
 8001972:	f001 fc8f 	bl	8003294 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8001976:	2301      	movs	r3, #1
 8001978:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800197a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800197e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001980:	2300      	movs	r3, #0
 8001982:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001984:	f107 0314 	add.w	r3, r7, #20
 8001988:	4619      	mov	r1, r3
 800198a:	4823      	ldr	r0, [pc, #140]	@ (8001a18 <MX_GPIO_Init+0x164>)
 800198c:	f001 fae6 	bl	8002f5c <HAL_GPIO_Init>

	/*Configure GPIO pins : SPI1_RES_Pin SPI1_CS_Pin */
	GPIO_InitStruct.Pin = SPI1_RES_Pin | SPI1_CS_Pin;
 8001990:	2330      	movs	r3, #48	@ 0x30
 8001992:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001994:	2301      	movs	r3, #1
 8001996:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800199c:	2300      	movs	r3, #0
 800199e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a0:	f107 0314 	add.w	r3, r7, #20
 80019a4:	4619      	mov	r1, r3
 80019a6:	4819      	ldr	r0, [pc, #100]	@ (8001a0c <MX_GPIO_Init+0x158>)
 80019a8:	f001 fad8 	bl	8002f5c <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI1_DC_Pin */
	GPIO_InitStruct.Pin = SPI1_DC_Pin;
 80019ac:	2301      	movs	r3, #1
 80019ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b0:	2301      	movs	r3, #1
 80019b2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b8:	2300      	movs	r3, #0
 80019ba:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI1_DC_GPIO_Port, &GPIO_InitStruct);
 80019bc:	f107 0314 	add.w	r3, r7, #20
 80019c0:	4619      	mov	r1, r3
 80019c2:	4813      	ldr	r0, [pc, #76]	@ (8001a10 <MX_GPIO_Init+0x15c>)
 80019c4:	f001 faca 	bl	8002f5c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 80019c8:	2304      	movs	r3, #4
 80019ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019cc:	2300      	movs	r3, #0
 80019ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019d0:	2300      	movs	r3, #0
 80019d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80019d4:	f107 0314 	add.w	r3, r7, #20
 80019d8:	4619      	mov	r1, r3
 80019da:	480d      	ldr	r0, [pc, #52]	@ (8001a10 <MX_GPIO_Init+0x15c>)
 80019dc:	f001 fabe 	bl	8002f5c <HAL_GPIO_Init>

	/*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin */
	GPIO_InitStruct.Pin = LD4_Pin | LD3_Pin | LD5_Pin | LD6_Pin;
 80019e0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019e6:	2301      	movs	r3, #1
 80019e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ea:	2300      	movs	r3, #0
 80019ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ee:	2300      	movs	r3, #0
 80019f0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4806      	ldr	r0, [pc, #24]	@ (8001a14 <MX_GPIO_Init+0x160>)
 80019fa:	f001 faaf 	bl	8002f5c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80019fe:	bf00      	nop
 8001a00:	3728      	adds	r7, #40	@ 0x28
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40023800 	.word	0x40023800
 8001a0c:	40020800 	.word	0x40020800
 8001a10:	40020400 	.word	0x40020400
 8001a14:	40020c00 	.word	0x40020c00
 8001a18:	40020000 	.word	0x40020000

08001a1c <HAL_I2S_RxHalfCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b082      	sub	sp, #8
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	/* Only when the interrupt is triggered by I2S connected to the microphone */
	if (hi2s->Instance == SPI2) {
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a06      	ldr	r2, [pc, #24]	@ (8001a44 <HAL_I2S_RxHalfCpltCallback+0x28>)
 8001a2a:	4293      	cmp	r3, r2
 8001a2c:	d105      	bne.n	8001a3a <HAL_I2S_RxHalfCpltCallback+0x1e>
		osEventFlagsSet(AudioCallbackReadyHandle, AUDIO_FLAG_HALF);
 8001a2e:	4b06      	ldr	r3, [pc, #24]	@ (8001a48 <HAL_I2S_RxHalfCpltCallback+0x2c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	2101      	movs	r1, #1
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 fe87 	bl	8005748 <osEventFlagsSet>
	}
}
 8001a3a:	bf00      	nop
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	bf00      	nop
 8001a44:	40003800 	.word	0x40003800
 8001a48:	20000718 	.word	0x20000718

08001a4c <HAL_I2S_RxCpltCallback>:

void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b082      	sub	sp, #8
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
	/* Only when the interrupt is triggered by I2S connected to the microphone */
	if (hi2s->Instance == SPI2) {
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a06      	ldr	r2, [pc, #24]	@ (8001a74 <HAL_I2S_RxCpltCallback+0x28>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d105      	bne.n	8001a6a <HAL_I2S_RxCpltCallback+0x1e>
		osEventFlagsSet(AudioCallbackReadyHandle, AUDIO_FLAG_FULL);
 8001a5e:	4b06      	ldr	r3, [pc, #24]	@ (8001a78 <HAL_I2S_RxCpltCallback+0x2c>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2102      	movs	r1, #2
 8001a64:	4618      	mov	r0, r3
 8001a66:	f003 fe6f 	bl	8005748 <osEventFlagsSet>
	}
}
 8001a6a:	bf00      	nop
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	40003800 	.word	0x40003800
 8001a78:	20000718 	.word	0x20000718

08001a7c <init_hann_window>:

void init_hann_window(float32_t *hann_table) {
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b084      	sub	sp, #16
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	60fb      	str	r3, [r7, #12]
 8001a88:	e023      	b.n	8001ad2 <init_hann_window+0x56>
		hann_table[i] = 0.5f
				* (1.0f - cosf(2.0f * PI * i / (NORMALIZED_BUFFER_SIZE - 1)));
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	ee07 3a90 	vmov	s15, r3
 8001a90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a94:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 8001ae4 <init_hann_window+0x68>
 8001a98:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001a9c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001ae8 <init_hann_window+0x6c>
 8001aa0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8001aa8:	f00d faa8 	bl	800effc <cosf>
 8001aac:	eef0 7a40 	vmov.f32	s15, s0
 8001ab0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001ab4:	ee77 7a67 	vsub.f32	s15, s14, s15
		hann_table[i] = 0.5f
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	4413      	add	r3, r2
				* (1.0f - cosf(2.0f * PI * i / (NORMALIZED_BUFFER_SIZE - 1)));
 8001ac0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
		hann_table[i] = 0.5f
 8001ac8:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	3301      	adds	r3, #1
 8001ad0:	60fb      	str	r3, [r7, #12]
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad8:	d3d7      	bcc.n	8001a8a <init_hann_window+0xe>
	}
}
 8001ada:	bf00      	nop
 8001adc:	bf00      	nop
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	40c90fdb 	.word	0x40c90fdb
 8001ae8:	447fc000 	.word	0x447fc000

08001aec <pdm_to_pcm>:

void pdm_to_pcm(const uint16_t *pdm_buff, uint16_t *pcm_buff,
		const Buffer_offset buffer_offset) {
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b086      	sub	sp, #24
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	4613      	mov	r3, r2
 8001af8:	71fb      	strb	r3, [r7, #7]
	// pdm_buff - source PDM
	// pdm_buff - destination PCM
	static uint16_t pdm_swap_buff[RX_BUFFER_SIZE / 2] = { 0 };

	/* PDM swap endianness */
	for (size_t i = 0; i < RX_BUFFER_SIZE / 2; i++) {
 8001afa:	2300      	movs	r3, #0
 8001afc:	617b      	str	r3, [r7, #20]
 8001afe:	e01f      	b.n	8001b40 <pdm_to_pcm+0x54>
		size_t index = i + (RX_BUFFER_SIZE / 2) * buffer_offset;
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	019b      	lsls	r3, r3, #6
 8001b04:	461a      	mov	r2, r3
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	4413      	add	r3, r2
 8001b0a:	613b      	str	r3, [r7, #16]
		pdm_swap_buff[i] = SWAP_ENDIANESS(pdm_buff[index]);
 8001b0c:	693b      	ldr	r3, [r7, #16]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	68fa      	ldr	r2, [r7, #12]
 8001b12:	4413      	add	r3, r2
 8001b14:	881b      	ldrh	r3, [r3, #0]
 8001b16:	b21b      	sxth	r3, r3
 8001b18:	021b      	lsls	r3, r3, #8
 8001b1a:	b21a      	sxth	r2, r3
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	68f9      	ldr	r1, [r7, #12]
 8001b22:	440b      	add	r3, r1
 8001b24:	881b      	ldrh	r3, [r3, #0]
 8001b26:	0a1b      	lsrs	r3, r3, #8
 8001b28:	b29b      	uxth	r3, r3
 8001b2a:	b21b      	sxth	r3, r3
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b21b      	sxth	r3, r3
 8001b30:	b299      	uxth	r1, r3
 8001b32:	4a09      	ldr	r2, [pc, #36]	@ (8001b58 <pdm_to_pcm+0x6c>)
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (size_t i = 0; i < RX_BUFFER_SIZE / 2; i++) {
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	3301      	adds	r3, #1
 8001b3e:	617b      	str	r3, [r7, #20]
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	2b3f      	cmp	r3, #63	@ 0x3f
 8001b44:	d9dc      	bls.n	8001b00 <pdm_to_pcm+0x14>
	}

	/* PDM to PCM filter */
	PDM_Filter(pdm_swap_buff, pcm_buff, &PDM1_filter_handler);
 8001b46:	4a05      	ldr	r2, [pc, #20]	@ (8001b5c <pdm_to_pcm+0x70>)
 8001b48:	68b9      	ldr	r1, [r7, #8]
 8001b4a:	4803      	ldr	r0, [pc, #12]	@ (8001b58 <pdm_to_pcm+0x6c>)
 8001b4c:	f009 f93c 	bl	800adc8 <PDM_Filter>
}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20003040 	.word	0x20003040
 8001b5c:	2000aaa0 	.word	0x2000aaa0

08001b60 <normalize_buff>:

void normalize_buff(const int16_t *pcm_buff, float32_t *normalized_buff,
		const size_t buff_index) {
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b088      	sub	sp, #32
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
	// pcm_buff - source PCM
	// normalized_buff - destination normalized pcm
	for (size_t i = 0; i < DEC_BUFFER_SIZE; i++) {
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	61fb      	str	r3, [r7, #28]
 8001b70:	e042      	b.n	8001bf8 <normalize_buff+0x98>
		int16_t int_val = (int16_t) pcm_buff[buff_index + i];
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	4413      	add	r3, r2
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	68fa      	ldr	r2, [r7, #12]
 8001b7c:	4413      	add	r3, r2
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	82fb      	strh	r3, [r7, #22]
		float32_t float_val = (float32_t) int_val / (float32_t) INT16_MAX;
 8001b82:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001b86:	ee07 3a90 	vmov	s15, r3
 8001b8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b8e:	eddf 6a22 	vldr	s13, [pc, #136]	@ 8001c18 <normalize_buff+0xb8>
 8001b92:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b96:	edc7 7a06 	vstr	s15, [r7, #24]
		if ((i > 0) && (float_val > 0.2 || float_val < -0.2)) {
 8001b9a:	69fb      	ldr	r3, [r7, #28]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d020      	beq.n	8001be2 <normalize_buff+0x82>
 8001ba0:	69b8      	ldr	r0, [r7, #24]
 8001ba2:	f7fe fcd1 	bl	8000548 <__aeabi_f2d>
 8001ba6:	a318      	add	r3, pc, #96	@ (adr r3, 8001c08 <normalize_buff+0xa8>)
 8001ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bac:	f7fe ffb4 	bl	8000b18 <__aeabi_dcmpgt>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d10a      	bne.n	8001bcc <normalize_buff+0x6c>
 8001bb6:	69b8      	ldr	r0, [r7, #24]
 8001bb8:	f7fe fcc6 	bl	8000548 <__aeabi_f2d>
 8001bbc:	a314      	add	r3, pc, #80	@ (adr r3, 8001c10 <normalize_buff+0xb0>)
 8001bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bc2:	f7fe ff8b 	bl	8000adc <__aeabi_dcmplt>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d00a      	beq.n	8001be2 <normalize_buff+0x82>
			float_val = normalized_buff[buff_index + i - 1];
 8001bcc:	687a      	ldr	r2, [r7, #4]
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	68ba      	ldr	r2, [r7, #8]
 8001bdc:	4413      	add	r3, r2
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	61bb      	str	r3, [r7, #24]
		}
		normalized_buff[buff_index + i] = float_val;
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	4413      	add	r3, r2
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	68ba      	ldr	r2, [r7, #8]
 8001bec:	4413      	add	r3, r2
 8001bee:	69ba      	ldr	r2, [r7, #24]
 8001bf0:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < DEC_BUFFER_SIZE; i++) {
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	3301      	adds	r3, #1
 8001bf6:	61fb      	str	r3, [r7, #28]
 8001bf8:	69fb      	ldr	r3, [r7, #28]
 8001bfa:	2b0f      	cmp	r3, #15
 8001bfc:	d9b9      	bls.n	8001b72 <normalize_buff+0x12>
	}
}
 8001bfe:	bf00      	nop
 8001c00:	bf00      	nop
 8001c02:	3720      	adds	r7, #32
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd80      	pop	{r7, pc}
 8001c08:	9999999a 	.word	0x9999999a
 8001c0c:	3fc99999 	.word	0x3fc99999
 8001c10:	9999999a 	.word	0x9999999a
 8001c14:	bfc99999 	.word	0xbfc99999
 8001c18:	46fffe00 	.word	0x46fffe00

08001c1c <apply_hann_window>:

void apply_hann_window(const float32_t *normalized_buff,
		const float32_t *hann_table, float32_t *windowed_buff) {
 8001c1c:	b480      	push	{r7}
 8001c1e:	b087      	sub	sp, #28
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
	/* Hann window is applied to reduce spectral leakage */
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 8001c28:	2300      	movs	r3, #0
 8001c2a:	617b      	str	r3, [r7, #20]
 8001c2c:	e016      	b.n	8001c5c <apply_hann_window+0x40>
		windowed_buff[i] = normalized_buff[i] * hann_table[i];
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	68fa      	ldr	r2, [r7, #12]
 8001c34:	4413      	add	r3, r2
 8001c36:	ed93 7a00 	vldr	s14, [r3]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	009b      	lsls	r3, r3, #2
 8001c3e:	68ba      	ldr	r2, [r7, #8]
 8001c40:	4413      	add	r3, r2
 8001c42:	edd3 7a00 	vldr	s15, [r3]
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	687a      	ldr	r2, [r7, #4]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c52:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < NORMALIZED_BUFFER_SIZE; i++) {
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697b      	ldr	r3, [r7, #20]
 8001c5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001c62:	d3e4      	bcc.n	8001c2e <apply_hann_window+0x12>
	}
}
 8001c64:	bf00      	nop
 8001c66:	bf00      	nop
 8001c68:	371c      	adds	r7, #28
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr
	...

08001c74 <fft_compute>:

void fft_compute(float32_t *windowed_buff, float32_t *fft_mag_buff) {
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b082      	sub	sp, #8
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
	static float32_t fft_out_buff[FFT_BUFFER_SIZE] = { 0 };
	/* Compute FFT */
	arm_rfft_fast_f32(&fft_audio_instance, windowed_buff, fft_out_buff, 0);
 8001c7e:	2300      	movs	r3, #0
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <fft_compute+0x2c>)
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	4807      	ldr	r0, [pc, #28]	@ (8001ca4 <fft_compute+0x30>)
 8001c86:	f009 fa3b 	bl	800b100 <arm_rfft_fast_f32>

	/* Calculate magnitude from real and imaginary part of FFT */
	arm_cmplx_mag_f32(fft_out_buff, fft_mag_buff, FFT_MAG_BUFFER_SIZE);
 8001c8a:	f240 2201 	movw	r2, #513	@ 0x201
 8001c8e:	6839      	ldr	r1, [r7, #0]
 8001c90:	4803      	ldr	r0, [pc, #12]	@ (8001ca0 <fft_compute+0x2c>)
 8001c92:	f009 fe11 	bl	800b8b8 <arm_cmplx_mag_f32>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200030c0 	.word	0x200030c0
 8001ca4:	20000724 	.word	0x20000724

08001ca8 <AudioCaptureTask>:
 * @brief  Function implementing the AudioCapture thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_AudioCaptureTask */
void AudioCaptureTask(void *argument) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	uint16_t audio_task_counter = 0;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	82fb      	strh	r3, [r7, #22]
	static uint16_t dec_buff[DEC_BUFFER_SIZE] = { 0 }; /* Audio buffer after decimation */
	static int16_t pcm_buff[PCM_BUFFER_SIZE] = { 0 }; /* PCM audio buffer */
	Buffer_offset buffer_offset = BUFFER_OFFSET_NONE;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	757b      	strb	r3, [r7, #21]

	/* Infinite loop */
	for (;;) {
		uint32_t flags = osEventFlagsWait(AudioCallbackReadyHandle,
 8001cb8:	4b24      	ldr	r3, [pc, #144]	@ (8001d4c <AudioCaptureTask+0xa4>)
 8001cba:	6818      	ldr	r0, [r3, #0]
 8001cbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2103      	movs	r1, #3
 8001cc4:	f003 fd82 	bl	80057cc <osEventFlagsWait>
 8001cc8:	6138      	str	r0, [r7, #16]
		AUDIO_FLAG_HALF | AUDIO_FLAG_FULL,
		osFlagsWaitAny, osWaitForever);

		if (flags & AUDIO_FLAG_HALF) {
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d002      	beq.n	8001cda <AudioCaptureTask+0x32>
			buffer_offset = BUFFER_OFFSET_HALF;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	757b      	strb	r3, [r7, #21]
 8001cd8:	e006      	b.n	8001ce8 <AudioCaptureTask+0x40>
		} else if (flags & AUDIO_FLAG_FULL) {
 8001cda:	693b      	ldr	r3, [r7, #16]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <AudioCaptureTask+0x40>
			buffer_offset = BUFFER_OFFSET_NONE;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	757b      	strb	r3, [r7, #21]
		}

		/* Convert PDM sound to PCM sound */
		pdm_to_pcm(rx_buff, dec_buff, buffer_offset);
 8001ce8:	7d7b      	ldrb	r3, [r7, #21]
 8001cea:	461a      	mov	r2, r3
 8001cec:	4918      	ldr	r1, [pc, #96]	@ (8001d50 <AudioCaptureTask+0xa8>)
 8001cee:	4819      	ldr	r0, [pc, #100]	@ (8001d54 <AudioCaptureTask+0xac>)
 8001cf0:	f7ff fefc 	bl	8001aec <pdm_to_pcm>

		const size_t buff_index = audio_task_counter * DEC_BUFFER_SIZE;
 8001cf4:	8afb      	ldrh	r3, [r7, #22]
 8001cf6:	011b      	lsls	r3, r3, #4
 8001cf8:	60fb      	str	r3, [r7, #12]

		/* Copy converted data to transmit buffer */
		memcpy(&pcm_buff[buff_index], dec_buff,
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4a16      	ldr	r2, [pc, #88]	@ (8001d58 <AudioCaptureTask+0xb0>)
 8001d00:	4413      	add	r3, r2
 8001d02:	2220      	movs	r2, #32
 8001d04:	4912      	ldr	r1, [pc, #72]	@ (8001d50 <AudioCaptureTask+0xa8>)
 8001d06:	4618      	mov	r0, r3
 8001d08:	f00b f887 	bl	800ce1a <memcpy>
		DEC_BUFFER_SIZE * 2);

		/* Normalize PCM buffer */
		osMutexAcquire(NormalizedMutexHandle, osWaitForever);
 8001d0c:	4b13      	ldr	r3, [pc, #76]	@ (8001d5c <AudioCaptureTask+0xb4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 fe44 	bl	80059a2 <osMutexAcquire>
		normalize_buff(pcm_buff, normalized_buff, buff_index);
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	4910      	ldr	r1, [pc, #64]	@ (8001d60 <AudioCaptureTask+0xb8>)
 8001d1e:	480e      	ldr	r0, [pc, #56]	@ (8001d58 <AudioCaptureTask+0xb0>)
 8001d20:	f7ff ff1e 	bl	8001b60 <normalize_buff>
		osMutexRelease(NormalizedMutexHandle);
 8001d24:	4b0d      	ldr	r3, [pc, #52]	@ (8001d5c <AudioCaptureTask+0xb4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f003 fe85 	bl	8005a38 <osMutexRelease>

		audio_task_counter++;
 8001d2e:	8afb      	ldrh	r3, [r7, #22]
 8001d30:	3301      	adds	r3, #1
 8001d32:	82fb      	strh	r3, [r7, #22]

		/* If buffer is full set flag */
		if (audio_task_counter == MAX_AUDIO_TASK_COUNTER) {
 8001d34:	8afb      	ldrh	r3, [r7, #22]
 8001d36:	2b40      	cmp	r3, #64	@ 0x40
 8001d38:	d1be      	bne.n	8001cb8 <AudioCaptureTask+0x10>
			osEventFlagsSet(AudioBuffReadyHandle, AUDIO_FLAG_COMPL);
 8001d3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001d64 <AudioCaptureTask+0xbc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2104      	movs	r1, #4
 8001d40:	4618      	mov	r0, r3
 8001d42:	f003 fd01 	bl	8005748 <osEventFlagsSet>
			audio_task_counter = 0;
 8001d46:	2300      	movs	r3, #0
 8001d48:	82fb      	strh	r3, [r7, #22]
	for (;;) {
 8001d4a:	e7b5      	b.n	8001cb8 <AudioCaptureTask+0x10>
 8001d4c:	20000718 	.word	0x20000718
 8001d50:	200040c8 	.word	0x200040c8
 8001d54:	2000073c 	.word	0x2000073c
 8001d58:	200040e8 	.word	0x200040e8
 8001d5c:	20000710 	.word	0x20000710
 8001d60:	2000083c 	.word	0x2000083c
 8001d64:	20000720 	.word	0x20000720

08001d68 <FFTProcessingTask>:
 * @brief Function implementing the FFTProcessing thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_FFTProcessingTask */
void FFTProcessingTask(void *argument) {
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN FFTProcessingTask */
	static float32_t windowed_buff[NORMALIZED_BUFFER_SIZE] = { 0 }; /* Normalized and windowed buffer */
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(AudioBuffReadyHandle,
 8001d70:	4b18      	ldr	r3, [pc, #96]	@ (8001dd4 <FFTProcessingTask+0x6c>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d78:	2200      	movs	r2, #0
 8001d7a:	2104      	movs	r1, #4
 8001d7c:	f003 fd26 	bl	80057cc <osEventFlagsWait>
		AUDIO_FLAG_COMPL,
		osFlagsWaitAny, osWaitForever);

		/* Apply Hann window */
		osMutexAcquire(NormalizedMutexHandle, osWaitForever);
 8001d80:	4b15      	ldr	r3, [pc, #84]	@ (8001dd8 <FFTProcessingTask+0x70>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f003 fe0a 	bl	80059a2 <osMutexAcquire>
		apply_hann_window(normalized_buff, hann_table, windowed_buff);
 8001d8e:	4a13      	ldr	r2, [pc, #76]	@ (8001ddc <FFTProcessingTask+0x74>)
 8001d90:	4913      	ldr	r1, [pc, #76]	@ (8001de0 <FFTProcessingTask+0x78>)
 8001d92:	4814      	ldr	r0, [pc, #80]	@ (8001de4 <FFTProcessingTask+0x7c>)
 8001d94:	f7ff ff42 	bl	8001c1c <apply_hann_window>
		osMutexRelease(NormalizedMutexHandle);
 8001d98:	4b0f      	ldr	r3, [pc, #60]	@ (8001dd8 <FFTProcessingTask+0x70>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f003 fe4b 	bl	8005a38 <osMutexRelease>

		/* Perform FFT */
		osMutexAcquire(FFTMagMutexHandle, osWaitForever);
 8001da2:	4b11      	ldr	r3, [pc, #68]	@ (8001de8 <FFTProcessingTask+0x80>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001daa:	4618      	mov	r0, r3
 8001dac:	f003 fdf9 	bl	80059a2 <osMutexAcquire>
		fft_compute(windowed_buff, fft_mag_buff);
 8001db0:	490e      	ldr	r1, [pc, #56]	@ (8001dec <FFTProcessingTask+0x84>)
 8001db2:	480a      	ldr	r0, [pc, #40]	@ (8001ddc <FFTProcessingTask+0x74>)
 8001db4:	f7ff ff5e 	bl	8001c74 <fft_compute>
		osMutexRelease(FFTMagMutexHandle);
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <FFTProcessingTask+0x80>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f003 fe3b 	bl	8005a38 <osMutexRelease>

		osEventFlagsSet(FFTReadyHandle, FFT_FLAG_COMPL);
 8001dc2:	4b0b      	ldr	r3, [pc, #44]	@ (8001df0 <FFTProcessingTask+0x88>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	2108      	movs	r1, #8
 8001dc8:	4618      	mov	r0, r3
 8001dca:	f003 fcbd 	bl	8005748 <osEventFlagsSet>
		osEventFlagsWait(AudioBuffReadyHandle,
 8001dce:	bf00      	nop
 8001dd0:	e7ce      	b.n	8001d70 <FFTProcessingTask+0x8>
 8001dd2:	bf00      	nop
 8001dd4:	20000720 	.word	0x20000720
 8001dd8:	20000710 	.word	0x20000710
 8001ddc:	200048e8 	.word	0x200048e8
 8001de0:	2000183c 	.word	0x2000183c
 8001de4:	2000083c 	.word	0x2000083c
 8001de8:	20000714 	.word	0x20000714
 8001dec:	2000283c 	.word	0x2000283c
 8001df0:	2000071c 	.word	0x2000071c

08001df4 <DisplayOutputTask>:
 * @brief Function implementing the DisplayOutput thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_DisplayOutputTask */
void DisplayOutputTask(void *argument) {
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b092      	sub	sp, #72	@ 0x48
 8001df8:	af04      	add	r7, sp, #16
 8001dfa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN DisplayOutputTask */
	static int32_t fft_db_buff[ILI9341_HEIGHT] = { 0 }; /* Values from current execution of this task */
	static int32_t fft_prev_db_buff[ILI9341_HEIGHT] = { 0 }; /* Values from previous execution of this task */
	/* Infinite loop */
	for (;;) {
		osEventFlagsWait(FFTReadyHandle,
 8001dfc:	4b5c      	ldr	r3, [pc, #368]	@ (8001f70 <DisplayOutputTask+0x17c>)
 8001dfe:	6818      	ldr	r0, [r3, #0]
 8001e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e04:	2200      	movs	r2, #0
 8001e06:	2108      	movs	r1, #8
 8001e08:	f003 fce0 	bl	80057cc <osEventFlagsWait>
		FFT_FLAG_COMPL,
		osFlagsWaitAny, osWaitForever);

		int32_t peak_index = 0;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	637b      	str	r3, [r7, #52]	@ 0x34

		osMutexAcquire(FFTMagMutexHandle, osWaitForever);
 8001e10:	4b58      	ldr	r3, [pc, #352]	@ (8001f74 <DisplayOutputTask+0x180>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f003 fdc2 	bl	80059a2 <osMutexAcquire>
		for (size_t i = 0; i < ILI9341_HEIGHT; i++) {
 8001e1e:	2300      	movs	r3, #0
 8001e20:	633b      	str	r3, [r7, #48]	@ 0x30
 8001e22:	e06e      	b.n	8001f02 <DisplayOutputTask+0x10e>
			/* Get average and FFT magnitude to decibel scale */
			float32_t avg_val = (fft_mag_buff[i * 2] + fft_mag_buff[i * 2 + 1])
 8001e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e26:	005b      	lsls	r3, r3, #1
 8001e28:	4a53      	ldr	r2, [pc, #332]	@ (8001f78 <DisplayOutputTask+0x184>)
 8001e2a:	009b      	lsls	r3, r3, #2
 8001e2c:	4413      	add	r3, r2
 8001e2e:	ed93 7a00 	vldr	s14, [r3]
 8001e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e34:	005b      	lsls	r3, r3, #1
 8001e36:	3301      	adds	r3, #1
 8001e38:	4a4f      	ldr	r2, [pc, #316]	@ (8001f78 <DisplayOutputTask+0x184>)
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e46:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8001e4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e4e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
					/ 2;
			int32_t log_val = (int32_t) (20 * log10f(avg_val));
 8001e52:	ed97 0a0a 	vldr	s0, [r7, #40]	@ 0x28
 8001e56:	f00d f82d 	bl	800eeb4 <log10f>
 8001e5a:	eef0 7a40 	vmov.f32	s15, s0
 8001e5e:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8001e62:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6a:	ee17 3a90 	vmov	r3, s15
 8001e6e:	627b      	str	r3, [r7, #36]	@ 0x24
			int32_t scaled_val = (log_val + OFFSET_Y) * SCALE_FACTOR;
 8001e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e72:	3328      	adds	r3, #40	@ 0x28
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	623b      	str	r3, [r7, #32]
			fft_db_buff[i] = scaled_val;
 8001e78:	4940      	ldr	r1, [pc, #256]	@ (8001f7c <DisplayOutputTask+0x188>)
 8001e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e7c:	6a3a      	ldr	r2, [r7, #32]
 8001e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/* Compare with previous result to reduce drawing */
			if (fft_prev_db_buff[i] != fft_db_buff[i]) {
 8001e82:	4a3f      	ldr	r2, [pc, #252]	@ (8001f80 <DisplayOutputTask+0x18c>)
 8001e84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e86:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e8a:	493c      	ldr	r1, [pc, #240]	@ (8001f7c <DisplayOutputTask+0x188>)
 8001e8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e8e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001e92:	429a      	cmp	r2, r3
 8001e94:	d01e      	beq.n	8001ed4 <DisplayOutputTask+0xe0>
				size_t display_val = ILI9341_HEIGHT - fft_db_buff[i];
 8001e96:	4a39      	ldr	r2, [pc, #228]	@ (8001f7c <DisplayOutputTask+0x188>)
 8001e98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001ea2:	61fb      	str	r3, [r7, #28]
				size_t prev_display_val = ILI9341_HEIGHT - fft_prev_db_buff[i];
 8001ea4:	4a36      	ldr	r2, [pc, #216]	@ (8001f80 <DisplayOutputTask+0x18c>)
 8001ea6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ea8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eac:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8001eb0:	61bb      	str	r3, [r7, #24]
				ILI9341_DrawPixel(i, display_val, ILI9341_WHITE);
 8001eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	69fa      	ldr	r2, [r7, #28]
 8001eb8:	b291      	uxth	r1, r2
 8001eba:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7ff f9f2 	bl	80012a8 <ILI9341_DrawPixel>
				ILI9341_DrawPixel(i, prev_display_val, ILI9341_BLACK);
 8001ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	69ba      	ldr	r2, [r7, #24]
 8001eca:	b291      	uxth	r1, r2
 8001ecc:	2200      	movs	r2, #0
 8001ece:	4618      	mov	r0, r3
 8001ed0:	f7ff f9ea 	bl	80012a8 <ILI9341_DrawPixel>
			}
			fft_prev_db_buff[i] = fft_db_buff[i];
 8001ed4:	4a29      	ldr	r2, [pc, #164]	@ (8001f7c <DisplayOutputTask+0x188>)
 8001ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ed8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001edc:	4928      	ldr	r1, [pc, #160]	@ (8001f80 <DisplayOutputTask+0x18c>)
 8001ede:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

			/* Find peak index */
			if (fft_db_buff[peak_index] < fft_db_buff[i]) {
 8001ee4:	4a25      	ldr	r2, [pc, #148]	@ (8001f7c <DisplayOutputTask+0x188>)
 8001ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ee8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eec:	4923      	ldr	r1, [pc, #140]	@ (8001f7c <DisplayOutputTask+0x188>)
 8001eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001ef0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	da01      	bge.n	8001efc <DisplayOutputTask+0x108>
				peak_index = i;
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
		for (size_t i = 0; i < ILI9341_HEIGHT; i++) {
 8001efc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001efe:	3301      	adds	r3, #1
 8001f00:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001f04:	2bef      	cmp	r3, #239	@ 0xef
 8001f06:	d98d      	bls.n	8001e24 <DisplayOutputTask+0x30>
			}
		}
#if DISPLAY_PEAK
		/* Write peak value on display */
		float32_t peak_value = peak_index * FFT_FR;
 8001f08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001f0a:	ee07 3a90 	vmov	s15, r3
 8001f0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f12:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8001f84 <DisplayOutputTask+0x190>
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
		char string_peak[STRING_SIZE] = { 0 };
 8001f1e:	f107 030c 	add.w	r3, r7, #12
 8001f22:	2200      	movs	r2, #0
 8001f24:	601a      	str	r2, [r3, #0]
 8001f26:	605a      	str	r2, [r3, #4]
 8001f28:	609a      	str	r2, [r3, #8]
		snprintf(string_peak, sizeof(string_peak), "%8.2f Hz", peak_value);
 8001f2a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001f2c:	f7fe fb0c 	bl	8000548 <__aeabi_f2d>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	f107 000c 	add.w	r0, r7, #12
 8001f38:	e9cd 2300 	strd	r2, r3, [sp]
 8001f3c:	4a12      	ldr	r2, [pc, #72]	@ (8001f88 <DisplayOutputTask+0x194>)
 8001f3e:	210c      	movs	r1, #12
 8001f40:	f00a fe14 	bl	800cb6c <sniprintf>
		ILI9341_WriteString(STRING_POS_X, STRING_POS_Y, string_peak, Font_7x10,
 8001f44:	4b11      	ldr	r3, [pc, #68]	@ (8001f8c <DisplayOutputTask+0x198>)
 8001f46:	f107 010c 	add.w	r1, r7, #12
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	9202      	str	r2, [sp, #8]
 8001f4e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001f52:	9201      	str	r2, [sp, #4]
 8001f54:	685a      	ldr	r2, [r3, #4]
 8001f56:	9200      	str	r2, [sp, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	460a      	mov	r2, r1
 8001f5c:	2128      	movs	r1, #40	@ 0x28
 8001f5e:	20ec      	movs	r0, #236	@ 0xec
 8001f60:	f7ff fa45 	bl	80013ee <ILI9341_WriteString>
		ILI9341_WHITE, ILI9341_BLACK);
#endif
		osMutexRelease(FFTMagMutexHandle);
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <DisplayOutputTask+0x180>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fd65 	bl	8005a38 <osMutexRelease>
	for (;;) {
 8001f6e:	e745      	b.n	8001dfc <DisplayOutputTask+0x8>
 8001f70:	2000071c 	.word	0x2000071c
 8001f74:	20000714 	.word	0x20000714
 8001f78:	2000283c 	.word	0x2000283c
 8001f7c:	200058e8 	.word	0x200058e8
 8001f80:	20005ca8 	.word	0x20005ca8
 8001f84:	417a0000 	.word	0x417a0000
 8001f88:	08010410 	.word	0x08010410
 8001f8c:	20000000 	.word	0x20000000

08001f90 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b082      	sub	sp, #8
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM5) {
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4a04      	ldr	r2, [pc, #16]	@ (8001fb0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001f9e:	4293      	cmp	r3, r2
 8001fa0:	d101      	bne.n	8001fa6 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8001fa2:	f000 fb29 	bl	80025f8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8001fa6:	bf00      	nop
 8001fa8:	3708      	adds	r7, #8
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40000c00 	.word	0x40000c00

08001fb4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fb8:	b672      	cpsid	i
}
 8001fba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001fbc:	bf00      	nop
 8001fbe:	e7fd      	b.n	8001fbc <Error_Handler+0x8>

08001fc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	607b      	str	r3, [r7, #4]
 8001fca:	4b12      	ldr	r3, [pc, #72]	@ (8002014 <HAL_MspInit+0x54>)
 8001fcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fce:	4a11      	ldr	r2, [pc, #68]	@ (8002014 <HAL_MspInit+0x54>)
 8001fd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001fd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002014 <HAL_MspInit+0x54>)
 8001fd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001fde:	607b      	str	r3, [r7, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	603b      	str	r3, [r7, #0]
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	@ (8002014 <HAL_MspInit+0x54>)
 8001fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fea:	4a0a      	ldr	r2, [pc, #40]	@ (8002014 <HAL_MspInit+0x54>)
 8001fec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ff0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ff2:	4b08      	ldr	r3, [pc, #32]	@ (8002014 <HAL_MspInit+0x54>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	603b      	str	r3, [r7, #0]
 8001ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	210f      	movs	r1, #15
 8002002:	f06f 0001 	mvn.w	r0, #1
 8002006:	f000 fbf3 	bl	80027f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	40023800 	.word	0x40023800

08002018 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8002018:	b480      	push	{r7}
 800201a:	b085      	sub	sp, #20
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a0b      	ldr	r2, [pc, #44]	@ (8002054 <HAL_CRC_MspInit+0x3c>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d10d      	bne.n	8002046 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	4b0a      	ldr	r3, [pc, #40]	@ (8002058 <HAL_CRC_MspInit+0x40>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002032:	4a09      	ldr	r2, [pc, #36]	@ (8002058 <HAL_CRC_MspInit+0x40>)
 8002034:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002038:	6313      	str	r3, [r2, #48]	@ 0x30
 800203a:	4b07      	ldr	r3, [pc, #28]	@ (8002058 <HAL_CRC_MspInit+0x40>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002042:	60fb      	str	r3, [r7, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8002046:	bf00      	nop
 8002048:	3714      	adds	r7, #20
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
 8002052:	bf00      	nop
 8002054:	40023000 	.word	0x40023000
 8002058:	40023800 	.word	0x40023800

0800205c <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08e      	sub	sp, #56	@ 0x38
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI2)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4a4a      	ldr	r2, [pc, #296]	@ (80021b0 <HAL_I2S_MspInit+0x154>)
 8002088:	4293      	cmp	r3, r2
 800208a:	f040 808c 	bne.w	80021a6 <HAL_I2S_MspInit+0x14a>

    /* USER CODE END SPI2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800208e:	2301      	movs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8002092:	23c0      	movs	r3, #192	@ 0xc0
 8002094:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8002096:	2306      	movs	r3, #6
 8002098:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800209a:	f107 0314 	add.w	r3, r7, #20
 800209e:	4618      	mov	r0, r3
 80020a0:	f002 fb6a 	bl	8004778 <HAL_RCCEx_PeriphCLKConfig>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d001      	beq.n	80020ae <HAL_I2S_MspInit+0x52>
    {
      Error_Handler();
 80020aa:	f7ff ff83 	bl	8001fb4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80020ae:	2300      	movs	r3, #0
 80020b0:	613b      	str	r3, [r7, #16]
 80020b2:	4b40      	ldr	r3, [pc, #256]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020b6:	4a3f      	ldr	r2, [pc, #252]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020be:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020c6:	613b      	str	r3, [r7, #16]
 80020c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020ca:	2300      	movs	r3, #0
 80020cc:	60fb      	str	r3, [r7, #12]
 80020ce:	4b39      	ldr	r3, [pc, #228]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4a38      	ldr	r2, [pc, #224]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020d4:	f043 0304 	orr.w	r3, r3, #4
 80020d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020da:	4b36      	ldr	r3, [pc, #216]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f003 0304 	and.w	r3, r3, #4
 80020e2:	60fb      	str	r3, [r7, #12]
 80020e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b32      	ldr	r3, [pc, #200]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a31      	ldr	r2, [pc, #196]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020f0:	f043 0302 	orr.w	r3, r3, #2
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b2f      	ldr	r3, [pc, #188]	@ (80021b4 <HAL_I2S_MspInit+0x158>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002102:	2308      	movs	r3, #8
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800210e:	2303      	movs	r3, #3
 8002110:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002112:	2305      	movs	r3, #5
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	4826      	ldr	r0, [pc, #152]	@ (80021b8 <HAL_I2S_MspInit+0x15c>)
 800211e:	f000 ff1d 	bl	8002f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|WS_Pin;
 8002122:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8002126:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002128:	2302      	movs	r3, #2
 800212a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212c:	2300      	movs	r3, #0
 800212e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002130:	2303      	movs	r3, #3
 8002132:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002134:	2305      	movs	r3, #5
 8002136:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002138:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800213c:	4619      	mov	r1, r3
 800213e:	481f      	ldr	r0, [pc, #124]	@ (80021bc <HAL_I2S_MspInit+0x160>)
 8002140:	f000 ff0c 	bl	8002f5c <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8002144:	4b1e      	ldr	r3, [pc, #120]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 8002146:	4a1f      	ldr	r2, [pc, #124]	@ (80021c4 <HAL_I2S_MspInit+0x168>)
 8002148:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 800214a:	4b1d      	ldr	r3, [pc, #116]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 800214c:	2200      	movs	r2, #0
 800214e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002150:	4b1b      	ldr	r3, [pc, #108]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 8002152:	2200      	movs	r2, #0
 8002154:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002156:	4b1a      	ldr	r3, [pc, #104]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 8002158:	2200      	movs	r2, #0
 800215a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800215c:	4b18      	ldr	r3, [pc, #96]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 800215e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002162:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002164:	4b16      	ldr	r3, [pc, #88]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 8002166:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800216a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800216c:	4b14      	ldr	r3, [pc, #80]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 800216e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002172:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8002174:	4b12      	ldr	r3, [pc, #72]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 8002176:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800217a:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800217c:	4b10      	ldr	r3, [pc, #64]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 800217e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8002182:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002184:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 8002186:	2200      	movs	r2, #0
 8002188:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800218a:	480d      	ldr	r0, [pc, #52]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 800218c:	f000 fb76 	bl	800287c <HAL_DMA_Init>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2S_MspInit+0x13e>
    {
      Error_Handler();
 8002196:	f7ff ff0d 	bl	8001fb4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmarx,hdma_spi2_rx);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	4a08      	ldr	r2, [pc, #32]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 800219e:	63da      	str	r2, [r3, #60]	@ 0x3c
 80021a0:	4a07      	ldr	r2, [pc, #28]	@ (80021c0 <HAL_I2S_MspInit+0x164>)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 80021a6:	bf00      	nop
 80021a8:	3738      	adds	r7, #56	@ 0x38
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	40003800 	.word	0x40003800
 80021b4:	40023800 	.word	0x40023800
 80021b8:	40020800 	.word	0x40020800
 80021bc:	40020400 	.word	0x40020400
 80021c0:	2000064c 	.word	0x2000064c
 80021c4:	40026058 	.word	0x40026058

080021c8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b08a      	sub	sp, #40	@ 0x28
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0314 	add.w	r3, r7, #20
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
 80021de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	4a19      	ldr	r2, [pc, #100]	@ (800224c <HAL_SPI_MspInit+0x84>)
 80021e6:	4293      	cmp	r3, r2
 80021e8:	d12b      	bne.n	8002242 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	4b18      	ldr	r3, [pc, #96]	@ (8002250 <HAL_SPI_MspInit+0x88>)
 80021f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f2:	4a17      	ldr	r2, [pc, #92]	@ (8002250 <HAL_SPI_MspInit+0x88>)
 80021f4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80021f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021fa:	4b15      	ldr	r3, [pc, #84]	@ (8002250 <HAL_SPI_MspInit+0x88>)
 80021fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021fe:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002202:	613b      	str	r3, [r7, #16]
 8002204:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	4b11      	ldr	r3, [pc, #68]	@ (8002250 <HAL_SPI_MspInit+0x88>)
 800220c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800220e:	4a10      	ldr	r2, [pc, #64]	@ (8002250 <HAL_SPI_MspInit+0x88>)
 8002210:	f043 0301 	orr.w	r3, r3, #1
 8002214:	6313      	str	r3, [r2, #48]	@ 0x30
 8002216:	4b0e      	ldr	r3, [pc, #56]	@ (8002250 <HAL_SPI_MspInit+0x88>)
 8002218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800221a:	f003 0301 	and.w	r3, r3, #1
 800221e:	60fb      	str	r3, [r7, #12]
 8002220:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002222:	23a0      	movs	r3, #160	@ 0xa0
 8002224:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002226:	2302      	movs	r3, #2
 8002228:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800222a:	2300      	movs	r3, #0
 800222c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800222e:	2303      	movs	r3, #3
 8002230:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002232:	2305      	movs	r3, #5
 8002234:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002236:	f107 0314 	add.w	r3, r7, #20
 800223a:	4619      	mov	r1, r3
 800223c:	4805      	ldr	r0, [pc, #20]	@ (8002254 <HAL_SPI_MspInit+0x8c>)
 800223e:	f000 fe8d 	bl	8002f5c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002242:	bf00      	nop
 8002244:	3728      	adds	r7, #40	@ 0x28
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	40013000 	.word	0x40013000
 8002250:	40023800 	.word	0x40023800
 8002254:	40020000 	.word	0x40020000

08002258 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b08e      	sub	sp, #56	@ 0x38
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002264:	2300      	movs	r3, #0
 8002266:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM5 clock */
  __HAL_RCC_TIM5_CLK_ENABLE();
 8002268:	2300      	movs	r3, #0
 800226a:	60fb      	str	r3, [r7, #12]
 800226c:	4b33      	ldr	r3, [pc, #204]	@ (800233c <HAL_InitTick+0xe4>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002270:	4a32      	ldr	r2, [pc, #200]	@ (800233c <HAL_InitTick+0xe4>)
 8002272:	f043 0308 	orr.w	r3, r3, #8
 8002276:	6413      	str	r3, [r2, #64]	@ 0x40
 8002278:	4b30      	ldr	r3, [pc, #192]	@ (800233c <HAL_InitTick+0xe4>)
 800227a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800227c:	f003 0308 	and.w	r3, r3, #8
 8002280:	60fb      	str	r3, [r7, #12]
 8002282:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002284:	f107 0210 	add.w	r2, r7, #16
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4611      	mov	r1, r2
 800228e:	4618      	mov	r0, r3
 8002290:	f002 fa40 	bl	8004714 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002294:	6a3b      	ldr	r3, [r7, #32]
 8002296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM5 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800229a:	2b00      	cmp	r3, #0
 800229c:	d103      	bne.n	80022a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800229e:	f002 fa25 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
 80022a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80022a4:	e004      	b.n	80022b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80022a6:	f002 fa21 	bl	80046ec <HAL_RCC_GetPCLK1Freq>
 80022aa:	4603      	mov	r3, r0
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM5 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80022b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022b2:	4a23      	ldr	r2, [pc, #140]	@ (8002340 <HAL_InitTick+0xe8>)
 80022b4:	fba2 2303 	umull	r2, r3, r2, r3
 80022b8:	0c9b      	lsrs	r3, r3, #18
 80022ba:	3b01      	subs	r3, #1
 80022bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM5 */
  htim5.Instance = TIM5;
 80022be:	4b21      	ldr	r3, [pc, #132]	@ (8002344 <HAL_InitTick+0xec>)
 80022c0:	4a21      	ldr	r2, [pc, #132]	@ (8002348 <HAL_InitTick+0xf0>)
 80022c2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM5CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim5.Init.Period = (1000000U / 1000U) - 1U;
 80022c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002344 <HAL_InitTick+0xec>)
 80022c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80022ca:	60da      	str	r2, [r3, #12]
  htim5.Init.Prescaler = uwPrescalerValue;
 80022cc:	4a1d      	ldr	r2, [pc, #116]	@ (8002344 <HAL_InitTick+0xec>)
 80022ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022d0:	6053      	str	r3, [r2, #4]
  htim5.Init.ClockDivision = 0;
 80022d2:	4b1c      	ldr	r3, [pc, #112]	@ (8002344 <HAL_InitTick+0xec>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	611a      	str	r2, [r3, #16]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022d8:	4b1a      	ldr	r3, [pc, #104]	@ (8002344 <HAL_InitTick+0xec>)
 80022da:	2200      	movs	r2, #0
 80022dc:	609a      	str	r2, [r3, #8]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022de:	4b19      	ldr	r3, [pc, #100]	@ (8002344 <HAL_InitTick+0xec>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim5);
 80022e4:	4817      	ldr	r0, [pc, #92]	@ (8002344 <HAL_InitTick+0xec>)
 80022e6:	f002 fe33 	bl	8004f50 <HAL_TIM_Base_Init>
 80022ea:	4603      	mov	r3, r0
 80022ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80022f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d11b      	bne.n	8002330 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim5);
 80022f8:	4812      	ldr	r0, [pc, #72]	@ (8002344 <HAL_InitTick+0xec>)
 80022fa:	f002 fe83 	bl	8005004 <HAL_TIM_Base_Start_IT>
 80022fe:	4603      	mov	r3, r0
 8002300:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002304:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002308:	2b00      	cmp	r3, #0
 800230a:	d111      	bne.n	8002330 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM5 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800230c:	2032      	movs	r0, #50	@ 0x32
 800230e:	f000 fa8b 	bl	8002828 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2b0f      	cmp	r3, #15
 8002316:	d808      	bhi.n	800232a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM5_IRQn, TickPriority, 0U);
 8002318:	2200      	movs	r2, #0
 800231a:	6879      	ldr	r1, [r7, #4]
 800231c:	2032      	movs	r0, #50	@ 0x32
 800231e:	f000 fa67 	bl	80027f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002322:	4a0a      	ldr	r2, [pc, #40]	@ (800234c <HAL_InitTick+0xf4>)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	6013      	str	r3, [r2, #0]
 8002328:	e002      	b.n	8002330 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002330:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8002334:	4618      	mov	r0, r3
 8002336:	3738      	adds	r7, #56	@ 0x38
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800
 8002340:	431bde83 	.word	0x431bde83
 8002344:	20006068 	.word	0x20006068
 8002348:	40000c00 	.word	0x40000c00
 800234c:	2000000c 	.word	0x2000000c

08002350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002350:	b480      	push	{r7}
 8002352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002354:	bf00      	nop
 8002356:	e7fd      	b.n	8002354 <NMI_Handler+0x4>

08002358 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800235c:	bf00      	nop
 800235e:	e7fd      	b.n	800235c <HardFault_Handler+0x4>

08002360 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002364:	bf00      	nop
 8002366:	e7fd      	b.n	8002364 <MemManage_Handler+0x4>

08002368 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800236c:	bf00      	nop
 800236e:	e7fd      	b.n	800236c <BusFault_Handler+0x4>

08002370 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002374:	bf00      	nop
 8002376:	e7fd      	b.n	8002374 <UsageFault_Handler+0x4>

08002378 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr
	...

08002388 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800238c:	4802      	ldr	r0, [pc, #8]	@ (8002398 <DMA1_Stream3_IRQHandler+0x10>)
 800238e:	f000 fb7b 	bl	8002a88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8002392:	bf00      	nop
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	2000064c 	.word	0x2000064c

0800239c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023a0:	4802      	ldr	r0, [pc, #8]	@ (80023ac <TIM5_IRQHandler+0x10>)
 80023a2:	f002 fe9f 	bl	80050e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023a6:	bf00      	nop
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	20006068 	.word	0x20006068

080023b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  return 1;
 80023b4:	2301      	movs	r3, #1
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <_kill>:

int _kill(int pid, int sig)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80023ca:	f00a fcf9 	bl	800cdc0 <__errno>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2216      	movs	r2, #22
 80023d2:	601a      	str	r2, [r3, #0]
  return -1;
 80023d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3708      	adds	r7, #8
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}

080023e0 <_exit>:

void _exit (int status)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b082      	sub	sp, #8
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80023e8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff ffe7 	bl	80023c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80023f2:	bf00      	nop
 80023f4:	e7fd      	b.n	80023f2 <_exit+0x12>

080023f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b086      	sub	sp, #24
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	60f8      	str	r0, [r7, #12]
 80023fe:	60b9      	str	r1, [r7, #8]
 8002400:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002402:	2300      	movs	r3, #0
 8002404:	617b      	str	r3, [r7, #20]
 8002406:	e00a      	b.n	800241e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002408:	f3af 8000 	nop.w
 800240c:	4601      	mov	r1, r0
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	1c5a      	adds	r2, r3, #1
 8002412:	60ba      	str	r2, [r7, #8]
 8002414:	b2ca      	uxtb	r2, r1
 8002416:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	3301      	adds	r3, #1
 800241c:	617b      	str	r3, [r7, #20]
 800241e:	697a      	ldr	r2, [r7, #20]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	429a      	cmp	r2, r3
 8002424:	dbf0      	blt.n	8002408 <_read+0x12>
  }

  return len;
 8002426:	687b      	ldr	r3, [r7, #4]
}
 8002428:	4618      	mov	r0, r3
 800242a:	3718      	adds	r7, #24
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b086      	sub	sp, #24
 8002434:	af00      	add	r7, sp, #0
 8002436:	60f8      	str	r0, [r7, #12]
 8002438:	60b9      	str	r1, [r7, #8]
 800243a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
 8002440:	e009      	b.n	8002456 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	1c5a      	adds	r2, r3, #1
 8002446:	60ba      	str	r2, [r7, #8]
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	4618      	mov	r0, r3
 800244c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	3301      	adds	r3, #1
 8002454:	617b      	str	r3, [r7, #20]
 8002456:	697a      	ldr	r2, [r7, #20]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	429a      	cmp	r2, r3
 800245c:	dbf1      	blt.n	8002442 <_write+0x12>
  }
  return len;
 800245e:	687b      	ldr	r3, [r7, #4]
}
 8002460:	4618      	mov	r0, r3
 8002462:	3718      	adds	r7, #24
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_close>:

int _close(int file)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002470:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247e:	4770      	bx	lr

08002480 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002490:	605a      	str	r2, [r3, #4]
  return 0;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <_isatty>:

int _isatty(int file)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80024a8:	2301      	movs	r3, #1
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr

080024b6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80024b6:	b480      	push	{r7}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	60b9      	str	r1, [r7, #8]
 80024c0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b086      	sub	sp, #24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80024d8:	4a14      	ldr	r2, [pc, #80]	@ (800252c <_sbrk+0x5c>)
 80024da:	4b15      	ldr	r3, [pc, #84]	@ (8002530 <_sbrk+0x60>)
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80024e4:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <_sbrk+0x64>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d102      	bne.n	80024f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80024ec:	4b11      	ldr	r3, [pc, #68]	@ (8002534 <_sbrk+0x64>)
 80024ee:	4a12      	ldr	r2, [pc, #72]	@ (8002538 <_sbrk+0x68>)
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80024f2:	4b10      	ldr	r3, [pc, #64]	@ (8002534 <_sbrk+0x64>)
 80024f4:	681a      	ldr	r2, [r3, #0]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	693a      	ldr	r2, [r7, #16]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d207      	bcs.n	8002510 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002500:	f00a fc5e 	bl	800cdc0 <__errno>
 8002504:	4603      	mov	r3, r0
 8002506:	220c      	movs	r2, #12
 8002508:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800250a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800250e:	e009      	b.n	8002524 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002510:	4b08      	ldr	r3, [pc, #32]	@ (8002534 <_sbrk+0x64>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002516:	4b07      	ldr	r3, [pc, #28]	@ (8002534 <_sbrk+0x64>)
 8002518:	681a      	ldr	r2, [r3, #0]
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4413      	add	r3, r2
 800251e:	4a05      	ldr	r2, [pc, #20]	@ (8002534 <_sbrk+0x64>)
 8002520:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002522:	68fb      	ldr	r3, [r7, #12]
}
 8002524:	4618      	mov	r0, r3
 8002526:	3718      	adds	r7, #24
 8002528:	46bd      	mov	sp, r7
 800252a:	bd80      	pop	{r7, pc}
 800252c:	20020000 	.word	0x20020000
 8002530:	00000400 	.word	0x00000400
 8002534:	200060b0 	.word	0x200060b0
 8002538:	2000ac40 	.word	0x2000ac40

0800253c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002540:	4b06      	ldr	r3, [pc, #24]	@ (800255c <SystemInit+0x20>)
 8002542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002546:	4a05      	ldr	r2, [pc, #20]	@ (800255c <SystemInit+0x20>)
 8002548:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800254c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr
 800255a:	bf00      	nop
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002560:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002598 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002564:	f7ff ffea 	bl	800253c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002568:	480c      	ldr	r0, [pc, #48]	@ (800259c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800256a:	490d      	ldr	r1, [pc, #52]	@ (80025a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800256c:	4a0d      	ldr	r2, [pc, #52]	@ (80025a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800256e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002570:	e002      	b.n	8002578 <LoopCopyDataInit>

08002572 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002572:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002574:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002576:	3304      	adds	r3, #4

08002578 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002578:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800257a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800257c:	d3f9      	bcc.n	8002572 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800257e:	4a0a      	ldr	r2, [pc, #40]	@ (80025a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002580:	4c0a      	ldr	r4, [pc, #40]	@ (80025ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002582:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002584:	e001      	b.n	800258a <LoopFillZerobss>

08002586 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002586:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002588:	3204      	adds	r2, #4

0800258a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800258a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800258c:	d3fb      	bcc.n	8002586 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800258e:	f00a fc1d 	bl	800cdcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002592:	f7fe fff7 	bl	8001584 <main>
  bx  lr    
 8002596:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002598:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800259c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025a0:	200005e0 	.word	0x200005e0
  ldr r2, =_sidata
 80025a4:	0802e88c 	.word	0x0802e88c
  ldr r2, =_sbss
 80025a8:	200005e0 	.word	0x200005e0
  ldr r4, =_ebss
 80025ac:	2000ac40 	.word	0x2000ac40

080025b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025b0:	e7fe      	b.n	80025b0 <ADC_IRQHandler>
	...

080025b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80025b8:	4b0e      	ldr	r3, [pc, #56]	@ (80025f4 <HAL_Init+0x40>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	4a0d      	ldr	r2, [pc, #52]	@ (80025f4 <HAL_Init+0x40>)
 80025be:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80025c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80025c4:	4b0b      	ldr	r3, [pc, #44]	@ (80025f4 <HAL_Init+0x40>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a0a      	ldr	r2, [pc, #40]	@ (80025f4 <HAL_Init+0x40>)
 80025ca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80025d0:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <HAL_Init+0x40>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a07      	ldr	r2, [pc, #28]	@ (80025f4 <HAL_Init+0x40>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80025da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80025dc:	2003      	movs	r0, #3
 80025de:	f000 f8fc 	bl	80027da <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80025e2:	200f      	movs	r0, #15
 80025e4:	f7ff fe38 	bl	8002258 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80025e8:	f7ff fcea 	bl	8001fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00

080025f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025fc:	4b06      	ldr	r3, [pc, #24]	@ (8002618 <HAL_IncTick+0x20>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	461a      	mov	r2, r3
 8002602:	4b06      	ldr	r3, [pc, #24]	@ (800261c <HAL_IncTick+0x24>)
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4413      	add	r3, r2
 8002608:	4a04      	ldr	r2, [pc, #16]	@ (800261c <HAL_IncTick+0x24>)
 800260a:	6013      	str	r3, [r2, #0]
}
 800260c:	bf00      	nop
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	20000010 	.word	0x20000010
 800261c:	200060b4 	.word	0x200060b4

08002620 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  return uwTick;
 8002624:	4b03      	ldr	r3, [pc, #12]	@ (8002634 <HAL_GetTick+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
}
 8002628:	4618      	mov	r0, r3
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	200060b4 	.word	0x200060b4

08002638 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002640:	f7ff ffee 	bl	8002620 <HAL_GetTick>
 8002644:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002650:	d005      	beq.n	800265e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002652:	4b0a      	ldr	r3, [pc, #40]	@ (800267c <HAL_Delay+0x44>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4413      	add	r3, r2
 800265c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800265e:	bf00      	nop
 8002660:	f7ff ffde 	bl	8002620 <HAL_GetTick>
 8002664:	4602      	mov	r2, r0
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	1ad3      	subs	r3, r2, r3
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	429a      	cmp	r2, r3
 800266e:	d8f7      	bhi.n	8002660 <HAL_Delay+0x28>
  {
  }
}
 8002670:	bf00      	nop
 8002672:	bf00      	nop
 8002674:	3710      	adds	r7, #16
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	20000010 	.word	0x20000010

08002680 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002680:	b480      	push	{r7}
 8002682:	b085      	sub	sp, #20
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002690:	4b0c      	ldr	r3, [pc, #48]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002696:	68ba      	ldr	r2, [r7, #8]
 8002698:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800269c:	4013      	ands	r3, r2
 800269e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026a8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b2:	4a04      	ldr	r2, [pc, #16]	@ (80026c4 <__NVIC_SetPriorityGrouping+0x44>)
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	60d3      	str	r3, [r2, #12]
}
 80026b8:	bf00      	nop
 80026ba:	3714      	adds	r7, #20
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr
 80026c4:	e000ed00 	.word	0xe000ed00

080026c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026cc:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <__NVIC_GetPriorityGrouping+0x18>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	0a1b      	lsrs	r3, r3, #8
 80026d2:	f003 0307 	and.w	r3, r3, #7
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr
 80026e0:	e000ed00 	.word	0xe000ed00

080026e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	4603      	mov	r3, r0
 80026ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	db0b      	blt.n	800270e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	f003 021f 	and.w	r2, r3, #31
 80026fc:	4907      	ldr	r1, [pc, #28]	@ (800271c <__NVIC_EnableIRQ+0x38>)
 80026fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002702:	095b      	lsrs	r3, r3, #5
 8002704:	2001      	movs	r0, #1
 8002706:	fa00 f202 	lsl.w	r2, r0, r2
 800270a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800270e:	bf00      	nop
 8002710:	370c      	adds	r7, #12
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	@ (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	@ (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr

080027da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b082      	sub	sp, #8
 80027de:	af00      	add	r7, sp, #0
 80027e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e2:	6878      	ldr	r0, [r7, #4]
 80027e4:	f7ff ff4c 	bl	8002680 <__NVIC_SetPriorityGrouping>
}
 80027e8:	bf00      	nop
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	4603      	mov	r3, r0
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
 80027fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fe:	2300      	movs	r3, #0
 8002800:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002802:	f7ff ff61 	bl	80026c8 <__NVIC_GetPriorityGrouping>
 8002806:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	6978      	ldr	r0, [r7, #20]
 800280e:	f7ff ffb1 	bl	8002774 <NVIC_EncodePriority>
 8002812:	4602      	mov	r2, r0
 8002814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002818:	4611      	mov	r1, r2
 800281a:	4618      	mov	r0, r3
 800281c:	f7ff ff80 	bl	8002720 <__NVIC_SetPriority>
}
 8002820:	bf00      	nop
 8002822:	3718      	adds	r7, #24
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}

08002828 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b082      	sub	sp, #8
 800282c:	af00      	add	r7, sp, #0
 800282e:	4603      	mov	r3, r0
 8002830:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	4618      	mov	r0, r3
 8002838:	f7ff ff54 	bl	80026e4 <__NVIC_EnableIRQ>
}
 800283c:	bf00      	nop
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d101      	bne.n	8002856 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e00e      	b.n	8002874 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	795b      	ldrb	r3, [r3, #5]
 800285a:	b2db      	uxtb	r3, r3
 800285c:	2b00      	cmp	r3, #0
 800285e:	d105      	bne.n	800286c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2200      	movs	r2, #0
 8002864:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002866:	6878      	ldr	r0, [r7, #4]
 8002868:	f7ff fbd6 	bl	8002018 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002872:	2300      	movs	r3, #0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002884:	2300      	movs	r3, #0
 8002886:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff feca 	bl	8002620 <HAL_GetTick>
 800288c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e099      	b.n	80029cc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2202      	movs	r2, #2
 800289c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f022 0201 	bic.w	r2, r2, #1
 80028b6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b8:	e00f      	b.n	80028da <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80028ba:	f7ff feb1 	bl	8002620 <HAL_GetTick>
 80028be:	4602      	mov	r2, r0
 80028c0:	693b      	ldr	r3, [r7, #16]
 80028c2:	1ad3      	subs	r3, r2, r3
 80028c4:	2b05      	cmp	r3, #5
 80028c6:	d908      	bls.n	80028da <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2220      	movs	r2, #32
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2203      	movs	r2, #3
 80028d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e078      	b.n	80029cc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d1e8      	bne.n	80028ba <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80028f0:	697a      	ldr	r2, [r7, #20]
 80028f2:	4b38      	ldr	r3, [pc, #224]	@ (80029d4 <HAL_DMA_Init+0x158>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002906:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	691b      	ldr	r3, [r3, #16]
 800290c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002912:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800291e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6a1b      	ldr	r3, [r3, #32]
 8002924:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002926:	697a      	ldr	r2, [r7, #20]
 8002928:	4313      	orrs	r3, r2
 800292a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002930:	2b04      	cmp	r3, #4
 8002932:	d107      	bne.n	8002944 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293c:	4313      	orrs	r3, r2
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	4313      	orrs	r3, r2
 8002942:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	697a      	ldr	r2, [r7, #20]
 800294a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	f023 0307 	bic.w	r3, r3, #7
 800295a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002960:	697a      	ldr	r2, [r7, #20]
 8002962:	4313      	orrs	r3, r2
 8002964:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800296a:	2b04      	cmp	r3, #4
 800296c:	d117      	bne.n	800299e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	4313      	orrs	r3, r2
 8002976:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00e      	beq.n	800299e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f000 fa6f 	bl	8002e64 <DMA_CheckFifoParam>
 8002986:	4603      	mov	r3, r0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2240      	movs	r2, #64	@ 0x40
 8002990:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2201      	movs	r2, #1
 8002996:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800299a:	2301      	movs	r3, #1
 800299c:	e016      	b.n	80029cc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	697a      	ldr	r2, [r7, #20]
 80029a4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f000 fa26 	bl	8002df8 <DMA_CalcBaseAndBitshift>
 80029ac:	4603      	mov	r3, r0
 80029ae:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029b4:	223f      	movs	r2, #63	@ 0x3f
 80029b6:	409a      	lsls	r2, r3
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	2200      	movs	r2, #0
 80029c0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80029ca:	2300      	movs	r3, #0
}
 80029cc:	4618      	mov	r0, r3
 80029ce:	3718      	adds	r7, #24
 80029d0:	46bd      	mov	sp, r7
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	f010803f 	.word	0xf010803f

080029d8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
 80029e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80029e6:	2300      	movs	r3, #0
 80029e8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ee:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80029f6:	2b01      	cmp	r3, #1
 80029f8:	d101      	bne.n	80029fe <HAL_DMA_Start_IT+0x26>
 80029fa:	2302      	movs	r3, #2
 80029fc:	e040      	b.n	8002a80 <HAL_DMA_Start_IT+0xa8>
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b01      	cmp	r3, #1
 8002a10:	d12f      	bne.n	8002a72 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2202      	movs	r2, #2
 8002a16:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	687a      	ldr	r2, [r7, #4]
 8002a24:	68b9      	ldr	r1, [r7, #8]
 8002a26:	68f8      	ldr	r0, [r7, #12]
 8002a28:	f000 f9b8 	bl	8002d9c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002a30:	223f      	movs	r2, #63	@ 0x3f
 8002a32:	409a      	lsls	r2, r3
 8002a34:	693b      	ldr	r3, [r7, #16]
 8002a36:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f042 0216 	orr.w	r2, r2, #22
 8002a46:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d007      	beq.n	8002a60 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	681a      	ldr	r2, [r3, #0]
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f042 0208 	orr.w	r2, r2, #8
 8002a5e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f042 0201 	orr.w	r2, r2, #1
 8002a6e:	601a      	str	r2, [r3, #0]
 8002a70:	e005      	b.n	8002a7e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002a7a:	2302      	movs	r3, #2
 8002a7c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002a7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3718      	adds	r7, #24
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002a90:	2300      	movs	r3, #0
 8002a92:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002a94:	4b8e      	ldr	r3, [pc, #568]	@ (8002cd0 <HAL_DMA_IRQHandler+0x248>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a8e      	ldr	r2, [pc, #568]	@ (8002cd4 <HAL_DMA_IRQHandler+0x24c>)
 8002a9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a9e:	0a9b      	lsrs	r3, r3, #10
 8002aa0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ab2:	2208      	movs	r2, #8
 8002ab4:	409a      	lsls	r2, r3
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d01a      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f003 0304 	and.w	r3, r3, #4
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d013      	beq.n	8002af4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681a      	ldr	r2, [r3, #0]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 0204 	bic.w	r2, r2, #4
 8002ada:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ae0:	2208      	movs	r2, #8
 8002ae2:	409a      	lsls	r2, r3
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002aec:	f043 0201 	orr.w	r2, r3, #1
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002af8:	2201      	movs	r2, #1
 8002afa:	409a      	lsls	r2, r3
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	4013      	ands	r3, r2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d012      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b16:	2201      	movs	r2, #1
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b22:	f043 0202 	orr.w	r2, r3, #2
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b2e:	2204      	movs	r2, #4
 8002b30:	409a      	lsls	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	4013      	ands	r3, r2
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d012      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0302 	and.w	r3, r3, #2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00b      	beq.n	8002b60 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b4c:	2204      	movs	r2, #4
 8002b4e:	409a      	lsls	r2, r3
 8002b50:	693b      	ldr	r3, [r7, #16]
 8002b52:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b58:	f043 0204 	orr.w	r2, r3, #4
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b64:	2210      	movs	r2, #16
 8002b66:	409a      	lsls	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d043      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 0308 	and.w	r3, r3, #8
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d03c      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b82:	2210      	movs	r2, #16
 8002b84:	409a      	lsls	r2, r3
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d018      	beq.n	8002bca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d108      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d024      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	4798      	blx	r3
 8002bb6:	e01f      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d01b      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
 8002bc8:	e016      	b.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d107      	bne.n	8002be8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	681a      	ldr	r2, [r3, #0]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f022 0208 	bic.w	r2, r2, #8
 8002be6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d003      	beq.n	8002bf8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bfc:	2220      	movs	r2, #32
 8002bfe:	409a      	lsls	r2, r3
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 808f 	beq.w	8002d28 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f003 0310 	and.w	r3, r3, #16
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	f000 8087 	beq.w	8002d28 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c1e:	2220      	movs	r2, #32
 8002c20:	409a      	lsls	r2, r3
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	2b05      	cmp	r3, #5
 8002c30:	d136      	bne.n	8002ca0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f022 0216 	bic.w	r2, r2, #22
 8002c40:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	695a      	ldr	r2, [r3, #20]
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c50:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d103      	bne.n	8002c62 <HAL_DMA_IRQHandler+0x1da>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d007      	beq.n	8002c72 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 0208 	bic.w	r2, r2, #8
 8002c70:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c76:	223f      	movs	r2, #63	@ 0x3f
 8002c78:	409a      	lsls	r2, r3
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	2201      	movs	r2, #1
 8002c82:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2200      	movs	r2, #0
 8002c8a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d07e      	beq.n	8002d94 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9a:	6878      	ldr	r0, [r7, #4]
 8002c9c:	4798      	blx	r3
        }
        return;
 8002c9e:	e079      	b.n	8002d94 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d01d      	beq.n	8002cea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d10d      	bne.n	8002cd8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d031      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	4798      	blx	r3
 8002ccc:	e02c      	b.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
 8002cce:	bf00      	nop
 8002cd0:	20000008 	.word	0x20000008
 8002cd4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d023      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	6878      	ldr	r0, [r7, #4]
 8002ce6:	4798      	blx	r3
 8002ce8:	e01e      	b.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d10f      	bne.n	8002d18 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f022 0210 	bic.w	r2, r2, #16
 8002d06:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d003      	beq.n	8002d28 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d24:	6878      	ldr	r0, [r7, #4]
 8002d26:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d032      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d34:	f003 0301 	and.w	r3, r3, #1
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d022      	beq.n	8002d82 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2205      	movs	r2, #5
 8002d40:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f022 0201 	bic.w	r2, r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	3301      	adds	r3, #1
 8002d58:	60bb      	str	r3, [r7, #8]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	429a      	cmp	r2, r3
 8002d5e:	d307      	bcc.n	8002d70 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f2      	bne.n	8002d54 <HAL_DMA_IRQHandler+0x2cc>
 8002d6e:	e000      	b.n	8002d72 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002d70:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d005      	beq.n	8002d96 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	4798      	blx	r3
 8002d92:	e000      	b.n	8002d96 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002d94:	bf00      	nop
    }
  }
}
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b085      	sub	sp, #20
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	607a      	str	r2, [r7, #4]
 8002da8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002db8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	2b40      	cmp	r3, #64	@ 0x40
 8002dc8:	d108      	bne.n	8002ddc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	68ba      	ldr	r2, [r7, #8]
 8002dd8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002dda:	e007      	b.n	8002dec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	60da      	str	r2, [r3, #12]
}
 8002dec:	bf00      	nop
 8002dee:	3714      	adds	r7, #20
 8002df0:	46bd      	mov	sp, r7
 8002df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df6:	4770      	bx	lr

08002df8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b085      	sub	sp, #20
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	3b10      	subs	r3, #16
 8002e08:	4a14      	ldr	r2, [pc, #80]	@ (8002e5c <DMA_CalcBaseAndBitshift+0x64>)
 8002e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e0e:	091b      	lsrs	r3, r3, #4
 8002e10:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002e12:	4a13      	ldr	r2, [pc, #76]	@ (8002e60 <DMA_CalcBaseAndBitshift+0x68>)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	4413      	add	r3, r2
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	2b03      	cmp	r3, #3
 8002e24:	d909      	bls.n	8002e3a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e2e:	f023 0303 	bic.w	r3, r3, #3
 8002e32:	1d1a      	adds	r2, r3, #4
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	659a      	str	r2, [r3, #88]	@ 0x58
 8002e38:	e007      	b.n	8002e4a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002e42:	f023 0303 	bic.w	r3, r3, #3
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3714      	adds	r7, #20
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	aaaaaaab 	.word	0xaaaaaaab
 8002e60:	08010c74 	.word	0x08010c74

08002e64 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b085      	sub	sp, #20
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e74:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	699b      	ldr	r3, [r3, #24]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d11f      	bne.n	8002ebe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d856      	bhi.n	8002f32 <DMA_CheckFifoParam+0xce>
 8002e84:	a201      	add	r2, pc, #4	@ (adr r2, 8002e8c <DMA_CheckFifoParam+0x28>)
 8002e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e8a:	bf00      	nop
 8002e8c:	08002e9d 	.word	0x08002e9d
 8002e90:	08002eaf 	.word	0x08002eaf
 8002e94:	08002e9d 	.word	0x08002e9d
 8002e98:	08002f33 	.word	0x08002f33
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ea0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d046      	beq.n	8002f36 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eac:	e043      	b.n	8002f36 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eb2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002eb6:	d140      	bne.n	8002f3a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ebc:	e03d      	b.n	8002f3a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002ec6:	d121      	bne.n	8002f0c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	2b03      	cmp	r3, #3
 8002ecc:	d837      	bhi.n	8002f3e <DMA_CheckFifoParam+0xda>
 8002ece:	a201      	add	r2, pc, #4	@ (adr r2, 8002ed4 <DMA_CheckFifoParam+0x70>)
 8002ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ed4:	08002ee5 	.word	0x08002ee5
 8002ed8:	08002eeb 	.word	0x08002eeb
 8002edc:	08002ee5 	.word	0x08002ee5
 8002ee0:	08002efd 	.word	0x08002efd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ee8:	e030      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eee:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d025      	beq.n	8002f42 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002efa:	e022      	b.n	8002f42 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f00:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002f04:	d11f      	bne.n	8002f46 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002f0a:	e01c      	b.n	8002f46 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d903      	bls.n	8002f1a <DMA_CheckFifoParam+0xb6>
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	2b03      	cmp	r3, #3
 8002f16:	d003      	beq.n	8002f20 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002f18:	e018      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	73fb      	strb	r3, [r7, #15]
      break;
 8002f1e:	e015      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f24:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00e      	beq.n	8002f4a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002f2c:	2301      	movs	r3, #1
 8002f2e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f30:	e00b      	b.n	8002f4a <DMA_CheckFifoParam+0xe6>
      break;
 8002f32:	bf00      	nop
 8002f34:	e00a      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f36:	bf00      	nop
 8002f38:	e008      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f3a:	bf00      	nop
 8002f3c:	e006      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f3e:	bf00      	nop
 8002f40:	e004      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f42:	bf00      	nop
 8002f44:	e002      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;   
 8002f46:	bf00      	nop
 8002f48:	e000      	b.n	8002f4c <DMA_CheckFifoParam+0xe8>
      break;
 8002f4a:	bf00      	nop
    }
  } 
  
  return status; 
 8002f4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3714      	adds	r7, #20
 8002f52:	46bd      	mov	sp, r7
 8002f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f58:	4770      	bx	lr
 8002f5a:	bf00      	nop

08002f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f5c:	b480      	push	{r7}
 8002f5e:	b089      	sub	sp, #36	@ 0x24
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
 8002f64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f72:	2300      	movs	r3, #0
 8002f74:	61fb      	str	r3, [r7, #28]
 8002f76:	e16b      	b.n	8003250 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f78:	2201      	movs	r2, #1
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	697a      	ldr	r2, [r7, #20]
 8002f88:	4013      	ands	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f8c:	693a      	ldr	r2, [r7, #16]
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	f040 815a 	bne.w	800324a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d005      	beq.n	8002fae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002faa:	2b02      	cmp	r3, #2
 8002fac:	d130      	bne.n	8003010 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	689b      	ldr	r3, [r3, #8]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fb4:	69fb      	ldr	r3, [r7, #28]
 8002fb6:	005b      	lsls	r3, r3, #1
 8002fb8:	2203      	movs	r2, #3
 8002fba:	fa02 f303 	lsl.w	r3, r2, r3
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	005b      	lsls	r3, r3, #1
 8002fce:	fa02 f303 	lsl.w	r3, r2, r3
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	685b      	ldr	r3, [r3, #4]
 8002ff8:	091b      	lsrs	r3, r3, #4
 8002ffa:	f003 0201 	and.w	r2, r3, #1
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f003 0303 	and.w	r3, r3, #3
 8003018:	2b03      	cmp	r3, #3
 800301a:	d017      	beq.n	800304c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	005b      	lsls	r3, r3, #1
 8003026:	2203      	movs	r2, #3
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	689a      	ldr	r2, [r3, #8]
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f003 0303 	and.w	r3, r3, #3
 8003054:	2b02      	cmp	r3, #2
 8003056:	d123      	bne.n	80030a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	08da      	lsrs	r2, r3, #3
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	3208      	adds	r2, #8
 8003060:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003064:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	009b      	lsls	r3, r3, #2
 800306e:	220f      	movs	r2, #15
 8003070:	fa02 f303 	lsl.w	r3, r2, r3
 8003074:	43db      	mvns	r3, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4013      	ands	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	08da      	lsrs	r2, r3, #3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	3208      	adds	r2, #8
 800309a:	69b9      	ldr	r1, [r7, #24]
 800309c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	2203      	movs	r2, #3
 80030ac:	fa02 f303 	lsl.w	r3, r2, r3
 80030b0:	43db      	mvns	r3, r3
 80030b2:	69ba      	ldr	r2, [r7, #24]
 80030b4:	4013      	ands	r3, r2
 80030b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f003 0203 	and.w	r2, r3, #3
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	005b      	lsls	r3, r3, #1
 80030c4:	fa02 f303 	lsl.w	r3, r2, r3
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69ba      	ldr	r2, [r7, #24]
 80030d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	f000 80b4 	beq.w	800324a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	4b60      	ldr	r3, [pc, #384]	@ (8003268 <HAL_GPIO_Init+0x30c>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030ea:	4a5f      	ldr	r2, [pc, #380]	@ (8003268 <HAL_GPIO_Init+0x30c>)
 80030ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80030f2:	4b5d      	ldr	r3, [pc, #372]	@ (8003268 <HAL_GPIO_Init+0x30c>)
 80030f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030fa:	60fb      	str	r3, [r7, #12]
 80030fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030fe:	4a5b      	ldr	r2, [pc, #364]	@ (800326c <HAL_GPIO_Init+0x310>)
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	089b      	lsrs	r3, r3, #2
 8003104:	3302      	adds	r3, #2
 8003106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	220f      	movs	r2, #15
 8003116:	fa02 f303 	lsl.w	r3, r2, r3
 800311a:	43db      	mvns	r3, r3
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	4013      	ands	r3, r2
 8003120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a52      	ldr	r2, [pc, #328]	@ (8003270 <HAL_GPIO_Init+0x314>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d02b      	beq.n	8003182 <HAL_GPIO_Init+0x226>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a51      	ldr	r2, [pc, #324]	@ (8003274 <HAL_GPIO_Init+0x318>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d025      	beq.n	800317e <HAL_GPIO_Init+0x222>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a50      	ldr	r2, [pc, #320]	@ (8003278 <HAL_GPIO_Init+0x31c>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d01f      	beq.n	800317a <HAL_GPIO_Init+0x21e>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	4a4f      	ldr	r2, [pc, #316]	@ (800327c <HAL_GPIO_Init+0x320>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d019      	beq.n	8003176 <HAL_GPIO_Init+0x21a>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a4e      	ldr	r2, [pc, #312]	@ (8003280 <HAL_GPIO_Init+0x324>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d013      	beq.n	8003172 <HAL_GPIO_Init+0x216>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	4a4d      	ldr	r2, [pc, #308]	@ (8003284 <HAL_GPIO_Init+0x328>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d00d      	beq.n	800316e <HAL_GPIO_Init+0x212>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a4c      	ldr	r2, [pc, #304]	@ (8003288 <HAL_GPIO_Init+0x32c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d007      	beq.n	800316a <HAL_GPIO_Init+0x20e>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a4b      	ldr	r2, [pc, #300]	@ (800328c <HAL_GPIO_Init+0x330>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d101      	bne.n	8003166 <HAL_GPIO_Init+0x20a>
 8003162:	2307      	movs	r3, #7
 8003164:	e00e      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003166:	2308      	movs	r3, #8
 8003168:	e00c      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800316a:	2306      	movs	r3, #6
 800316c:	e00a      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800316e:	2305      	movs	r3, #5
 8003170:	e008      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003172:	2304      	movs	r3, #4
 8003174:	e006      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003176:	2303      	movs	r3, #3
 8003178:	e004      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800317a:	2302      	movs	r3, #2
 800317c:	e002      	b.n	8003184 <HAL_GPIO_Init+0x228>
 800317e:	2301      	movs	r3, #1
 8003180:	e000      	b.n	8003184 <HAL_GPIO_Init+0x228>
 8003182:	2300      	movs	r3, #0
 8003184:	69fa      	ldr	r2, [r7, #28]
 8003186:	f002 0203 	and.w	r2, r2, #3
 800318a:	0092      	lsls	r2, r2, #2
 800318c:	4093      	lsls	r3, r2
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4313      	orrs	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003194:	4935      	ldr	r1, [pc, #212]	@ (800326c <HAL_GPIO_Init+0x310>)
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	089b      	lsrs	r3, r3, #2
 800319a:	3302      	adds	r3, #2
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031a2:	4b3b      	ldr	r3, [pc, #236]	@ (8003290 <HAL_GPIO_Init+0x334>)
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	43db      	mvns	r3, r3
 80031ac:	69ba      	ldr	r2, [r7, #24]
 80031ae:	4013      	ands	r3, r2
 80031b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031b2:	683b      	ldr	r3, [r7, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80031be:	69ba      	ldr	r2, [r7, #24]
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031c6:	4a32      	ldr	r2, [pc, #200]	@ (8003290 <HAL_GPIO_Init+0x334>)
 80031c8:	69bb      	ldr	r3, [r7, #24]
 80031ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031cc:	4b30      	ldr	r3, [pc, #192]	@ (8003290 <HAL_GPIO_Init+0x334>)
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	43db      	mvns	r3, r3
 80031d6:	69ba      	ldr	r2, [r7, #24]
 80031d8:	4013      	ands	r3, r2
 80031da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	685b      	ldr	r3, [r3, #4]
 80031e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d003      	beq.n	80031f0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80031e8:	69ba      	ldr	r2, [r7, #24]
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	4313      	orrs	r3, r2
 80031ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031f0:	4a27      	ldr	r2, [pc, #156]	@ (8003290 <HAL_GPIO_Init+0x334>)
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031f6:	4b26      	ldr	r3, [pc, #152]	@ (8003290 <HAL_GPIO_Init+0x334>)
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	43db      	mvns	r3, r3
 8003200:	69ba      	ldr	r2, [r7, #24]
 8003202:	4013      	ands	r3, r2
 8003204:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	685b      	ldr	r3, [r3, #4]
 800320a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d003      	beq.n	800321a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4313      	orrs	r3, r2
 8003218:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800321a:	4a1d      	ldr	r2, [pc, #116]	@ (8003290 <HAL_GPIO_Init+0x334>)
 800321c:	69bb      	ldr	r3, [r7, #24]
 800321e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003220:	4b1b      	ldr	r3, [pc, #108]	@ (8003290 <HAL_GPIO_Init+0x334>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003238:	2b00      	cmp	r3, #0
 800323a:	d003      	beq.n	8003244 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800323c:	69ba      	ldr	r2, [r7, #24]
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003244:	4a12      	ldr	r2, [pc, #72]	@ (8003290 <HAL_GPIO_Init+0x334>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800324a:	69fb      	ldr	r3, [r7, #28]
 800324c:	3301      	adds	r3, #1
 800324e:	61fb      	str	r3, [r7, #28]
 8003250:	69fb      	ldr	r3, [r7, #28]
 8003252:	2b0f      	cmp	r3, #15
 8003254:	f67f ae90 	bls.w	8002f78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003258:	bf00      	nop
 800325a:	bf00      	nop
 800325c:	3724      	adds	r7, #36	@ 0x24
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40023800 	.word	0x40023800
 800326c:	40013800 	.word	0x40013800
 8003270:	40020000 	.word	0x40020000
 8003274:	40020400 	.word	0x40020400
 8003278:	40020800 	.word	0x40020800
 800327c:	40020c00 	.word	0x40020c00
 8003280:	40021000 	.word	0x40021000
 8003284:	40021400 	.word	0x40021400
 8003288:	40021800 	.word	0x40021800
 800328c:	40021c00 	.word	0x40021c00
 8003290:	40013c00 	.word	0x40013c00

08003294 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003294:	b480      	push	{r7}
 8003296:	b083      	sub	sp, #12
 8003298:	af00      	add	r7, sp, #0
 800329a:	6078      	str	r0, [r7, #4]
 800329c:	460b      	mov	r3, r1
 800329e:	807b      	strh	r3, [r7, #2]
 80032a0:	4613      	mov	r3, r2
 80032a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032a4:	787b      	ldrb	r3, [r7, #1]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d003      	beq.n	80032b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032aa:	887a      	ldrh	r2, [r7, #2]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032b0:	e003      	b.n	80032ba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032b2:	887b      	ldrh	r3, [r7, #2]
 80032b4:	041a      	lsls	r2, r3, #16
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	619a      	str	r2, [r3, #24]
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr
	...

080032c8 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b088      	sub	sp, #32
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e128      	b.n	800352c <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d109      	bne.n	80032fa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a90      	ldr	r2, [pc, #576]	@ (8003534 <HAL_I2S_Init+0x26c>)
 80032f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80032f4:	6878      	ldr	r0, [r7, #4]
 80032f6:	f7fe feb1 	bl	800205c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2202      	movs	r2, #2
 80032fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	69db      	ldr	r3, [r3, #28]
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	6812      	ldr	r2, [r2, #0]
 800330c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003310:	f023 030f 	bic.w	r3, r3, #15
 8003314:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2202      	movs	r2, #2
 800331c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	2b02      	cmp	r3, #2
 8003324:	d060      	beq.n	80033e8 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	68db      	ldr	r3, [r3, #12]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d102      	bne.n	8003334 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800332e:	2310      	movs	r3, #16
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	e001      	b.n	8003338 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003334:	2320      	movs	r3, #32
 8003336:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	2b20      	cmp	r3, #32
 800333e:	d802      	bhi.n	8003346 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003346:	2001      	movs	r0, #1
 8003348:	f001 faf8 	bl	800493c <HAL_RCCEx_GetPeriphCLKFreq>
 800334c:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	691b      	ldr	r3, [r3, #16]
 8003352:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003356:	d125      	bne.n	80033a4 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d010      	beq.n	8003382 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	68fa      	ldr	r2, [r7, #12]
 8003366:	fbb2 f2f3 	udiv	r2, r2, r3
 800336a:	4613      	mov	r3, r2
 800336c:	009b      	lsls	r3, r3, #2
 800336e:	4413      	add	r3, r2
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	461a      	mov	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	3305      	adds	r3, #5
 800337e:	613b      	str	r3, [r7, #16]
 8003380:	e01f      	b.n	80033c2 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003382:	697b      	ldr	r3, [r7, #20]
 8003384:	00db      	lsls	r3, r3, #3
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	fbb2 f2f3 	udiv	r2, r2, r3
 800338c:	4613      	mov	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	4413      	add	r3, r2
 8003392:	005b      	lsls	r3, r3, #1
 8003394:	461a      	mov	r2, r3
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	695b      	ldr	r3, [r3, #20]
 800339a:	fbb2 f3f3 	udiv	r3, r2, r3
 800339e:	3305      	adds	r3, #5
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	e00e      	b.n	80033c2 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80033a4:	68fa      	ldr	r2, [r7, #12]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80033ac:	4613      	mov	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4413      	add	r3, r2
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	461a      	mov	r2, r3
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	695b      	ldr	r3, [r3, #20]
 80033ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80033be:	3305      	adds	r3, #5
 80033c0:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4a5c      	ldr	r2, [pc, #368]	@ (8003538 <HAL_I2S_Init+0x270>)
 80033c6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	f003 0301 	and.w	r3, r3, #1
 80033d4:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80033d6:	693a      	ldr	r2, [r7, #16]
 80033d8:	69bb      	ldr	r3, [r7, #24]
 80033da:	1ad3      	subs	r3, r2, r3
 80033dc:	085b      	lsrs	r3, r3, #1
 80033de:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	021b      	lsls	r3, r3, #8
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	e003      	b.n	80033f0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80033e8:	2302      	movs	r3, #2
 80033ea:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80033f0:	69fb      	ldr	r3, [r7, #28]
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d902      	bls.n	80033fc <HAL_I2S_Init+0x134>
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	2bff      	cmp	r3, #255	@ 0xff
 80033fa:	d907      	bls.n	800340c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003400:	f043 0210 	orr.w	r2, r3, #16
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8003408:	2301      	movs	r3, #1
 800340a:	e08f      	b.n	800352c <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	69bb      	ldr	r3, [r7, #24]
 8003412:	ea42 0103 	orr.w	r1, r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	69fa      	ldr	r2, [r7, #28]
 800341c:	430a      	orrs	r2, r1
 800341e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	69db      	ldr	r3, [r3, #28]
 8003426:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800342a:	f023 030f 	bic.w	r3, r3, #15
 800342e:	687a      	ldr	r2, [r7, #4]
 8003430:	6851      	ldr	r1, [r2, #4]
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	6892      	ldr	r2, [r2, #8]
 8003436:	4311      	orrs	r1, r2
 8003438:	687a      	ldr	r2, [r7, #4]
 800343a:	68d2      	ldr	r2, [r2, #12]
 800343c:	4311      	orrs	r1, r2
 800343e:	687a      	ldr	r2, [r7, #4]
 8003440:	6992      	ldr	r2, [r2, #24]
 8003442:	430a      	orrs	r2, r1
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800344e:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1b      	ldr	r3, [r3, #32]
 8003454:	2b01      	cmp	r3, #1
 8003456:	d161      	bne.n	800351c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a38      	ldr	r2, [pc, #224]	@ (800353c <HAL_I2S_Init+0x274>)
 800345c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a37      	ldr	r2, [pc, #220]	@ (8003540 <HAL_I2S_Init+0x278>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d101      	bne.n	800346c <HAL_I2S_Init+0x1a4>
 8003468:	4b36      	ldr	r3, [pc, #216]	@ (8003544 <HAL_I2S_Init+0x27c>)
 800346a:	e001      	b.n	8003470 <HAL_I2S_Init+0x1a8>
 800346c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	687a      	ldr	r2, [r7, #4]
 8003474:	6812      	ldr	r2, [r2, #0]
 8003476:	4932      	ldr	r1, [pc, #200]	@ (8003540 <HAL_I2S_Init+0x278>)
 8003478:	428a      	cmp	r2, r1
 800347a:	d101      	bne.n	8003480 <HAL_I2S_Init+0x1b8>
 800347c:	4a31      	ldr	r2, [pc, #196]	@ (8003544 <HAL_I2S_Init+0x27c>)
 800347e:	e001      	b.n	8003484 <HAL_I2S_Init+0x1bc>
 8003480:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8003484:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8003488:	f023 030f 	bic.w	r3, r3, #15
 800348c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a2b      	ldr	r2, [pc, #172]	@ (8003540 <HAL_I2S_Init+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_I2S_Init+0x1d4>
 8003498:	4b2a      	ldr	r3, [pc, #168]	@ (8003544 <HAL_I2S_Init+0x27c>)
 800349a:	e001      	b.n	80034a0 <HAL_I2S_Init+0x1d8>
 800349c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034a0:	2202      	movs	r2, #2
 80034a2:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a25      	ldr	r2, [pc, #148]	@ (8003540 <HAL_I2S_Init+0x278>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_I2S_Init+0x1ea>
 80034ae:	4b25      	ldr	r3, [pc, #148]	@ (8003544 <HAL_I2S_Init+0x27c>)
 80034b0:	e001      	b.n	80034b6 <HAL_I2S_Init+0x1ee>
 80034b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80034b6:	69db      	ldr	r3, [r3, #28]
 80034b8:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80034c2:	d003      	beq.n	80034cc <HAL_I2S_Init+0x204>
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d103      	bne.n	80034d4 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80034cc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	e001      	b.n	80034d8 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80034d4:	2300      	movs	r3, #0
 80034d6:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034e2:	4313      	orrs	r3, r2
 80034e4:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034ec:	4313      	orrs	r3, r2
 80034ee:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	699b      	ldr	r3, [r3, #24]
 80034f4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80034f6:	4313      	orrs	r3, r2
 80034f8:	b29a      	uxth	r2, r3
 80034fa:	897b      	ldrh	r3, [r7, #10]
 80034fc:	4313      	orrs	r3, r2
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8003504:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a0d      	ldr	r2, [pc, #52]	@ (8003540 <HAL_I2S_Init+0x278>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d101      	bne.n	8003514 <HAL_I2S_Init+0x24c>
 8003510:	4b0c      	ldr	r3, [pc, #48]	@ (8003544 <HAL_I2S_Init+0x27c>)
 8003512:	e001      	b.n	8003518 <HAL_I2S_Init+0x250>
 8003514:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003518:	897a      	ldrh	r2, [r7, #10]
 800351a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3720      	adds	r7, #32
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	08003845 	.word	0x08003845
 8003538:	cccccccd 	.word	0xcccccccd
 800353c:	08003959 	.word	0x08003959
 8003540:	40003800 	.word	0x40003800
 8003544:	40003400 	.word	0x40003400

08003548 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b086      	sub	sp, #24
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	4613      	mov	r3, r2
 8003554:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	2b00      	cmp	r3, #0
 800355a:	d002      	beq.n	8003562 <HAL_I2S_Receive_DMA+0x1a>
 800355c:	88fb      	ldrh	r3, [r7, #6]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d101      	bne.n	8003566 <HAL_I2S_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	e09d      	b.n	80036a2 <HAL_I2S_Receive_DMA+0x15a>
  }

  if (hi2s->State != HAL_I2S_STATE_READY)
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	d001      	beq.n	8003576 <HAL_I2S_Receive_DMA+0x2e>
  {
    return HAL_BUSY;
 8003572:	2302      	movs	r3, #2
 8003574:	e095      	b.n	80036a2 <HAL_I2S_Receive_DMA+0x15a>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800357c:	b2db      	uxtb	r3, r3
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_I2S_Receive_DMA+0x3e>
 8003582:	2302      	movs	r3, #2
 8003584:	e08d      	b.n	80036a2 <HAL_I2S_Receive_DMA+0x15a>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2204      	movs	r2, #4
 8003592:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->pRxBuffPtr = pData;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	68ba      	ldr	r2, [r7, #8]
 80035a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69db      	ldr	r3, [r3, #28]
 80035a8:	f003 0307 	and.w	r3, r3, #7
 80035ac:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b03      	cmp	r3, #3
 80035b2:	d002      	beq.n	80035ba <HAL_I2S_Receive_DMA+0x72>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	2b05      	cmp	r3, #5
 80035b8:	d10a      	bne.n	80035d0 <HAL_I2S_Receive_DMA+0x88>
  {
    hi2s->RxXferSize = (Size << 1U);
 80035ba:	88fb      	ldrh	r3, [r7, #6]
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	b29a      	uxth	r2, r3
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = (Size << 1U);
 80035c4:	88fb      	ldrh	r3, [r7, #6]
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	b29a      	uxth	r2, r3
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	865a      	strh	r2, [r3, #50]	@ 0x32
 80035ce:	e005      	b.n	80035dc <HAL_I2S_Receive_DMA+0x94>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	88fa      	ldrh	r2, [r7, #6]
 80035d4:	861a      	strh	r2, [r3, #48]	@ 0x30
    hi2s->RxXferCount = Size;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	88fa      	ldrh	r2, [r7, #6]
 80035da:	865a      	strh	r2, [r3, #50]	@ 0x32
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e0:	4a32      	ldr	r2, [pc, #200]	@ (80036ac <HAL_I2S_Receive_DMA+0x164>)
 80035e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035e8:	4a31      	ldr	r2, [pc, #196]	@ (80036b0 <HAL_I2S_Receive_DMA+0x168>)
 80035ea:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035f0:	4a30      	ldr	r2, [pc, #192]	@ (80036b4 <HAL_I2S_Receive_DMA+0x16c>)
 80035f2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80035fe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003602:	d10a      	bne.n	800361a <HAL_I2S_Receive_DMA+0xd2>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003604:	2300      	movs	r3, #0
 8003606:	613b      	str	r3, [r7, #16]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	613b      	str	r3, [r7, #16]
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	613b      	str	r3, [r7, #16]
 8003618:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	330c      	adds	r3, #12
 8003624:	4619      	mov	r1, r3
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800362a:	461a      	mov	r2, r3
                                 hi2s->RxXferSize))
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	8e1b      	ldrh	r3, [r3, #48]	@ 0x30
 8003630:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8003632:	f7ff f9d1 	bl	80029d8 <HAL_DMA_Start_IT>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d00f      	beq.n	800365c <HAL_I2S_Receive_DMA+0x114>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003640:	f043 0208 	orr.w	r2, r3, #8
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    __HAL_UNLOCK(hi2s);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    return HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e022      	b.n	80036a2 <HAL_I2S_Receive_DMA+0x15a>
  }

  __HAL_UNLOCK(hi2s);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	f003 0301 	and.w	r3, r3, #1
 800366e:	2b00      	cmp	r3, #0
 8003670:	d107      	bne.n	8003682 <HAL_I2S_Receive_DMA+0x13a>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	685a      	ldr	r2, [r3, #4]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f042 0201 	orr.w	r2, r2, #1
 8003680:	605a      	str	r2, [r3, #4]
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800368c:	2b00      	cmp	r3, #0
 800368e:	d107      	bne.n	80036a0 <HAL_I2S_Receive_DMA+0x158>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	69da      	ldr	r2, [r3, #28]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800369e:	61da      	str	r2, [r3, #28]
  }

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	08003723 	.word	0x08003723
 80036b0:	080036e1 	.word	0x080036e1
 80036b4:	0800373f 	.word	0x0800373f

080036b8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80036b8:	b480      	push	{r7}
 80036ba:	b083      	sub	sp, #12
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80036c0:	bf00      	nop
 80036c2:	370c      	adds	r7, #12
 80036c4:	46bd      	mov	sp, r7
 80036c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ca:	4770      	bx	lr

080036cc <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b083      	sub	sp, #12
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80036d4:	bf00      	nop
 80036d6:	370c      	adds	r7, #12
 80036d8:	46bd      	mov	sp, r7
 80036da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036de:	4770      	bx	lr

080036e0 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036ec:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	69db      	ldr	r3, [r3, #28]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d10e      	bne.n	8003714 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2200      	movs	r2, #0
 800370a:	865a      	strh	r2, [r3, #50]	@ 0x32
    hi2s->State = HAL_I2S_STATE_READY;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f7fe f999 	bl	8001a4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800371a:	bf00      	nop
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}

08003722 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003722:	b580      	push	{r7, lr}
 8003724:	b084      	sub	sp, #16
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800372e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 8003730:	68f8      	ldr	r0, [r7, #12]
 8003732:	f7fe f973 	bl	8001a1c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003736:	bf00      	nop
 8003738:	3710      	adds	r7, #16
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}

0800373e <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800373e:	b580      	push	{r7, lr}
 8003740:	b084      	sub	sp, #16
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800374a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685a      	ldr	r2, [r3, #4]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f022 0203 	bic.w	r2, r2, #3
 800375a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a
  hi2s->RxXferCount = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	865a      	strh	r2, [r3, #50]	@ 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003774:	f043 0208 	orr.w	r2, r3, #8
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800377c:	68f8      	ldr	r0, [r7, #12]
 800377e:	f7ff ffa5 	bl	80036cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8003782:	bf00      	nop
 8003784:	3710      	adds	r7, #16
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b082      	sub	sp, #8
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	881a      	ldrh	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037a2:	1c9a      	adds	r2, r3, #2
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ac:	b29b      	uxth	r3, r3
 80037ae:	3b01      	subs	r3, #1
 80037b0:	b29a      	uxth	r2, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ba:	b29b      	uxth	r3, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d10e      	bne.n	80037de <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80037ce:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f7ff ff6d 	bl	80036b8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037de:	bf00      	nop
 80037e0:	3708      	adds	r7, #8
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}

080037e6 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80037e6:	b580      	push	{r7, lr}
 80037e8:	b082      	sub	sp, #8
 80037ea:	af00      	add	r7, sp, #0
 80037ec:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68da      	ldr	r2, [r3, #12]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	b292      	uxth	r2, r2
 80037fa:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	1c9a      	adds	r2, r3, #2
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800380a:	b29b      	uxth	r3, r3
 800380c:	3b01      	subs	r3, #1
 800380e:	b29a      	uxth	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003818:	b29b      	uxth	r3, r3
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10e      	bne.n	800383c <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800382c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f7fe f908 	bl	8001a4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800383c:	bf00      	nop
 800383e:	3708      	adds	r7, #8
 8003840:	46bd      	mov	sp, r7
 8003842:	bd80      	pop	{r7, pc}

08003844 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b04      	cmp	r3, #4
 800385e:	d13a      	bne.n	80038d6 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003860:	697b      	ldr	r3, [r7, #20]
 8003862:	f003 0301 	and.w	r3, r3, #1
 8003866:	2b01      	cmp	r3, #1
 8003868:	d109      	bne.n	800387e <I2S_IRQHandler+0x3a>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003874:	2b40      	cmp	r3, #64	@ 0x40
 8003876:	d102      	bne.n	800387e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ffb4 	bl	80037e6 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d126      	bne.n	80038d6 <I2S_IRQHandler+0x92>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0320 	and.w	r3, r3, #32
 8003892:	2b20      	cmp	r3, #32
 8003894:	d11f      	bne.n	80038d6 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	685a      	ldr	r2, [r3, #4]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80038a4:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	68db      	ldr	r3, [r3, #12]
 80038b0:	613b      	str	r3, [r7, #16]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	613b      	str	r3, [r7, #16]
 80038ba:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80038c8:	f043 0202 	orr.w	r2, r3, #2
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038d0:	6878      	ldr	r0, [r7, #4]
 80038d2:	f7ff fefb 	bl	80036cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b03      	cmp	r3, #3
 80038e0:	d136      	bne.n	8003950 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b02      	cmp	r3, #2
 80038ea:	d109      	bne.n	8003900 <I2S_IRQHandler+0xbc>
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038f6:	2b80      	cmp	r3, #128	@ 0x80
 80038f8:	d102      	bne.n	8003900 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038fa:	6878      	ldr	r0, [r7, #4]
 80038fc:	f7ff ff45 	bl	800378a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f003 0308 	and.w	r3, r3, #8
 8003906:	2b08      	cmp	r3, #8
 8003908:	d122      	bne.n	8003950 <I2S_IRQHandler+0x10c>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b20      	cmp	r3, #32
 8003916:	d11b      	bne.n	8003950 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685a      	ldr	r2, [r3, #4]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003926:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003928:	2300      	movs	r3, #0
 800392a:	60fb      	str	r3, [r7, #12]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	60fb      	str	r3, [r7, #12]
 8003934:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2201      	movs	r2, #1
 800393a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f043 0204 	orr.w	r2, r3, #4
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800394a:	6878      	ldr	r0, [r7, #4]
 800394c:	f7ff febe 	bl	80036cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003950:	bf00      	nop
 8003952:	3718      	adds	r7, #24
 8003954:	46bd      	mov	sp, r7
 8003956:	bd80      	pop	{r7, pc}

08003958 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b088      	sub	sp, #32
 800395c:	af00      	add	r7, sp, #0
 800395e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a92      	ldr	r2, [pc, #584]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d101      	bne.n	8003976 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003972:	4b92      	ldr	r3, [pc, #584]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003974:	e001      	b.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003976:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a8b      	ldr	r2, [pc, #556]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d101      	bne.n	8003994 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003990:	4b8a      	ldr	r3, [pc, #552]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003992:	e001      	b.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003994:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039a4:	d004      	beq.n	80039b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	f040 8099 	bne.w	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	f003 0302 	and.w	r3, r3, #2
 80039b6:	2b02      	cmp	r3, #2
 80039b8:	d107      	bne.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80039c4:	6878      	ldr	r0, [r7, #4]
 80039c6:	f000 f925 	bl	8003c14 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	f003 0301 	and.w	r3, r3, #1
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d107      	bne.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d002      	beq.n	80039e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80039de:	6878      	ldr	r0, [r7, #4]
 80039e0:	f000 f9c8 	bl	8003d74 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039ea:	2b40      	cmp	r3, #64	@ 0x40
 80039ec:	d13a      	bne.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039ee:	693b      	ldr	r3, [r7, #16]
 80039f0:	f003 0320 	and.w	r3, r3, #32
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d035      	beq.n	8003a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4a6e      	ldr	r2, [pc, #440]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d101      	bne.n	8003a06 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003a02:	4b6e      	ldr	r3, [pc, #440]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a04:	e001      	b.n	8003a0a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003a06:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4969      	ldr	r1, [pc, #420]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a12:	428b      	cmp	r3, r1
 8003a14:	d101      	bne.n	8003a1a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003a16:	4b69      	ldr	r3, [pc, #420]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a18:	e001      	b.n	8003a1e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003a1a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a1e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003a22:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	685a      	ldr	r2, [r3, #4]
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a32:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	689b      	ldr	r3, [r3, #8]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a56:	f043 0202 	orr.w	r2, r3, #2
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	f7ff fe34 	bl	80036cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	2b08      	cmp	r3, #8
 8003a6c:	f040 80c3 	bne.w	8003bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	f003 0320 	and.w	r3, r3, #32
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	f000 80bd 	beq.w	8003bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	685a      	ldr	r2, [r3, #4]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003a8a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a49      	ldr	r2, [pc, #292]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a96:	4b49      	ldr	r3, [pc, #292]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a98:	e001      	b.n	8003a9e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003a9e:	685a      	ldr	r2, [r3, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4944      	ldr	r1, [pc, #272]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aa6:	428b      	cmp	r3, r1
 8003aa8:	d101      	bne.n	8003aae <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003aaa:	4b44      	ldr	r3, [pc, #272]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aac:	e001      	b.n	8003ab2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003aae:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ab2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003ab6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003ab8:	2300      	movs	r3, #0
 8003aba:	60bb      	str	r3, [r7, #8]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	60bb      	str	r3, [r7, #8]
 8003ac4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ad2:	f043 0204 	orr.w	r2, r3, #4
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ada:	6878      	ldr	r0, [r7, #4]
 8003adc:	f7ff fdf6 	bl	80036cc <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ae0:	e089      	b.n	8003bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	d107      	bne.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f8be 	bl	8003c78 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003afc:	69fb      	ldr	r3, [r7, #28]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d107      	bne.n	8003b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003b06:	697b      	ldr	r3, [r7, #20]
 8003b08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8fd 	bl	8003d10 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d12f      	bne.n	8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003b20:	697b      	ldr	r3, [r7, #20]
 8003b22:	f003 0320 	and.w	r3, r3, #32
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d02a      	beq.n	8003b80 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	685a      	ldr	r2, [r3, #4]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003b38:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a1e      	ldr	r2, [pc, #120]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003b44:	4b1d      	ldr	r3, [pc, #116]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b46:	e001      	b.n	8003b4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	4919      	ldr	r1, [pc, #100]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d101      	bne.n	8003b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b58:	4b18      	ldr	r3, [pc, #96]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b5a:	e001      	b.n	8003b60 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003b60:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003b64:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b72:	f043 0202 	orr.w	r2, r3, #2
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f7ff fda6 	bl	80036cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b80:	69bb      	ldr	r3, [r7, #24]
 8003b82:	f003 0308 	and.w	r3, r3, #8
 8003b86:	2b08      	cmp	r3, #8
 8003b88:	d136      	bne.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f003 0320 	and.w	r3, r3, #32
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d031      	beq.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a07      	ldr	r2, [pc, #28]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d101      	bne.n	8003ba2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b9e:	4b07      	ldr	r3, [pc, #28]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ba0:	e001      	b.n	8003ba6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003ba2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4902      	ldr	r1, [pc, #8]	@ (8003bb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bae:	428b      	cmp	r3, r1
 8003bb0:	d106      	bne.n	8003bc0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003bb2:	4b02      	ldr	r3, [pc, #8]	@ (8003bbc <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb4:	e006      	b.n	8003bc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003bb6:	bf00      	nop
 8003bb8:	40003800 	.word	0x40003800
 8003bbc:	40003400 	.word	0x40003400
 8003bc0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003bc4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003bc8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003bd8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2201      	movs	r2, #1
 8003bde:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003be6:	f043 0204 	orr.w	r2, r3, #4
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f7ff fd6c 	bl	80036cc <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003bf4:	e000      	b.n	8003bf8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bf6:	bf00      	nop
}
 8003bf8:	bf00      	nop
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b083      	sub	sp, #12
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003c08:	bf00      	nop
 8003c0a:	370c      	adds	r7, #12
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c20:	1c99      	adds	r1, r3, #2
 8003c22:	687a      	ldr	r2, [r7, #4]
 8003c24:	6251      	str	r1, [r2, #36]	@ 0x24
 8003c26:	881a      	ldrh	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d113      	bne.n	8003c6e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003c54:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d106      	bne.n	8003c6e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f7ff ffc9 	bl	8003c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c6e:	bf00      	nop
 8003c70:	3708      	adds	r7, #8
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
	...

08003c78 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c84:	1c99      	adds	r1, r3, #2
 8003c86:	687a      	ldr	r2, [r7, #4]
 8003c88:	6251      	str	r1, [r2, #36]	@ 0x24
 8003c8a:	8819      	ldrh	r1, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a1d      	ldr	r2, [pc, #116]	@ (8003d08 <I2SEx_TxISR_I2SExt+0x90>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d101      	bne.n	8003c9a <I2SEx_TxISR_I2SExt+0x22>
 8003c96:	4b1d      	ldr	r3, [pc, #116]	@ (8003d0c <I2SEx_TxISR_I2SExt+0x94>)
 8003c98:	e001      	b.n	8003c9e <I2SEx_TxISR_I2SExt+0x26>
 8003c9a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003c9e:	460a      	mov	r2, r1
 8003ca0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b29a      	uxth	r2, r3
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d121      	bne.n	8003cfe <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a12      	ldr	r2, [pc, #72]	@ (8003d08 <I2SEx_TxISR_I2SExt+0x90>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d101      	bne.n	8003cc8 <I2SEx_TxISR_I2SExt+0x50>
 8003cc4:	4b11      	ldr	r3, [pc, #68]	@ (8003d0c <I2SEx_TxISR_I2SExt+0x94>)
 8003cc6:	e001      	b.n	8003ccc <I2SEx_TxISR_I2SExt+0x54>
 8003cc8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ccc:	685a      	ldr	r2, [r3, #4]
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	490d      	ldr	r1, [pc, #52]	@ (8003d08 <I2SEx_TxISR_I2SExt+0x90>)
 8003cd4:	428b      	cmp	r3, r1
 8003cd6:	d101      	bne.n	8003cdc <I2SEx_TxISR_I2SExt+0x64>
 8003cd8:	4b0c      	ldr	r3, [pc, #48]	@ (8003d0c <I2SEx_TxISR_I2SExt+0x94>)
 8003cda:	e001      	b.n	8003ce0 <I2SEx_TxISR_I2SExt+0x68>
 8003cdc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ce0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8003ce4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003cea:	b29b      	uxth	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d106      	bne.n	8003cfe <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f7ff ff81 	bl	8003c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cfe:	bf00      	nop
 8003d00:	3708      	adds	r7, #8
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40003800 	.word	0x40003800
 8003d0c:	40003400 	.word	0x40003400

08003d10 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68d8      	ldr	r0, [r3, #12]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	1c99      	adds	r1, r3, #2
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003d28:	b282      	uxth	r2, r0
 8003d2a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003d3e:	b29b      	uxth	r3, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d113      	bne.n	8003d6c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003d52:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2201      	movs	r2, #1
 8003d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7ff ff4a 	bl	8003c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	3708      	adds	r7, #8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a20      	ldr	r2, [pc, #128]	@ (8003e04 <I2SEx_RxISR_I2SExt+0x90>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d101      	bne.n	8003d8a <I2SEx_RxISR_I2SExt+0x16>
 8003d86:	4b20      	ldr	r3, [pc, #128]	@ (8003e08 <I2SEx_RxISR_I2SExt+0x94>)
 8003d88:	e001      	b.n	8003d8e <I2SEx_RxISR_I2SExt+0x1a>
 8003d8a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003d8e:	68d8      	ldr	r0, [r3, #12]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	1c99      	adds	r1, r3, #2
 8003d96:	687a      	ldr	r2, [r7, #4]
 8003d98:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8003d9a:	b282      	uxth	r2, r0
 8003d9c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003da2:	b29b      	uxth	r3, r3
 8003da4:	3b01      	subs	r3, #1
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8003db0:	b29b      	uxth	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d121      	bne.n	8003dfa <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a12      	ldr	r2, [pc, #72]	@ (8003e04 <I2SEx_RxISR_I2SExt+0x90>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d101      	bne.n	8003dc4 <I2SEx_RxISR_I2SExt+0x50>
 8003dc0:	4b11      	ldr	r3, [pc, #68]	@ (8003e08 <I2SEx_RxISR_I2SExt+0x94>)
 8003dc2:	e001      	b.n	8003dc8 <I2SEx_RxISR_I2SExt+0x54>
 8003dc4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003dc8:	685a      	ldr	r2, [r3, #4]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	490d      	ldr	r1, [pc, #52]	@ (8003e04 <I2SEx_RxISR_I2SExt+0x90>)
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	d101      	bne.n	8003dd8 <I2SEx_RxISR_I2SExt+0x64>
 8003dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8003e08 <I2SEx_RxISR_I2SExt+0x94>)
 8003dd6:	e001      	b.n	8003ddc <I2SEx_RxISR_I2SExt+0x68>
 8003dd8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8003ddc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8003de0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d106      	bne.n	8003dfa <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003df4:	6878      	ldr	r0, [r7, #4]
 8003df6:	f7ff ff03 	bl	8003c00 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	3708      	adds	r7, #8
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}
 8003e02:	bf00      	nop
 8003e04:	40003800 	.word	0x40003800
 8003e08:	40003400 	.word	0x40003400

08003e0c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d101      	bne.n	8003e1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e267      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d075      	beq.n	8003f16 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e2a:	4b88      	ldr	r3, [pc, #544]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 030c 	and.w	r3, r3, #12
 8003e32:	2b04      	cmp	r3, #4
 8003e34:	d00c      	beq.n	8003e50 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e36:	4b85      	ldr	r3, [pc, #532]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e38:	689b      	ldr	r3, [r3, #8]
 8003e3a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003e3e:	2b08      	cmp	r3, #8
 8003e40:	d112      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e42:	4b82      	ldr	r3, [pc, #520]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003e4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e4e:	d10b      	bne.n	8003e68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e50:	4b7e      	ldr	r3, [pc, #504]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d05b      	beq.n	8003f14 <HAL_RCC_OscConfig+0x108>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d157      	bne.n	8003f14 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e242      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003e70:	d106      	bne.n	8003e80 <HAL_RCC_OscConfig+0x74>
 8003e72:	4b76      	ldr	r3, [pc, #472]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a75      	ldr	r2, [pc, #468]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e7c:	6013      	str	r3, [r2, #0]
 8003e7e:	e01d      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	685b      	ldr	r3, [r3, #4]
 8003e84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003e88:	d10c      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x98>
 8003e8a:	4b70      	ldr	r3, [pc, #448]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a6f      	ldr	r2, [pc, #444]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e90:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e94:	6013      	str	r3, [r2, #0]
 8003e96:	4b6d      	ldr	r3, [pc, #436]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a6c      	ldr	r2, [pc, #432]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003e9c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003ea0:	6013      	str	r3, [r2, #0]
 8003ea2:	e00b      	b.n	8003ebc <HAL_RCC_OscConfig+0xb0>
 8003ea4:	4b69      	ldr	r3, [pc, #420]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	4a68      	ldr	r2, [pc, #416]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003eaa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003eae:	6013      	str	r3, [r2, #0]
 8003eb0:	4b66      	ldr	r3, [pc, #408]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a65      	ldr	r2, [pc, #404]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003eb6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003eba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d013      	beq.n	8003eec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ec4:	f7fe fbac 	bl	8002620 <HAL_GetTick>
 8003ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eca:	e008      	b.n	8003ede <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ecc:	f7fe fba8 	bl	8002620 <HAL_GetTick>
 8003ed0:	4602      	mov	r2, r0
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	1ad3      	subs	r3, r2, r3
 8003ed6:	2b64      	cmp	r3, #100	@ 0x64
 8003ed8:	d901      	bls.n	8003ede <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003eda:	2303      	movs	r3, #3
 8003edc:	e207      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ede:	4b5b      	ldr	r3, [pc, #364]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d0f0      	beq.n	8003ecc <HAL_RCC_OscConfig+0xc0>
 8003eea:	e014      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003eec:	f7fe fb98 	bl	8002620 <HAL_GetTick>
 8003ef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ef2:	e008      	b.n	8003f06 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ef4:	f7fe fb94 	bl	8002620 <HAL_GetTick>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	2b64      	cmp	r3, #100	@ 0x64
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e1f3      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f06:	4b51      	ldr	r3, [pc, #324]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1f0      	bne.n	8003ef4 <HAL_RCC_OscConfig+0xe8>
 8003f12:	e000      	b.n	8003f16 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d063      	beq.n	8003fea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f22:	4b4a      	ldr	r3, [pc, #296]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	f003 030c 	and.w	r3, r3, #12
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d00b      	beq.n	8003f46 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f2e:	4b47      	ldr	r3, [pc, #284]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d11c      	bne.n	8003f74 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f3a:	4b44      	ldr	r3, [pc, #272]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f3c:	685b      	ldr	r3, [r3, #4]
 8003f3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d116      	bne.n	8003f74 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f46:	4b41      	ldr	r3, [pc, #260]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d005      	beq.n	8003f5e <HAL_RCC_OscConfig+0x152>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	68db      	ldr	r3, [r3, #12]
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d001      	beq.n	8003f5e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	e1c7      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5e:	4b3b      	ldr	r3, [pc, #236]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	00db      	lsls	r3, r3, #3
 8003f6c:	4937      	ldr	r1, [pc, #220]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f72:	e03a      	b.n	8003fea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	68db      	ldr	r3, [r3, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d020      	beq.n	8003fbe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f7c:	4b34      	ldr	r3, [pc, #208]	@ (8004050 <HAL_RCC_OscConfig+0x244>)
 8003f7e:	2201      	movs	r2, #1
 8003f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f82:	f7fe fb4d 	bl	8002620 <HAL_GetTick>
 8003f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f88:	e008      	b.n	8003f9c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8a:	f7fe fb49 	bl	8002620 <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	2b02      	cmp	r3, #2
 8003f96:	d901      	bls.n	8003f9c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f98:	2303      	movs	r3, #3
 8003f9a:	e1a8      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9c:	4b2b      	ldr	r3, [pc, #172]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d0f0      	beq.n	8003f8a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fa8:	4b28      	ldr	r3, [pc, #160]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	00db      	lsls	r3, r3, #3
 8003fb6:	4925      	ldr	r1, [pc, #148]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	600b      	str	r3, [r1, #0]
 8003fbc:	e015      	b.n	8003fea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fbe:	4b24      	ldr	r3, [pc, #144]	@ (8004050 <HAL_RCC_OscConfig+0x244>)
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fc4:	f7fe fb2c 	bl	8002620 <HAL_GetTick>
 8003fc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fca:	e008      	b.n	8003fde <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fcc:	f7fe fb28 	bl	8002620 <HAL_GetTick>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	693b      	ldr	r3, [r7, #16]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	2b02      	cmp	r3, #2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e187      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fde:	4b1b      	ldr	r3, [pc, #108]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1f0      	bne.n	8003fcc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0308 	and.w	r3, r3, #8
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d036      	beq.n	8004064 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	695b      	ldr	r3, [r3, #20]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d016      	beq.n	800402c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ffe:	4b15      	ldr	r3, [pc, #84]	@ (8004054 <HAL_RCC_OscConfig+0x248>)
 8004000:	2201      	movs	r2, #1
 8004002:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004004:	f7fe fb0c 	bl	8002620 <HAL_GetTick>
 8004008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800400a:	e008      	b.n	800401e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800400c:	f7fe fb08 	bl	8002620 <HAL_GetTick>
 8004010:	4602      	mov	r2, r0
 8004012:	693b      	ldr	r3, [r7, #16]
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	2b02      	cmp	r3, #2
 8004018:	d901      	bls.n	800401e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800401a:	2303      	movs	r3, #3
 800401c:	e167      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800401e:	4b0b      	ldr	r3, [pc, #44]	@ (800404c <HAL_RCC_OscConfig+0x240>)
 8004020:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004022:	f003 0302 	and.w	r3, r3, #2
 8004026:	2b00      	cmp	r3, #0
 8004028:	d0f0      	beq.n	800400c <HAL_RCC_OscConfig+0x200>
 800402a:	e01b      	b.n	8004064 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800402c:	4b09      	ldr	r3, [pc, #36]	@ (8004054 <HAL_RCC_OscConfig+0x248>)
 800402e:	2200      	movs	r2, #0
 8004030:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004032:	f7fe faf5 	bl	8002620 <HAL_GetTick>
 8004036:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004038:	e00e      	b.n	8004058 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800403a:	f7fe faf1 	bl	8002620 <HAL_GetTick>
 800403e:	4602      	mov	r2, r0
 8004040:	693b      	ldr	r3, [r7, #16]
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	2b02      	cmp	r3, #2
 8004046:	d907      	bls.n	8004058 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004048:	2303      	movs	r3, #3
 800404a:	e150      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
 800404c:	40023800 	.word	0x40023800
 8004050:	42470000 	.word	0x42470000
 8004054:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004058:	4b88      	ldr	r3, [pc, #544]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800405a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800405c:	f003 0302 	and.w	r3, r3, #2
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1ea      	bne.n	800403a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0304 	and.w	r3, r3, #4
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 8097 	beq.w	80041a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004072:	2300      	movs	r3, #0
 8004074:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004076:	4b81      	ldr	r3, [pc, #516]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004078:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10f      	bne.n	80040a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004082:	2300      	movs	r3, #0
 8004084:	60bb      	str	r3, [r7, #8]
 8004086:	4b7d      	ldr	r3, [pc, #500]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004088:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800408a:	4a7c      	ldr	r2, [pc, #496]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800408c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004090:	6413      	str	r3, [r2, #64]	@ 0x40
 8004092:	4b7a      	ldr	r3, [pc, #488]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004094:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800409a:	60bb      	str	r3, [r7, #8]
 800409c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800409e:	2301      	movs	r3, #1
 80040a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040a2:	4b77      	ldr	r3, [pc, #476]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d118      	bne.n	80040e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040ae:	4b74      	ldr	r3, [pc, #464]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4a73      	ldr	r2, [pc, #460]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040ba:	f7fe fab1 	bl	8002620 <HAL_GetTick>
 80040be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c0:	e008      	b.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040c2:	f7fe faad 	bl	8002620 <HAL_GetTick>
 80040c6:	4602      	mov	r2, r0
 80040c8:	693b      	ldr	r3, [r7, #16]
 80040ca:	1ad3      	subs	r3, r2, r3
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d901      	bls.n	80040d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80040d0:	2303      	movs	r3, #3
 80040d2:	e10c      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040d4:	4b6a      	ldr	r3, [pc, #424]	@ (8004280 <HAL_RCC_OscConfig+0x474>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d0f0      	beq.n	80040c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689b      	ldr	r3, [r3, #8]
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d106      	bne.n	80040f6 <HAL_RCC_OscConfig+0x2ea>
 80040e8:	4b64      	ldr	r3, [pc, #400]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80040ec:	4a63      	ldr	r2, [pc, #396]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80040f4:	e01c      	b.n	8004130 <HAL_RCC_OscConfig+0x324>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	689b      	ldr	r3, [r3, #8]
 80040fa:	2b05      	cmp	r3, #5
 80040fc:	d10c      	bne.n	8004118 <HAL_RCC_OscConfig+0x30c>
 80040fe:	4b5f      	ldr	r3, [pc, #380]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004102:	4a5e      	ldr	r2, [pc, #376]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004104:	f043 0304 	orr.w	r3, r3, #4
 8004108:	6713      	str	r3, [r2, #112]	@ 0x70
 800410a:	4b5c      	ldr	r3, [pc, #368]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800410e:	4a5b      	ldr	r2, [pc, #364]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004110:	f043 0301 	orr.w	r3, r3, #1
 8004114:	6713      	str	r3, [r2, #112]	@ 0x70
 8004116:	e00b      	b.n	8004130 <HAL_RCC_OscConfig+0x324>
 8004118:	4b58      	ldr	r3, [pc, #352]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800411a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800411c:	4a57      	ldr	r2, [pc, #348]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	6713      	str	r3, [r2, #112]	@ 0x70
 8004124:	4b55      	ldr	r3, [pc, #340]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004126:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004128:	4a54      	ldr	r2, [pc, #336]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	689b      	ldr	r3, [r3, #8]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d015      	beq.n	8004164 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004138:	f7fe fa72 	bl	8002620 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800413e:	e00a      	b.n	8004156 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004140:	f7fe fa6e 	bl	8002620 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800414e:	4293      	cmp	r3, r2
 8004150:	d901      	bls.n	8004156 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004152:	2303      	movs	r3, #3
 8004154:	e0cb      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004156:	4b49      	ldr	r3, [pc, #292]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800415a:	f003 0302 	and.w	r3, r3, #2
 800415e:	2b00      	cmp	r3, #0
 8004160:	d0ee      	beq.n	8004140 <HAL_RCC_OscConfig+0x334>
 8004162:	e014      	b.n	800418e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004164:	f7fe fa5c 	bl	8002620 <HAL_GetTick>
 8004168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800416a:	e00a      	b.n	8004182 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800416c:	f7fe fa58 	bl	8002620 <HAL_GetTick>
 8004170:	4602      	mov	r2, r0
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	1ad3      	subs	r3, r2, r3
 8004176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800417a:	4293      	cmp	r3, r2
 800417c:	d901      	bls.n	8004182 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800417e:	2303      	movs	r3, #3
 8004180:	e0b5      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004182:	4b3e      	ldr	r3, [pc, #248]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004184:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004186:	f003 0302 	and.w	r3, r3, #2
 800418a:	2b00      	cmp	r3, #0
 800418c:	d1ee      	bne.n	800416c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800418e:	7dfb      	ldrb	r3, [r7, #23]
 8004190:	2b01      	cmp	r3, #1
 8004192:	d105      	bne.n	80041a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004194:	4b39      	ldr	r3, [pc, #228]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004198:	4a38      	ldr	r2, [pc, #224]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 800419a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800419e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	699b      	ldr	r3, [r3, #24]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	f000 80a1 	beq.w	80042ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041aa:	4b34      	ldr	r3, [pc, #208]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 030c 	and.w	r3, r3, #12
 80041b2:	2b08      	cmp	r3, #8
 80041b4:	d05c      	beq.n	8004270 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	699b      	ldr	r3, [r3, #24]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d141      	bne.n	8004242 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041be:	4b31      	ldr	r3, [pc, #196]	@ (8004284 <HAL_RCC_OscConfig+0x478>)
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041c4:	f7fe fa2c 	bl	8002620 <HAL_GetTick>
 80041c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ca:	e008      	b.n	80041de <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041cc:	f7fe fa28 	bl	8002620 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d901      	bls.n	80041de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80041da:	2303      	movs	r3, #3
 80041dc:	e087      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041de:	4b27      	ldr	r3, [pc, #156]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d1f0      	bne.n	80041cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	69da      	ldr	r2, [r3, #28]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a1b      	ldr	r3, [r3, #32]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f8:	019b      	lsls	r3, r3, #6
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004200:	085b      	lsrs	r3, r3, #1
 8004202:	3b01      	subs	r3, #1
 8004204:	041b      	lsls	r3, r3, #16
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420c:	061b      	lsls	r3, r3, #24
 800420e:	491b      	ldr	r1, [pc, #108]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004210:	4313      	orrs	r3, r2
 8004212:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004214:	4b1b      	ldr	r3, [pc, #108]	@ (8004284 <HAL_RCC_OscConfig+0x478>)
 8004216:	2201      	movs	r2, #1
 8004218:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421a:	f7fe fa01 	bl	8002620 <HAL_GetTick>
 800421e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004220:	e008      	b.n	8004234 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004222:	f7fe f9fd 	bl	8002620 <HAL_GetTick>
 8004226:	4602      	mov	r2, r0
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	1ad3      	subs	r3, r2, r3
 800422c:	2b02      	cmp	r3, #2
 800422e:	d901      	bls.n	8004234 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004230:	2303      	movs	r3, #3
 8004232:	e05c      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004234:	4b11      	ldr	r3, [pc, #68]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d0f0      	beq.n	8004222 <HAL_RCC_OscConfig+0x416>
 8004240:	e054      	b.n	80042ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004242:	4b10      	ldr	r3, [pc, #64]	@ (8004284 <HAL_RCC_OscConfig+0x478>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004248:	f7fe f9ea 	bl	8002620 <HAL_GetTick>
 800424c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800424e:	e008      	b.n	8004262 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004250:	f7fe f9e6 	bl	8002620 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	2b02      	cmp	r3, #2
 800425c:	d901      	bls.n	8004262 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800425e:	2303      	movs	r3, #3
 8004260:	e045      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004262:	4b06      	ldr	r3, [pc, #24]	@ (800427c <HAL_RCC_OscConfig+0x470>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800426a:	2b00      	cmp	r3, #0
 800426c:	d1f0      	bne.n	8004250 <HAL_RCC_OscConfig+0x444>
 800426e:	e03d      	b.n	80042ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	699b      	ldr	r3, [r3, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d107      	bne.n	8004288 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e038      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
 800427c:	40023800 	.word	0x40023800
 8004280:	40007000 	.word	0x40007000
 8004284:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004288:	4b1b      	ldr	r3, [pc, #108]	@ (80042f8 <HAL_RCC_OscConfig+0x4ec>)
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	699b      	ldr	r3, [r3, #24]
 8004292:	2b01      	cmp	r3, #1
 8004294:	d028      	beq.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d121      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d11a      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80042b8:	4013      	ands	r3, r2
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80042be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d111      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ce:	085b      	lsrs	r3, r3, #1
 80042d0:	3b01      	subs	r3, #1
 80042d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d107      	bne.n	80042e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e000      	b.n	80042ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042ec:	2300      	movs	r3, #0
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	3718      	adds	r7, #24
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd80      	pop	{r7, pc}
 80042f6:	bf00      	nop
 80042f8:	40023800 	.word	0x40023800

080042fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d101      	bne.n	8004310 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e0cc      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004310:	4b68      	ldr	r3, [pc, #416]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0307 	and.w	r3, r3, #7
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	429a      	cmp	r2, r3
 800431c:	d90c      	bls.n	8004338 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431e:	4b65      	ldr	r3, [pc, #404]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004320:	683a      	ldr	r2, [r7, #0]
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004326:	4b63      	ldr	r3, [pc, #396]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0307 	and.w	r3, r3, #7
 800432e:	683a      	ldr	r2, [r7, #0]
 8004330:	429a      	cmp	r2, r3
 8004332:	d001      	beq.n	8004338 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e0b8      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	2b00      	cmp	r3, #0
 8004342:	d020      	beq.n	8004386 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 0304 	and.w	r3, r3, #4
 800434c:	2b00      	cmp	r3, #0
 800434e:	d005      	beq.n	800435c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004350:	4b59      	ldr	r3, [pc, #356]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	4a58      	ldr	r2, [pc, #352]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004356:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800435a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004368:	4b53      	ldr	r3, [pc, #332]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	4a52      	ldr	r2, [pc, #328]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004372:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004374:	4b50      	ldr	r3, [pc, #320]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	494d      	ldr	r1, [pc, #308]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004382:	4313      	orrs	r3, r2
 8004384:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d044      	beq.n	800441c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b01      	cmp	r3, #1
 8004398:	d107      	bne.n	80043aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439a:	4b47      	ldr	r3, [pc, #284]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d119      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043a6:	2301      	movs	r3, #1
 80043a8:	e07f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80043b6:	2b03      	cmp	r3, #3
 80043b8:	d107      	bne.n	80043ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ba:	4b3f      	ldr	r3, [pc, #252]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d109      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043c6:	2301      	movs	r3, #1
 80043c8:	e06f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043ca:	4b3b      	ldr	r3, [pc, #236]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e067      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043da:	4b37      	ldr	r3, [pc, #220]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043dc:	689b      	ldr	r3, [r3, #8]
 80043de:	f023 0203 	bic.w	r2, r3, #3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	4934      	ldr	r1, [pc, #208]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 80043e8:	4313      	orrs	r3, r2
 80043ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043ec:	f7fe f918 	bl	8002620 <HAL_GetTick>
 80043f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043f2:	e00a      	b.n	800440a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f4:	f7fe f914 	bl	8002620 <HAL_GetTick>
 80043f8:	4602      	mov	r2, r0
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	1ad3      	subs	r3, r2, r3
 80043fe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004402:	4293      	cmp	r3, r2
 8004404:	d901      	bls.n	800440a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e04f      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800440a:	4b2b      	ldr	r3, [pc, #172]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f003 020c 	and.w	r2, r3, #12
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	685b      	ldr	r3, [r3, #4]
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	429a      	cmp	r2, r3
 800441a:	d1eb      	bne.n	80043f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800441c:	4b25      	ldr	r3, [pc, #148]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f003 0307 	and.w	r3, r3, #7
 8004424:	683a      	ldr	r2, [r7, #0]
 8004426:	429a      	cmp	r2, r3
 8004428:	d20c      	bcs.n	8004444 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800442a:	4b22      	ldr	r3, [pc, #136]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	b2d2      	uxtb	r2, r2
 8004430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004432:	4b20      	ldr	r3, [pc, #128]	@ (80044b4 <HAL_RCC_ClockConfig+0x1b8>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f003 0307 	and.w	r3, r3, #7
 800443a:	683a      	ldr	r2, [r7, #0]
 800443c:	429a      	cmp	r2, r3
 800443e:	d001      	beq.n	8004444 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e032      	b.n	80044aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	d008      	beq.n	8004462 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004450:	4b19      	ldr	r3, [pc, #100]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	68db      	ldr	r3, [r3, #12]
 800445c:	4916      	ldr	r1, [pc, #88]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800445e:	4313      	orrs	r3, r2
 8004460:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d009      	beq.n	8004482 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800446e:	4b12      	ldr	r3, [pc, #72]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	00db      	lsls	r3, r3, #3
 800447c:	490e      	ldr	r1, [pc, #56]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	4313      	orrs	r3, r2
 8004480:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004482:	f000 f821 	bl	80044c8 <HAL_RCC_GetSysClockFreq>
 8004486:	4602      	mov	r2, r0
 8004488:	4b0b      	ldr	r3, [pc, #44]	@ (80044b8 <HAL_RCC_ClockConfig+0x1bc>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	091b      	lsrs	r3, r3, #4
 800448e:	f003 030f 	and.w	r3, r3, #15
 8004492:	490a      	ldr	r1, [pc, #40]	@ (80044bc <HAL_RCC_ClockConfig+0x1c0>)
 8004494:	5ccb      	ldrb	r3, [r1, r3]
 8004496:	fa22 f303 	lsr.w	r3, r2, r3
 800449a:	4a09      	ldr	r2, [pc, #36]	@ (80044c0 <HAL_RCC_ClockConfig+0x1c4>)
 800449c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800449e:	4b09      	ldr	r3, [pc, #36]	@ (80044c4 <HAL_RCC_ClockConfig+0x1c8>)
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	4618      	mov	r0, r3
 80044a4:	f7fd fed8 	bl	8002258 <HAL_InitTick>

  return HAL_OK;
 80044a8:	2300      	movs	r3, #0
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	3710      	adds	r7, #16
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bd80      	pop	{r7, pc}
 80044b2:	bf00      	nop
 80044b4:	40023c00 	.word	0x40023c00
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08010c5c 	.word	0x08010c5c
 80044c0:	20000008 	.word	0x20000008
 80044c4:	2000000c 	.word	0x2000000c

080044c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80044cc:	b094      	sub	sp, #80	@ 0x50
 80044ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80044d0:	2300      	movs	r3, #0
 80044d2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80044d4:	2300      	movs	r3, #0
 80044d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80044d8:	2300      	movs	r3, #0
 80044da:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80044dc:	2300      	movs	r3, #0
 80044de:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e0:	4b79      	ldr	r3, [pc, #484]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	f003 030c 	and.w	r3, r3, #12
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d00d      	beq.n	8004508 <HAL_RCC_GetSysClockFreq+0x40>
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	f200 80e1 	bhi.w	80046b4 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <HAL_RCC_GetSysClockFreq+0x34>
 80044f6:	2b04      	cmp	r3, #4
 80044f8:	d003      	beq.n	8004502 <HAL_RCC_GetSysClockFreq+0x3a>
 80044fa:	e0db      	b.n	80046b4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044fc:	4b73      	ldr	r3, [pc, #460]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x204>)
 80044fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004500:	e0db      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004502:	4b73      	ldr	r3, [pc, #460]	@ (80046d0 <HAL_RCC_GetSysClockFreq+0x208>)
 8004504:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004506:	e0d8      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004508:	4b6f      	ldr	r3, [pc, #444]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004510:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004512:	4b6d      	ldr	r3, [pc, #436]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d063      	beq.n	80045e6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800451e:	4b6a      	ldr	r3, [pc, #424]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	099b      	lsrs	r3, r3, #6
 8004524:	2200      	movs	r2, #0
 8004526:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004528:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800452a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800452c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004530:	633b      	str	r3, [r7, #48]	@ 0x30
 8004532:	2300      	movs	r3, #0
 8004534:	637b      	str	r3, [r7, #52]	@ 0x34
 8004536:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800453a:	4622      	mov	r2, r4
 800453c:	462b      	mov	r3, r5
 800453e:	f04f 0000 	mov.w	r0, #0
 8004542:	f04f 0100 	mov.w	r1, #0
 8004546:	0159      	lsls	r1, r3, #5
 8004548:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800454c:	0150      	lsls	r0, r2, #5
 800454e:	4602      	mov	r2, r0
 8004550:	460b      	mov	r3, r1
 8004552:	4621      	mov	r1, r4
 8004554:	1a51      	subs	r1, r2, r1
 8004556:	6139      	str	r1, [r7, #16]
 8004558:	4629      	mov	r1, r5
 800455a:	eb63 0301 	sbc.w	r3, r3, r1
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	f04f 0200 	mov.w	r2, #0
 8004564:	f04f 0300 	mov.w	r3, #0
 8004568:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800456c:	4659      	mov	r1, fp
 800456e:	018b      	lsls	r3, r1, #6
 8004570:	4651      	mov	r1, sl
 8004572:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004576:	4651      	mov	r1, sl
 8004578:	018a      	lsls	r2, r1, #6
 800457a:	4651      	mov	r1, sl
 800457c:	ebb2 0801 	subs.w	r8, r2, r1
 8004580:	4659      	mov	r1, fp
 8004582:	eb63 0901 	sbc.w	r9, r3, r1
 8004586:	f04f 0200 	mov.w	r2, #0
 800458a:	f04f 0300 	mov.w	r3, #0
 800458e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004592:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004596:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800459a:	4690      	mov	r8, r2
 800459c:	4699      	mov	r9, r3
 800459e:	4623      	mov	r3, r4
 80045a0:	eb18 0303 	adds.w	r3, r8, r3
 80045a4:	60bb      	str	r3, [r7, #8]
 80045a6:	462b      	mov	r3, r5
 80045a8:	eb49 0303 	adc.w	r3, r9, r3
 80045ac:	60fb      	str	r3, [r7, #12]
 80045ae:	f04f 0200 	mov.w	r2, #0
 80045b2:	f04f 0300 	mov.w	r3, #0
 80045b6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80045ba:	4629      	mov	r1, r5
 80045bc:	024b      	lsls	r3, r1, #9
 80045be:	4621      	mov	r1, r4
 80045c0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80045c4:	4621      	mov	r1, r4
 80045c6:	024a      	lsls	r2, r1, #9
 80045c8:	4610      	mov	r0, r2
 80045ca:	4619      	mov	r1, r3
 80045cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80045ce:	2200      	movs	r2, #0
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045d4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045d8:	f7fc fae6 	bl	8000ba8 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045e4:	e058      	b.n	8004698 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045e6:	4b38      	ldr	r3, [pc, #224]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	099b      	lsrs	r3, r3, #6
 80045ec:	2200      	movs	r2, #0
 80045ee:	4618      	mov	r0, r3
 80045f0:	4611      	mov	r1, r2
 80045f2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045f6:	623b      	str	r3, [r7, #32]
 80045f8:	2300      	movs	r3, #0
 80045fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80045fc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004600:	4642      	mov	r2, r8
 8004602:	464b      	mov	r3, r9
 8004604:	f04f 0000 	mov.w	r0, #0
 8004608:	f04f 0100 	mov.w	r1, #0
 800460c:	0159      	lsls	r1, r3, #5
 800460e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004612:	0150      	lsls	r0, r2, #5
 8004614:	4602      	mov	r2, r0
 8004616:	460b      	mov	r3, r1
 8004618:	4641      	mov	r1, r8
 800461a:	ebb2 0a01 	subs.w	sl, r2, r1
 800461e:	4649      	mov	r1, r9
 8004620:	eb63 0b01 	sbc.w	fp, r3, r1
 8004624:	f04f 0200 	mov.w	r2, #0
 8004628:	f04f 0300 	mov.w	r3, #0
 800462c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004630:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004634:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004638:	ebb2 040a 	subs.w	r4, r2, sl
 800463c:	eb63 050b 	sbc.w	r5, r3, fp
 8004640:	f04f 0200 	mov.w	r2, #0
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	00eb      	lsls	r3, r5, #3
 800464a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800464e:	00e2      	lsls	r2, r4, #3
 8004650:	4614      	mov	r4, r2
 8004652:	461d      	mov	r5, r3
 8004654:	4643      	mov	r3, r8
 8004656:	18e3      	adds	r3, r4, r3
 8004658:	603b      	str	r3, [r7, #0]
 800465a:	464b      	mov	r3, r9
 800465c:	eb45 0303 	adc.w	r3, r5, r3
 8004660:	607b      	str	r3, [r7, #4]
 8004662:	f04f 0200 	mov.w	r2, #0
 8004666:	f04f 0300 	mov.w	r3, #0
 800466a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800466e:	4629      	mov	r1, r5
 8004670:	028b      	lsls	r3, r1, #10
 8004672:	4621      	mov	r1, r4
 8004674:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004678:	4621      	mov	r1, r4
 800467a:	028a      	lsls	r2, r1, #10
 800467c:	4610      	mov	r0, r2
 800467e:	4619      	mov	r1, r3
 8004680:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004682:	2200      	movs	r2, #0
 8004684:	61bb      	str	r3, [r7, #24]
 8004686:	61fa      	str	r2, [r7, #28]
 8004688:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800468c:	f7fc fa8c 	bl	8000ba8 <__aeabi_uldivmod>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4613      	mov	r3, r2
 8004696:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004698:	4b0b      	ldr	r3, [pc, #44]	@ (80046c8 <HAL_RCC_GetSysClockFreq+0x200>)
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	0c1b      	lsrs	r3, r3, #16
 800469e:	f003 0303 	and.w	r3, r3, #3
 80046a2:	3301      	adds	r3, #1
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80046a8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80046aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b2:	e002      	b.n	80046ba <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80046b4:	4b05      	ldr	r3, [pc, #20]	@ (80046cc <HAL_RCC_GetSysClockFreq+0x204>)
 80046b6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046b8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80046ba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3750      	adds	r7, #80	@ 0x50
 80046c0:	46bd      	mov	sp, r7
 80046c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80046c6:	bf00      	nop
 80046c8:	40023800 	.word	0x40023800
 80046cc:	00f42400 	.word	0x00f42400
 80046d0:	007a1200 	.word	0x007a1200

080046d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046d4:	b480      	push	{r7}
 80046d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046d8:	4b03      	ldr	r3, [pc, #12]	@ (80046e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80046da:	681b      	ldr	r3, [r3, #0]
}
 80046dc:	4618      	mov	r0, r3
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	20000008 	.word	0x20000008

080046ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046f0:	f7ff fff0 	bl	80046d4 <HAL_RCC_GetHCLKFreq>
 80046f4:	4602      	mov	r2, r0
 80046f6:	4b05      	ldr	r3, [pc, #20]	@ (800470c <HAL_RCC_GetPCLK1Freq+0x20>)
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	0a9b      	lsrs	r3, r3, #10
 80046fc:	f003 0307 	and.w	r3, r3, #7
 8004700:	4903      	ldr	r1, [pc, #12]	@ (8004710 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004702:	5ccb      	ldrb	r3, [r1, r3]
 8004704:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004708:	4618      	mov	r0, r3
 800470a:	bd80      	pop	{r7, pc}
 800470c:	40023800 	.word	0x40023800
 8004710:	08010c6c 	.word	0x08010c6c

08004714 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	220f      	movs	r2, #15
 8004722:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004724:	4b12      	ldr	r3, [pc, #72]	@ (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 8004726:	689b      	ldr	r3, [r3, #8]
 8004728:	f003 0203 	and.w	r2, r3, #3
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004730:	4b0f      	ldr	r3, [pc, #60]	@ (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800473c:	4b0c      	ldr	r3, [pc, #48]	@ (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8004748:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <HAL_RCC_GetClockConfig+0x5c>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	08db      	lsrs	r3, r3, #3
 800474e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004756:	4b07      	ldr	r3, [pc, #28]	@ (8004774 <HAL_RCC_GetClockConfig+0x60>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f003 0207 	and.w	r2, r3, #7
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	601a      	str	r2, [r3, #0]
}
 8004762:	bf00      	nop
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	40023c00 	.word	0x40023c00

08004778 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	d105      	bne.n	80047a0 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800479c:	2b00      	cmp	r3, #0
 800479e:	d035      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80047a0:	4b62      	ldr	r3, [pc, #392]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047a2:	2200      	movs	r2, #0
 80047a4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047a6:	f7fd ff3b 	bl	8002620 <HAL_GetTick>
 80047aa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047ac:	e008      	b.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047ae:	f7fd ff37 	bl	8002620 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	697b      	ldr	r3, [r7, #20]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	2b02      	cmp	r3, #2
 80047ba:	d901      	bls.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047bc:	2303      	movs	r3, #3
 80047be:	e0b0      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80047c0:	4b5b      	ldr	r3, [pc, #364]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d1f0      	bne.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	019a      	lsls	r2, r3, #6
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	071b      	lsls	r3, r3, #28
 80047d8:	4955      	ldr	r1, [pc, #340]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047da:	4313      	orrs	r3, r2
 80047dc:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80047e0:	4b52      	ldr	r3, [pc, #328]	@ (800492c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80047e6:	f7fd ff1b 	bl	8002620 <HAL_GetTick>
 80047ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80047ec:	e008      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80047ee:	f7fd ff17 	bl	8002620 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	2b02      	cmp	r3, #2
 80047fa:	d901      	bls.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e090      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004800:	4b4b      	ldr	r3, [pc, #300]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004808:	2b00      	cmp	r3, #0
 800480a:	d0f0      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 0302 	and.w	r3, r3, #2
 8004814:	2b00      	cmp	r3, #0
 8004816:	f000 8083 	beq.w	8004920 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	60fb      	str	r3, [r7, #12]
 800481e:	4b44      	ldr	r3, [pc, #272]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004820:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004822:	4a43      	ldr	r2, [pc, #268]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004824:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004828:	6413      	str	r3, [r2, #64]	@ 0x40
 800482a:	4b41      	ldr	r3, [pc, #260]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800482c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800482e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004832:	60fb      	str	r3, [r7, #12]
 8004834:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004836:	4b3f      	ldr	r3, [pc, #252]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a3e      	ldr	r2, [pc, #248]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800483c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004840:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004842:	f7fd feed 	bl	8002620 <HAL_GetTick>
 8004846:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8004848:	e008      	b.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800484a:	f7fd fee9 	bl	8002620 <HAL_GetTick>
 800484e:	4602      	mov	r2, r0
 8004850:	697b      	ldr	r3, [r7, #20]
 8004852:	1ad3      	subs	r3, r2, r3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d901      	bls.n	800485c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004858:	2303      	movs	r3, #3
 800485a:	e062      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800485c:	4b35      	ldr	r3, [pc, #212]	@ (8004934 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004864:	2b00      	cmp	r3, #0
 8004866:	d0f0      	beq.n	800484a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004868:	4b31      	ldr	r3, [pc, #196]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800486c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004870:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d02f      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004880:	693a      	ldr	r2, [r7, #16]
 8004882:	429a      	cmp	r2, r3
 8004884:	d028      	beq.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004886:	4b2a      	ldr	r3, [pc, #168]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004888:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800488a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800488e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004890:	4b29      	ldr	r3, [pc, #164]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004892:	2201      	movs	r2, #1
 8004894:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004896:	4b28      	ldr	r3, [pc, #160]	@ (8004938 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004898:	2200      	movs	r2, #0
 800489a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800489c:	4a24      	ldr	r2, [pc, #144]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80048a2:	4b23      	ldr	r3, [pc, #140]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d114      	bne.n	80048d8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80048ae:	f7fd feb7 	bl	8002620 <HAL_GetTick>
 80048b2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048b4:	e00a      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048b6:	f7fd feb3 	bl	8002620 <HAL_GetTick>
 80048ba:	4602      	mov	r2, r0
 80048bc:	697b      	ldr	r3, [r7, #20]
 80048be:	1ad3      	subs	r3, r2, r3
 80048c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048c4:	4293      	cmp	r3, r2
 80048c6:	d901      	bls.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e02a      	b.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80048cc:	4b18      	ldr	r3, [pc, #96]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048d0:	f003 0302 	and.w	r3, r3, #2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0ee      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048e0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80048e4:	d10d      	bne.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80048e6:	4b12      	ldr	r3, [pc, #72]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048e8:	689b      	ldr	r3, [r3, #8]
 80048ea:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80048f6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048fa:	490d      	ldr	r1, [pc, #52]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	608b      	str	r3, [r1, #8]
 8004900:	e005      	b.n	800490e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004902:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	4a0a      	ldr	r2, [pc, #40]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004908:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800490c:	6093      	str	r3, [r2, #8]
 800490e:	4b08      	ldr	r3, [pc, #32]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004910:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	68db      	ldr	r3, [r3, #12]
 8004916:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800491a:	4905      	ldr	r1, [pc, #20]	@ (8004930 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800491c:	4313      	orrs	r3, r2
 800491e:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3718      	adds	r7, #24
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
 800492a:	bf00      	nop
 800492c:	42470068 	.word	0x42470068
 8004930:	40023800 	.word	0x40023800
 8004934:	40007000 	.word	0x40007000
 8004938:	42470e40 	.word	0x42470e40

0800493c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800493c:	b480      	push	{r7}
 800493e:	b087      	sub	sp, #28
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004948:	2300      	movs	r3, #0
 800494a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004950:	2300      	movs	r3, #0
 8004952:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2b01      	cmp	r3, #1
 8004958:	d13f      	bne.n	80049da <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800495a:	4b24      	ldr	r3, [pc, #144]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004962:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d006      	beq.n	8004978 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004970:	d12f      	bne.n	80049d2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004972:	4b1f      	ldr	r3, [pc, #124]	@ (80049f0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004974:	617b      	str	r3, [r7, #20]
          break;
 8004976:	e02f      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004978:	4b1c      	ldr	r3, [pc, #112]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004980:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004984:	d108      	bne.n	8004998 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004986:	4b19      	ldr	r3, [pc, #100]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800498e:	4a19      	ldr	r2, [pc, #100]	@ (80049f4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004990:	fbb2 f3f3 	udiv	r3, r2, r3
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e007      	b.n	80049a8 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004998:	4b14      	ldr	r3, [pc, #80]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80049a0:	4a15      	ldr	r2, [pc, #84]	@ (80049f8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80049a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049a6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80049a8:	4b10      	ldr	r3, [pc, #64]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049ae:	099b      	lsrs	r3, r3, #6
 80049b0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049b4:	693b      	ldr	r3, [r7, #16]
 80049b6:	fb02 f303 	mul.w	r3, r2, r3
 80049ba:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80049bc:	4b0b      	ldr	r3, [pc, #44]	@ (80049ec <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80049be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80049c2:	0f1b      	lsrs	r3, r3, #28
 80049c4:	f003 0307 	and.w	r3, r3, #7
 80049c8:	68ba      	ldr	r2, [r7, #8]
 80049ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80049ce:	617b      	str	r3, [r7, #20]
          break;
 80049d0:	e002      	b.n	80049d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80049d2:	2300      	movs	r3, #0
 80049d4:	617b      	str	r3, [r7, #20]
          break;
 80049d6:	bf00      	nop
        }
      }
      break;
 80049d8:	e000      	b.n	80049dc <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80049da:	bf00      	nop
    }
  }
  return frequency;
 80049dc:	697b      	ldr	r3, [r7, #20]
}
 80049de:	4618      	mov	r0, r3
 80049e0:	371c      	adds	r7, #28
 80049e2:	46bd      	mov	sp, r7
 80049e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e8:	4770      	bx	lr
 80049ea:	bf00      	nop
 80049ec:	40023800 	.word	0x40023800
 80049f0:	00bb8000 	.word	0x00bb8000
 80049f4:	007a1200 	.word	0x007a1200
 80049f8:	00f42400 	.word	0x00f42400

080049fc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	e07b      	b.n	8004b06 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d108      	bne.n	8004a28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004a1e:	d009      	beq.n	8004a34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	61da      	str	r2, [r3, #28]
 8004a26:	e005      	b.n	8004a34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d106      	bne.n	8004a54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f7fd fbba 	bl	80021c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2202      	movs	r2, #2
 8004a58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	681a      	ldr	r2, [r3, #0]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004a7c:	431a      	orrs	r2, r3
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004a86:	431a      	orrs	r2, r3
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	f003 0302 	and.w	r3, r3, #2
 8004a90:	431a      	orrs	r2, r3
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	695b      	ldr	r3, [r3, #20]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa4:	431a      	orrs	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	69db      	ldr	r3, [r3, #28]
 8004aaa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004aae:	431a      	orrs	r2, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6a1b      	ldr	r3, [r3, #32]
 8004ab4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ab8:	ea42 0103 	orr.w	r1, r2, r3
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	699b      	ldr	r3, [r3, #24]
 8004ad0:	0c1b      	lsrs	r3, r3, #16
 8004ad2:	f003 0104 	and.w	r1, r3, #4
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ada:	f003 0210 	and.w	r2, r3, #16
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	430a      	orrs	r2, r1
 8004ae4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	69da      	ldr	r2, [r3, #28]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004af4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2200      	movs	r2, #0
 8004afa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	2201      	movs	r2, #1
 8004b00:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004b04:	2300      	movs	r3, #0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3708      	adds	r7, #8
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd80      	pop	{r7, pc}

08004b0e <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b0e:	b580      	push	{r7, lr}
 8004b10:	b088      	sub	sp, #32
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	60b9      	str	r1, [r7, #8]
 8004b18:	603b      	str	r3, [r7, #0]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b1e:	f7fd fd7f 	bl	8002620 <HAL_GetTick>
 8004b22:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8004b24:	88fb      	ldrh	r3, [r7, #6]
 8004b26:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004b2e:	b2db      	uxtb	r3, r3
 8004b30:	2b01      	cmp	r3, #1
 8004b32:	d001      	beq.n	8004b38 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8004b34:	2302      	movs	r3, #2
 8004b36:	e12a      	b.n	8004d8e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d002      	beq.n	8004b44 <HAL_SPI_Transmit+0x36>
 8004b3e:	88fb      	ldrh	r3, [r7, #6]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d101      	bne.n	8004b48 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8004b44:	2301      	movs	r3, #1
 8004b46:	e122      	b.n	8004d8e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004b4e:	2b01      	cmp	r3, #1
 8004b50:	d101      	bne.n	8004b56 <HAL_SPI_Transmit+0x48>
 8004b52:	2302      	movs	r3, #2
 8004b54:	e11b      	b.n	8004d8e <HAL_SPI_Transmit+0x280>
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2203      	movs	r2, #3
 8004b62:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2200      	movs	r2, #0
 8004b6a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	68ba      	ldr	r2, [r7, #8]
 8004b70:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	88fa      	ldrh	r2, [r7, #6]
 8004b76:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	88fa      	ldrh	r2, [r7, #6]
 8004b7c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2200      	movs	r2, #0
 8004b94:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ba4:	d10f      	bne.n	8004bc6 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004bb4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004bc4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bd0:	2b40      	cmp	r3, #64	@ 0x40
 8004bd2:	d007      	beq.n	8004be4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004be2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004bec:	d152      	bne.n	8004c94 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d002      	beq.n	8004bfc <HAL_SPI_Transmit+0xee>
 8004bf6:	8b7b      	ldrh	r3, [r7, #26]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d145      	bne.n	8004c88 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c00:	881a      	ldrh	r2, [r3, #0]
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c0c:	1c9a      	adds	r2, r3, #2
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c16:	b29b      	uxth	r3, r3
 8004c18:	3b01      	subs	r3, #1
 8004c1a:	b29a      	uxth	r2, r3
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c20:	e032      	b.n	8004c88 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f003 0302 	and.w	r3, r3, #2
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d112      	bne.n	8004c56 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004c54:	e018      	b.n	8004c88 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c56:	f7fd fce3 	bl	8002620 <HAL_GetTick>
 8004c5a:	4602      	mov	r2, r0
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	683a      	ldr	r2, [r7, #0]
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d803      	bhi.n	8004c6e <HAL_SPI_Transmit+0x160>
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c6c:	d102      	bne.n	8004c74 <HAL_SPI_Transmit+0x166>
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	2b00      	cmp	r3, #0
 8004c72:	d109      	bne.n	8004c88 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004c84:	2303      	movs	r3, #3
 8004c86:	e082      	b.n	8004d8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1c7      	bne.n	8004c22 <HAL_SPI_Transmit+0x114>
 8004c92:	e053      	b.n	8004d3c <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	685b      	ldr	r3, [r3, #4]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d002      	beq.n	8004ca2 <HAL_SPI_Transmit+0x194>
 8004c9c:	8b7b      	ldrh	r3, [r7, #26]
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d147      	bne.n	8004d32 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	330c      	adds	r3, #12
 8004cac:	7812      	ldrb	r2, [r2, #0]
 8004cae:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cb4:	1c5a      	adds	r2, r3, #1
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cbe:	b29b      	uxth	r3, r3
 8004cc0:	3b01      	subs	r3, #1
 8004cc2:	b29a      	uxth	r2, r3
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cc8:	e033      	b.n	8004d32 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	689b      	ldr	r3, [r3, #8]
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d113      	bne.n	8004d00 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	7812      	ldrb	r2, [r2, #0]
 8004ce4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004cf4:	b29b      	uxth	r3, r3
 8004cf6:	3b01      	subs	r3, #1
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8004cfe:	e018      	b.n	8004d32 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d00:	f7fd fc8e 	bl	8002620 <HAL_GetTick>
 8004d04:	4602      	mov	r2, r0
 8004d06:	69fb      	ldr	r3, [r7, #28]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d803      	bhi.n	8004d18 <HAL_SPI_Transmit+0x20a>
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004d16:	d102      	bne.n	8004d1e <HAL_SPI_Transmit+0x210>
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d109      	bne.n	8004d32 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	2200      	movs	r2, #0
 8004d2a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8004d2e:	2303      	movs	r3, #3
 8004d30:	e02d      	b.n	8004d8e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d1c6      	bne.n	8004cca <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d3c:	69fa      	ldr	r2, [r7, #28]
 8004d3e:	6839      	ldr	r1, [r7, #0]
 8004d40:	68f8      	ldr	r0, [r7, #12]
 8004d42:	f000 f8b1 	bl	8004ea8 <SPI_EndRxTxTransaction>
 8004d46:	4603      	mov	r3, r0
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d002      	beq.n	8004d52 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	2220      	movs	r2, #32
 8004d50:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	689b      	ldr	r3, [r3, #8]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d10a      	bne.n	8004d70 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	617b      	str	r3, [r7, #20]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	617b      	str	r3, [r7, #20]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2201      	movs	r2, #1
 8004d74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d001      	beq.n	8004d8c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e000      	b.n	8004d8e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8004d8c:	2300      	movs	r3, #0
  }
}
 8004d8e:	4618      	mov	r0, r3
 8004d90:	3720      	adds	r7, #32
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
	...

08004d98 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	60f8      	str	r0, [r7, #12]
 8004da0:	60b9      	str	r1, [r7, #8]
 8004da2:	603b      	str	r3, [r7, #0]
 8004da4:	4613      	mov	r3, r2
 8004da6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004da8:	f7fd fc3a 	bl	8002620 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004db0:	1a9b      	subs	r3, r3, r2
 8004db2:	683a      	ldr	r2, [r7, #0]
 8004db4:	4413      	add	r3, r2
 8004db6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004db8:	f7fd fc32 	bl	8002620 <HAL_GetTick>
 8004dbc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dbe:	4b39      	ldr	r3, [pc, #228]	@ (8004ea4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	015b      	lsls	r3, r3, #5
 8004dc4:	0d1b      	lsrs	r3, r3, #20
 8004dc6:	69fa      	ldr	r2, [r7, #28]
 8004dc8:	fb02 f303 	mul.w	r3, r2, r3
 8004dcc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dce:	e055      	b.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004dd6:	d051      	beq.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004dd8:	f7fd fc22 	bl	8002620 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	69bb      	ldr	r3, [r7, #24]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d902      	bls.n	8004dee <SPI_WaitFlagStateUntilTimeout+0x56>
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d13d      	bne.n	8004e6a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	685a      	ldr	r2, [r3, #4]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004dfc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004e06:	d111      	bne.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e10:	d004      	beq.n	8004e1c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e1a:	d107      	bne.n	8004e2c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004e2a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004e34:	d10f      	bne.n	8004e56 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	681a      	ldr	r2, [r3, #0]
 8004e4c:	68fb      	ldr	r3, [r7, #12]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e54:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2201      	movs	r2, #1
 8004e5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8004e66:	2303      	movs	r3, #3
 8004e68:	e018      	b.n	8004e9c <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d102      	bne.n	8004e76 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004e70:	2300      	movs	r3, #0
 8004e72:	61fb      	str	r3, [r7, #28]
 8004e74:	e002      	b.n	8004e7c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	3b01      	subs	r3, #1
 8004e7a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689a      	ldr	r2, [r3, #8]
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	4013      	ands	r3, r2
 8004e86:	68ba      	ldr	r2, [r7, #8]
 8004e88:	429a      	cmp	r2, r3
 8004e8a:	bf0c      	ite	eq
 8004e8c:	2301      	moveq	r3, #1
 8004e8e:	2300      	movne	r3, #0
 8004e90:	b2db      	uxtb	r3, r3
 8004e92:	461a      	mov	r2, r3
 8004e94:	79fb      	ldrb	r3, [r7, #7]
 8004e96:	429a      	cmp	r2, r3
 8004e98:	d19a      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}
 8004ea4:	20000008 	.word	0x20000008

08004ea8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af02      	add	r7, sp, #8
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	60b9      	str	r1, [r7, #8]
 8004eb2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	9300      	str	r3, [sp, #0]
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	2102      	movs	r1, #2
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f7ff ff6a 	bl	8004d98 <SPI_WaitFlagStateUntilTimeout>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004ece:	f043 0220 	orr.w	r2, r3, #32
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004ed6:	2303      	movs	r3, #3
 8004ed8:	e032      	b.n	8004f40 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004eda:	4b1b      	ldr	r3, [pc, #108]	@ (8004f48 <SPI_EndRxTxTransaction+0xa0>)
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a1b      	ldr	r2, [pc, #108]	@ (8004f4c <SPI_EndRxTxTransaction+0xa4>)
 8004ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee4:	0d5b      	lsrs	r3, r3, #21
 8004ee6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004eea:	fb02 f303 	mul.w	r3, r2, r3
 8004eee:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ef8:	d112      	bne.n	8004f20 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	9300      	str	r3, [sp, #0]
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	2200      	movs	r2, #0
 8004f02:	2180      	movs	r1, #128	@ 0x80
 8004f04:	68f8      	ldr	r0, [r7, #12]
 8004f06:	f7ff ff47 	bl	8004d98 <SPI_WaitFlagStateUntilTimeout>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d016      	beq.n	8004f3e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004f14:	f043 0220 	orr.w	r2, r3, #32
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004f1c:	2303      	movs	r3, #3
 8004f1e:	e00f      	b.n	8004f40 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d00a      	beq.n	8004f3c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	3b01      	subs	r3, #1
 8004f2a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f36:	2b80      	cmp	r3, #128	@ 0x80
 8004f38:	d0f2      	beq.n	8004f20 <SPI_EndRxTxTransaction+0x78>
 8004f3a:	e000      	b.n	8004f3e <SPI_EndRxTxTransaction+0x96>
        break;
 8004f3c:	bf00      	nop
  }

  return HAL_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}
 8004f48:	20000008 	.word	0x20000008
 8004f4c:	165e9f81 	.word	0x165e9f81

08004f50 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b082      	sub	sp, #8
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d101      	bne.n	8004f62 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e041      	b.n	8004fe6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004f68:	b2db      	uxtb	r3, r3
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d106      	bne.n	8004f7c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f000 f839 	bl	8004fee <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2202      	movs	r2, #2
 8004f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	3304      	adds	r3, #4
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	4610      	mov	r0, r2
 8004f90:	f000 f9c0 	bl	8005314 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3708      	adds	r7, #8
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}

08004fee <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004fee:	b480      	push	{r7}
 8004ff0:	b083      	sub	sp, #12
 8004ff2:	af00      	add	r7, sp, #0
 8004ff4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8004ff6:	bf00      	nop
 8004ff8:	370c      	adds	r7, #12
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005000:	4770      	bx	lr
	...

08005004 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005004:	b480      	push	{r7}
 8005006:	b085      	sub	sp, #20
 8005008:	af00      	add	r7, sp, #0
 800500a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005012:	b2db      	uxtb	r3, r3
 8005014:	2b01      	cmp	r3, #1
 8005016:	d001      	beq.n	800501c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	e04e      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2202      	movs	r2, #2
 8005020:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f042 0201 	orr.w	r2, r2, #1
 8005032:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a23      	ldr	r2, [pc, #140]	@ (80050c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d022      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x80>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005046:	d01d      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x80>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a1f      	ldr	r2, [pc, #124]	@ (80050cc <HAL_TIM_Base_Start_IT+0xc8>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d018      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x80>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a1e      	ldr	r2, [pc, #120]	@ (80050d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d013      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x80>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a1c      	ldr	r2, [pc, #112]	@ (80050d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d00e      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x80>
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a1b      	ldr	r2, [pc, #108]	@ (80050d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d009      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x80>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a19      	ldr	r2, [pc, #100]	@ (80050dc <HAL_TIM_Base_Start_IT+0xd8>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d004      	beq.n	8005084 <HAL_TIM_Base_Start_IT+0x80>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a18      	ldr	r2, [pc, #96]	@ (80050e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d111      	bne.n	80050a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f003 0307 	and.w	r3, r3, #7
 800508e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2b06      	cmp	r3, #6
 8005094:	d010      	beq.n	80050b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681a      	ldr	r2, [r3, #0]
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f042 0201 	orr.w	r2, r2, #1
 80050a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a6:	e007      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	f042 0201 	orr.w	r2, r2, #1
 80050b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40001800 	.word	0x40001800

080050e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68db      	ldr	r3, [r3, #12]
 80050f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	691b      	ldr	r3, [r3, #16]
 80050fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	f003 0302 	and.w	r3, r3, #2
 8005102:	2b00      	cmp	r3, #0
 8005104:	d020      	beq.n	8005148 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	f003 0302 	and.w	r3, r3, #2
 800510c:	2b00      	cmp	r3, #0
 800510e:	d01b      	beq.n	8005148 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f06f 0202 	mvn.w	r2, #2
 8005118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2201      	movs	r2, #1
 800511e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	f003 0303 	and.w	r3, r3, #3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800512e:	6878      	ldr	r0, [r7, #4]
 8005130:	f000 f8d2 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 8005134:	e005      	b.n	8005142 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005136:	6878      	ldr	r0, [r7, #4]
 8005138:	f000 f8c4 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f8d5 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	f003 0304 	and.w	r3, r3, #4
 800514e:	2b00      	cmp	r3, #0
 8005150:	d020      	beq.n	8005194 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	f003 0304 	and.w	r3, r3, #4
 8005158:	2b00      	cmp	r3, #0
 800515a:	d01b      	beq.n	8005194 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f06f 0204 	mvn.w	r2, #4
 8005164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2202      	movs	r2, #2
 800516a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005176:	2b00      	cmp	r3, #0
 8005178:	d003      	beq.n	8005182 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 f8ac 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 8005180:	e005      	b.n	800518e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 f89e 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f8af 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	2200      	movs	r2, #0
 8005192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d020      	beq.n	80051e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d01b      	beq.n	80051e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0208 	mvn.w	r2, #8
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2204      	movs	r2, #4
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 f886 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 f878 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 f889 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80051e0:	68bb      	ldr	r3, [r7, #8]
 80051e2:	f003 0310 	and.w	r3, r3, #16
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d020      	beq.n	800522c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f003 0310 	and.w	r3, r3, #16
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d01b      	beq.n	800522c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f06f 0210 	mvn.w	r2, #16
 80051fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2208      	movs	r2, #8
 8005202:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	69db      	ldr	r3, [r3, #28]
 800520a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800520e:	2b00      	cmp	r3, #0
 8005210:	d003      	beq.n	800521a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f000 f860 	bl	80052d8 <HAL_TIM_IC_CaptureCallback>
 8005218:	e005      	b.n	8005226 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 f852 	bl	80052c4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f000 f863 	bl	80052ec <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2200      	movs	r2, #0
 800522a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	f003 0301 	and.w	r3, r3, #1
 8005232:	2b00      	cmp	r3, #0
 8005234:	d00c      	beq.n	8005250 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	f003 0301 	and.w	r3, r3, #1
 800523c:	2b00      	cmp	r3, #0
 800523e:	d007      	beq.n	8005250 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f06f 0201 	mvn.w	r2, #1
 8005248:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f7fc fea0 	bl	8001f90 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005256:	2b00      	cmp	r3, #0
 8005258:	d00c      	beq.n	8005274 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005260:	2b00      	cmp	r3, #0
 8005262:	d007      	beq.n	8005274 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800526c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 f900 	bl	8005474 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00c      	beq.n	8005298 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005284:	2b00      	cmp	r3, #0
 8005286:	d007      	beq.n	8005298 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f000 f834 	bl	8005300 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005298:	68bb      	ldr	r3, [r7, #8]
 800529a:	f003 0320 	and.w	r3, r3, #32
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00c      	beq.n	80052bc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f003 0320 	and.w	r3, r3, #32
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d007      	beq.n	80052bc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0220 	mvn.w	r2, #32
 80052b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f8d2 	bl	8005460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052bc:	bf00      	nop
 80052be:	3710      	adds	r7, #16
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b083      	sub	sp, #12
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80052cc:	bf00      	nop
 80052ce:	370c      	adds	r7, #12
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80052d8:	b480      	push	{r7}
 80052da:	b083      	sub	sp, #12
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80052e0:	bf00      	nop
 80052e2:	370c      	adds	r7, #12
 80052e4:	46bd      	mov	sp, r7
 80052e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ea:	4770      	bx	lr

080052ec <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80052f4:	bf00      	nop
 80052f6:	370c      	adds	r7, #12
 80052f8:	46bd      	mov	sp, r7
 80052fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fe:	4770      	bx	lr

08005300 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005300:	b480      	push	{r7}
 8005302:	b083      	sub	sp, #12
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005308:	bf00      	nop
 800530a:	370c      	adds	r7, #12
 800530c:	46bd      	mov	sp, r7
 800530e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005312:	4770      	bx	lr

08005314 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
 800531c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	4a43      	ldr	r2, [pc, #268]	@ (8005434 <TIM_Base_SetConfig+0x120>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d013      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005332:	d00f      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	4a40      	ldr	r2, [pc, #256]	@ (8005438 <TIM_Base_SetConfig+0x124>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d00b      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	4a3f      	ldr	r2, [pc, #252]	@ (800543c <TIM_Base_SetConfig+0x128>)
 8005340:	4293      	cmp	r3, r2
 8005342:	d007      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	4a3e      	ldr	r2, [pc, #248]	@ (8005440 <TIM_Base_SetConfig+0x12c>)
 8005348:	4293      	cmp	r3, r2
 800534a:	d003      	beq.n	8005354 <TIM_Base_SetConfig+0x40>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	4a3d      	ldr	r2, [pc, #244]	@ (8005444 <TIM_Base_SetConfig+0x130>)
 8005350:	4293      	cmp	r3, r2
 8005352:	d108      	bne.n	8005366 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800535a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	4a32      	ldr	r2, [pc, #200]	@ (8005434 <TIM_Base_SetConfig+0x120>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d02b      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005374:	d027      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	4a2f      	ldr	r2, [pc, #188]	@ (8005438 <TIM_Base_SetConfig+0x124>)
 800537a:	4293      	cmp	r3, r2
 800537c:	d023      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	4a2e      	ldr	r2, [pc, #184]	@ (800543c <TIM_Base_SetConfig+0x128>)
 8005382:	4293      	cmp	r3, r2
 8005384:	d01f      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	4a2d      	ldr	r2, [pc, #180]	@ (8005440 <TIM_Base_SetConfig+0x12c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d01b      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	4a2c      	ldr	r2, [pc, #176]	@ (8005444 <TIM_Base_SetConfig+0x130>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d017      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4a2b      	ldr	r2, [pc, #172]	@ (8005448 <TIM_Base_SetConfig+0x134>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d013      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	4a2a      	ldr	r2, [pc, #168]	@ (800544c <TIM_Base_SetConfig+0x138>)
 80053a2:	4293      	cmp	r3, r2
 80053a4:	d00f      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	4a29      	ldr	r2, [pc, #164]	@ (8005450 <TIM_Base_SetConfig+0x13c>)
 80053aa:	4293      	cmp	r3, r2
 80053ac:	d00b      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a28      	ldr	r2, [pc, #160]	@ (8005454 <TIM_Base_SetConfig+0x140>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d007      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a27      	ldr	r2, [pc, #156]	@ (8005458 <TIM_Base_SetConfig+0x144>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d003      	beq.n	80053c6 <TIM_Base_SetConfig+0xb2>
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	4a26      	ldr	r2, [pc, #152]	@ (800545c <TIM_Base_SetConfig+0x148>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d108      	bne.n	80053d8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053cc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	68db      	ldr	r3, [r3, #12]
 80053d2:	68fa      	ldr	r2, [r7, #12]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	695b      	ldr	r3, [r3, #20]
 80053e2:	4313      	orrs	r3, r2
 80053e4:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	689a      	ldr	r2, [r3, #8]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	4a0e      	ldr	r2, [pc, #56]	@ (8005434 <TIM_Base_SetConfig+0x120>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	d003      	beq.n	8005406 <TIM_Base_SetConfig+0xf2>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a10      	ldr	r2, [pc, #64]	@ (8005444 <TIM_Base_SetConfig+0x130>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d103      	bne.n	800540e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f043 0204 	orr.w	r2, r3, #4
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68fa      	ldr	r2, [r7, #12]
 8005424:	601a      	str	r2, [r3, #0]
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	40010000 	.word	0x40010000
 8005438:	40000400 	.word	0x40000400
 800543c:	40000800 	.word	0x40000800
 8005440:	40000c00 	.word	0x40000c00
 8005444:	40010400 	.word	0x40010400
 8005448:	40014000 	.word	0x40014000
 800544c:	40014400 	.word	0x40014400
 8005450:	40014800 	.word	0x40014800
 8005454:	40001800 	.word	0x40001800
 8005458:	40001c00 	.word	0x40001c00
 800545c:	40002000 	.word	0x40002000

08005460 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005460:	b480      	push	{r7}
 8005462:	b083      	sub	sp, #12
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005468:	bf00      	nop
 800546a:	370c      	adds	r7, #12
 800546c:	46bd      	mov	sp, r7
 800546e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005472:	4770      	bx	lr

08005474 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005474:	b480      	push	{r7}
 8005476:	b083      	sub	sp, #12
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800547c:	bf00      	nop
 800547e:	370c      	adds	r7, #12
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <__NVIC_SetPriority>:
{
 8005488:	b480      	push	{r7}
 800548a:	b083      	sub	sp, #12
 800548c:	af00      	add	r7, sp, #0
 800548e:	4603      	mov	r3, r0
 8005490:	6039      	str	r1, [r7, #0]
 8005492:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005494:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005498:	2b00      	cmp	r3, #0
 800549a:	db0a      	blt.n	80054b2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	b2da      	uxtb	r2, r3
 80054a0:	490c      	ldr	r1, [pc, #48]	@ (80054d4 <__NVIC_SetPriority+0x4c>)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	0112      	lsls	r2, r2, #4
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	440b      	add	r3, r1
 80054ac:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80054b0:	e00a      	b.n	80054c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	b2da      	uxtb	r2, r3
 80054b6:	4908      	ldr	r1, [pc, #32]	@ (80054d8 <__NVIC_SetPriority+0x50>)
 80054b8:	79fb      	ldrb	r3, [r7, #7]
 80054ba:	f003 030f 	and.w	r3, r3, #15
 80054be:	3b04      	subs	r3, #4
 80054c0:	0112      	lsls	r2, r2, #4
 80054c2:	b2d2      	uxtb	r2, r2
 80054c4:	440b      	add	r3, r1
 80054c6:	761a      	strb	r2, [r3, #24]
}
 80054c8:	bf00      	nop
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	e000e100 	.word	0xe000e100
 80054d8:	e000ed00 	.word	0xe000ed00

080054dc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80054e0:	4b05      	ldr	r3, [pc, #20]	@ (80054f8 <SysTick_Handler+0x1c>)
 80054e2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80054e4:	f002 fbae 	bl	8007c44 <xTaskGetSchedulerState>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d001      	beq.n	80054f2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80054ee:	f003 fadb 	bl	8008aa8 <xPortSysTickHandler>
  }
}
 80054f2:	bf00      	nop
 80054f4:	bd80      	pop	{r7, pc}
 80054f6:	bf00      	nop
 80054f8:	e000e010 	.word	0xe000e010

080054fc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80054fc:	b580      	push	{r7, lr}
 80054fe:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005500:	2100      	movs	r1, #0
 8005502:	f06f 0004 	mvn.w	r0, #4
 8005506:	f7ff ffbf 	bl	8005488 <__NVIC_SetPriority>
#endif
}
 800550a:	bf00      	nop
 800550c:	bd80      	pop	{r7, pc}
	...

08005510 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005510:	b480      	push	{r7}
 8005512:	b083      	sub	sp, #12
 8005514:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005516:	f3ef 8305 	mrs	r3, IPSR
 800551a:	603b      	str	r3, [r7, #0]
  return(result);
 800551c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800551e:	2b00      	cmp	r3, #0
 8005520:	d003      	beq.n	800552a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005522:	f06f 0305 	mvn.w	r3, #5
 8005526:	607b      	str	r3, [r7, #4]
 8005528:	e00c      	b.n	8005544 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800552a:	4b0a      	ldr	r3, [pc, #40]	@ (8005554 <osKernelInitialize+0x44>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005532:	4b08      	ldr	r3, [pc, #32]	@ (8005554 <osKernelInitialize+0x44>)
 8005534:	2201      	movs	r2, #1
 8005536:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005538:	2300      	movs	r3, #0
 800553a:	607b      	str	r3, [r7, #4]
 800553c:	e002      	b.n	8005544 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800553e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005542:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005544:	687b      	ldr	r3, [r7, #4]
}
 8005546:	4618      	mov	r0, r3
 8005548:	370c      	adds	r7, #12
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr
 8005552:	bf00      	nop
 8005554:	200060b8 	.word	0x200060b8

08005558 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800555e:	f3ef 8305 	mrs	r3, IPSR
 8005562:	603b      	str	r3, [r7, #0]
  return(result);
 8005564:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <osKernelStart+0x1a>
    stat = osErrorISR;
 800556a:	f06f 0305 	mvn.w	r3, #5
 800556e:	607b      	str	r3, [r7, #4]
 8005570:	e010      	b.n	8005594 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005572:	4b0b      	ldr	r3, [pc, #44]	@ (80055a0 <osKernelStart+0x48>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b01      	cmp	r3, #1
 8005578:	d109      	bne.n	800558e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800557a:	f7ff ffbf 	bl	80054fc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800557e:	4b08      	ldr	r3, [pc, #32]	@ (80055a0 <osKernelStart+0x48>)
 8005580:	2202      	movs	r2, #2
 8005582:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005584:	f001 fe48 	bl	8007218 <vTaskStartScheduler>
      stat = osOK;
 8005588:	2300      	movs	r3, #0
 800558a:	607b      	str	r3, [r7, #4]
 800558c:	e002      	b.n	8005594 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800558e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005592:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005594:	687b      	ldr	r3, [r7, #4]
}
 8005596:	4618      	mov	r0, r3
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}
 800559e:	bf00      	nop
 80055a0:	200060b8 	.word	0x200060b8

080055a4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08e      	sub	sp, #56	@ 0x38
 80055a8:	af04      	add	r7, sp, #16
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80055b0:	2300      	movs	r3, #0
 80055b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055b4:	f3ef 8305 	mrs	r3, IPSR
 80055b8:	617b      	str	r3, [r7, #20]
  return(result);
 80055ba:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d17e      	bne.n	80056be <osThreadNew+0x11a>
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d07b      	beq.n	80056be <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80055c6:	2380      	movs	r3, #128	@ 0x80
 80055c8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80055ca:	2318      	movs	r3, #24
 80055cc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80055ce:	2300      	movs	r3, #0
 80055d0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80055d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80055d6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d045      	beq.n	800566a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d002      	beq.n	80055ec <osThreadNew+0x48>
        name = attr->name;
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699b      	ldr	r3, [r3, #24]
 80055f8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80055fa:	69fb      	ldr	r3, [r7, #28]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d008      	beq.n	8005612 <osThreadNew+0x6e>
 8005600:	69fb      	ldr	r3, [r7, #28]
 8005602:	2b38      	cmp	r3, #56	@ 0x38
 8005604:	d805      	bhi.n	8005612 <osThreadNew+0x6e>
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d001      	beq.n	8005616 <osThreadNew+0x72>
        return (NULL);
 8005612:	2300      	movs	r3, #0
 8005614:	e054      	b.n	80056c0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	695b      	ldr	r3, [r3, #20]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d003      	beq.n	8005626 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	089b      	lsrs	r3, r3, #2
 8005624:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	689b      	ldr	r3, [r3, #8]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00e      	beq.n	800564c <osThreadNew+0xa8>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	2ba7      	cmp	r3, #167	@ 0xa7
 8005634:	d90a      	bls.n	800564c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800563a:	2b00      	cmp	r3, #0
 800563c:	d006      	beq.n	800564c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d002      	beq.n	800564c <osThreadNew+0xa8>
        mem = 1;
 8005646:	2301      	movs	r3, #1
 8005648:	61bb      	str	r3, [r7, #24]
 800564a:	e010      	b.n	800566e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d10c      	bne.n	800566e <osThreadNew+0xca>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68db      	ldr	r3, [r3, #12]
 8005658:	2b00      	cmp	r3, #0
 800565a:	d108      	bne.n	800566e <osThreadNew+0xca>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	691b      	ldr	r3, [r3, #16]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d104      	bne.n	800566e <osThreadNew+0xca>
          mem = 0;
 8005664:	2300      	movs	r3, #0
 8005666:	61bb      	str	r3, [r7, #24]
 8005668:	e001      	b.n	800566e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800566a:	2300      	movs	r3, #0
 800566c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	2b01      	cmp	r3, #1
 8005672:	d110      	bne.n	8005696 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800567c:	9202      	str	r2, [sp, #8]
 800567e:	9301      	str	r3, [sp, #4]
 8005680:	69fb      	ldr	r3, [r7, #28]
 8005682:	9300      	str	r3, [sp, #0]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	6a3a      	ldr	r2, [r7, #32]
 8005688:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800568a:	68f8      	ldr	r0, [r7, #12]
 800568c:	f001 fc06 	bl	8006e9c <xTaskCreateStatic>
 8005690:	4603      	mov	r3, r0
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	e013      	b.n	80056be <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005696:	69bb      	ldr	r3, [r7, #24]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d110      	bne.n	80056be <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800569c:	6a3b      	ldr	r3, [r7, #32]
 800569e:	b29a      	uxth	r2, r3
 80056a0:	f107 0310 	add.w	r3, r7, #16
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056ae:	68f8      	ldr	r0, [r7, #12]
 80056b0:	f001 fc54 	bl	8006f5c <xTaskCreate>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b01      	cmp	r3, #1
 80056b8:	d001      	beq.n	80056be <osThreadNew+0x11a>
            hTask = NULL;
 80056ba:	2300      	movs	r3, #0
 80056bc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80056be:	693b      	ldr	r3, [r7, #16]
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3728      	adds	r7, #40	@ 0x28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80056d0:	2300      	movs	r3, #0
 80056d2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056d4:	f3ef 8305 	mrs	r3, IPSR
 80056d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80056da:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d12d      	bne.n	800573c <osEventFlagsNew+0x74>
    mem = -1;
 80056e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056e4:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d015      	beq.n	8005718 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	689b      	ldr	r3, [r3, #8]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d006      	beq.n	8005702 <osEventFlagsNew+0x3a>
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	2b1f      	cmp	r3, #31
 80056fa:	d902      	bls.n	8005702 <osEventFlagsNew+0x3a>
        mem = 1;
 80056fc:	2301      	movs	r3, #1
 80056fe:	613b      	str	r3, [r7, #16]
 8005700:	e00c      	b.n	800571c <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	689b      	ldr	r3, [r3, #8]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d108      	bne.n	800571c <osEventFlagsNew+0x54>
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68db      	ldr	r3, [r3, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d104      	bne.n	800571c <osEventFlagsNew+0x54>
          mem = 0;
 8005712:	2300      	movs	r3, #0
 8005714:	613b      	str	r3, [r7, #16]
 8005716:	e001      	b.n	800571c <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d106      	bne.n	8005730 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f9f8 	bl	8005b1c <xEventGroupCreateStatic>
 800572c:	6178      	str	r0, [r7, #20]
 800572e:	e005      	b.n	800573c <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	2b00      	cmp	r3, #0
 8005734:	d102      	bne.n	800573c <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8005736:	f000 fa2a 	bl	8005b8e <xEventGroupCreate>
 800573a:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800573c:	697b      	ldr	r3, [r7, #20]
}
 800573e:	4618      	mov	r0, r3
 8005740:	3718      	adds	r7, #24
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}
	...

08005748 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d003      	beq.n	8005764 <osEventFlagsSet+0x1c>
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005762:	d303      	bcc.n	800576c <osEventFlagsSet+0x24>
    rflags = (uint32_t)osErrorParameter;
 8005764:	f06f 0303 	mvn.w	r3, #3
 8005768:	617b      	str	r3, [r7, #20]
 800576a:	e028      	b.n	80057be <osEventFlagsSet+0x76>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800576c:	f3ef 8305 	mrs	r3, IPSR
 8005770:	60fb      	str	r3, [r7, #12]
  return(result);
 8005772:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005774:	2b00      	cmp	r3, #0
 8005776:	d01d      	beq.n	80057b4 <osEventFlagsSet+0x6c>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800577c:	f107 0308 	add.w	r3, r7, #8
 8005780:	461a      	mov	r2, r3
 8005782:	6839      	ldr	r1, [r7, #0]
 8005784:	6938      	ldr	r0, [r7, #16]
 8005786:	f000 fbab 	bl	8005ee0 <xEventGroupSetBitsFromISR>
 800578a:	4603      	mov	r3, r0
 800578c:	2b00      	cmp	r3, #0
 800578e:	d103      	bne.n	8005798 <osEventFlagsSet+0x50>
      rflags = (uint32_t)osErrorResource;
 8005790:	f06f 0302 	mvn.w	r3, #2
 8005794:	617b      	str	r3, [r7, #20]
 8005796:	e012      	b.n	80057be <osEventFlagsSet+0x76>
    } else {
      rflags = flags;
 8005798:	683b      	ldr	r3, [r7, #0]
 800579a:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d00d      	beq.n	80057be <osEventFlagsSet+0x76>
 80057a2:	4b09      	ldr	r3, [pc, #36]	@ (80057c8 <osEventFlagsSet+0x80>)
 80057a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a8:	601a      	str	r2, [r3, #0]
 80057aa:	f3bf 8f4f 	dsb	sy
 80057ae:	f3bf 8f6f 	isb	sy
 80057b2:	e004      	b.n	80057be <osEventFlagsSet+0x76>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 80057b4:	6839      	ldr	r1, [r7, #0]
 80057b6:	6938      	ldr	r0, [r7, #16]
 80057b8:	f000 fad6 	bl	8005d68 <xEventGroupSetBits>
 80057bc:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 80057be:	697b      	ldr	r3, [r7, #20]
}
 80057c0:	4618      	mov	r0, r3
 80057c2:	3718      	adds	r7, #24
 80057c4:	46bd      	mov	sp, r7
 80057c6:	bd80      	pop	{r7, pc}
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b08c      	sub	sp, #48	@ 0x30
 80057d0:	af02      	add	r7, sp, #8
 80057d2:	60f8      	str	r0, [r7, #12]
 80057d4:	60b9      	str	r1, [r7, #8]
 80057d6:	607a      	str	r2, [r7, #4]
 80057d8:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80057de:	69bb      	ldr	r3, [r7, #24]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d003      	beq.n	80057ec <osEventFlagsWait+0x20>
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80057ea:	d303      	bcc.n	80057f4 <osEventFlagsWait+0x28>
    rflags = (uint32_t)osErrorParameter;
 80057ec:	f06f 0303 	mvn.w	r3, #3
 80057f0:	61fb      	str	r3, [r7, #28]
 80057f2:	e04b      	b.n	800588c <osEventFlagsWait+0xc0>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057f4:	f3ef 8305 	mrs	r3, IPSR
 80057f8:	617b      	str	r3, [r7, #20]
  return(result);
 80057fa:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d003      	beq.n	8005808 <osEventFlagsWait+0x3c>
    rflags = (uint32_t)osErrorISR;
 8005800:	f06f 0305 	mvn.w	r3, #5
 8005804:	61fb      	str	r3, [r7, #28]
 8005806:	e041      	b.n	800588c <osEventFlagsWait+0xc0>
  }
  else {
    if (options & osFlagsWaitAll) {
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	f003 0301 	and.w	r3, r3, #1
 800580e:	2b00      	cmp	r3, #0
 8005810:	d002      	beq.n	8005818 <osEventFlagsWait+0x4c>
      wait_all = pdTRUE;
 8005812:	2301      	movs	r3, #1
 8005814:	627b      	str	r3, [r7, #36]	@ 0x24
 8005816:	e001      	b.n	800581c <osEventFlagsWait+0x50>
    } else {
      wait_all = pdFAIL;
 8005818:	2300      	movs	r3, #0
 800581a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    if (options & osFlagsNoClear) {
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0302 	and.w	r3, r3, #2
 8005822:	2b00      	cmp	r3, #0
 8005824:	d002      	beq.n	800582c <osEventFlagsWait+0x60>
      exit_clr = pdFAIL;
 8005826:	2300      	movs	r3, #0
 8005828:	623b      	str	r3, [r7, #32]
 800582a:	e001      	b.n	8005830 <osEventFlagsWait+0x64>
    } else {
      exit_clr = pdTRUE;
 800582c:	2301      	movs	r3, #1
 800582e:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	9300      	str	r3, [sp, #0]
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	6a3a      	ldr	r2, [r7, #32]
 8005838:	68b9      	ldr	r1, [r7, #8]
 800583a:	69b8      	ldr	r0, [r7, #24]
 800583c:	f000 f9c2 	bl	8005bc4 <xEventGroupWaitBits>
 8005840:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f003 0301 	and.w	r3, r3, #1
 8005848:	2b00      	cmp	r3, #0
 800584a:	d010      	beq.n	800586e <osEventFlagsWait+0xa2>
      if ((flags & rflags) != flags) {
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	69fb      	ldr	r3, [r7, #28]
 8005850:	4013      	ands	r3, r2
 8005852:	68ba      	ldr	r2, [r7, #8]
 8005854:	429a      	cmp	r2, r3
 8005856:	d019      	beq.n	800588c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	d003      	beq.n	8005866 <osEventFlagsWait+0x9a>
          rflags = (uint32_t)osErrorTimeout;
 800585e:	f06f 0301 	mvn.w	r3, #1
 8005862:	61fb      	str	r3, [r7, #28]
 8005864:	e012      	b.n	800588c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005866:	f06f 0302 	mvn.w	r3, #2
 800586a:	61fb      	str	r3, [r7, #28]
 800586c:	e00e      	b.n	800588c <osEventFlagsWait+0xc0>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	4013      	ands	r3, r2
 8005874:	2b00      	cmp	r3, #0
 8005876:	d109      	bne.n	800588c <osEventFlagsWait+0xc0>
        if (timeout > 0U) {
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d003      	beq.n	8005886 <osEventFlagsWait+0xba>
          rflags = (uint32_t)osErrorTimeout;
 800587e:	f06f 0301 	mvn.w	r3, #1
 8005882:	61fb      	str	r3, [r7, #28]
 8005884:	e002      	b.n	800588c <osEventFlagsWait+0xc0>
        } else {
          rflags = (uint32_t)osErrorResource;
 8005886:	f06f 0302 	mvn.w	r3, #2
 800588a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800588c:	69fb      	ldr	r3, [r7, #28]
}
 800588e:	4618      	mov	r0, r3
 8005890:	3728      	adds	r7, #40	@ 0x28
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005896:	b580      	push	{r7, lr}
 8005898:	b088      	sub	sp, #32
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800589e:	2300      	movs	r3, #0
 80058a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058a2:	f3ef 8305 	mrs	r3, IPSR
 80058a6:	60bb      	str	r3, [r7, #8]
  return(result);
 80058a8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d174      	bne.n	8005998 <osMutexNew+0x102>
    if (attr != NULL) {
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d003      	beq.n	80058bc <osMutexNew+0x26>
      type = attr->attr_bits;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e001      	b.n	80058c0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80058c0:	69bb      	ldr	r3, [r7, #24]
 80058c2:	f003 0301 	and.w	r3, r3, #1
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <osMutexNew+0x3a>
      rmtx = 1U;
 80058ca:	2301      	movs	r3, #1
 80058cc:	617b      	str	r3, [r7, #20]
 80058ce:	e001      	b.n	80058d4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80058d4:	69bb      	ldr	r3, [r7, #24]
 80058d6:	f003 0308 	and.w	r3, r3, #8
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d15c      	bne.n	8005998 <osMutexNew+0x102>
      mem = -1;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058e2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d015      	beq.n	8005916 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	689b      	ldr	r3, [r3, #8]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d006      	beq.n	8005900 <osMutexNew+0x6a>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	2b4f      	cmp	r3, #79	@ 0x4f
 80058f8:	d902      	bls.n	8005900 <osMutexNew+0x6a>
          mem = 1;
 80058fa:	2301      	movs	r3, #1
 80058fc:	613b      	str	r3, [r7, #16]
 80058fe:	e00c      	b.n	800591a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d108      	bne.n	800591a <osMutexNew+0x84>
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d104      	bne.n	800591a <osMutexNew+0x84>
            mem = 0;
 8005910:	2300      	movs	r3, #0
 8005912:	613b      	str	r3, [r7, #16]
 8005914:	e001      	b.n	800591a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005916:	2300      	movs	r3, #0
 8005918:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	2b01      	cmp	r3, #1
 800591e:	d112      	bne.n	8005946 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005920:	697b      	ldr	r3, [r7, #20]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d007      	beq.n	8005936 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	4619      	mov	r1, r3
 800592c:	2004      	movs	r0, #4
 800592e:	f000 fd16 	bl	800635e <xQueueCreateMutexStatic>
 8005932:	61f8      	str	r0, [r7, #28]
 8005934:	e016      	b.n	8005964 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	689b      	ldr	r3, [r3, #8]
 800593a:	4619      	mov	r1, r3
 800593c:	2001      	movs	r0, #1
 800593e:	f000 fd0e 	bl	800635e <xQueueCreateMutexStatic>
 8005942:	61f8      	str	r0, [r7, #28]
 8005944:	e00e      	b.n	8005964 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10b      	bne.n	8005964 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d004      	beq.n	800595c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005952:	2004      	movs	r0, #4
 8005954:	f000 fceb 	bl	800632e <xQueueCreateMutex>
 8005958:	61f8      	str	r0, [r7, #28]
 800595a:	e003      	b.n	8005964 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800595c:	2001      	movs	r0, #1
 800595e:	f000 fce6 	bl	800632e <xQueueCreateMutex>
 8005962:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d00c      	beq.n	8005984 <osMutexNew+0xee>
        if (attr != NULL) {
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <osMutexNew+0xe2>
          name = attr->name;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	e001      	b.n	800597c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005978:	2300      	movs	r3, #0
 800597a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800597c:	68f9      	ldr	r1, [r7, #12]
 800597e:	69f8      	ldr	r0, [r7, #28]
 8005980:	f001 fa2e 	bl	8006de0 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d006      	beq.n	8005998 <osMutexNew+0x102>
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d003      	beq.n	8005998 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f043 0301 	orr.w	r3, r3, #1
 8005996:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005998:	69fb      	ldr	r3, [r7, #28]
}
 800599a:	4618      	mov	r0, r3
 800599c:	3720      	adds	r7, #32
 800599e:	46bd      	mov	sp, r7
 80059a0:	bd80      	pop	{r7, pc}

080059a2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 80059a2:	b580      	push	{r7, lr}
 80059a4:	b086      	sub	sp, #24
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
 80059aa:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f023 0301 	bic.w	r3, r3, #1
 80059b2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	f003 0301 	and.w	r3, r3, #1
 80059ba:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80059bc:	2300      	movs	r3, #0
 80059be:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80059c0:	f3ef 8305 	mrs	r3, IPSR
 80059c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80059c6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d003      	beq.n	80059d4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 80059cc:	f06f 0305 	mvn.w	r3, #5
 80059d0:	617b      	str	r3, [r7, #20]
 80059d2:	e02c      	b.n	8005a2e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d103      	bne.n	80059e2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 80059da:	f06f 0303 	mvn.w	r3, #3
 80059de:	617b      	str	r3, [r7, #20]
 80059e0:	e025      	b.n	8005a2e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d011      	beq.n	8005a0c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 80059e8:	6839      	ldr	r1, [r7, #0]
 80059ea:	6938      	ldr	r0, [r7, #16]
 80059ec:	f000 fd07 	bl	80063fe <xQueueTakeMutexRecursive>
 80059f0:	4603      	mov	r3, r0
 80059f2:	2b01      	cmp	r3, #1
 80059f4:	d01b      	beq.n	8005a2e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80059fc:	f06f 0301 	mvn.w	r3, #1
 8005a00:	617b      	str	r3, [r7, #20]
 8005a02:	e014      	b.n	8005a2e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a04:	f06f 0302 	mvn.w	r3, #2
 8005a08:	617b      	str	r3, [r7, #20]
 8005a0a:	e010      	b.n	8005a2e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005a0c:	6839      	ldr	r1, [r7, #0]
 8005a0e:	6938      	ldr	r0, [r7, #16]
 8005a10:	f000 ffae 	bl	8006970 <xQueueSemaphoreTake>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b01      	cmp	r3, #1
 8005a18:	d009      	beq.n	8005a2e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d003      	beq.n	8005a28 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005a20:	f06f 0301 	mvn.w	r3, #1
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	e002      	b.n	8005a2e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005a28:	f06f 0302 	mvn.w	r3, #2
 8005a2c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005a2e:	697b      	ldr	r3, [r7, #20]
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3718      	adds	r7, #24
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f023 0301 	bic.w	r3, r3, #1
 8005a46:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f003 0301 	and.w	r3, r3, #1
 8005a4e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005a50:	2300      	movs	r3, #0
 8005a52:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a54:	f3ef 8305 	mrs	r3, IPSR
 8005a58:	60bb      	str	r3, [r7, #8]
  return(result);
 8005a5a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d003      	beq.n	8005a68 <osMutexRelease+0x30>
    stat = osErrorISR;
 8005a60:	f06f 0305 	mvn.w	r3, #5
 8005a64:	617b      	str	r3, [r7, #20]
 8005a66:	e01f      	b.n	8005aa8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d103      	bne.n	8005a76 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005a6e:	f06f 0303 	mvn.w	r3, #3
 8005a72:	617b      	str	r3, [r7, #20]
 8005a74:	e018      	b.n	8005aa8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d009      	beq.n	8005a90 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005a7c:	6938      	ldr	r0, [r7, #16]
 8005a7e:	f000 fc89 	bl	8006394 <xQueueGiveMutexRecursive>
 8005a82:	4603      	mov	r3, r0
 8005a84:	2b01      	cmp	r3, #1
 8005a86:	d00f      	beq.n	8005aa8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005a88:	f06f 0302 	mvn.w	r3, #2
 8005a8c:	617b      	str	r3, [r7, #20]
 8005a8e:	e00b      	b.n	8005aa8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005a90:	2300      	movs	r3, #0
 8005a92:	2200      	movs	r2, #0
 8005a94:	2100      	movs	r1, #0
 8005a96:	6938      	ldr	r0, [r7, #16]
 8005a98:	f000 fce8 	bl	800646c <xQueueGenericSend>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b01      	cmp	r3, #1
 8005aa0:	d002      	beq.n	8005aa8 <osMutexRelease+0x70>
        stat = osErrorResource;
 8005aa2:	f06f 0302 	mvn.w	r3, #2
 8005aa6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005aa8:	697b      	ldr	r3, [r7, #20]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3718      	adds	r7, #24
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
	...

08005ab4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	60f8      	str	r0, [r7, #12]
 8005abc:	60b9      	str	r1, [r7, #8]
 8005abe:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	4a07      	ldr	r2, [pc, #28]	@ (8005ae0 <vApplicationGetIdleTaskMemory+0x2c>)
 8005ac4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	4a06      	ldr	r2, [pc, #24]	@ (8005ae4 <vApplicationGetIdleTaskMemory+0x30>)
 8005aca:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	2280      	movs	r2, #128	@ 0x80
 8005ad0:	601a      	str	r2, [r3, #0]
}
 8005ad2:	bf00      	nop
 8005ad4:	3714      	adds	r7, #20
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr
 8005ade:	bf00      	nop
 8005ae0:	200060bc 	.word	0x200060bc
 8005ae4:	20006164 	.word	0x20006164

08005ae8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a07      	ldr	r2, [pc, #28]	@ (8005b14 <vApplicationGetTimerTaskMemory+0x2c>)
 8005af8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	4a06      	ldr	r2, [pc, #24]	@ (8005b18 <vApplicationGetTimerTaskMemory+0x30>)
 8005afe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005b06:	601a      	str	r2, [r3, #0]
}
 8005b08:	bf00      	nop
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr
 8005b14:	20006364 	.word	0x20006364
 8005b18:	2000640c 	.word	0x2000640c

08005b1c <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b086      	sub	sp, #24
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10b      	bne.n	8005b42 <xEventGroupCreateStatic+0x26>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005b2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b2e:	f383 8811 	msr	BASEPRI, r3
 8005b32:	f3bf 8f6f 	isb	sy
 8005b36:	f3bf 8f4f 	dsb	sy
 8005b3a:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005b3c:	bf00      	nop
 8005b3e:	bf00      	nop
 8005b40:	e7fd      	b.n	8005b3e <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8005b42:	2320      	movs	r3, #32
 8005b44:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	2b20      	cmp	r3, #32
 8005b4a:	d00b      	beq.n	8005b64 <xEventGroupCreateStatic+0x48>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	60fb      	str	r3, [r7, #12]
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <xEventGroupCreateStatic+0x44>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d00a      	beq.n	8005b84 <xEventGroupCreateStatic+0x68>
		{
			pxEventBits->uxEventBits = 0;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	2200      	movs	r2, #0
 8005b72:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	3304      	adds	r3, #4
 8005b78:	4618      	mov	r0, r3
 8005b7a:	f000 f9c5 	bl	8005f08 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2201      	movs	r2, #1
 8005b82:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005b84:	697b      	ldr	r3, [r7, #20]
	}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}

08005b8e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 8005b8e:	b580      	push	{r7, lr}
 8005b90:	b082      	sub	sp, #8
 8005b92:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005b94:	2020      	movs	r0, #32
 8005b96:	f003 f819 	bl	8008bcc <pvPortMalloc>
 8005b9a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d00a      	beq.n	8005bb8 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	3304      	adds	r3, #4
 8005bac:	4618      	mov	r0, r3
 8005bae:	f000 f9ab 	bl	8005f08 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005bb8:	687b      	ldr	r3, [r7, #4]
	}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3708      	adds	r7, #8
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bd80      	pop	{r7, pc}
	...

08005bc4 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b090      	sub	sp, #64	@ 0x40
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	60f8      	str	r0, [r7, #12]
 8005bcc:	60b9      	str	r1, [r7, #8]
 8005bce:	607a      	str	r2, [r7, #4]
 8005bd0:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	637b      	str	r3, [r7, #52]	@ 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	63bb      	str	r3, [r7, #56]	@ 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	633b      	str	r3, [r7, #48]	@ 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10b      	bne.n	8005bfc <xEventGroupWaitBits+0x38>
	__asm volatile
 8005be4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be8:	f383 8811 	msr	BASEPRI, r3
 8005bec:	f3bf 8f6f 	isb	sy
 8005bf0:	f3bf 8f4f 	dsb	sy
 8005bf4:	623b      	str	r3, [r7, #32]
}
 8005bf6:	bf00      	nop
 8005bf8:	bf00      	nop
 8005bfa:	e7fd      	b.n	8005bf8 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005c02:	d30b      	bcc.n	8005c1c <xEventGroupWaitBits+0x58>
	__asm volatile
 8005c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c08:	f383 8811 	msr	BASEPRI, r3
 8005c0c:	f3bf 8f6f 	isb	sy
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	61fb      	str	r3, [r7, #28]
}
 8005c16:	bf00      	nop
 8005c18:	bf00      	nop
 8005c1a:	e7fd      	b.n	8005c18 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10b      	bne.n	8005c3a <xEventGroupWaitBits+0x76>
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	61bb      	str	r3, [r7, #24]
}
 8005c34:	bf00      	nop
 8005c36:	bf00      	nop
 8005c38:	e7fd      	b.n	8005c36 <xEventGroupWaitBits+0x72>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005c3a:	f002 f803 	bl	8007c44 <xTaskGetSchedulerState>
 8005c3e:	4603      	mov	r3, r0
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <xEventGroupWaitBits+0x86>
 8005c44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <xEventGroupWaitBits+0x8a>
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e000      	b.n	8005c50 <xEventGroupWaitBits+0x8c>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d10b      	bne.n	8005c6c <xEventGroupWaitBits+0xa8>
	__asm volatile
 8005c54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c58:	f383 8811 	msr	BASEPRI, r3
 8005c5c:	f3bf 8f6f 	isb	sy
 8005c60:	f3bf 8f4f 	dsb	sy
 8005c64:	617b      	str	r3, [r7, #20]
}
 8005c66:	bf00      	nop
 8005c68:	bf00      	nop
 8005c6a:	e7fd      	b.n	8005c68 <xEventGroupWaitBits+0xa4>
	}
	#endif

	vTaskSuspendAll();
 8005c6c:	f001 fb44 	bl	80072f8 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8005c70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	62fb      	str	r3, [r7, #44]	@ 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005c76:	683a      	ldr	r2, [r7, #0]
 8005c78:	68b9      	ldr	r1, [r7, #8]
 8005c7a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005c7c:	f000 f90d 	bl	8005e9a <prvTestWaitCondition>
 8005c80:	62b8      	str	r0, [r7, #40]	@ 0x28

		if( xWaitConditionMet != pdFALSE )
 8005c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d00e      	beq.n	8005ca6 <xEventGroupWaitBits+0xe2>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005c88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	64bb      	str	r3, [r7, #72]	@ 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d028      	beq.n	8005ce8 <xEventGroupWaitBits+0x124>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005c96:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	43db      	mvns	r3, r3
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca2:	601a      	str	r2, [r3, #0]
 8005ca4:	e020      	b.n	8005ce8 <xEventGroupWaitBits+0x124>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d104      	bne.n	8005cb6 <xEventGroupWaitBits+0xf2>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005cac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
			xTimeoutOccurred = pdTRUE;
 8005cb0:	2301      	movs	r3, #1
 8005cb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb4:	e018      	b.n	8005ce8 <xEventGroupWaitBits+0x124>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d003      	beq.n	8005cc4 <xEventGroupWaitBits+0x100>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <xEventGroupWaitBits+0x10e>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005cca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ccc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8005cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd4:	1d18      	adds	r0, r3, #4
 8005cd6:	68ba      	ldr	r2, [r7, #8]
 8005cd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cda:	4313      	orrs	r3, r2
 8005cdc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f001 fd0c 	bl	80076fc <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005ce8:	f001 fb14 	bl	8007314 <xTaskResumeAll>
 8005cec:	6278      	str	r0, [r7, #36]	@ 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005cee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d031      	beq.n	8005d58 <xEventGroupWaitBits+0x194>
	{
		if( xAlreadyYielded == pdFALSE )
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d107      	bne.n	8005d0a <xEventGroupWaitBits+0x146>
		{
			portYIELD_WITHIN_API();
 8005cfa:	4b1a      	ldr	r3, [pc, #104]	@ (8005d64 <xEventGroupWaitBits+0x1a0>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005d0a:	f002 f915 	bl	8007f38 <uxTaskResetEventItemValue>
 8005d0e:	63f8      	str	r0, [r7, #60]	@ 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8005d10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d11a      	bne.n	8005d50 <xEventGroupWaitBits+0x18c>
		{
			taskENTER_CRITICAL();
 8005d1a:	f002 fe35 	bl	8008988 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8005d1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	63fb      	str	r3, [r7, #60]	@ 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	68b9      	ldr	r1, [r7, #8]
 8005d28:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005d2a:	f000 f8b6 	bl	8005e9a <prvTestWaitCondition>
 8005d2e:	4603      	mov	r3, r0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d009      	beq.n	8005d48 <xEventGroupWaitBits+0x184>
				{
					if( xClearOnExit != pdFALSE )
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d006      	beq.n	8005d48 <xEventGroupWaitBits+0x184>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	43db      	mvns	r3, r3
 8005d42:	401a      	ands	r2, r3
 8005d44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d46:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8005d48:	2301      	movs	r3, #1
 8005d4a:	633b      	str	r3, [r7, #48]	@ 0x30
			}
			taskEXIT_CRITICAL();
 8005d4c:	f002 fe4e 	bl	80089ec <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005d50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005d52:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8005d58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005d5a:	4618      	mov	r0, r3
 8005d5c:	3740      	adds	r7, #64	@ 0x40
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	bd80      	pop	{r7, pc}
 8005d62:	bf00      	nop
 8005d64:	e000ed04 	.word	0xe000ed04

08005d68 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b08e      	sub	sp, #56	@ 0x38
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8005d72:	2300      	movs	r3, #0
 8005d74:	633b      	str	r3, [r7, #48]	@ 0x30
EventGroup_t *pxEventBits = xEventGroup;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	62bb      	str	r3, [r7, #40]	@ 0x28
BaseType_t xMatchFound = pdFALSE;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	62fb      	str	r3, [r7, #44]	@ 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d10b      	bne.n	8005d9c <xEventGroupSetBits+0x34>
	__asm volatile
 8005d84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d88:	f383 8811 	msr	BASEPRI, r3
 8005d8c:	f3bf 8f6f 	isb	sy
 8005d90:	f3bf 8f4f 	dsb	sy
 8005d94:	613b      	str	r3, [r7, #16]
}
 8005d96:	bf00      	nop
 8005d98:	bf00      	nop
 8005d9a:	e7fd      	b.n	8005d98 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005da2:	d30b      	bcc.n	8005dbc <xEventGroupSetBits+0x54>
	__asm volatile
 8005da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da8:	f383 8811 	msr	BASEPRI, r3
 8005dac:	f3bf 8f6f 	isb	sy
 8005db0:	f3bf 8f4f 	dsb	sy
 8005db4:	60fb      	str	r3, [r7, #12]
}
 8005db6:	bf00      	nop
 8005db8:	bf00      	nop
 8005dba:	e7fd      	b.n	8005db8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	627b      	str	r3, [r7, #36]	@ 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 8005dc8:	f001 fa96 	bl	80072f8 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	637b      	str	r3, [r7, #52]	@ 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005dd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dd4:	681a      	ldr	r2, [r3, #0]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	431a      	orrs	r2, r3
 8005dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ddc:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005dde:	e03c      	b.n	8005e5a <xEventGroupSetBits+0xf2>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005de0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8005de6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005dec:	2300      	movs	r3, #0
 8005dee:	62fb      	str	r3, [r7, #44]	@ 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005df0:	69bb      	ldr	r3, [r7, #24]
 8005df2:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8005df6:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005dfe:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005e00:	697b      	ldr	r3, [r7, #20]
 8005e02:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d108      	bne.n	8005e1c <xEventGroupSetBits+0xb4>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005e0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e0c:	681a      	ldr	r2, [r3, #0]
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	4013      	ands	r3, r2
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d00b      	beq.n	8005e2e <xEventGroupSetBits+0xc6>
				{
					xMatchFound = pdTRUE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e1a:	e008      	b.n	8005e2e <xEventGroupSetBits+0xc6>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8005e1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e1e:	681a      	ldr	r2, [r3, #0]
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	4013      	ands	r3, r2
 8005e24:	69ba      	ldr	r2, [r7, #24]
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d101      	bne.n	8005e2e <xEventGroupSetBits+0xc6>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d010      	beq.n	8005e56 <xEventGroupSetBits+0xee>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d003      	beq.n	8005e46 <xEventGroupSetBits+0xde>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8005e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e40:	69bb      	ldr	r3, [r7, #24]
 8005e42:	4313      	orrs	r3, r2
 8005e44:	633b      	str	r3, [r7, #48]	@ 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 8005e46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005e52:	f001 fd21 	bl	8007898 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8005e56:	69fb      	ldr	r3, [r7, #28]
 8005e58:	637b      	str	r3, [r7, #52]	@ 0x34
		while( pxListItem != pxListEnd )
 8005e5a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e5c:	6a3b      	ldr	r3, [r7, #32]
 8005e5e:	429a      	cmp	r2, r3
 8005e60:	d1be      	bne.n	8005de0 <xEventGroupSetBits+0x78>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	43db      	mvns	r3, r3
 8005e6a:	401a      	ands	r2, r3
 8005e6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e6e:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8005e70:	f001 fa50 	bl	8007314 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8005e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e76:	681b      	ldr	r3, [r3, #0]
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3738      	adds	r7, #56	@ 0x38
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}

08005e80 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b082      	sub	sp, #8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005e8a:	6839      	ldr	r1, [r7, #0]
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f7ff ff6b 	bl	8005d68 <xEventGroupSetBits>
}
 8005e92:	bf00      	nop
 8005e94:	3708      	adds	r7, #8
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}

08005e9a <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b087      	sub	sp, #28
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	60f8      	str	r0, [r7, #12]
 8005ea2:	60b9      	str	r1, [r7, #8]
 8005ea4:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d107      	bne.n	8005ec0 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d00a      	beq.n	8005ed0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005eba:	2301      	movs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
 8005ebe:	e007      	b.n	8005ed0 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	4013      	ands	r3, r2
 8005ec6:	68ba      	ldr	r2, [r7, #8]
 8005ec8:	429a      	cmp	r2, r3
 8005eca:	d101      	bne.n	8005ed0 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005ecc:	2301      	movs	r3, #1
 8005ece:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005ed0:	697b      	ldr	r3, [r7, #20]
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	371c      	adds	r7, #28
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005edc:	4770      	bx	lr
	...

08005ee0 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b086      	sub	sp, #24
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	60f8      	str	r0, [r7, #12]
 8005ee8:	60b9      	str	r1, [r7, #8]
 8005eea:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68ba      	ldr	r2, [r7, #8]
 8005ef0:	68f9      	ldr	r1, [r7, #12]
 8005ef2:	4804      	ldr	r0, [pc, #16]	@ (8005f04 <xEventGroupSetBitsFromISR+0x24>)
 8005ef4:	f002 fbfa 	bl	80086ec <xTimerPendFunctionCallFromISR>
 8005ef8:	6178      	str	r0, [r7, #20]

		return xReturn;
 8005efa:	697b      	ldr	r3, [r7, #20]
	}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	08005e81 	.word	0x08005e81

08005f08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b083      	sub	sp, #12
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	f103 0208 	add.w	r2, r3, #8
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8005f20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	f103 0208 	add.w	r2, r3, #8
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f103 0208 	add.w	r2, r3, #8
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f56:	bf00      	nop
 8005f58:	370c      	adds	r7, #12
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f60:	4770      	bx	lr

08005f62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f62:	b480      	push	{r7}
 8005f64:	b085      	sub	sp, #20
 8005f66:	af00      	add	r7, sp, #0
 8005f68:	6078      	str	r0, [r7, #4]
 8005f6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	68fa      	ldr	r2, [r7, #12]
 8005f76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	689a      	ldr	r2, [r3, #8]
 8005f7c:	683b      	ldr	r3, [r7, #0]
 8005f7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	683a      	ldr	r2, [r7, #0]
 8005f86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	683a      	ldr	r2, [r7, #0]
 8005f8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	687a      	ldr	r2, [r7, #4]
 8005f92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	601a      	str	r2, [r3, #0]
}
 8005f9e:	bf00      	nop
 8005fa0:	3714      	adds	r7, #20
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr

08005faa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005faa:	b480      	push	{r7}
 8005fac:	b085      	sub	sp, #20
 8005fae:	af00      	add	r7, sp, #0
 8005fb0:	6078      	str	r0, [r7, #4]
 8005fb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005fc0:	d103      	bne.n	8005fca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	60fb      	str	r3, [r7, #12]
 8005fc8:	e00c      	b.n	8005fe4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	3308      	adds	r3, #8
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e002      	b.n	8005fd8 <vListInsert+0x2e>
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	685b      	ldr	r3, [r3, #4]
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68ba      	ldr	r2, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d2f6      	bcs.n	8005fd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	683a      	ldr	r2, [r7, #0]
 8005ff2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	683a      	ldr	r2, [r7, #0]
 8005ffe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	601a      	str	r2, [r3, #0]
}
 8006010:	bf00      	nop
 8006012:	3714      	adds	r7, #20
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	6892      	ldr	r2, [r2, #8]
 8006032:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	689b      	ldr	r3, [r3, #8]
 8006038:	687a      	ldr	r2, [r7, #4]
 800603a:	6852      	ldr	r2, [r2, #4]
 800603c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	687a      	ldr	r2, [r7, #4]
 8006044:	429a      	cmp	r2, r3
 8006046:	d103      	bne.n	8006050 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2200      	movs	r2, #0
 8006054:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	1e5a      	subs	r2, r3, #1
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	681b      	ldr	r3, [r3, #0]
}
 8006064:	4618      	mov	r0, r3
 8006066:	3714      	adds	r7, #20
 8006068:	46bd      	mov	sp, r7
 800606a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800606e:	4770      	bx	lr

08006070 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b084      	sub	sp, #16
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
 8006078:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d10b      	bne.n	800609c <xQueueGenericReset+0x2c>
	__asm volatile
 8006084:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006088:	f383 8811 	msr	BASEPRI, r3
 800608c:	f3bf 8f6f 	isb	sy
 8006090:	f3bf 8f4f 	dsb	sy
 8006094:	60bb      	str	r3, [r7, #8]
}
 8006096:	bf00      	nop
 8006098:	bf00      	nop
 800609a:	e7fd      	b.n	8006098 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800609c:	f002 fc74 	bl	8008988 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681a      	ldr	r2, [r3, #0]
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a8:	68f9      	ldr	r1, [r7, #12]
 80060aa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060ac:	fb01 f303 	mul.w	r3, r1, r3
 80060b0:	441a      	add	r2, r3
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2200      	movs	r2, #0
 80060ba:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	681a      	ldr	r2, [r3, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	3b01      	subs	r3, #1
 80060ce:	68f9      	ldr	r1, [r7, #12]
 80060d0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	441a      	add	r2, r3
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	22ff      	movs	r2, #255	@ 0xff
 80060e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	22ff      	movs	r2, #255	@ 0xff
 80060e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80060ec:	683b      	ldr	r3, [r7, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d114      	bne.n	800611c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d01a      	beq.n	8006130 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	3310      	adds	r3, #16
 80060fe:	4618      	mov	r0, r3
 8006100:	f001 fb66 	bl	80077d0 <xTaskRemoveFromEventList>
 8006104:	4603      	mov	r3, r0
 8006106:	2b00      	cmp	r3, #0
 8006108:	d012      	beq.n	8006130 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800610a:	4b0d      	ldr	r3, [pc, #52]	@ (8006140 <xQueueGenericReset+0xd0>)
 800610c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	f3bf 8f4f 	dsb	sy
 8006116:	f3bf 8f6f 	isb	sy
 800611a:	e009      	b.n	8006130 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3310      	adds	r3, #16
 8006120:	4618      	mov	r0, r3
 8006122:	f7ff fef1 	bl	8005f08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	3324      	adds	r3, #36	@ 0x24
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff feec 	bl	8005f08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006130:	f002 fc5c 	bl	80089ec <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8006134:	2301      	movs	r3, #1
}
 8006136:	4618      	mov	r0, r3
 8006138:	3710      	adds	r7, #16
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}
 800613e:	bf00      	nop
 8006140:	e000ed04 	.word	0xe000ed04

08006144 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006144:	b580      	push	{r7, lr}
 8006146:	b08e      	sub	sp, #56	@ 0x38
 8006148:	af02      	add	r7, sp, #8
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d10b      	bne.n	8006170 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8006158:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800615c:	f383 8811 	msr	BASEPRI, r3
 8006160:	f3bf 8f6f 	isb	sy
 8006164:	f3bf 8f4f 	dsb	sy
 8006168:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800616a:	bf00      	nop
 800616c:	bf00      	nop
 800616e:	e7fd      	b.n	800616c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10b      	bne.n	800618e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8006176:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800617a:	f383 8811 	msr	BASEPRI, r3
 800617e:	f3bf 8f6f 	isb	sy
 8006182:	f3bf 8f4f 	dsb	sy
 8006186:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006188:	bf00      	nop
 800618a:	bf00      	nop
 800618c:	e7fd      	b.n	800618a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d002      	beq.n	800619a <xQueueGenericCreateStatic+0x56>
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <xQueueGenericCreateStatic+0x5a>
 800619a:	2301      	movs	r3, #1
 800619c:	e000      	b.n	80061a0 <xQueueGenericCreateStatic+0x5c>
 800619e:	2300      	movs	r3, #0
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d10b      	bne.n	80061bc <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80061a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061a8:	f383 8811 	msr	BASEPRI, r3
 80061ac:	f3bf 8f6f 	isb	sy
 80061b0:	f3bf 8f4f 	dsb	sy
 80061b4:	623b      	str	r3, [r7, #32]
}
 80061b6:	bf00      	nop
 80061b8:	bf00      	nop
 80061ba:	e7fd      	b.n	80061b8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d102      	bne.n	80061c8 <xQueueGenericCreateStatic+0x84>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d101      	bne.n	80061cc <xQueueGenericCreateStatic+0x88>
 80061c8:	2301      	movs	r3, #1
 80061ca:	e000      	b.n	80061ce <xQueueGenericCreateStatic+0x8a>
 80061cc:	2300      	movs	r3, #0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10b      	bne.n	80061ea <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	61fb      	str	r3, [r7, #28]
}
 80061e4:	bf00      	nop
 80061e6:	bf00      	nop
 80061e8:	e7fd      	b.n	80061e6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061ea:	2350      	movs	r3, #80	@ 0x50
 80061ec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2b50      	cmp	r3, #80	@ 0x50
 80061f2:	d00b      	beq.n	800620c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	61bb      	str	r3, [r7, #24]
}
 8006206:	bf00      	nop
 8006208:	bf00      	nop
 800620a:	e7fd      	b.n	8006208 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800620c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800620e:	683b      	ldr	r3, [r7, #0]
 8006210:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8006212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006214:	2b00      	cmp	r3, #0
 8006216:	d00d      	beq.n	8006234 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006220:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8006224:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006226:	9300      	str	r3, [sp, #0]
 8006228:	4613      	mov	r3, r2
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	68b9      	ldr	r1, [r7, #8]
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f000 f840 	bl	80062b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006234:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8006236:	4618      	mov	r0, r3
 8006238:	3730      	adds	r7, #48	@ 0x30
 800623a:	46bd      	mov	sp, r7
 800623c:	bd80      	pop	{r7, pc}

0800623e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800623e:	b580      	push	{r7, lr}
 8006240:	b08a      	sub	sp, #40	@ 0x28
 8006242:	af02      	add	r7, sp, #8
 8006244:	60f8      	str	r0, [r7, #12]
 8006246:	60b9      	str	r1, [r7, #8]
 8006248:	4613      	mov	r3, r2
 800624a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	2b00      	cmp	r3, #0
 8006250:	d10b      	bne.n	800626a <xQueueGenericCreate+0x2c>
	__asm volatile
 8006252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006256:	f383 8811 	msr	BASEPRI, r3
 800625a:	f3bf 8f6f 	isb	sy
 800625e:	f3bf 8f4f 	dsb	sy
 8006262:	613b      	str	r3, [r7, #16]
}
 8006264:	bf00      	nop
 8006266:	bf00      	nop
 8006268:	e7fd      	b.n	8006266 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	68ba      	ldr	r2, [r7, #8]
 800626e:	fb02 f303 	mul.w	r3, r2, r3
 8006272:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006274:	69fb      	ldr	r3, [r7, #28]
 8006276:	3350      	adds	r3, #80	@ 0x50
 8006278:	4618      	mov	r0, r3
 800627a:	f002 fca7 	bl	8008bcc <pvPortMalloc>
 800627e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d011      	beq.n	80062aa <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8006286:	69bb      	ldr	r3, [r7, #24]
 8006288:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	3350      	adds	r3, #80	@ 0x50
 800628e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006290:	69bb      	ldr	r3, [r7, #24]
 8006292:	2200      	movs	r2, #0
 8006294:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006298:	79fa      	ldrb	r2, [r7, #7]
 800629a:	69bb      	ldr	r3, [r7, #24]
 800629c:	9300      	str	r3, [sp, #0]
 800629e:	4613      	mov	r3, r2
 80062a0:	697a      	ldr	r2, [r7, #20]
 80062a2:	68b9      	ldr	r1, [r7, #8]
 80062a4:	68f8      	ldr	r0, [r7, #12]
 80062a6:	f000 f805 	bl	80062b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062aa:	69bb      	ldr	r3, [r7, #24]
	}
 80062ac:	4618      	mov	r0, r3
 80062ae:	3720      	adds	r7, #32
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
 80062c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d103      	bne.n	80062d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062c8:	69bb      	ldr	r3, [r7, #24]
 80062ca:	69ba      	ldr	r2, [r7, #24]
 80062cc:	601a      	str	r2, [r3, #0]
 80062ce:	e002      	b.n	80062d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062d0:	69bb      	ldr	r3, [r7, #24]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062d6:	69bb      	ldr	r3, [r7, #24]
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062dc:	69bb      	ldr	r3, [r7, #24]
 80062de:	68ba      	ldr	r2, [r7, #8]
 80062e0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062e2:	2101      	movs	r1, #1
 80062e4:	69b8      	ldr	r0, [r7, #24]
 80062e6:	f7ff fec3 	bl	8006070 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80062ea:	69bb      	ldr	r3, [r7, #24]
 80062ec:	78fa      	ldrb	r2, [r7, #3]
 80062ee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80062f2:	bf00      	nop
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}

080062fa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80062fa:	b580      	push	{r7, lr}
 80062fc:	b082      	sub	sp, #8
 80062fe:	af00      	add	r7, sp, #0
 8006300:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00e      	beq.n	8006326 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2200      	movs	r2, #0
 8006318:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800631a:	2300      	movs	r3, #0
 800631c:	2200      	movs	r2, #0
 800631e:	2100      	movs	r1, #0
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 f8a3 	bl	800646c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8006326:	bf00      	nop
 8006328:	3708      	adds	r7, #8
 800632a:	46bd      	mov	sp, r7
 800632c:	bd80      	pop	{r7, pc}

0800632e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800632e:	b580      	push	{r7, lr}
 8006330:	b086      	sub	sp, #24
 8006332:	af00      	add	r7, sp, #0
 8006334:	4603      	mov	r3, r0
 8006336:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006338:	2301      	movs	r3, #1
 800633a:	617b      	str	r3, [r7, #20]
 800633c:	2300      	movs	r3, #0
 800633e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006340:	79fb      	ldrb	r3, [r7, #7]
 8006342:	461a      	mov	r2, r3
 8006344:	6939      	ldr	r1, [r7, #16]
 8006346:	6978      	ldr	r0, [r7, #20]
 8006348:	f7ff ff79 	bl	800623e <xQueueGenericCreate>
 800634c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f7ff ffd3 	bl	80062fa <prvInitialiseMutex>

		return xNewQueue;
 8006354:	68fb      	ldr	r3, [r7, #12]
	}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}

0800635e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800635e:	b580      	push	{r7, lr}
 8006360:	b088      	sub	sp, #32
 8006362:	af02      	add	r7, sp, #8
 8006364:	4603      	mov	r3, r0
 8006366:	6039      	str	r1, [r7, #0]
 8006368:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800636a:	2301      	movs	r3, #1
 800636c:	617b      	str	r3, [r7, #20]
 800636e:	2300      	movs	r3, #0
 8006370:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006372:	79fb      	ldrb	r3, [r7, #7]
 8006374:	9300      	str	r3, [sp, #0]
 8006376:	683b      	ldr	r3, [r7, #0]
 8006378:	2200      	movs	r2, #0
 800637a:	6939      	ldr	r1, [r7, #16]
 800637c:	6978      	ldr	r0, [r7, #20]
 800637e:	f7ff fee1 	bl	8006144 <xQueueGenericCreateStatic>
 8006382:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006384:	68f8      	ldr	r0, [r7, #12]
 8006386:	f7ff ffb8 	bl	80062fa <prvInitialiseMutex>

		return xNewQueue;
 800638a:	68fb      	ldr	r3, [r7, #12]
	}
 800638c:	4618      	mov	r0, r3
 800638e:	3718      	adds	r7, #24
 8006390:	46bd      	mov	sp, r7
 8006392:	bd80      	pop	{r7, pc}

08006394 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8006394:	b590      	push	{r4, r7, lr}
 8006396:	b087      	sub	sp, #28
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80063a0:	693b      	ldr	r3, [r7, #16]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10b      	bne.n	80063be <xQueueGiveMutexRecursive+0x2a>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	60fb      	str	r3, [r7, #12]
}
 80063b8:	bf00      	nop
 80063ba:	bf00      	nop
 80063bc:	e7fd      	b.n	80063ba <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	689c      	ldr	r4, [r3, #8]
 80063c2:	f001 fc2f 	bl	8007c24 <xTaskGetCurrentTaskHandle>
 80063c6:	4603      	mov	r3, r0
 80063c8:	429c      	cmp	r4, r3
 80063ca:	d111      	bne.n	80063f0 <xQueueGiveMutexRecursive+0x5c>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	68db      	ldr	r3, [r3, #12]
 80063d0:	1e5a      	subs	r2, r3, #1
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	2b00      	cmp	r3, #0
 80063dc:	d105      	bne.n	80063ea <xQueueGiveMutexRecursive+0x56>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80063de:	2300      	movs	r3, #0
 80063e0:	2200      	movs	r2, #0
 80063e2:	2100      	movs	r1, #0
 80063e4:	6938      	ldr	r0, [r7, #16]
 80063e6:	f000 f841 	bl	800646c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80063ea:	2301      	movs	r3, #1
 80063ec:	617b      	str	r3, [r7, #20]
 80063ee:	e001      	b.n	80063f4 <xQueueGiveMutexRecursive+0x60>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80063f0:	2300      	movs	r3, #0
 80063f2:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80063f4:	697b      	ldr	r3, [r7, #20]
	}
 80063f6:	4618      	mov	r0, r3
 80063f8:	371c      	adds	r7, #28
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd90      	pop	{r4, r7, pc}

080063fe <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80063fe:	b590      	push	{r4, r7, lr}
 8006400:	b087      	sub	sp, #28
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10b      	bne.n	800642a <xQueueTakeMutexRecursive+0x2c>
	__asm volatile
 8006412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006416:	f383 8811 	msr	BASEPRI, r3
 800641a:	f3bf 8f6f 	isb	sy
 800641e:	f3bf 8f4f 	dsb	sy
 8006422:	60fb      	str	r3, [r7, #12]
}
 8006424:	bf00      	nop
 8006426:	bf00      	nop
 8006428:	e7fd      	b.n	8006426 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800642a:	693b      	ldr	r3, [r7, #16]
 800642c:	689c      	ldr	r4, [r3, #8]
 800642e:	f001 fbf9 	bl	8007c24 <xTaskGetCurrentTaskHandle>
 8006432:	4603      	mov	r3, r0
 8006434:	429c      	cmp	r4, r3
 8006436:	d107      	bne.n	8006448 <xQueueTakeMutexRecursive+0x4a>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	693b      	ldr	r3, [r7, #16]
 8006440:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 8006442:	2301      	movs	r3, #1
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e00c      	b.n	8006462 <xQueueTakeMutexRecursive+0x64>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8006448:	6839      	ldr	r1, [r7, #0]
 800644a:	6938      	ldr	r0, [r7, #16]
 800644c:	f000 fa90 	bl	8006970 <xQueueSemaphoreTake>
 8006450:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <xQueueTakeMutexRecursive+0x64>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	1c5a      	adds	r2, r3, #1
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006462:	697b      	ldr	r3, [r7, #20]
	}
 8006464:	4618      	mov	r0, r3
 8006466:	371c      	adds	r7, #28
 8006468:	46bd      	mov	sp, r7
 800646a:	bd90      	pop	{r4, r7, pc}

0800646c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b08e      	sub	sp, #56	@ 0x38
 8006470:	af00      	add	r7, sp, #0
 8006472:	60f8      	str	r0, [r7, #12]
 8006474:	60b9      	str	r1, [r7, #8]
 8006476:	607a      	str	r2, [r7, #4]
 8006478:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800647a:	2300      	movs	r3, #0
 800647c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006482:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006484:	2b00      	cmp	r3, #0
 8006486:	d10b      	bne.n	80064a0 <xQueueGenericSend+0x34>
	__asm volatile
 8006488:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800648c:	f383 8811 	msr	BASEPRI, r3
 8006490:	f3bf 8f6f 	isb	sy
 8006494:	f3bf 8f4f 	dsb	sy
 8006498:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800649a:	bf00      	nop
 800649c:	bf00      	nop
 800649e:	e7fd      	b.n	800649c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d103      	bne.n	80064ae <xQueueGenericSend+0x42>
 80064a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d101      	bne.n	80064b2 <xQueueGenericSend+0x46>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e000      	b.n	80064b4 <xQueueGenericSend+0x48>
 80064b2:	2300      	movs	r3, #0
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10b      	bne.n	80064d0 <xQueueGenericSend+0x64>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80064ca:	bf00      	nop
 80064cc:	bf00      	nop
 80064ce:	e7fd      	b.n	80064cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2b02      	cmp	r3, #2
 80064d4:	d103      	bne.n	80064de <xQueueGenericSend+0x72>
 80064d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d101      	bne.n	80064e2 <xQueueGenericSend+0x76>
 80064de:	2301      	movs	r3, #1
 80064e0:	e000      	b.n	80064e4 <xQueueGenericSend+0x78>
 80064e2:	2300      	movs	r3, #0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d10b      	bne.n	8006500 <xQueueGenericSend+0x94>
	__asm volatile
 80064e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ec:	f383 8811 	msr	BASEPRI, r3
 80064f0:	f3bf 8f6f 	isb	sy
 80064f4:	f3bf 8f4f 	dsb	sy
 80064f8:	623b      	str	r3, [r7, #32]
}
 80064fa:	bf00      	nop
 80064fc:	bf00      	nop
 80064fe:	e7fd      	b.n	80064fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006500:	f001 fba0 	bl	8007c44 <xTaskGetSchedulerState>
 8006504:	4603      	mov	r3, r0
 8006506:	2b00      	cmp	r3, #0
 8006508:	d102      	bne.n	8006510 <xQueueGenericSend+0xa4>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d101      	bne.n	8006514 <xQueueGenericSend+0xa8>
 8006510:	2301      	movs	r3, #1
 8006512:	e000      	b.n	8006516 <xQueueGenericSend+0xaa>
 8006514:	2300      	movs	r3, #0
 8006516:	2b00      	cmp	r3, #0
 8006518:	d10b      	bne.n	8006532 <xQueueGenericSend+0xc6>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	61fb      	str	r3, [r7, #28]
}
 800652c:	bf00      	nop
 800652e:	bf00      	nop
 8006530:	e7fd      	b.n	800652e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006532:	f002 fa29 	bl	8008988 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006536:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006538:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800653a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800653c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653e:	429a      	cmp	r2, r3
 8006540:	d302      	bcc.n	8006548 <xQueueGenericSend+0xdc>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b02      	cmp	r3, #2
 8006546:	d129      	bne.n	800659c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006548:	683a      	ldr	r2, [r7, #0]
 800654a:	68b9      	ldr	r1, [r7, #8]
 800654c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800654e:	f000 fb37 	bl	8006bc0 <prvCopyDataToQueue>
 8006552:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b00      	cmp	r3, #0
 800655a:	d010      	beq.n	800657e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800655c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800655e:	3324      	adds	r3, #36	@ 0x24
 8006560:	4618      	mov	r0, r3
 8006562:	f001 f935 	bl	80077d0 <xTaskRemoveFromEventList>
 8006566:	4603      	mov	r3, r0
 8006568:	2b00      	cmp	r3, #0
 800656a:	d013      	beq.n	8006594 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800656c:	4b3f      	ldr	r3, [pc, #252]	@ (800666c <xQueueGenericSend+0x200>)
 800656e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006572:	601a      	str	r2, [r3, #0]
 8006574:	f3bf 8f4f 	dsb	sy
 8006578:	f3bf 8f6f 	isb	sy
 800657c:	e00a      	b.n	8006594 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800657e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d007      	beq.n	8006594 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006584:	4b39      	ldr	r3, [pc, #228]	@ (800666c <xQueueGenericSend+0x200>)
 8006586:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800658a:	601a      	str	r2, [r3, #0]
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006594:	f002 fa2a 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 8006598:	2301      	movs	r3, #1
 800659a:	e063      	b.n	8006664 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80065a2:	f002 fa23 	bl	80089ec <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80065a6:	2300      	movs	r3, #0
 80065a8:	e05c      	b.n	8006664 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80065aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d106      	bne.n	80065be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80065b0:	f107 0314 	add.w	r3, r7, #20
 80065b4:	4618      	mov	r0, r3
 80065b6:	f001 f9d3 	bl	8007960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80065ba:	2301      	movs	r3, #1
 80065bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80065be:	f002 fa15 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80065c2:	f000 fe99 	bl	80072f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80065c6:	f002 f9df 	bl	8008988 <vPortEnterCritical>
 80065ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065d0:	b25b      	sxtb	r3, r3
 80065d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065d6:	d103      	bne.n	80065e0 <xQueueGenericSend+0x174>
 80065d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065da:	2200      	movs	r2, #0
 80065dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065e6:	b25b      	sxtb	r3, r3
 80065e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065ec:	d103      	bne.n	80065f6 <xQueueGenericSend+0x18a>
 80065ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f0:	2200      	movs	r2, #0
 80065f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065f6:	f002 f9f9 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80065fa:	1d3a      	adds	r2, r7, #4
 80065fc:	f107 0314 	add.w	r3, r7, #20
 8006600:	4611      	mov	r1, r2
 8006602:	4618      	mov	r0, r3
 8006604:	f001 f9c2 	bl	800798c <xTaskCheckForTimeOut>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d124      	bne.n	8006658 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800660e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006610:	f000 fbce 	bl	8006db0 <prvIsQueueFull>
 8006614:	4603      	mov	r3, r0
 8006616:	2b00      	cmp	r3, #0
 8006618:	d018      	beq.n	800664c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	3310      	adds	r3, #16
 800661e:	687a      	ldr	r2, [r7, #4]
 8006620:	4611      	mov	r1, r2
 8006622:	4618      	mov	r0, r3
 8006624:	f001 f844 	bl	80076b0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006628:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800662a:	f000 fb59 	bl	8006ce0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800662e:	f000 fe71 	bl	8007314 <xTaskResumeAll>
 8006632:	4603      	mov	r3, r0
 8006634:	2b00      	cmp	r3, #0
 8006636:	f47f af7c 	bne.w	8006532 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800663a:	4b0c      	ldr	r3, [pc, #48]	@ (800666c <xQueueGenericSend+0x200>)
 800663c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	f3bf 8f6f 	isb	sy
 800664a:	e772      	b.n	8006532 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800664c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800664e:	f000 fb47 	bl	8006ce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006652:	f000 fe5f 	bl	8007314 <xTaskResumeAll>
 8006656:	e76c      	b.n	8006532 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006658:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800665a:	f000 fb41 	bl	8006ce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800665e:	f000 fe59 	bl	8007314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006662:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006664:	4618      	mov	r0, r3
 8006666:	3738      	adds	r7, #56	@ 0x38
 8006668:	46bd      	mov	sp, r7
 800666a:	bd80      	pop	{r7, pc}
 800666c:	e000ed04 	.word	0xe000ed04

08006670 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b090      	sub	sp, #64	@ 0x40
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
 800667c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10b      	bne.n	80066a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800669a:	bf00      	nop
 800669c:	bf00      	nop
 800669e:	e7fd      	b.n	800669c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d103      	bne.n	80066ae <xQueueGenericSendFromISR+0x3e>
 80066a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <xQueueGenericSendFromISR+0x42>
 80066ae:	2301      	movs	r3, #1
 80066b0:	e000      	b.n	80066b4 <xQueueGenericSendFromISR+0x44>
 80066b2:	2300      	movs	r3, #0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b02      	cmp	r3, #2
 80066d4:	d103      	bne.n	80066de <xQueueGenericSendFromISR+0x6e>
 80066d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066da:	2b01      	cmp	r3, #1
 80066dc:	d101      	bne.n	80066e2 <xQueueGenericSendFromISR+0x72>
 80066de:	2301      	movs	r3, #1
 80066e0:	e000      	b.n	80066e4 <xQueueGenericSendFromISR+0x74>
 80066e2:	2300      	movs	r3, #0
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d10b      	bne.n	8006700 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80066e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066ec:	f383 8811 	msr	BASEPRI, r3
 80066f0:	f3bf 8f6f 	isb	sy
 80066f4:	f3bf 8f4f 	dsb	sy
 80066f8:	623b      	str	r3, [r7, #32]
}
 80066fa:	bf00      	nop
 80066fc:	bf00      	nop
 80066fe:	e7fd      	b.n	80066fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006700:	f002 fa22 	bl	8008b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006704:	f3ef 8211 	mrs	r2, BASEPRI
 8006708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	61fa      	str	r2, [r7, #28]
 800671a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800671c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800671e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006720:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006722:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006724:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006728:	429a      	cmp	r2, r3
 800672a:	d302      	bcc.n	8006732 <xQueueGenericSendFromISR+0xc2>
 800672c:	683b      	ldr	r3, [r7, #0]
 800672e:	2b02      	cmp	r3, #2
 8006730:	d12f      	bne.n	8006792 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006734:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006738:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800673c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800673e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006740:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006742:	683a      	ldr	r2, [r7, #0]
 8006744:	68b9      	ldr	r1, [r7, #8]
 8006746:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006748:	f000 fa3a 	bl	8006bc0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800674c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006750:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006754:	d112      	bne.n	800677c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006758:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800675a:	2b00      	cmp	r3, #0
 800675c:	d016      	beq.n	800678c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800675e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006760:	3324      	adds	r3, #36	@ 0x24
 8006762:	4618      	mov	r0, r3
 8006764:	f001 f834 	bl	80077d0 <xTaskRemoveFromEventList>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d00e      	beq.n	800678c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d00b      	beq.n	800678c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
 800677a:	e007      	b.n	800678c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800677c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006780:	3301      	adds	r3, #1
 8006782:	b2db      	uxtb	r3, r3
 8006784:	b25a      	sxtb	r2, r3
 8006786:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006788:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800678c:	2301      	movs	r3, #1
 800678e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006790:	e001      	b.n	8006796 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006792:	2300      	movs	r3, #0
 8006794:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006798:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80067a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80067a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3740      	adds	r7, #64	@ 0x40
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}

080067ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b08c      	sub	sp, #48	@ 0x30
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80067b8:	2300      	movs	r3, #0
 80067ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80067c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d10b      	bne.n	80067de <xQueueReceive+0x32>
	__asm volatile
 80067c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ca:	f383 8811 	msr	BASEPRI, r3
 80067ce:	f3bf 8f6f 	isb	sy
 80067d2:	f3bf 8f4f 	dsb	sy
 80067d6:	623b      	str	r3, [r7, #32]
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	e7fd      	b.n	80067da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d103      	bne.n	80067ec <xQueueReceive+0x40>
 80067e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <xQueueReceive+0x44>
 80067ec:	2301      	movs	r3, #1
 80067ee:	e000      	b.n	80067f2 <xQueueReceive+0x46>
 80067f0:	2300      	movs	r3, #0
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d10b      	bne.n	800680e <xQueueReceive+0x62>
	__asm volatile
 80067f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067fa:	f383 8811 	msr	BASEPRI, r3
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f3bf 8f4f 	dsb	sy
 8006806:	61fb      	str	r3, [r7, #28]
}
 8006808:	bf00      	nop
 800680a:	bf00      	nop
 800680c:	e7fd      	b.n	800680a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800680e:	f001 fa19 	bl	8007c44 <xTaskGetSchedulerState>
 8006812:	4603      	mov	r3, r0
 8006814:	2b00      	cmp	r3, #0
 8006816:	d102      	bne.n	800681e <xQueueReceive+0x72>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <xQueueReceive+0x76>
 800681e:	2301      	movs	r3, #1
 8006820:	e000      	b.n	8006824 <xQueueReceive+0x78>
 8006822:	2300      	movs	r3, #0
 8006824:	2b00      	cmp	r3, #0
 8006826:	d10b      	bne.n	8006840 <xQueueReceive+0x94>
	__asm volatile
 8006828:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800682c:	f383 8811 	msr	BASEPRI, r3
 8006830:	f3bf 8f6f 	isb	sy
 8006834:	f3bf 8f4f 	dsb	sy
 8006838:	61bb      	str	r3, [r7, #24]
}
 800683a:	bf00      	nop
 800683c:	bf00      	nop
 800683e:	e7fd      	b.n	800683c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006840:	f002 f8a2 	bl	8008988 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006844:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006846:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006848:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800684a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800684c:	2b00      	cmp	r3, #0
 800684e:	d01f      	beq.n	8006890 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006850:	68b9      	ldr	r1, [r7, #8]
 8006852:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006854:	f000 fa1e 	bl	8006c94 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800685a:	1e5a      	subs	r2, r3, #1
 800685c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800685e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006860:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d00f      	beq.n	8006888 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006868:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800686a:	3310      	adds	r3, #16
 800686c:	4618      	mov	r0, r3
 800686e:	f000 ffaf 	bl	80077d0 <xTaskRemoveFromEventList>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d007      	beq.n	8006888 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006878:	4b3c      	ldr	r3, [pc, #240]	@ (800696c <xQueueReceive+0x1c0>)
 800687a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	f3bf 8f4f 	dsb	sy
 8006884:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006888:	f002 f8b0 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 800688c:	2301      	movs	r3, #1
 800688e:	e069      	b.n	8006964 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d103      	bne.n	800689e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006896:	f002 f8a9 	bl	80089ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800689a:	2300      	movs	r3, #0
 800689c:	e062      	b.n	8006964 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d106      	bne.n	80068b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80068a4:	f107 0310 	add.w	r3, r7, #16
 80068a8:	4618      	mov	r0, r3
 80068aa:	f001 f859 	bl	8007960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80068ae:	2301      	movs	r3, #1
 80068b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80068b2:	f002 f89b 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80068b6:	f000 fd1f 	bl	80072f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80068ba:	f002 f865 	bl	8008988 <vPortEnterCritical>
 80068be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80068c4:	b25b      	sxtb	r3, r3
 80068c6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068ca:	d103      	bne.n	80068d4 <xQueueReceive+0x128>
 80068cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068ce:	2200      	movs	r2, #0
 80068d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80068da:	b25b      	sxtb	r3, r3
 80068dc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80068e0:	d103      	bne.n	80068ea <xQueueReceive+0x13e>
 80068e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e4:	2200      	movs	r2, #0
 80068e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068ea:	f002 f87f 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80068ee:	1d3a      	adds	r2, r7, #4
 80068f0:	f107 0310 	add.w	r3, r7, #16
 80068f4:	4611      	mov	r1, r2
 80068f6:	4618      	mov	r0, r3
 80068f8:	f001 f848 	bl	800798c <xTaskCheckForTimeOut>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d123      	bne.n	800694a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006902:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006904:	f000 fa3e 	bl	8006d84 <prvIsQueueEmpty>
 8006908:	4603      	mov	r3, r0
 800690a:	2b00      	cmp	r3, #0
 800690c:	d017      	beq.n	800693e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800690e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006910:	3324      	adds	r3, #36	@ 0x24
 8006912:	687a      	ldr	r2, [r7, #4]
 8006914:	4611      	mov	r1, r2
 8006916:	4618      	mov	r0, r3
 8006918:	f000 feca 	bl	80076b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800691c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800691e:	f000 f9df 	bl	8006ce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006922:	f000 fcf7 	bl	8007314 <xTaskResumeAll>
 8006926:	4603      	mov	r3, r0
 8006928:	2b00      	cmp	r3, #0
 800692a:	d189      	bne.n	8006840 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800692c:	4b0f      	ldr	r3, [pc, #60]	@ (800696c <xQueueReceive+0x1c0>)
 800692e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006932:	601a      	str	r2, [r3, #0]
 8006934:	f3bf 8f4f 	dsb	sy
 8006938:	f3bf 8f6f 	isb	sy
 800693c:	e780      	b.n	8006840 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800693e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006940:	f000 f9ce 	bl	8006ce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006944:	f000 fce6 	bl	8007314 <xTaskResumeAll>
 8006948:	e77a      	b.n	8006840 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800694a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800694c:	f000 f9c8 	bl	8006ce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006950:	f000 fce0 	bl	8007314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006954:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006956:	f000 fa15 	bl	8006d84 <prvIsQueueEmpty>
 800695a:	4603      	mov	r3, r0
 800695c:	2b00      	cmp	r3, #0
 800695e:	f43f af6f 	beq.w	8006840 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006962:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006964:	4618      	mov	r0, r3
 8006966:	3730      	adds	r7, #48	@ 0x30
 8006968:	46bd      	mov	sp, r7
 800696a:	bd80      	pop	{r7, pc}
 800696c:	e000ed04 	.word	0xe000ed04

08006970 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b08e      	sub	sp, #56	@ 0x38
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800697a:	2300      	movs	r3, #0
 800697c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006982:	2300      	movs	r3, #0
 8006984:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10b      	bne.n	80069a4 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	623b      	str	r3, [r7, #32]
}
 800699e:	bf00      	nop
 80069a0:	bf00      	nop
 80069a2:	e7fd      	b.n	80069a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80069a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <xQueueSemaphoreTake+0x54>
	__asm volatile
 80069ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b0:	f383 8811 	msr	BASEPRI, r3
 80069b4:	f3bf 8f6f 	isb	sy
 80069b8:	f3bf 8f4f 	dsb	sy
 80069bc:	61fb      	str	r3, [r7, #28]
}
 80069be:	bf00      	nop
 80069c0:	bf00      	nop
 80069c2:	e7fd      	b.n	80069c0 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80069c4:	f001 f93e 	bl	8007c44 <xTaskGetSchedulerState>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d102      	bne.n	80069d4 <xQueueSemaphoreTake+0x64>
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <xQueueSemaphoreTake+0x68>
 80069d4:	2301      	movs	r3, #1
 80069d6:	e000      	b.n	80069da <xQueueSemaphoreTake+0x6a>
 80069d8:	2300      	movs	r3, #0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d10b      	bne.n	80069f6 <xQueueSemaphoreTake+0x86>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	61bb      	str	r3, [r7, #24]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069f6:	f001 ffc7 	bl	8008988 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80069fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80069fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80069fe:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d024      	beq.n	8006a50 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006a08:	1e5a      	subs	r2, r3, #1
 8006a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a0c:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d104      	bne.n	8006a20 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a16:	f001 faa7 	bl	8007f68 <pvTaskIncrementMutexHeldCount>
 8006a1a:	4602      	mov	r2, r0
 8006a1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a1e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006a20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a22:	691b      	ldr	r3, [r3, #16]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00f      	beq.n	8006a48 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006a28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a2a:	3310      	adds	r3, #16
 8006a2c:	4618      	mov	r0, r3
 8006a2e:	f000 fecf 	bl	80077d0 <xTaskRemoveFromEventList>
 8006a32:	4603      	mov	r3, r0
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d007      	beq.n	8006a48 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006a38:	4b54      	ldr	r3, [pc, #336]	@ (8006b8c <xQueueSemaphoreTake+0x21c>)
 8006a3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a3e:	601a      	str	r2, [r3, #0]
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006a48:	f001 ffd0 	bl	80089ec <vPortExitCritical>
				return pdPASS;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	e098      	b.n	8006b82 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d112      	bne.n	8006a7c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d00b      	beq.n	8006a74 <xQueueSemaphoreTake+0x104>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	617b      	str	r3, [r7, #20]
}
 8006a6e:	bf00      	nop
 8006a70:	bf00      	nop
 8006a72:	e7fd      	b.n	8006a70 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006a74:	f001 ffba 	bl	80089ec <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006a78:	2300      	movs	r3, #0
 8006a7a:	e082      	b.n	8006b82 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d106      	bne.n	8006a90 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a82:	f107 030c 	add.w	r3, r7, #12
 8006a86:	4618      	mov	r0, r3
 8006a88:	f000 ff6a 	bl	8007960 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a90:	f001 ffac 	bl	80089ec <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a94:	f000 fc30 	bl	80072f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a98:	f001 ff76 	bl	8008988 <vPortEnterCritical>
 8006a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006aa2:	b25b      	sxtb	r3, r3
 8006aa4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006aa8:	d103      	bne.n	8006ab2 <xQueueSemaphoreTake+0x142>
 8006aaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aac:	2200      	movs	r2, #0
 8006aae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ab2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ab4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006ab8:	b25b      	sxtb	r3, r3
 8006aba:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006abe:	d103      	bne.n	8006ac8 <xQueueSemaphoreTake+0x158>
 8006ac0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006ac8:	f001 ff90 	bl	80089ec <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006acc:	463a      	mov	r2, r7
 8006ace:	f107 030c 	add.w	r3, r7, #12
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f000 ff59 	bl	800798c <xTaskCheckForTimeOut>
 8006ada:	4603      	mov	r3, r0
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d132      	bne.n	8006b46 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ae0:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006ae2:	f000 f94f 	bl	8006d84 <prvIsQueueEmpty>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d026      	beq.n	8006b3a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006aec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d109      	bne.n	8006b08 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 8006af4:	f001 ff48 	bl	8008988 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006af8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	4618      	mov	r0, r3
 8006afe:	f001 f8bf 	bl	8007c80 <xTaskPriorityInherit>
 8006b02:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 8006b04:	f001 ff72 	bl	80089ec <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b08:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b0a:	3324      	adds	r3, #36	@ 0x24
 8006b0c:	683a      	ldr	r2, [r7, #0]
 8006b0e:	4611      	mov	r1, r2
 8006b10:	4618      	mov	r0, r3
 8006b12:	f000 fdcd 	bl	80076b0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b16:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b18:	f000 f8e2 	bl	8006ce0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006b1c:	f000 fbfa 	bl	8007314 <xTaskResumeAll>
 8006b20:	4603      	mov	r3, r0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	f47f af67 	bne.w	80069f6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 8006b28:	4b18      	ldr	r3, [pc, #96]	@ (8006b8c <xQueueSemaphoreTake+0x21c>)
 8006b2a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006b2e:	601a      	str	r2, [r3, #0]
 8006b30:	f3bf 8f4f 	dsb	sy
 8006b34:	f3bf 8f6f 	isb	sy
 8006b38:	e75d      	b.n	80069f6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006b3a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b3c:	f000 f8d0 	bl	8006ce0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006b40:	f000 fbe8 	bl	8007314 <xTaskResumeAll>
 8006b44:	e757      	b.n	80069f6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006b46:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b48:	f000 f8ca 	bl	8006ce0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006b4c:	f000 fbe2 	bl	8007314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b50:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b52:	f000 f917 	bl	8006d84 <prvIsQueueEmpty>
 8006b56:	4603      	mov	r3, r0
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f43f af4c 	beq.w	80069f6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00d      	beq.n	8006b80 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 8006b64:	f001 ff10 	bl	8008988 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006b68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006b6a:	f000 f811 	bl	8006b90 <prvGetDisinheritPriorityAfterTimeout>
 8006b6e:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006b70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006b76:	4618      	mov	r0, r3
 8006b78:	f001 f95a 	bl	8007e30 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006b7c:	f001 ff36 	bl	80089ec <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006b80:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3738      	adds	r7, #56	@ 0x38
 8006b86:	46bd      	mov	sp, r7
 8006b88:	bd80      	pop	{r7, pc}
 8006b8a:	bf00      	nop
 8006b8c:	e000ed04 	.word	0xe000ed04

08006b90 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006b90:	b480      	push	{r7}
 8006b92:	b085      	sub	sp, #20
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d006      	beq.n	8006bae <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 8006baa:	60fb      	str	r3, [r7, #12]
 8006bac:	e001      	b.n	8006bb2 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
	}
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	3714      	adds	r7, #20
 8006bb8:	46bd      	mov	sp, r7
 8006bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bbe:	4770      	bx	lr

08006bc0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b086      	sub	sp, #24
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	60f8      	str	r0, [r7, #12]
 8006bc8:	60b9      	str	r1, [r7, #8]
 8006bca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006bcc:	2300      	movs	r3, #0
 8006bce:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d10d      	bne.n	8006bfa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d14d      	bne.n	8006c82 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	4618      	mov	r0, r3
 8006bec:	f001 f8b0 	bl	8007d50 <xTaskPriorityDisinherit>
 8006bf0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	609a      	str	r2, [r3, #8]
 8006bf8:	e043      	b.n	8006c82 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d119      	bne.n	8006c34 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6858      	ldr	r0, [r3, #4]
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c08:	461a      	mov	r2, r3
 8006c0a:	68b9      	ldr	r1, [r7, #8]
 8006c0c:	f006 f905 	bl	800ce1a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c18:	441a      	add	r2, r3
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	685a      	ldr	r2, [r3, #4]
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d32b      	bcc.n	8006c82 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681a      	ldr	r2, [r3, #0]
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	605a      	str	r2, [r3, #4]
 8006c32:	e026      	b.n	8006c82 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	68d8      	ldr	r0, [r3, #12]
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	68b9      	ldr	r1, [r7, #8]
 8006c40:	f006 f8eb 	bl	800ce1a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	68da      	ldr	r2, [r3, #12]
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c4c:	425b      	negs	r3, r3
 8006c4e:	441a      	add	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	429a      	cmp	r2, r3
 8006c5e:	d207      	bcs.n	8006c70 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	689a      	ldr	r2, [r3, #8]
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c68:	425b      	negs	r3, r3
 8006c6a:	441a      	add	r2, r3
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b02      	cmp	r3, #2
 8006c74:	d105      	bne.n	8006c82 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d002      	beq.n	8006c82 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	3b01      	subs	r3, #1
 8006c80:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006c82:	693b      	ldr	r3, [r7, #16]
 8006c84:	1c5a      	adds	r2, r3, #1
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006c8a:	697b      	ldr	r3, [r7, #20]
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3718      	adds	r7, #24
 8006c90:	46bd      	mov	sp, r7
 8006c92:	bd80      	pop	{r7, pc}

08006c94 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	b082      	sub	sp, #8
 8006c98:	af00      	add	r7, sp, #0
 8006c9a:	6078      	str	r0, [r7, #4]
 8006c9c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d018      	beq.n	8006cd8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	68da      	ldr	r2, [r3, #12]
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cae:	441a      	add	r2, r3
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	429a      	cmp	r2, r3
 8006cbe:	d303      	bcc.n	8006cc8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	68d9      	ldr	r1, [r3, #12]
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006cd0:	461a      	mov	r2, r3
 8006cd2:	6838      	ldr	r0, [r7, #0]
 8006cd4:	f006 f8a1 	bl	800ce1a <memcpy>
	}
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b084      	sub	sp, #16
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006ce8:	f001 fe4e 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006cf2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006cf4:	e011      	b.n	8006d1a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d012      	beq.n	8006d24 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3324      	adds	r3, #36	@ 0x24
 8006d02:	4618      	mov	r0, r3
 8006d04:	f000 fd64 	bl	80077d0 <xTaskRemoveFromEventList>
 8006d08:	4603      	mov	r3, r0
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d001      	beq.n	8006d12 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006d0e:	f000 fea1 	bl	8007a54 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006d12:	7bfb      	ldrb	r3, [r7, #15]
 8006d14:	3b01      	subs	r3, #1
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006d1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	dce9      	bgt.n	8006cf6 <prvUnlockQueue+0x16>
 8006d22:	e000      	b.n	8006d26 <prvUnlockQueue+0x46>
					break;
 8006d24:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	22ff      	movs	r2, #255	@ 0xff
 8006d2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006d2e:	f001 fe5d 	bl	80089ec <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006d32:	f001 fe29 	bl	8008988 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006d3c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d3e:	e011      	b.n	8006d64 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	691b      	ldr	r3, [r3, #16]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d012      	beq.n	8006d6e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3310      	adds	r3, #16
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f000 fd3f 	bl	80077d0 <xTaskRemoveFromEventList>
 8006d52:	4603      	mov	r3, r0
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d001      	beq.n	8006d5c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006d58:	f000 fe7c 	bl	8007a54 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006d5c:	7bbb      	ldrb	r3, [r7, #14]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	b2db      	uxtb	r3, r3
 8006d62:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006d64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	dce9      	bgt.n	8006d40 <prvUnlockQueue+0x60>
 8006d6c:	e000      	b.n	8006d70 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006d6e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	22ff      	movs	r2, #255	@ 0xff
 8006d74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006d78:	f001 fe38 	bl	80089ec <vPortExitCritical>
}
 8006d7c:	bf00      	nop
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006d8c:	f001 fdfc 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	60fb      	str	r3, [r7, #12]
 8006d9c:	e001      	b.n	8006da2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006da2:	f001 fe23 	bl	80089ec <vPortExitCritical>

	return xReturn;
 8006da6:	68fb      	ldr	r3, [r7, #12]
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3710      	adds	r7, #16
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bd80      	pop	{r7, pc}

08006db0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006db8:	f001 fde6 	bl	8008988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d102      	bne.n	8006dce <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006dc8:	2301      	movs	r3, #1
 8006dca:	60fb      	str	r3, [r7, #12]
 8006dcc:	e001      	b.n	8006dd2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006dd2:	f001 fe0b 	bl	80089ec <vPortExitCritical>

	return xReturn;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3710      	adds	r7, #16
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006de0:	b480      	push	{r7}
 8006de2:	b085      	sub	sp, #20
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006dea:	2300      	movs	r3, #0
 8006dec:	60fb      	str	r3, [r7, #12]
 8006dee:	e014      	b.n	8006e1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006df0:	4a0f      	ldr	r2, [pc, #60]	@ (8006e30 <vQueueAddToRegistry+0x50>)
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d10b      	bne.n	8006e14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006dfc:	490c      	ldr	r1, [pc, #48]	@ (8006e30 <vQueueAddToRegistry+0x50>)
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	683a      	ldr	r2, [r7, #0]
 8006e02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8006e06:	4a0a      	ldr	r2, [pc, #40]	@ (8006e30 <vQueueAddToRegistry+0x50>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006e12:	e006      	b.n	8006e22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	3301      	adds	r3, #1
 8006e18:	60fb      	str	r3, [r7, #12]
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	2b07      	cmp	r3, #7
 8006e1e:	d9e7      	bls.n	8006df0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006e20:	bf00      	nop
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	2000680c 	.word	0x2000680c

08006e34 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006e44:	f001 fda0 	bl	8008988 <vPortEnterCritical>
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006e4e:	b25b      	sxtb	r3, r3
 8006e50:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e54:	d103      	bne.n	8006e5e <vQueueWaitForMessageRestricted+0x2a>
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006e64:	b25b      	sxtb	r3, r3
 8006e66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006e6a:	d103      	bne.n	8006e74 <vQueueWaitForMessageRestricted+0x40>
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006e74:	f001 fdba 	bl	80089ec <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006e78:	697b      	ldr	r3, [r7, #20]
 8006e7a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d106      	bne.n	8006e8e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	3324      	adds	r3, #36	@ 0x24
 8006e84:	687a      	ldr	r2, [r7, #4]
 8006e86:	68b9      	ldr	r1, [r7, #8]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 fc75 	bl	8007778 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006e8e:	6978      	ldr	r0, [r7, #20]
 8006e90:	f7ff ff26 	bl	8006ce0 <prvUnlockQueue>
	}
 8006e94:	bf00      	nop
 8006e96:	3718      	adds	r7, #24
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b08e      	sub	sp, #56	@ 0x38
 8006ea0:	af04      	add	r7, sp, #16
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]
 8006ea8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d10b      	bne.n	8006ec8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	623b      	str	r3, [r7, #32]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006ec8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d10b      	bne.n	8006ee6 <xTaskCreateStatic+0x4a>
	__asm volatile
 8006ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed2:	f383 8811 	msr	BASEPRI, r3
 8006ed6:	f3bf 8f6f 	isb	sy
 8006eda:	f3bf 8f4f 	dsb	sy
 8006ede:	61fb      	str	r3, [r7, #28]
}
 8006ee0:	bf00      	nop
 8006ee2:	bf00      	nop
 8006ee4:	e7fd      	b.n	8006ee2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006ee6:	23a8      	movs	r3, #168	@ 0xa8
 8006ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2ba8      	cmp	r3, #168	@ 0xa8
 8006eee:	d00b      	beq.n	8006f08 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	61bb      	str	r3, [r7, #24]
}
 8006f02:	bf00      	nop
 8006f04:	bf00      	nop
 8006f06:	e7fd      	b.n	8006f04 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006f08:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01e      	beq.n	8006f4e <xTaskCreateStatic+0xb2>
 8006f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d01b      	beq.n	8006f4e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f1c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006f1e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2202      	movs	r2, #2
 8006f24:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006f28:	2300      	movs	r3, #0
 8006f2a:	9303      	str	r3, [sp, #12]
 8006f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f2e:	9302      	str	r3, [sp, #8]
 8006f30:	f107 0314 	add.w	r3, r7, #20
 8006f34:	9301      	str	r3, [sp, #4]
 8006f36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f38:	9300      	str	r3, [sp, #0]
 8006f3a:	683b      	ldr	r3, [r7, #0]
 8006f3c:	687a      	ldr	r2, [r7, #4]
 8006f3e:	68b9      	ldr	r1, [r7, #8]
 8006f40:	68f8      	ldr	r0, [r7, #12]
 8006f42:	f000 f851 	bl	8006fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006f46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006f48:	f000 f8f6 	bl	8007138 <prvAddNewTaskToReadyList>
 8006f4c:	e001      	b.n	8006f52 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006f4e:	2300      	movs	r3, #0
 8006f50:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006f52:	697b      	ldr	r3, [r7, #20]
	}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3728      	adds	r7, #40	@ 0x28
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b08c      	sub	sp, #48	@ 0x30
 8006f60:	af04      	add	r7, sp, #16
 8006f62:	60f8      	str	r0, [r7, #12]
 8006f64:	60b9      	str	r1, [r7, #8]
 8006f66:	603b      	str	r3, [r7, #0]
 8006f68:	4613      	mov	r3, r2
 8006f6a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006f6c:	88fb      	ldrh	r3, [r7, #6]
 8006f6e:	009b      	lsls	r3, r3, #2
 8006f70:	4618      	mov	r0, r3
 8006f72:	f001 fe2b 	bl	8008bcc <pvPortMalloc>
 8006f76:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d00e      	beq.n	8006f9c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006f7e:	20a8      	movs	r0, #168	@ 0xa8
 8006f80:	f001 fe24 	bl	8008bcc <pvPortMalloc>
 8006f84:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006f86:	69fb      	ldr	r3, [r7, #28]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d003      	beq.n	8006f94 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	697a      	ldr	r2, [r7, #20]
 8006f90:	631a      	str	r2, [r3, #48]	@ 0x30
 8006f92:	e005      	b.n	8006fa0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006f94:	6978      	ldr	r0, [r7, #20]
 8006f96:	f001 fee7 	bl	8008d68 <vPortFree>
 8006f9a:	e001      	b.n	8006fa0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006fa0:	69fb      	ldr	r3, [r7, #28]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d017      	beq.n	8006fd6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006fa6:	69fb      	ldr	r3, [r7, #28]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006fae:	88fa      	ldrh	r2, [r7, #6]
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	9303      	str	r3, [sp, #12]
 8006fb4:	69fb      	ldr	r3, [r7, #28]
 8006fb6:	9302      	str	r3, [sp, #8]
 8006fb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fbe:	9300      	str	r3, [sp, #0]
 8006fc0:	683b      	ldr	r3, [r7, #0]
 8006fc2:	68b9      	ldr	r1, [r7, #8]
 8006fc4:	68f8      	ldr	r0, [r7, #12]
 8006fc6:	f000 f80f 	bl	8006fe8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006fca:	69f8      	ldr	r0, [r7, #28]
 8006fcc:	f000 f8b4 	bl	8007138 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	61bb      	str	r3, [r7, #24]
 8006fd4:	e002      	b.n	8006fdc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006fda:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006fdc:	69bb      	ldr	r3, [r7, #24]
	}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3720      	adds	r7, #32
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b088      	sub	sp, #32
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	60f8      	str	r0, [r7, #12]
 8006ff0:	60b9      	str	r1, [r7, #8]
 8006ff2:	607a      	str	r2, [r7, #4]
 8006ff4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ff8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	009b      	lsls	r3, r3, #2
 8006ffe:	461a      	mov	r2, r3
 8007000:	21a5      	movs	r1, #165	@ 0xa5
 8007002:	f005 fe2c 	bl	800cc5e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007010:	3b01      	subs	r3, #1
 8007012:	009b      	lsls	r3, r3, #2
 8007014:	4413      	add	r3, r2
 8007016:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007018:	69bb      	ldr	r3, [r7, #24]
 800701a:	f023 0307 	bic.w	r3, r3, #7
 800701e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	f003 0307 	and.w	r3, r3, #7
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00b      	beq.n	8007042 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800702a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800702e:	f383 8811 	msr	BASEPRI, r3
 8007032:	f3bf 8f6f 	isb	sy
 8007036:	f3bf 8f4f 	dsb	sy
 800703a:	617b      	str	r3, [r7, #20]
}
 800703c:	bf00      	nop
 800703e:	bf00      	nop
 8007040:	e7fd      	b.n	800703e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8007042:	68bb      	ldr	r3, [r7, #8]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d01f      	beq.n	8007088 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007048:	2300      	movs	r3, #0
 800704a:	61fb      	str	r3, [r7, #28]
 800704c:	e012      	b.n	8007074 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	4413      	add	r3, r2
 8007054:	7819      	ldrb	r1, [r3, #0]
 8007056:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	4413      	add	r3, r2
 800705c:	3334      	adds	r3, #52	@ 0x34
 800705e:	460a      	mov	r2, r1
 8007060:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8007062:	68ba      	ldr	r2, [r7, #8]
 8007064:	69fb      	ldr	r3, [r7, #28]
 8007066:	4413      	add	r3, r2
 8007068:	781b      	ldrb	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d006      	beq.n	800707c <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	3301      	adds	r3, #1
 8007072:	61fb      	str	r3, [r7, #28]
 8007074:	69fb      	ldr	r3, [r7, #28]
 8007076:	2b0f      	cmp	r3, #15
 8007078:	d9e9      	bls.n	800704e <prvInitialiseNewTask+0x66>
 800707a:	e000      	b.n	800707e <prvInitialiseNewTask+0x96>
			{
				break;
 800707c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800707e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007086:	e003      	b.n	8007090 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007088:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800708a:	2200      	movs	r2, #0
 800708c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007090:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007092:	2b37      	cmp	r3, #55	@ 0x37
 8007094:	d901      	bls.n	800709a <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007096:	2337      	movs	r3, #55	@ 0x37
 8007098:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800709a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800709c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800709e:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80070a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80070a4:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80070a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070a8:	2200      	movs	r2, #0
 80070aa:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80070ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ae:	3304      	adds	r3, #4
 80070b0:	4618      	mov	r0, r3
 80070b2:	f7fe ff49 	bl	8005f48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80070b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070b8:	3318      	adds	r3, #24
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe ff44 	bl	8005f48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80070c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80070cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80070d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070d4:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80070d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070d8:	2200      	movs	r2, #0
 80070da:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80070de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e0:	2200      	movs	r2, #0
 80070e2:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80070e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070e8:	3354      	adds	r3, #84	@ 0x54
 80070ea:	224c      	movs	r2, #76	@ 0x4c
 80070ec:	2100      	movs	r1, #0
 80070ee:	4618      	mov	r0, r3
 80070f0:	f005 fdb5 	bl	800cc5e <memset>
 80070f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070f6:	4a0d      	ldr	r2, [pc, #52]	@ (800712c <prvInitialiseNewTask+0x144>)
 80070f8:	659a      	str	r2, [r3, #88]	@ 0x58
 80070fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80070fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007130 <prvInitialiseNewTask+0x148>)
 80070fe:	65da      	str	r2, [r3, #92]	@ 0x5c
 8007100:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007102:	4a0c      	ldr	r2, [pc, #48]	@ (8007134 <prvInitialiseNewTask+0x14c>)
 8007104:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007106:	683a      	ldr	r2, [r7, #0]
 8007108:	68f9      	ldr	r1, [r7, #12]
 800710a:	69b8      	ldr	r0, [r7, #24]
 800710c:	f001 fb0e 	bl	800872c <pxPortInitialiseStack>
 8007110:	4602      	mov	r2, r0
 8007112:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007116:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007118:	2b00      	cmp	r3, #0
 800711a:	d002      	beq.n	8007122 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800711c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800711e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007122:	bf00      	nop
 8007124:	3720      	adds	r7, #32
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	2000aaf4 	.word	0x2000aaf4
 8007130:	2000ab5c 	.word	0x2000ab5c
 8007134:	2000abc4 	.word	0x2000abc4

08007138 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af00      	add	r7, sp, #0
 800713e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007140:	f001 fc22 	bl	8008988 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007144:	4b2d      	ldr	r3, [pc, #180]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3301      	adds	r3, #1
 800714a:	4a2c      	ldr	r2, [pc, #176]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 800714c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800714e:	4b2c      	ldr	r3, [pc, #176]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d109      	bne.n	800716a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007156:	4a2a      	ldr	r2, [pc, #168]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800715c:	4b27      	ldr	r3, [pc, #156]	@ (80071fc <prvAddNewTaskToReadyList+0xc4>)
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	2b01      	cmp	r3, #1
 8007162:	d110      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007164:	f000 fc9a 	bl	8007a9c <prvInitialiseTaskLists>
 8007168:	e00d      	b.n	8007186 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800716a:	4b26      	ldr	r3, [pc, #152]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d109      	bne.n	8007186 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007172:	4b23      	ldr	r3, [pc, #140]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800717c:	429a      	cmp	r2, r3
 800717e:	d802      	bhi.n	8007186 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007180:	4a1f      	ldr	r2, [pc, #124]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007186:	4b20      	ldr	r3, [pc, #128]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3301      	adds	r3, #1
 800718c:	4a1e      	ldr	r2, [pc, #120]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 800718e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007190:	4b1d      	ldr	r3, [pc, #116]	@ (8007208 <prvAddNewTaskToReadyList+0xd0>)
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800719c:	4b1b      	ldr	r3, [pc, #108]	@ (800720c <prvAddNewTaskToReadyList+0xd4>)
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	429a      	cmp	r2, r3
 80071a2:	d903      	bls.n	80071ac <prvAddNewTaskToReadyList+0x74>
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a8:	4a18      	ldr	r2, [pc, #96]	@ (800720c <prvAddNewTaskToReadyList+0xd4>)
 80071aa:	6013      	str	r3, [r2, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071b0:	4613      	mov	r3, r2
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	4413      	add	r3, r2
 80071b6:	009b      	lsls	r3, r3, #2
 80071b8:	4a15      	ldr	r2, [pc, #84]	@ (8007210 <prvAddNewTaskToReadyList+0xd8>)
 80071ba:	441a      	add	r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	3304      	adds	r3, #4
 80071c0:	4619      	mov	r1, r3
 80071c2:	4610      	mov	r0, r2
 80071c4:	f7fe fecd 	bl	8005f62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80071c8:	f001 fc10 	bl	80089ec <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80071cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007204 <prvAddNewTaskToReadyList+0xcc>)
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d00e      	beq.n	80071f2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80071d4:	4b0a      	ldr	r3, [pc, #40]	@ (8007200 <prvAddNewTaskToReadyList+0xc8>)
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071de:	429a      	cmp	r2, r3
 80071e0:	d207      	bcs.n	80071f2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80071e2:	4b0c      	ldr	r3, [pc, #48]	@ (8007214 <prvAddNewTaskToReadyList+0xdc>)
 80071e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071e8:	601a      	str	r2, [r3, #0]
 80071ea:	f3bf 8f4f 	dsb	sy
 80071ee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071f2:	bf00      	nop
 80071f4:	3708      	adds	r7, #8
 80071f6:	46bd      	mov	sp, r7
 80071f8:	bd80      	pop	{r7, pc}
 80071fa:	bf00      	nop
 80071fc:	20006d20 	.word	0x20006d20
 8007200:	2000684c 	.word	0x2000684c
 8007204:	20006d2c 	.word	0x20006d2c
 8007208:	20006d3c 	.word	0x20006d3c
 800720c:	20006d28 	.word	0x20006d28
 8007210:	20006850 	.word	0x20006850
 8007214:	e000ed04 	.word	0xe000ed04

08007218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b08a      	sub	sp, #40	@ 0x28
 800721c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800721e:	2300      	movs	r3, #0
 8007220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007222:	2300      	movs	r3, #0
 8007224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007226:	463a      	mov	r2, r7
 8007228:	1d39      	adds	r1, r7, #4
 800722a:	f107 0308 	add.w	r3, r7, #8
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fc40 	bl	8005ab4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	68ba      	ldr	r2, [r7, #8]
 800723a:	9202      	str	r2, [sp, #8]
 800723c:	9301      	str	r3, [sp, #4]
 800723e:	2300      	movs	r3, #0
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	2300      	movs	r3, #0
 8007244:	460a      	mov	r2, r1
 8007246:	4924      	ldr	r1, [pc, #144]	@ (80072d8 <vTaskStartScheduler+0xc0>)
 8007248:	4824      	ldr	r0, [pc, #144]	@ (80072dc <vTaskStartScheduler+0xc4>)
 800724a:	f7ff fe27 	bl	8006e9c <xTaskCreateStatic>
 800724e:	4603      	mov	r3, r0
 8007250:	4a23      	ldr	r2, [pc, #140]	@ (80072e0 <vTaskStartScheduler+0xc8>)
 8007252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007254:	4b22      	ldr	r3, [pc, #136]	@ (80072e0 <vTaskStartScheduler+0xc8>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	2b00      	cmp	r3, #0
 800725a:	d002      	beq.n	8007262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800725c:	2301      	movs	r3, #1
 800725e:	617b      	str	r3, [r7, #20]
 8007260:	e001      	b.n	8007266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007262:	2300      	movs	r3, #0
 8007264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007266:	697b      	ldr	r3, [r7, #20]
 8007268:	2b01      	cmp	r3, #1
 800726a:	d102      	bne.n	8007272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800726c:	f000 fee4 	bl	8008038 <xTimerCreateTimerTask>
 8007270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	2b01      	cmp	r3, #1
 8007276:	d11b      	bne.n	80072b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8007278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727c:	f383 8811 	msr	BASEPRI, r3
 8007280:	f3bf 8f6f 	isb	sy
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	613b      	str	r3, [r7, #16]
}
 800728a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800728c:	4b15      	ldr	r3, [pc, #84]	@ (80072e4 <vTaskStartScheduler+0xcc>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	3354      	adds	r3, #84	@ 0x54
 8007292:	4a15      	ldr	r2, [pc, #84]	@ (80072e8 <vTaskStartScheduler+0xd0>)
 8007294:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007296:	4b15      	ldr	r3, [pc, #84]	@ (80072ec <vTaskStartScheduler+0xd4>)
 8007298:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800729c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800729e:	4b14      	ldr	r3, [pc, #80]	@ (80072f0 <vTaskStartScheduler+0xd8>)
 80072a0:	2201      	movs	r2, #1
 80072a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80072a4:	4b13      	ldr	r3, [pc, #76]	@ (80072f4 <vTaskStartScheduler+0xdc>)
 80072a6:	2200      	movs	r2, #0
 80072a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80072aa:	f001 fac9 	bl	8008840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80072ae:	e00f      	b.n	80072d0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80072b6:	d10b      	bne.n	80072d0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80072b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072bc:	f383 8811 	msr	BASEPRI, r3
 80072c0:	f3bf 8f6f 	isb	sy
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	60fb      	str	r3, [r7, #12]
}
 80072ca:	bf00      	nop
 80072cc:	bf00      	nop
 80072ce:	e7fd      	b.n	80072cc <vTaskStartScheduler+0xb4>
}
 80072d0:	bf00      	nop
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	0801041c 	.word	0x0801041c
 80072dc:	08007a6d 	.word	0x08007a6d
 80072e0:	20006d44 	.word	0x20006d44
 80072e4:	2000684c 	.word	0x2000684c
 80072e8:	20000424 	.word	0x20000424
 80072ec:	20006d40 	.word	0x20006d40
 80072f0:	20006d2c 	.word	0x20006d2c
 80072f4:	20006d24 	.word	0x20006d24

080072f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80072f8:	b480      	push	{r7}
 80072fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80072fc:	4b04      	ldr	r3, [pc, #16]	@ (8007310 <vTaskSuspendAll+0x18>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	3301      	adds	r3, #1
 8007302:	4a03      	ldr	r2, [pc, #12]	@ (8007310 <vTaskSuspendAll+0x18>)
 8007304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007306:	bf00      	nop
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr
 8007310:	20006d48 	.word	0x20006d48

08007314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800731a:	2300      	movs	r3, #0
 800731c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007322:	4b42      	ldr	r3, [pc, #264]	@ (800742c <xTaskResumeAll+0x118>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	2b00      	cmp	r3, #0
 8007328:	d10b      	bne.n	8007342 <xTaskResumeAll+0x2e>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	603b      	str	r3, [r7, #0]
}
 800733c:	bf00      	nop
 800733e:	bf00      	nop
 8007340:	e7fd      	b.n	800733e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007342:	f001 fb21 	bl	8008988 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007346:	4b39      	ldr	r3, [pc, #228]	@ (800742c <xTaskResumeAll+0x118>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	3b01      	subs	r3, #1
 800734c:	4a37      	ldr	r2, [pc, #220]	@ (800742c <xTaskResumeAll+0x118>)
 800734e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007350:	4b36      	ldr	r3, [pc, #216]	@ (800742c <xTaskResumeAll+0x118>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2b00      	cmp	r3, #0
 8007356:	d162      	bne.n	800741e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007358:	4b35      	ldr	r3, [pc, #212]	@ (8007430 <xTaskResumeAll+0x11c>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d05e      	beq.n	800741e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007360:	e02f      	b.n	80073c2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007362:	4b34      	ldr	r3, [pc, #208]	@ (8007434 <xTaskResumeAll+0x120>)
 8007364:	68db      	ldr	r3, [r3, #12]
 8007366:	68db      	ldr	r3, [r3, #12]
 8007368:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	3318      	adds	r3, #24
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fe54 	bl	800601c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	3304      	adds	r3, #4
 8007378:	4618      	mov	r0, r3
 800737a:	f7fe fe4f 	bl	800601c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007382:	4b2d      	ldr	r3, [pc, #180]	@ (8007438 <xTaskResumeAll+0x124>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	429a      	cmp	r2, r3
 8007388:	d903      	bls.n	8007392 <xTaskResumeAll+0x7e>
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738e:	4a2a      	ldr	r2, [pc, #168]	@ (8007438 <xTaskResumeAll+0x124>)
 8007390:	6013      	str	r3, [r2, #0]
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007396:	4613      	mov	r3, r2
 8007398:	009b      	lsls	r3, r3, #2
 800739a:	4413      	add	r3, r2
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4a27      	ldr	r2, [pc, #156]	@ (800743c <xTaskResumeAll+0x128>)
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	3304      	adds	r3, #4
 80073a6:	4619      	mov	r1, r3
 80073a8:	4610      	mov	r0, r2
 80073aa:	f7fe fdda 	bl	8005f62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073b2:	4b23      	ldr	r3, [pc, #140]	@ (8007440 <xTaskResumeAll+0x12c>)
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d302      	bcc.n	80073c2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80073bc:	4b21      	ldr	r3, [pc, #132]	@ (8007444 <xTaskResumeAll+0x130>)
 80073be:	2201      	movs	r2, #1
 80073c0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80073c2:	4b1c      	ldr	r3, [pc, #112]	@ (8007434 <xTaskResumeAll+0x120>)
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1cb      	bne.n	8007362 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d001      	beq.n	80073d4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80073d0:	f000 fc08 	bl	8007be4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80073d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007448 <xTaskResumeAll+0x134>)
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d010      	beq.n	8007402 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80073e0:	f000 f846 	bl	8007470 <xTaskIncrementTick>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d002      	beq.n	80073f0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80073ea:	4b16      	ldr	r3, [pc, #88]	@ (8007444 <xTaskResumeAll+0x130>)
 80073ec:	2201      	movs	r2, #1
 80073ee:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	3b01      	subs	r3, #1
 80073f4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f1      	bne.n	80073e0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80073fc:	4b12      	ldr	r3, [pc, #72]	@ (8007448 <xTaskResumeAll+0x134>)
 80073fe:	2200      	movs	r2, #0
 8007400:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007402:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <xTaskResumeAll+0x130>)
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d009      	beq.n	800741e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800740a:	2301      	movs	r3, #1
 800740c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800740e:	4b0f      	ldr	r3, [pc, #60]	@ (800744c <xTaskResumeAll+0x138>)
 8007410:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007414:	601a      	str	r2, [r3, #0]
 8007416:	f3bf 8f4f 	dsb	sy
 800741a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800741e:	f001 fae5 	bl	80089ec <vPortExitCritical>

	return xAlreadyYielded;
 8007422:	68bb      	ldr	r3, [r7, #8]
}
 8007424:	4618      	mov	r0, r3
 8007426:	3710      	adds	r7, #16
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}
 800742c:	20006d48 	.word	0x20006d48
 8007430:	20006d20 	.word	0x20006d20
 8007434:	20006ce0 	.word	0x20006ce0
 8007438:	20006d28 	.word	0x20006d28
 800743c:	20006850 	.word	0x20006850
 8007440:	2000684c 	.word	0x2000684c
 8007444:	20006d34 	.word	0x20006d34
 8007448:	20006d30 	.word	0x20006d30
 800744c:	e000ed04 	.word	0xe000ed04

08007450 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007450:	b480      	push	{r7}
 8007452:	b083      	sub	sp, #12
 8007454:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007456:	4b05      	ldr	r3, [pc, #20]	@ (800746c <xTaskGetTickCount+0x1c>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800745c:	687b      	ldr	r3, [r7, #4]
}
 800745e:	4618      	mov	r0, r3
 8007460:	370c      	adds	r7, #12
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	20006d24 	.word	0x20006d24

08007470 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007476:	2300      	movs	r3, #0
 8007478:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800747a:	4b4f      	ldr	r3, [pc, #316]	@ (80075b8 <xTaskIncrementTick+0x148>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	2b00      	cmp	r3, #0
 8007480:	f040 8090 	bne.w	80075a4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007484:	4b4d      	ldr	r3, [pc, #308]	@ (80075bc <xTaskIncrementTick+0x14c>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	3301      	adds	r3, #1
 800748a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800748c:	4a4b      	ldr	r2, [pc, #300]	@ (80075bc <xTaskIncrementTick+0x14c>)
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007492:	693b      	ldr	r3, [r7, #16]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d121      	bne.n	80074dc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8007498:	4b49      	ldr	r3, [pc, #292]	@ (80075c0 <xTaskIncrementTick+0x150>)
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d00b      	beq.n	80074ba <xTaskIncrementTick+0x4a>
	__asm volatile
 80074a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074a6:	f383 8811 	msr	BASEPRI, r3
 80074aa:	f3bf 8f6f 	isb	sy
 80074ae:	f3bf 8f4f 	dsb	sy
 80074b2:	603b      	str	r3, [r7, #0]
}
 80074b4:	bf00      	nop
 80074b6:	bf00      	nop
 80074b8:	e7fd      	b.n	80074b6 <xTaskIncrementTick+0x46>
 80074ba:	4b41      	ldr	r3, [pc, #260]	@ (80075c0 <xTaskIncrementTick+0x150>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	60fb      	str	r3, [r7, #12]
 80074c0:	4b40      	ldr	r3, [pc, #256]	@ (80075c4 <xTaskIncrementTick+0x154>)
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	4a3e      	ldr	r2, [pc, #248]	@ (80075c0 <xTaskIncrementTick+0x150>)
 80074c6:	6013      	str	r3, [r2, #0]
 80074c8:	4a3e      	ldr	r2, [pc, #248]	@ (80075c4 <xTaskIncrementTick+0x154>)
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	6013      	str	r3, [r2, #0]
 80074ce:	4b3e      	ldr	r3, [pc, #248]	@ (80075c8 <xTaskIncrementTick+0x158>)
 80074d0:	681b      	ldr	r3, [r3, #0]
 80074d2:	3301      	adds	r3, #1
 80074d4:	4a3c      	ldr	r2, [pc, #240]	@ (80075c8 <xTaskIncrementTick+0x158>)
 80074d6:	6013      	str	r3, [r2, #0]
 80074d8:	f000 fb84 	bl	8007be4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80074dc:	4b3b      	ldr	r3, [pc, #236]	@ (80075cc <xTaskIncrementTick+0x15c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d349      	bcc.n	800757a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80074e6:	4b36      	ldr	r3, [pc, #216]	@ (80075c0 <xTaskIncrementTick+0x150>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074f0:	4b36      	ldr	r3, [pc, #216]	@ (80075cc <xTaskIncrementTick+0x15c>)
 80074f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80074f6:	601a      	str	r2, [r3, #0]
					break;
 80074f8:	e03f      	b.n	800757a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80074fa:	4b31      	ldr	r3, [pc, #196]	@ (80075c0 <xTaskIncrementTick+0x150>)
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	68db      	ldr	r3, [r3, #12]
 8007500:	68db      	ldr	r3, [r3, #12]
 8007502:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800750a:	693a      	ldr	r2, [r7, #16]
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	429a      	cmp	r2, r3
 8007510:	d203      	bcs.n	800751a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007512:	4a2e      	ldr	r2, [pc, #184]	@ (80075cc <xTaskIncrementTick+0x15c>)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007518:	e02f      	b.n	800757a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	3304      	adds	r3, #4
 800751e:	4618      	mov	r0, r3
 8007520:	f7fe fd7c 	bl	800601c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007524:	68bb      	ldr	r3, [r7, #8]
 8007526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007528:	2b00      	cmp	r3, #0
 800752a:	d004      	beq.n	8007536 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	3318      	adds	r3, #24
 8007530:	4618      	mov	r0, r3
 8007532:	f7fe fd73 	bl	800601c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800753a:	4b25      	ldr	r3, [pc, #148]	@ (80075d0 <xTaskIncrementTick+0x160>)
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	429a      	cmp	r2, r3
 8007540:	d903      	bls.n	800754a <xTaskIncrementTick+0xda>
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007546:	4a22      	ldr	r2, [pc, #136]	@ (80075d0 <xTaskIncrementTick+0x160>)
 8007548:	6013      	str	r3, [r2, #0]
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800754e:	4613      	mov	r3, r2
 8007550:	009b      	lsls	r3, r3, #2
 8007552:	4413      	add	r3, r2
 8007554:	009b      	lsls	r3, r3, #2
 8007556:	4a1f      	ldr	r2, [pc, #124]	@ (80075d4 <xTaskIncrementTick+0x164>)
 8007558:	441a      	add	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	3304      	adds	r3, #4
 800755e:	4619      	mov	r1, r3
 8007560:	4610      	mov	r0, r2
 8007562:	f7fe fcfe 	bl	8005f62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007566:	68bb      	ldr	r3, [r7, #8]
 8007568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800756a:	4b1b      	ldr	r3, [pc, #108]	@ (80075d8 <xTaskIncrementTick+0x168>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007570:	429a      	cmp	r2, r3
 8007572:	d3b8      	bcc.n	80074e6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007574:	2301      	movs	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007578:	e7b5      	b.n	80074e6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800757a:	4b17      	ldr	r3, [pc, #92]	@ (80075d8 <xTaskIncrementTick+0x168>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007580:	4914      	ldr	r1, [pc, #80]	@ (80075d4 <xTaskIncrementTick+0x164>)
 8007582:	4613      	mov	r3, r2
 8007584:	009b      	lsls	r3, r3, #2
 8007586:	4413      	add	r3, r2
 8007588:	009b      	lsls	r3, r3, #2
 800758a:	440b      	add	r3, r1
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	2b01      	cmp	r3, #1
 8007590:	d901      	bls.n	8007596 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007592:	2301      	movs	r3, #1
 8007594:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007596:	4b11      	ldr	r3, [pc, #68]	@ (80075dc <xTaskIncrementTick+0x16c>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d007      	beq.n	80075ae <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800759e:	2301      	movs	r3, #1
 80075a0:	617b      	str	r3, [r7, #20]
 80075a2:	e004      	b.n	80075ae <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80075a4:	4b0e      	ldr	r3, [pc, #56]	@ (80075e0 <xTaskIncrementTick+0x170>)
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	3301      	adds	r3, #1
 80075aa:	4a0d      	ldr	r2, [pc, #52]	@ (80075e0 <xTaskIncrementTick+0x170>)
 80075ac:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80075ae:	697b      	ldr	r3, [r7, #20]
}
 80075b0:	4618      	mov	r0, r3
 80075b2:	3718      	adds	r7, #24
 80075b4:	46bd      	mov	sp, r7
 80075b6:	bd80      	pop	{r7, pc}
 80075b8:	20006d48 	.word	0x20006d48
 80075bc:	20006d24 	.word	0x20006d24
 80075c0:	20006cd8 	.word	0x20006cd8
 80075c4:	20006cdc 	.word	0x20006cdc
 80075c8:	20006d38 	.word	0x20006d38
 80075cc:	20006d40 	.word	0x20006d40
 80075d0:	20006d28 	.word	0x20006d28
 80075d4:	20006850 	.word	0x20006850
 80075d8:	2000684c 	.word	0x2000684c
 80075dc:	20006d34 	.word	0x20006d34
 80075e0:	20006d30 	.word	0x20006d30

080075e4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80075e4:	b480      	push	{r7}
 80075e6:	b085      	sub	sp, #20
 80075e8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80075ea:	4b2b      	ldr	r3, [pc, #172]	@ (8007698 <vTaskSwitchContext+0xb4>)
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d003      	beq.n	80075fa <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80075f2:	4b2a      	ldr	r3, [pc, #168]	@ (800769c <vTaskSwitchContext+0xb8>)
 80075f4:	2201      	movs	r2, #1
 80075f6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80075f8:	e047      	b.n	800768a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80075fa:	4b28      	ldr	r3, [pc, #160]	@ (800769c <vTaskSwitchContext+0xb8>)
 80075fc:	2200      	movs	r2, #0
 80075fe:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007600:	4b27      	ldr	r3, [pc, #156]	@ (80076a0 <vTaskSwitchContext+0xbc>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	e011      	b.n	800762c <vTaskSwitchContext+0x48>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2b00      	cmp	r3, #0
 800760c:	d10b      	bne.n	8007626 <vTaskSwitchContext+0x42>
	__asm volatile
 800760e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007612:	f383 8811 	msr	BASEPRI, r3
 8007616:	f3bf 8f6f 	isb	sy
 800761a:	f3bf 8f4f 	dsb	sy
 800761e:	607b      	str	r3, [r7, #4]
}
 8007620:	bf00      	nop
 8007622:	bf00      	nop
 8007624:	e7fd      	b.n	8007622 <vTaskSwitchContext+0x3e>
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3b01      	subs	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
 800762c:	491d      	ldr	r1, [pc, #116]	@ (80076a4 <vTaskSwitchContext+0xc0>)
 800762e:	68fa      	ldr	r2, [r7, #12]
 8007630:	4613      	mov	r3, r2
 8007632:	009b      	lsls	r3, r3, #2
 8007634:	4413      	add	r3, r2
 8007636:	009b      	lsls	r3, r3, #2
 8007638:	440b      	add	r3, r1
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d0e3      	beq.n	8007608 <vTaskSwitchContext+0x24>
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4613      	mov	r3, r2
 8007644:	009b      	lsls	r3, r3, #2
 8007646:	4413      	add	r3, r2
 8007648:	009b      	lsls	r3, r3, #2
 800764a:	4a16      	ldr	r2, [pc, #88]	@ (80076a4 <vTaskSwitchContext+0xc0>)
 800764c:	4413      	add	r3, r2
 800764e:	60bb      	str	r3, [r7, #8]
 8007650:	68bb      	ldr	r3, [r7, #8]
 8007652:	685b      	ldr	r3, [r3, #4]
 8007654:	685a      	ldr	r2, [r3, #4]
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	605a      	str	r2, [r3, #4]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	685a      	ldr	r2, [r3, #4]
 800765e:	68bb      	ldr	r3, [r7, #8]
 8007660:	3308      	adds	r3, #8
 8007662:	429a      	cmp	r2, r3
 8007664:	d104      	bne.n	8007670 <vTaskSwitchContext+0x8c>
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	685b      	ldr	r3, [r3, #4]
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	605a      	str	r2, [r3, #4]
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	68db      	ldr	r3, [r3, #12]
 8007676:	4a0c      	ldr	r2, [pc, #48]	@ (80076a8 <vTaskSwitchContext+0xc4>)
 8007678:	6013      	str	r3, [r2, #0]
 800767a:	4a09      	ldr	r2, [pc, #36]	@ (80076a0 <vTaskSwitchContext+0xbc>)
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007680:	4b09      	ldr	r3, [pc, #36]	@ (80076a8 <vTaskSwitchContext+0xc4>)
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	3354      	adds	r3, #84	@ 0x54
 8007686:	4a09      	ldr	r2, [pc, #36]	@ (80076ac <vTaskSwitchContext+0xc8>)
 8007688:	6013      	str	r3, [r2, #0]
}
 800768a:	bf00      	nop
 800768c:	3714      	adds	r7, #20
 800768e:	46bd      	mov	sp, r7
 8007690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007694:	4770      	bx	lr
 8007696:	bf00      	nop
 8007698:	20006d48 	.word	0x20006d48
 800769c:	20006d34 	.word	0x20006d34
 80076a0:	20006d28 	.word	0x20006d28
 80076a4:	20006850 	.word	0x20006850
 80076a8:	2000684c 	.word	0x2000684c
 80076ac:	20000424 	.word	0x20000424

080076b0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d10b      	bne.n	80076d8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80076c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076c4:	f383 8811 	msr	BASEPRI, r3
 80076c8:	f3bf 8f6f 	isb	sy
 80076cc:	f3bf 8f4f 	dsb	sy
 80076d0:	60fb      	str	r3, [r7, #12]
}
 80076d2:	bf00      	nop
 80076d4:	bf00      	nop
 80076d6:	e7fd      	b.n	80076d4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80076d8:	4b07      	ldr	r3, [pc, #28]	@ (80076f8 <vTaskPlaceOnEventList+0x48>)
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	3318      	adds	r3, #24
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fe fc62 	bl	8005faa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076e6:	2101      	movs	r1, #1
 80076e8:	6838      	ldr	r0, [r7, #0]
 80076ea:	f000 fc51 	bl	8007f90 <prvAddCurrentTaskToDelayedList>
}
 80076ee:	bf00      	nop
 80076f0:	3710      	adds	r7, #16
 80076f2:	46bd      	mov	sp, r7
 80076f4:	bd80      	pop	{r7, pc}
 80076f6:	bf00      	nop
 80076f8:	2000684c 	.word	0x2000684c

080076fc <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 80076fc:	b580      	push	{r7, lr}
 80076fe:	b086      	sub	sp, #24
 8007700:	af00      	add	r7, sp, #0
 8007702:	60f8      	str	r0, [r7, #12]
 8007704:	60b9      	str	r1, [r7, #8]
 8007706:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10b      	bne.n	8007726 <vTaskPlaceOnUnorderedEventList+0x2a>
	__asm volatile
 800770e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007712:	f383 8811 	msr	BASEPRI, r3
 8007716:	f3bf 8f6f 	isb	sy
 800771a:	f3bf 8f4f 	dsb	sy
 800771e:	617b      	str	r3, [r7, #20]
}
 8007720:	bf00      	nop
 8007722:	bf00      	nop
 8007724:	e7fd      	b.n	8007722 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007726:	4b12      	ldr	r3, [pc, #72]	@ (8007770 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	2b00      	cmp	r3, #0
 800772c:	d10b      	bne.n	8007746 <vTaskPlaceOnUnorderedEventList+0x4a>
	__asm volatile
 800772e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007732:	f383 8811 	msr	BASEPRI, r3
 8007736:	f3bf 8f6f 	isb	sy
 800773a:	f3bf 8f4f 	dsb	sy
 800773e:	613b      	str	r3, [r7, #16]
}
 8007740:	bf00      	nop
 8007742:	bf00      	nop
 8007744:	e7fd      	b.n	8007742 <vTaskPlaceOnUnorderedEventList+0x46>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007746:	4b0b      	ldr	r3, [pc, #44]	@ (8007774 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	68ba      	ldr	r2, [r7, #8]
 800774c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8007750:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007752:	4b08      	ldr	r3, [pc, #32]	@ (8007774 <vTaskPlaceOnUnorderedEventList+0x78>)
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	3318      	adds	r3, #24
 8007758:	4619      	mov	r1, r3
 800775a:	68f8      	ldr	r0, [r7, #12]
 800775c:	f7fe fc01 	bl	8005f62 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007760:	2101      	movs	r1, #1
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f000 fc14 	bl	8007f90 <prvAddCurrentTaskToDelayedList>
}
 8007768:	bf00      	nop
 800776a:	3718      	adds	r7, #24
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20006d48 	.word	0x20006d48
 8007774:	2000684c 	.word	0x2000684c

08007778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007778:	b580      	push	{r7, lr}
 800777a:	b086      	sub	sp, #24
 800777c:	af00      	add	r7, sp, #0
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d10b      	bne.n	80077a2 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800778a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800778e:	f383 8811 	msr	BASEPRI, r3
 8007792:	f3bf 8f6f 	isb	sy
 8007796:	f3bf 8f4f 	dsb	sy
 800779a:	617b      	str	r3, [r7, #20]
}
 800779c:	bf00      	nop
 800779e:	bf00      	nop
 80077a0:	e7fd      	b.n	800779e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80077a2:	4b0a      	ldr	r3, [pc, #40]	@ (80077cc <vTaskPlaceOnEventListRestricted+0x54>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	3318      	adds	r3, #24
 80077a8:	4619      	mov	r1, r3
 80077aa:	68f8      	ldr	r0, [r7, #12]
 80077ac:	f7fe fbd9 	bl	8005f62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d002      	beq.n	80077bc <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80077b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80077ba:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	68b8      	ldr	r0, [r7, #8]
 80077c0:	f000 fbe6 	bl	8007f90 <prvAddCurrentTaskToDelayedList>
	}
 80077c4:	bf00      	nop
 80077c6:	3718      	adds	r7, #24
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	2000684c 	.word	0x2000684c

080077d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	68db      	ldr	r3, [r3, #12]
 80077dc:	68db      	ldr	r3, [r3, #12]
 80077de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80077e0:	693b      	ldr	r3, [r7, #16]
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d10b      	bne.n	80077fe <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80077e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077ea:	f383 8811 	msr	BASEPRI, r3
 80077ee:	f3bf 8f6f 	isb	sy
 80077f2:	f3bf 8f4f 	dsb	sy
 80077f6:	60fb      	str	r3, [r7, #12]
}
 80077f8:	bf00      	nop
 80077fa:	bf00      	nop
 80077fc:	e7fd      	b.n	80077fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80077fe:	693b      	ldr	r3, [r7, #16]
 8007800:	3318      	adds	r3, #24
 8007802:	4618      	mov	r0, r3
 8007804:	f7fe fc0a 	bl	800601c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007808:	4b1d      	ldr	r3, [pc, #116]	@ (8007880 <xTaskRemoveFromEventList+0xb0>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d11d      	bne.n	800784c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007810:	693b      	ldr	r3, [r7, #16]
 8007812:	3304      	adds	r3, #4
 8007814:	4618      	mov	r0, r3
 8007816:	f7fe fc01 	bl	800601c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800781a:	693b      	ldr	r3, [r7, #16]
 800781c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800781e:	4b19      	ldr	r3, [pc, #100]	@ (8007884 <xTaskRemoveFromEventList+0xb4>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	429a      	cmp	r2, r3
 8007824:	d903      	bls.n	800782e <xTaskRemoveFromEventList+0x5e>
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800782a:	4a16      	ldr	r2, [pc, #88]	@ (8007884 <xTaskRemoveFromEventList+0xb4>)
 800782c:	6013      	str	r3, [r2, #0]
 800782e:	693b      	ldr	r3, [r7, #16]
 8007830:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007832:	4613      	mov	r3, r2
 8007834:	009b      	lsls	r3, r3, #2
 8007836:	4413      	add	r3, r2
 8007838:	009b      	lsls	r3, r3, #2
 800783a:	4a13      	ldr	r2, [pc, #76]	@ (8007888 <xTaskRemoveFromEventList+0xb8>)
 800783c:	441a      	add	r2, r3
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	3304      	adds	r3, #4
 8007842:	4619      	mov	r1, r3
 8007844:	4610      	mov	r0, r2
 8007846:	f7fe fb8c 	bl	8005f62 <vListInsertEnd>
 800784a:	e005      	b.n	8007858 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	3318      	adds	r3, #24
 8007850:	4619      	mov	r1, r3
 8007852:	480e      	ldr	r0, [pc, #56]	@ (800788c <xTaskRemoveFromEventList+0xbc>)
 8007854:	f7fe fb85 	bl	8005f62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007858:	693b      	ldr	r3, [r7, #16]
 800785a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800785c:	4b0c      	ldr	r3, [pc, #48]	@ (8007890 <xTaskRemoveFromEventList+0xc0>)
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007862:	429a      	cmp	r2, r3
 8007864:	d905      	bls.n	8007872 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007866:	2301      	movs	r3, #1
 8007868:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800786a:	4b0a      	ldr	r3, [pc, #40]	@ (8007894 <xTaskRemoveFromEventList+0xc4>)
 800786c:	2201      	movs	r2, #1
 800786e:	601a      	str	r2, [r3, #0]
 8007870:	e001      	b.n	8007876 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007872:	2300      	movs	r3, #0
 8007874:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8007876:	697b      	ldr	r3, [r7, #20]
}
 8007878:	4618      	mov	r0, r3
 800787a:	3718      	adds	r7, #24
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20006d48 	.word	0x20006d48
 8007884:	20006d28 	.word	0x20006d28
 8007888:	20006850 	.word	0x20006850
 800788c:	20006ce0 	.word	0x20006ce0
 8007890:	2000684c 	.word	0x2000684c
 8007894:	20006d34 	.word	0x20006d34

08007898 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b086      	sub	sp, #24
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
 80078a0:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 80078a2:	4b2a      	ldr	r3, [pc, #168]	@ (800794c <vTaskRemoveFromUnorderedEventList+0xb4>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d10b      	bne.n	80078c2 <vTaskRemoveFromUnorderedEventList+0x2a>
	__asm volatile
 80078aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078ae:	f383 8811 	msr	BASEPRI, r3
 80078b2:	f3bf 8f6f 	isb	sy
 80078b6:	f3bf 8f4f 	dsb	sy
 80078ba:	613b      	str	r3, [r7, #16]
}
 80078bc:	bf00      	nop
 80078be:	bf00      	nop
 80078c0:	e7fd      	b.n	80078be <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 80078c2:	683b      	ldr	r3, [r7, #0]
 80078c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	68db      	ldr	r3, [r3, #12]
 80078d0:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d10b      	bne.n	80078f0 <vTaskRemoveFromUnorderedEventList+0x58>
	__asm volatile
 80078d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078dc:	f383 8811 	msr	BASEPRI, r3
 80078e0:	f3bf 8f6f 	isb	sy
 80078e4:	f3bf 8f4f 	dsb	sy
 80078e8:	60fb      	str	r3, [r7, #12]
}
 80078ea:	bf00      	nop
 80078ec:	bf00      	nop
 80078ee:	e7fd      	b.n	80078ec <vTaskRemoveFromUnorderedEventList+0x54>
	( void ) uxListRemove( pxEventListItem );
 80078f0:	6878      	ldr	r0, [r7, #4]
 80078f2:	f7fe fb93 	bl	800601c <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80078f6:	697b      	ldr	r3, [r7, #20]
 80078f8:	3304      	adds	r3, #4
 80078fa:	4618      	mov	r0, r3
 80078fc:	f7fe fb8e 	bl	800601c <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007904:	4b12      	ldr	r3, [pc, #72]	@ (8007950 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d903      	bls.n	8007914 <vTaskRemoveFromUnorderedEventList+0x7c>
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007910:	4a0f      	ldr	r2, [pc, #60]	@ (8007950 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007912:	6013      	str	r3, [r2, #0]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007918:	4613      	mov	r3, r2
 800791a:	009b      	lsls	r3, r3, #2
 800791c:	4413      	add	r3, r2
 800791e:	009b      	lsls	r3, r3, #2
 8007920:	4a0c      	ldr	r2, [pc, #48]	@ (8007954 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007922:	441a      	add	r2, r3
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	3304      	adds	r3, #4
 8007928:	4619      	mov	r1, r3
 800792a:	4610      	mov	r0, r2
 800792c:	f7fe fb19 	bl	8005f62 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007930:	697b      	ldr	r3, [r7, #20]
 8007932:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007934:	4b08      	ldr	r3, [pc, #32]	@ (8007958 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800793a:	429a      	cmp	r2, r3
 800793c:	d902      	bls.n	8007944 <vTaskRemoveFromUnorderedEventList+0xac>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800793e:	4b07      	ldr	r3, [pc, #28]	@ (800795c <vTaskRemoveFromUnorderedEventList+0xc4>)
 8007940:	2201      	movs	r2, #1
 8007942:	601a      	str	r2, [r3, #0]
	}
}
 8007944:	bf00      	nop
 8007946:	3718      	adds	r7, #24
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}
 800794c:	20006d48 	.word	0x20006d48
 8007950:	20006d28 	.word	0x20006d28
 8007954:	20006850 	.word	0x20006850
 8007958:	2000684c 	.word	0x2000684c
 800795c:	20006d34 	.word	0x20006d34

08007960 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007960:	b480      	push	{r7}
 8007962:	b083      	sub	sp, #12
 8007964:	af00      	add	r7, sp, #0
 8007966:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007968:	4b06      	ldr	r3, [pc, #24]	@ (8007984 <vTaskInternalSetTimeOutState+0x24>)
 800796a:	681a      	ldr	r2, [r3, #0]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007970:	4b05      	ldr	r3, [pc, #20]	@ (8007988 <vTaskInternalSetTimeOutState+0x28>)
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	605a      	str	r2, [r3, #4]
}
 8007978:	bf00      	nop
 800797a:	370c      	adds	r7, #12
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr
 8007984:	20006d38 	.word	0x20006d38
 8007988:	20006d24 	.word	0x20006d24

0800798c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
 8007994:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10b      	bne.n	80079b4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	613b      	str	r3, [r7, #16]
}
 80079ae:	bf00      	nop
 80079b0:	bf00      	nop
 80079b2:	e7fd      	b.n	80079b0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d10b      	bne.n	80079d2 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80079ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079be:	f383 8811 	msr	BASEPRI, r3
 80079c2:	f3bf 8f6f 	isb	sy
 80079c6:	f3bf 8f4f 	dsb	sy
 80079ca:	60fb      	str	r3, [r7, #12]
}
 80079cc:	bf00      	nop
 80079ce:	bf00      	nop
 80079d0:	e7fd      	b.n	80079ce <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80079d2:	f000 ffd9 	bl	8008988 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80079d6:	4b1d      	ldr	r3, [pc, #116]	@ (8007a4c <xTaskCheckForTimeOut+0xc0>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	685b      	ldr	r3, [r3, #4]
 80079e0:	69ba      	ldr	r2, [r7, #24]
 80079e2:	1ad3      	subs	r3, r2, r3
 80079e4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80079e6:	683b      	ldr	r3, [r7, #0]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80079ee:	d102      	bne.n	80079f6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80079f0:	2300      	movs	r3, #0
 80079f2:	61fb      	str	r3, [r7, #28]
 80079f4:	e023      	b.n	8007a3e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	4b15      	ldr	r3, [pc, #84]	@ (8007a50 <xTaskCheckForTimeOut+0xc4>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d007      	beq.n	8007a12 <xTaskCheckForTimeOut+0x86>
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	69ba      	ldr	r2, [r7, #24]
 8007a08:	429a      	cmp	r2, r3
 8007a0a:	d302      	bcc.n	8007a12 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	61fb      	str	r3, [r7, #28]
 8007a10:	e015      	b.n	8007a3e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007a12:	683b      	ldr	r3, [r7, #0]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	697a      	ldr	r2, [r7, #20]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d20b      	bcs.n	8007a34 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007a1c:	683b      	ldr	r3, [r7, #0]
 8007a1e:	681a      	ldr	r2, [r3, #0]
 8007a20:	697b      	ldr	r3, [r7, #20]
 8007a22:	1ad2      	subs	r2, r2, r3
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007a28:	6878      	ldr	r0, [r7, #4]
 8007a2a:	f7ff ff99 	bl	8007960 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007a2e:	2300      	movs	r3, #0
 8007a30:	61fb      	str	r3, [r7, #28]
 8007a32:	e004      	b.n	8007a3e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007a34:	683b      	ldr	r3, [r7, #0]
 8007a36:	2200      	movs	r2, #0
 8007a38:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007a3a:	2301      	movs	r3, #1
 8007a3c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007a3e:	f000 ffd5 	bl	80089ec <vPortExitCritical>

	return xReturn;
 8007a42:	69fb      	ldr	r3, [r7, #28]
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3720      	adds	r7, #32
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}
 8007a4c:	20006d24 	.word	0x20006d24
 8007a50:	20006d38 	.word	0x20006d38

08007a54 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a58:	4b03      	ldr	r3, [pc, #12]	@ (8007a68 <vTaskMissedYield+0x14>)
 8007a5a:	2201      	movs	r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]
}
 8007a5e:	bf00      	nop
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr
 8007a68:	20006d34 	.word	0x20006d34

08007a6c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	b082      	sub	sp, #8
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a74:	f000 f852 	bl	8007b1c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a78:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <prvIdleTask+0x28>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	d9f9      	bls.n	8007a74 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a80:	4b05      	ldr	r3, [pc, #20]	@ (8007a98 <prvIdleTask+0x2c>)
 8007a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a86:	601a      	str	r2, [r3, #0]
 8007a88:	f3bf 8f4f 	dsb	sy
 8007a8c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a90:	e7f0      	b.n	8007a74 <prvIdleTask+0x8>
 8007a92:	bf00      	nop
 8007a94:	20006850 	.word	0x20006850
 8007a98:	e000ed04 	.word	0xe000ed04

08007a9c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a9c:	b580      	push	{r7, lr}
 8007a9e:	b082      	sub	sp, #8
 8007aa0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	607b      	str	r3, [r7, #4]
 8007aa6:	e00c      	b.n	8007ac2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007aa8:	687a      	ldr	r2, [r7, #4]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	009b      	lsls	r3, r3, #2
 8007aae:	4413      	add	r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	4a12      	ldr	r2, [pc, #72]	@ (8007afc <prvInitialiseTaskLists+0x60>)
 8007ab4:	4413      	add	r3, r2
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f7fe fa26 	bl	8005f08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	3301      	adds	r3, #1
 8007ac0:	607b      	str	r3, [r7, #4]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2b37      	cmp	r3, #55	@ 0x37
 8007ac6:	d9ef      	bls.n	8007aa8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007ac8:	480d      	ldr	r0, [pc, #52]	@ (8007b00 <prvInitialiseTaskLists+0x64>)
 8007aca:	f7fe fa1d 	bl	8005f08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007ace:	480d      	ldr	r0, [pc, #52]	@ (8007b04 <prvInitialiseTaskLists+0x68>)
 8007ad0:	f7fe fa1a 	bl	8005f08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007ad4:	480c      	ldr	r0, [pc, #48]	@ (8007b08 <prvInitialiseTaskLists+0x6c>)
 8007ad6:	f7fe fa17 	bl	8005f08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007ada:	480c      	ldr	r0, [pc, #48]	@ (8007b0c <prvInitialiseTaskLists+0x70>)
 8007adc:	f7fe fa14 	bl	8005f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007ae0:	480b      	ldr	r0, [pc, #44]	@ (8007b10 <prvInitialiseTaskLists+0x74>)
 8007ae2:	f7fe fa11 	bl	8005f08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8007b14 <prvInitialiseTaskLists+0x78>)
 8007ae8:	4a05      	ldr	r2, [pc, #20]	@ (8007b00 <prvInitialiseTaskLists+0x64>)
 8007aea:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007aec:	4b0a      	ldr	r3, [pc, #40]	@ (8007b18 <prvInitialiseTaskLists+0x7c>)
 8007aee:	4a05      	ldr	r2, [pc, #20]	@ (8007b04 <prvInitialiseTaskLists+0x68>)
 8007af0:	601a      	str	r2, [r3, #0]
}
 8007af2:	bf00      	nop
 8007af4:	3708      	adds	r7, #8
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	20006850 	.word	0x20006850
 8007b00:	20006cb0 	.word	0x20006cb0
 8007b04:	20006cc4 	.word	0x20006cc4
 8007b08:	20006ce0 	.word	0x20006ce0
 8007b0c:	20006cf4 	.word	0x20006cf4
 8007b10:	20006d0c 	.word	0x20006d0c
 8007b14:	20006cd8 	.word	0x20006cd8
 8007b18:	20006cdc 	.word	0x20006cdc

08007b1c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b22:	e019      	b.n	8007b58 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007b24:	f000 ff30 	bl	8008988 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b28:	4b10      	ldr	r3, [pc, #64]	@ (8007b6c <prvCheckTasksWaitingTermination+0x50>)
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	3304      	adds	r3, #4
 8007b34:	4618      	mov	r0, r3
 8007b36:	f7fe fa71 	bl	800601c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8007b70 <prvCheckTasksWaitingTermination+0x54>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	4a0b      	ldr	r2, [pc, #44]	@ (8007b70 <prvCheckTasksWaitingTermination+0x54>)
 8007b42:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007b44:	4b0b      	ldr	r3, [pc, #44]	@ (8007b74 <prvCheckTasksWaitingTermination+0x58>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	4a0a      	ldr	r2, [pc, #40]	@ (8007b74 <prvCheckTasksWaitingTermination+0x58>)
 8007b4c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007b4e:	f000 ff4d 	bl	80089ec <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f810 	bl	8007b78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b58:	4b06      	ldr	r3, [pc, #24]	@ (8007b74 <prvCheckTasksWaitingTermination+0x58>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d1e1      	bne.n	8007b24 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b60:	bf00      	nop
 8007b62:	bf00      	nop
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}
 8007b6a:	bf00      	nop
 8007b6c:	20006cf4 	.word	0x20006cf4
 8007b70:	20006d20 	.word	0x20006d20
 8007b74:	20006d08 	.word	0x20006d08

08007b78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b084      	sub	sp, #16
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	3354      	adds	r3, #84	@ 0x54
 8007b84:	4618      	mov	r0, r3
 8007b86:	f005 f887 	bl	800cc98 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d108      	bne.n	8007ba6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f001 f8e5 	bl	8008d68 <vPortFree>
				vPortFree( pxTCB );
 8007b9e:	6878      	ldr	r0, [r7, #4]
 8007ba0:	f001 f8e2 	bl	8008d68 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007ba4:	e019      	b.n	8007bda <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d103      	bne.n	8007bb8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007bb0:	6878      	ldr	r0, [r7, #4]
 8007bb2:	f001 f8d9 	bl	8008d68 <vPortFree>
	}
 8007bb6:	e010      	b.n	8007bda <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007bbe:	2b02      	cmp	r3, #2
 8007bc0:	d00b      	beq.n	8007bda <prvDeleteTCB+0x62>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	60fb      	str	r3, [r7, #12]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <prvDeleteTCB+0x5e>
	}
 8007bda:	bf00      	nop
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007bea:	4b0c      	ldr	r3, [pc, #48]	@ (8007c1c <prvResetNextTaskUnblockTime+0x38>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d104      	bne.n	8007bfe <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007bf4:	4b0a      	ldr	r3, [pc, #40]	@ (8007c20 <prvResetNextTaskUnblockTime+0x3c>)
 8007bf6:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007bfa:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007bfc:	e008      	b.n	8007c10 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007bfe:	4b07      	ldr	r3, [pc, #28]	@ (8007c1c <prvResetNextTaskUnblockTime+0x38>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	68db      	ldr	r3, [r3, #12]
 8007c06:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	4a04      	ldr	r2, [pc, #16]	@ (8007c20 <prvResetNextTaskUnblockTime+0x3c>)
 8007c0e:	6013      	str	r3, [r2, #0]
}
 8007c10:	bf00      	nop
 8007c12:	370c      	adds	r7, #12
 8007c14:	46bd      	mov	sp, r7
 8007c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1a:	4770      	bx	lr
 8007c1c:	20006cd8 	.word	0x20006cd8
 8007c20:	20006d40 	.word	0x20006d40

08007c24 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007c24:	b480      	push	{r7}
 8007c26:	b083      	sub	sp, #12
 8007c28:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8007c2a:	4b05      	ldr	r3, [pc, #20]	@ (8007c40 <xTaskGetCurrentTaskHandle+0x1c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007c30:	687b      	ldr	r3, [r7, #4]
	}
 8007c32:	4618      	mov	r0, r3
 8007c34:	370c      	adds	r7, #12
 8007c36:	46bd      	mov	sp, r7
 8007c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3c:	4770      	bx	lr
 8007c3e:	bf00      	nop
 8007c40:	2000684c 	.word	0x2000684c

08007c44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8007c78 <xTaskGetSchedulerState+0x34>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d102      	bne.n	8007c58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007c52:	2301      	movs	r3, #1
 8007c54:	607b      	str	r3, [r7, #4]
 8007c56:	e008      	b.n	8007c6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c58:	4b08      	ldr	r3, [pc, #32]	@ (8007c7c <xTaskGetSchedulerState+0x38>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d102      	bne.n	8007c66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007c60:	2302      	movs	r3, #2
 8007c62:	607b      	str	r3, [r7, #4]
 8007c64:	e001      	b.n	8007c6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007c66:	2300      	movs	r3, #0
 8007c68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007c6a:	687b      	ldr	r3, [r7, #4]
	}
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr
 8007c78:	20006d2c 	.word	0x20006d2c
 8007c7c:	20006d48 	.word	0x20006d48

08007c80 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d051      	beq.n	8007d3a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c9a:	4b2a      	ldr	r3, [pc, #168]	@ (8007d44 <xTaskPriorityInherit+0xc4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d241      	bcs.n	8007d28 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	699b      	ldr	r3, [r3, #24]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	db06      	blt.n	8007cba <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cac:	4b25      	ldr	r3, [pc, #148]	@ (8007d44 <xTaskPriorityInherit+0xc4>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	6959      	ldr	r1, [r3, #20]
 8007cbe:	68bb      	ldr	r3, [r7, #8]
 8007cc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cc2:	4613      	mov	r3, r2
 8007cc4:	009b      	lsls	r3, r3, #2
 8007cc6:	4413      	add	r3, r2
 8007cc8:	009b      	lsls	r3, r3, #2
 8007cca:	4a1f      	ldr	r2, [pc, #124]	@ (8007d48 <xTaskPriorityInherit+0xc8>)
 8007ccc:	4413      	add	r3, r2
 8007cce:	4299      	cmp	r1, r3
 8007cd0:	d122      	bne.n	8007d18 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	3304      	adds	r3, #4
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe f9a0 	bl	800601c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cdc:	4b19      	ldr	r3, [pc, #100]	@ (8007d44 <xTaskPriorityInherit+0xc4>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ce2:	68bb      	ldr	r3, [r7, #8]
 8007ce4:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ce6:	68bb      	ldr	r3, [r7, #8]
 8007ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cea:	4b18      	ldr	r3, [pc, #96]	@ (8007d4c <xTaskPriorityInherit+0xcc>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d903      	bls.n	8007cfa <xTaskPriorityInherit+0x7a>
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cf6:	4a15      	ldr	r2, [pc, #84]	@ (8007d4c <xTaskPriorityInherit+0xcc>)
 8007cf8:	6013      	str	r3, [r2, #0]
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cfe:	4613      	mov	r3, r2
 8007d00:	009b      	lsls	r3, r3, #2
 8007d02:	4413      	add	r3, r2
 8007d04:	009b      	lsls	r3, r3, #2
 8007d06:	4a10      	ldr	r2, [pc, #64]	@ (8007d48 <xTaskPriorityInherit+0xc8>)
 8007d08:	441a      	add	r2, r3
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	3304      	adds	r3, #4
 8007d0e:	4619      	mov	r1, r3
 8007d10:	4610      	mov	r0, r2
 8007d12:	f7fe f926 	bl	8005f62 <vListInsertEnd>
 8007d16:	e004      	b.n	8007d22 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007d18:	4b0a      	ldr	r3, [pc, #40]	@ (8007d44 <xTaskPriorityInherit+0xc4>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007d22:	2301      	movs	r3, #1
 8007d24:	60fb      	str	r3, [r7, #12]
 8007d26:	e008      	b.n	8007d3a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007d2c:	4b05      	ldr	r3, [pc, #20]	@ (8007d44 <xTaskPriorityInherit+0xc4>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d201      	bcs.n	8007d3a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007d36:	2301      	movs	r3, #1
 8007d38:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	2000684c 	.word	0x2000684c
 8007d48:	20006850 	.word	0x20006850
 8007d4c:	20006d28 	.word	0x20006d28

08007d50 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b086      	sub	sp, #24
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d5c:	2300      	movs	r3, #0
 8007d5e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d058      	beq.n	8007e18 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d66:	4b2f      	ldr	r3, [pc, #188]	@ (8007e24 <xTaskPriorityDisinherit+0xd4>)
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	429a      	cmp	r2, r3
 8007d6e:	d00b      	beq.n	8007d88 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d74:	f383 8811 	msr	BASEPRI, r3
 8007d78:	f3bf 8f6f 	isb	sy
 8007d7c:	f3bf 8f4f 	dsb	sy
 8007d80:	60fb      	str	r3, [r7, #12]
}
 8007d82:	bf00      	nop
 8007d84:	bf00      	nop
 8007d86:	e7fd      	b.n	8007d84 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d88:	693b      	ldr	r3, [r7, #16]
 8007d8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d10b      	bne.n	8007da8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d94:	f383 8811 	msr	BASEPRI, r3
 8007d98:	f3bf 8f6f 	isb	sy
 8007d9c:	f3bf 8f4f 	dsb	sy
 8007da0:	60bb      	str	r3, [r7, #8]
}
 8007da2:	bf00      	nop
 8007da4:	bf00      	nop
 8007da6:	e7fd      	b.n	8007da4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dac:	1e5a      	subs	r2, r3, #1
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007db2:	693b      	ldr	r3, [r7, #16]
 8007db4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	d02c      	beq.n	8007e18 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d128      	bne.n	8007e18 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	3304      	adds	r3, #4
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe f926 	bl	800601c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007de8:	4b0f      	ldr	r3, [pc, #60]	@ (8007e28 <xTaskPriorityDisinherit+0xd8>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d903      	bls.n	8007df8 <xTaskPriorityDisinherit+0xa8>
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007df4:	4a0c      	ldr	r2, [pc, #48]	@ (8007e28 <xTaskPriorityDisinherit+0xd8>)
 8007df6:	6013      	str	r3, [r2, #0]
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	009b      	lsls	r3, r3, #2
 8007e00:	4413      	add	r3, r2
 8007e02:	009b      	lsls	r3, r3, #2
 8007e04:	4a09      	ldr	r2, [pc, #36]	@ (8007e2c <xTaskPriorityDisinherit+0xdc>)
 8007e06:	441a      	add	r2, r3
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	3304      	adds	r3, #4
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	4610      	mov	r0, r2
 8007e10:	f7fe f8a7 	bl	8005f62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e14:	2301      	movs	r3, #1
 8007e16:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e18:	697b      	ldr	r3, [r7, #20]
	}
 8007e1a:	4618      	mov	r0, r3
 8007e1c:	3718      	adds	r7, #24
 8007e1e:	46bd      	mov	sp, r7
 8007e20:	bd80      	pop	{r7, pc}
 8007e22:	bf00      	nop
 8007e24:	2000684c 	.word	0x2000684c
 8007e28:	20006d28 	.word	0x20006d28
 8007e2c:	20006850 	.word	0x20006850

08007e30 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e30:	b580      	push	{r7, lr}
 8007e32:	b088      	sub	sp, #32
 8007e34:	af00      	add	r7, sp, #0
 8007e36:	6078      	str	r0, [r7, #4]
 8007e38:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e3e:	2301      	movs	r3, #1
 8007e40:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d06c      	beq.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e48:	69bb      	ldr	r3, [r7, #24]
 8007e4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d10b      	bne.n	8007e68 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 8007e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e54:	f383 8811 	msr	BASEPRI, r3
 8007e58:	f3bf 8f6f 	isb	sy
 8007e5c:	f3bf 8f4f 	dsb	sy
 8007e60:	60fb      	str	r3, [r7, #12]
}
 8007e62:	bf00      	nop
 8007e64:	bf00      	nop
 8007e66:	e7fd      	b.n	8007e64 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e68:	69bb      	ldr	r3, [r7, #24]
 8007e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e6c:	683a      	ldr	r2, [r7, #0]
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d902      	bls.n	8007e78 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e72:	683b      	ldr	r3, [r7, #0]
 8007e74:	61fb      	str	r3, [r7, #28]
 8007e76:	e002      	b.n	8007e7e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e78:	69bb      	ldr	r3, [r7, #24]
 8007e7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e7c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e7e:	69bb      	ldr	r3, [r7, #24]
 8007e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e82:	69fa      	ldr	r2, [r7, #28]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d04c      	beq.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007e8c:	697a      	ldr	r2, [r7, #20]
 8007e8e:	429a      	cmp	r2, r3
 8007e90:	d147      	bne.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e92:	4b26      	ldr	r3, [pc, #152]	@ (8007f2c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	69ba      	ldr	r2, [r7, #24]
 8007e98:	429a      	cmp	r2, r3
 8007e9a:	d10b      	bne.n	8007eb4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 8007e9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ea0:	f383 8811 	msr	BASEPRI, r3
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	f3bf 8f4f 	dsb	sy
 8007eac:	60bb      	str	r3, [r7, #8]
}
 8007eae:	bf00      	nop
 8007eb0:	bf00      	nop
 8007eb2:	e7fd      	b.n	8007eb0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007eb4:	69bb      	ldr	r3, [r7, #24]
 8007eb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	69fa      	ldr	r2, [r7, #28]
 8007ebe:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007ec0:	69bb      	ldr	r3, [r7, #24]
 8007ec2:	699b      	ldr	r3, [r3, #24]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	db04      	blt.n	8007ed2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ed2:	69bb      	ldr	r3, [r7, #24]
 8007ed4:	6959      	ldr	r1, [r3, #20]
 8007ed6:	693a      	ldr	r2, [r7, #16]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	009b      	lsls	r3, r3, #2
 8007edc:	4413      	add	r3, r2
 8007ede:	009b      	lsls	r3, r3, #2
 8007ee0:	4a13      	ldr	r2, [pc, #76]	@ (8007f30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007ee2:	4413      	add	r3, r2
 8007ee4:	4299      	cmp	r1, r3
 8007ee6:	d11c      	bne.n	8007f22 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	3304      	adds	r3, #4
 8007eec:	4618      	mov	r0, r3
 8007eee:	f7fe f895 	bl	800601c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007ef2:	69bb      	ldr	r3, [r7, #24]
 8007ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007ef6:	4b0f      	ldr	r3, [pc, #60]	@ (8007f34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	429a      	cmp	r2, r3
 8007efc:	d903      	bls.n	8007f06 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 8007efe:	69bb      	ldr	r3, [r7, #24]
 8007f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f02:	4a0c      	ldr	r2, [pc, #48]	@ (8007f34 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 8007f04:	6013      	str	r3, [r2, #0]
 8007f06:	69bb      	ldr	r3, [r7, #24]
 8007f08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	4413      	add	r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	4a07      	ldr	r2, [pc, #28]	@ (8007f30 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8007f14:	441a      	add	r2, r3
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	3304      	adds	r3, #4
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	4610      	mov	r0, r2
 8007f1e:	f7fe f820 	bl	8005f62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f22:	bf00      	nop
 8007f24:	3720      	adds	r7, #32
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
 8007f2a:	bf00      	nop
 8007f2c:	2000684c 	.word	0x2000684c
 8007f30:	20006850 	.word	0x20006850
 8007f34:	20006d28 	.word	0x20006d28

08007f38 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8007f3e:	4b09      	ldr	r3, [pc, #36]	@ (8007f64 <uxTaskResetEventItemValue+0x2c>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	699b      	ldr	r3, [r3, #24]
 8007f44:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007f46:	4b07      	ldr	r3, [pc, #28]	@ (8007f64 <uxTaskResetEventItemValue+0x2c>)
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f4c:	4b05      	ldr	r3, [pc, #20]	@ (8007f64 <uxTaskResetEventItemValue+0x2c>)
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 8007f54:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007f56:	687b      	ldr	r3, [r7, #4]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	370c      	adds	r7, #12
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f62:	4770      	bx	lr
 8007f64:	2000684c 	.word	0x2000684c

08007f68 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f68:	b480      	push	{r7}
 8007f6a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f6c:	4b07      	ldr	r3, [pc, #28]	@ (8007f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d004      	beq.n	8007f7e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f74:	4b05      	ldr	r3, [pc, #20]	@ (8007f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 8007f7e:	4b03      	ldr	r3, [pc, #12]	@ (8007f8c <pvTaskIncrementMutexHeldCount+0x24>)
 8007f80:	681b      	ldr	r3, [r3, #0]
	}
 8007f82:	4618      	mov	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	2000684c 	.word	0x2000684c

08007f90 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b084      	sub	sp, #16
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
 8007f98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f9a:	4b21      	ldr	r3, [pc, #132]	@ (8008020 <prvAddCurrentTaskToDelayedList+0x90>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007fa0:	4b20      	ldr	r3, [pc, #128]	@ (8008024 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	3304      	adds	r3, #4
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fe f838 	bl	800601c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007fb2:	d10a      	bne.n	8007fca <prvAddCurrentTaskToDelayedList+0x3a>
 8007fb4:	683b      	ldr	r3, [r7, #0]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d007      	beq.n	8007fca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fba:	4b1a      	ldr	r3, [pc, #104]	@ (8008024 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	3304      	adds	r3, #4
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	4819      	ldr	r0, [pc, #100]	@ (8008028 <prvAddCurrentTaskToDelayedList+0x98>)
 8007fc4:	f7fd ffcd 	bl	8005f62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fc8:	e026      	b.n	8008018 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fca:	68fa      	ldr	r2, [r7, #12]
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	4413      	add	r3, r2
 8007fd0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fd2:	4b14      	ldr	r3, [pc, #80]	@ (8008024 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	68ba      	ldr	r2, [r7, #8]
 8007fd8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fda:	68ba      	ldr	r2, [r7, #8]
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	429a      	cmp	r2, r3
 8007fe0:	d209      	bcs.n	8007ff6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fe2:	4b12      	ldr	r3, [pc, #72]	@ (800802c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8008024 <prvAddCurrentTaskToDelayedList+0x94>)
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	3304      	adds	r3, #4
 8007fec:	4619      	mov	r1, r3
 8007fee:	4610      	mov	r0, r2
 8007ff0:	f7fd ffdb 	bl	8005faa <vListInsert>
}
 8007ff4:	e010      	b.n	8008018 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff6:	4b0e      	ldr	r3, [pc, #56]	@ (8008030 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007ff8:	681a      	ldr	r2, [r3, #0]
 8007ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8008024 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	3304      	adds	r3, #4
 8008000:	4619      	mov	r1, r3
 8008002:	4610      	mov	r0, r2
 8008004:	f7fd ffd1 	bl	8005faa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008008:	4b0a      	ldr	r3, [pc, #40]	@ (8008034 <prvAddCurrentTaskToDelayedList+0xa4>)
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	68ba      	ldr	r2, [r7, #8]
 800800e:	429a      	cmp	r2, r3
 8008010:	d202      	bcs.n	8008018 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8008012:	4a08      	ldr	r2, [pc, #32]	@ (8008034 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	6013      	str	r3, [r2, #0]
}
 8008018:	bf00      	nop
 800801a:	3710      	adds	r7, #16
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20006d24 	.word	0x20006d24
 8008024:	2000684c 	.word	0x2000684c
 8008028:	20006d0c 	.word	0x20006d0c
 800802c:	20006cdc 	.word	0x20006cdc
 8008030:	20006cd8 	.word	0x20006cd8
 8008034:	20006d40 	.word	0x20006d40

08008038 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b08a      	sub	sp, #40	@ 0x28
 800803c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800803e:	2300      	movs	r3, #0
 8008040:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008042:	f000 fb13 	bl	800866c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008046:	4b1d      	ldr	r3, [pc, #116]	@ (80080bc <xTimerCreateTimerTask+0x84>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d021      	beq.n	8008092 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800804e:	2300      	movs	r3, #0
 8008050:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008052:	2300      	movs	r3, #0
 8008054:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008056:	1d3a      	adds	r2, r7, #4
 8008058:	f107 0108 	add.w	r1, r7, #8
 800805c:	f107 030c 	add.w	r3, r7, #12
 8008060:	4618      	mov	r0, r3
 8008062:	f7fd fd41 	bl	8005ae8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008066:	6879      	ldr	r1, [r7, #4]
 8008068:	68bb      	ldr	r3, [r7, #8]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	9202      	str	r2, [sp, #8]
 800806e:	9301      	str	r3, [sp, #4]
 8008070:	2302      	movs	r3, #2
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	2300      	movs	r3, #0
 8008076:	460a      	mov	r2, r1
 8008078:	4911      	ldr	r1, [pc, #68]	@ (80080c0 <xTimerCreateTimerTask+0x88>)
 800807a:	4812      	ldr	r0, [pc, #72]	@ (80080c4 <xTimerCreateTimerTask+0x8c>)
 800807c:	f7fe ff0e 	bl	8006e9c <xTaskCreateStatic>
 8008080:	4603      	mov	r3, r0
 8008082:	4a11      	ldr	r2, [pc, #68]	@ (80080c8 <xTimerCreateTimerTask+0x90>)
 8008084:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008086:	4b10      	ldr	r3, [pc, #64]	@ (80080c8 <xTimerCreateTimerTask+0x90>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d001      	beq.n	8008092 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800808e:	2301      	movs	r3, #1
 8008090:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008092:	697b      	ldr	r3, [r7, #20]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d10b      	bne.n	80080b0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8008098:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800809c:	f383 8811 	msr	BASEPRI, r3
 80080a0:	f3bf 8f6f 	isb	sy
 80080a4:	f3bf 8f4f 	dsb	sy
 80080a8:	613b      	str	r3, [r7, #16]
}
 80080aa:	bf00      	nop
 80080ac:	bf00      	nop
 80080ae:	e7fd      	b.n	80080ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80080b0:	697b      	ldr	r3, [r7, #20]
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3718      	adds	r7, #24
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	20006d7c 	.word	0x20006d7c
 80080c0:	08010424 	.word	0x08010424
 80080c4:	08008205 	.word	0x08008205
 80080c8:	20006d80 	.word	0x20006d80

080080cc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b08a      	sub	sp, #40	@ 0x28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	607a      	str	r2, [r7, #4]
 80080d8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80080da:	2300      	movs	r3, #0
 80080dc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d10b      	bne.n	80080fc <xTimerGenericCommand+0x30>
	__asm volatile
 80080e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080e8:	f383 8811 	msr	BASEPRI, r3
 80080ec:	f3bf 8f6f 	isb	sy
 80080f0:	f3bf 8f4f 	dsb	sy
 80080f4:	623b      	str	r3, [r7, #32]
}
 80080f6:	bf00      	nop
 80080f8:	bf00      	nop
 80080fa:	e7fd      	b.n	80080f8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80080fc:	4b19      	ldr	r3, [pc, #100]	@ (8008164 <xTimerGenericCommand+0x98>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	2b00      	cmp	r3, #0
 8008102:	d02a      	beq.n	800815a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	2b05      	cmp	r3, #5
 8008114:	dc18      	bgt.n	8008148 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008116:	f7ff fd95 	bl	8007c44 <xTaskGetSchedulerState>
 800811a:	4603      	mov	r3, r0
 800811c:	2b02      	cmp	r3, #2
 800811e:	d109      	bne.n	8008134 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8008120:	4b10      	ldr	r3, [pc, #64]	@ (8008164 <xTimerGenericCommand+0x98>)
 8008122:	6818      	ldr	r0, [r3, #0]
 8008124:	f107 0110 	add.w	r1, r7, #16
 8008128:	2300      	movs	r3, #0
 800812a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800812c:	f7fe f99e 	bl	800646c <xQueueGenericSend>
 8008130:	6278      	str	r0, [r7, #36]	@ 0x24
 8008132:	e012      	b.n	800815a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8008134:	4b0b      	ldr	r3, [pc, #44]	@ (8008164 <xTimerGenericCommand+0x98>)
 8008136:	6818      	ldr	r0, [r3, #0]
 8008138:	f107 0110 	add.w	r1, r7, #16
 800813c:	2300      	movs	r3, #0
 800813e:	2200      	movs	r2, #0
 8008140:	f7fe f994 	bl	800646c <xQueueGenericSend>
 8008144:	6278      	str	r0, [r7, #36]	@ 0x24
 8008146:	e008      	b.n	800815a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008148:	4b06      	ldr	r3, [pc, #24]	@ (8008164 <xTimerGenericCommand+0x98>)
 800814a:	6818      	ldr	r0, [r3, #0]
 800814c:	f107 0110 	add.w	r1, r7, #16
 8008150:	2300      	movs	r3, #0
 8008152:	683a      	ldr	r2, [r7, #0]
 8008154:	f7fe fa8c 	bl	8006670 <xQueueGenericSendFromISR>
 8008158:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800815a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800815c:	4618      	mov	r0, r3
 800815e:	3728      	adds	r7, #40	@ 0x28
 8008160:	46bd      	mov	sp, r7
 8008162:	bd80      	pop	{r7, pc}
 8008164:	20006d7c 	.word	0x20006d7c

08008168 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b088      	sub	sp, #32
 800816c:	af02      	add	r7, sp, #8
 800816e:	6078      	str	r0, [r7, #4]
 8008170:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008172:	4b23      	ldr	r3, [pc, #140]	@ (8008200 <prvProcessExpiredTimer+0x98>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	68db      	ldr	r3, [r3, #12]
 8008178:	68db      	ldr	r3, [r3, #12]
 800817a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	3304      	adds	r3, #4
 8008180:	4618      	mov	r0, r3
 8008182:	f7fd ff4b 	bl	800601c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008186:	697b      	ldr	r3, [r7, #20]
 8008188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800818c:	f003 0304 	and.w	r3, r3, #4
 8008190:	2b00      	cmp	r3, #0
 8008192:	d023      	beq.n	80081dc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	699a      	ldr	r2, [r3, #24]
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	18d1      	adds	r1, r2, r3
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	683a      	ldr	r2, [r7, #0]
 80081a0:	6978      	ldr	r0, [r7, #20]
 80081a2:	f000 f8d5 	bl	8008350 <prvInsertTimerInActiveList>
 80081a6:	4603      	mov	r3, r0
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d020      	beq.n	80081ee <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80081ac:	2300      	movs	r3, #0
 80081ae:	9300      	str	r3, [sp, #0]
 80081b0:	2300      	movs	r3, #0
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	2100      	movs	r1, #0
 80081b6:	6978      	ldr	r0, [r7, #20]
 80081b8:	f7ff ff88 	bl	80080cc <xTimerGenericCommand>
 80081bc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d114      	bne.n	80081ee <prvProcessExpiredTimer+0x86>
	__asm volatile
 80081c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081c8:	f383 8811 	msr	BASEPRI, r3
 80081cc:	f3bf 8f6f 	isb	sy
 80081d0:	f3bf 8f4f 	dsb	sy
 80081d4:	60fb      	str	r3, [r7, #12]
}
 80081d6:	bf00      	nop
 80081d8:	bf00      	nop
 80081da:	e7fd      	b.n	80081d8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80081e2:	f023 0301 	bic.w	r3, r3, #1
 80081e6:	b2da      	uxtb	r2, r3
 80081e8:	697b      	ldr	r3, [r7, #20]
 80081ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	6a1b      	ldr	r3, [r3, #32]
 80081f2:	6978      	ldr	r0, [r7, #20]
 80081f4:	4798      	blx	r3
}
 80081f6:	bf00      	nop
 80081f8:	3718      	adds	r7, #24
 80081fa:	46bd      	mov	sp, r7
 80081fc:	bd80      	pop	{r7, pc}
 80081fe:	bf00      	nop
 8008200:	20006d74 	.word	0x20006d74

08008204 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8008204:	b580      	push	{r7, lr}
 8008206:	b084      	sub	sp, #16
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800820c:	f107 0308 	add.w	r3, r7, #8
 8008210:	4618      	mov	r0, r3
 8008212:	f000 f859 	bl	80082c8 <prvGetNextExpireTime>
 8008216:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	4619      	mov	r1, r3
 800821c:	68f8      	ldr	r0, [r7, #12]
 800821e:	f000 f805 	bl	800822c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8008222:	f000 f8d7 	bl	80083d4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8008226:	bf00      	nop
 8008228:	e7f0      	b.n	800820c <prvTimerTask+0x8>
	...

0800822c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800822c:	b580      	push	{r7, lr}
 800822e:	b084      	sub	sp, #16
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008236:	f7ff f85f 	bl	80072f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800823a:	f107 0308 	add.w	r3, r7, #8
 800823e:	4618      	mov	r0, r3
 8008240:	f000 f866 	bl	8008310 <prvSampleTimeNow>
 8008244:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d130      	bne.n	80082ae <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800824c:	683b      	ldr	r3, [r7, #0]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d10a      	bne.n	8008268 <prvProcessTimerOrBlockTask+0x3c>
 8008252:	687a      	ldr	r2, [r7, #4]
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	429a      	cmp	r2, r3
 8008258:	d806      	bhi.n	8008268 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800825a:	f7ff f85b 	bl	8007314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800825e:	68f9      	ldr	r1, [r7, #12]
 8008260:	6878      	ldr	r0, [r7, #4]
 8008262:	f7ff ff81 	bl	8008168 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008266:	e024      	b.n	80082b2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	2b00      	cmp	r3, #0
 800826c:	d008      	beq.n	8008280 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800826e:	4b13      	ldr	r3, [pc, #76]	@ (80082bc <prvProcessTimerOrBlockTask+0x90>)
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	d101      	bne.n	800827c <prvProcessTimerOrBlockTask+0x50>
 8008278:	2301      	movs	r3, #1
 800827a:	e000      	b.n	800827e <prvProcessTimerOrBlockTask+0x52>
 800827c:	2300      	movs	r3, #0
 800827e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008280:	4b0f      	ldr	r3, [pc, #60]	@ (80082c0 <prvProcessTimerOrBlockTask+0x94>)
 8008282:	6818      	ldr	r0, [r3, #0]
 8008284:	687a      	ldr	r2, [r7, #4]
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	1ad3      	subs	r3, r2, r3
 800828a:	683a      	ldr	r2, [r7, #0]
 800828c:	4619      	mov	r1, r3
 800828e:	f7fe fdd1 	bl	8006e34 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008292:	f7ff f83f 	bl	8007314 <xTaskResumeAll>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	d10a      	bne.n	80082b2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800829c:	4b09      	ldr	r3, [pc, #36]	@ (80082c4 <prvProcessTimerOrBlockTask+0x98>)
 800829e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082a2:	601a      	str	r2, [r3, #0]
 80082a4:	f3bf 8f4f 	dsb	sy
 80082a8:	f3bf 8f6f 	isb	sy
}
 80082ac:	e001      	b.n	80082b2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80082ae:	f7ff f831 	bl	8007314 <xTaskResumeAll>
}
 80082b2:	bf00      	nop
 80082b4:	3710      	adds	r7, #16
 80082b6:	46bd      	mov	sp, r7
 80082b8:	bd80      	pop	{r7, pc}
 80082ba:	bf00      	nop
 80082bc:	20006d78 	.word	0x20006d78
 80082c0:	20006d7c 	.word	0x20006d7c
 80082c4:	e000ed04 	.word	0xe000ed04

080082c8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80082d0:	4b0e      	ldr	r3, [pc, #56]	@ (800830c <prvGetNextExpireTime+0x44>)
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d101      	bne.n	80082de <prvGetNextExpireTime+0x16>
 80082da:	2201      	movs	r2, #1
 80082dc:	e000      	b.n	80082e0 <prvGetNextExpireTime+0x18>
 80082de:	2200      	movs	r2, #0
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d105      	bne.n	80082f8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80082ec:	4b07      	ldr	r3, [pc, #28]	@ (800830c <prvGetNextExpireTime+0x44>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	68db      	ldr	r3, [r3, #12]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	60fb      	str	r3, [r7, #12]
 80082f6:	e001      	b.n	80082fc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80082fc:	68fb      	ldr	r3, [r7, #12]
}
 80082fe:	4618      	mov	r0, r3
 8008300:	3714      	adds	r7, #20
 8008302:	46bd      	mov	sp, r7
 8008304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008308:	4770      	bx	lr
 800830a:	bf00      	nop
 800830c:	20006d74 	.word	0x20006d74

08008310 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b084      	sub	sp, #16
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8008318:	f7ff f89a 	bl	8007450 <xTaskGetTickCount>
 800831c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800831e:	4b0b      	ldr	r3, [pc, #44]	@ (800834c <prvSampleTimeNow+0x3c>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	68fa      	ldr	r2, [r7, #12]
 8008324:	429a      	cmp	r2, r3
 8008326:	d205      	bcs.n	8008334 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8008328:	f000 f93a 	bl	80085a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	2201      	movs	r2, #1
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	e002      	b.n	800833a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2200      	movs	r2, #0
 8008338:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800833a:	4a04      	ldr	r2, [pc, #16]	@ (800834c <prvSampleTimeNow+0x3c>)
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008340:	68fb      	ldr	r3, [r7, #12]
}
 8008342:	4618      	mov	r0, r3
 8008344:	3710      	adds	r7, #16
 8008346:	46bd      	mov	sp, r7
 8008348:	bd80      	pop	{r7, pc}
 800834a:	bf00      	nop
 800834c:	20006d84 	.word	0x20006d84

08008350 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008350:	b580      	push	{r7, lr}
 8008352:	b086      	sub	sp, #24
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
 800835c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800835e:	2300      	movs	r3, #0
 8008360:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800836e:	68ba      	ldr	r2, [r7, #8]
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	429a      	cmp	r2, r3
 8008374:	d812      	bhi.n	800839c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008376:	687a      	ldr	r2, [r7, #4]
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	1ad2      	subs	r2, r2, r3
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	429a      	cmp	r2, r3
 8008382:	d302      	bcc.n	800838a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008384:	2301      	movs	r3, #1
 8008386:	617b      	str	r3, [r7, #20]
 8008388:	e01b      	b.n	80083c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800838a:	4b10      	ldr	r3, [pc, #64]	@ (80083cc <prvInsertTimerInActiveList+0x7c>)
 800838c:	681a      	ldr	r2, [r3, #0]
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	3304      	adds	r3, #4
 8008392:	4619      	mov	r1, r3
 8008394:	4610      	mov	r0, r2
 8008396:	f7fd fe08 	bl	8005faa <vListInsert>
 800839a:	e012      	b.n	80083c2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	429a      	cmp	r2, r3
 80083a2:	d206      	bcs.n	80083b2 <prvInsertTimerInActiveList+0x62>
 80083a4:	68ba      	ldr	r2, [r7, #8]
 80083a6:	683b      	ldr	r3, [r7, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d302      	bcc.n	80083b2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80083ac:	2301      	movs	r3, #1
 80083ae:	617b      	str	r3, [r7, #20]
 80083b0:	e007      	b.n	80083c2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80083b2:	4b07      	ldr	r3, [pc, #28]	@ (80083d0 <prvInsertTimerInActiveList+0x80>)
 80083b4:	681a      	ldr	r2, [r3, #0]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	3304      	adds	r3, #4
 80083ba:	4619      	mov	r1, r3
 80083bc:	4610      	mov	r0, r2
 80083be:	f7fd fdf4 	bl	8005faa <vListInsert>
		}
	}

	return xProcessTimerNow;
 80083c2:	697b      	ldr	r3, [r7, #20]
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3718      	adds	r7, #24
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}
 80083cc:	20006d78 	.word	0x20006d78
 80083d0:	20006d74 	.word	0x20006d74

080083d4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80083d4:	b580      	push	{r7, lr}
 80083d6:	b08e      	sub	sp, #56	@ 0x38
 80083d8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80083da:	e0ce      	b.n	800857a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	da19      	bge.n	8008416 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80083e2:	1d3b      	adds	r3, r7, #4
 80083e4:	3304      	adds	r3, #4
 80083e6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80083e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d10b      	bne.n	8008406 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80083ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083f2:	f383 8811 	msr	BASEPRI, r3
 80083f6:	f3bf 8f6f 	isb	sy
 80083fa:	f3bf 8f4f 	dsb	sy
 80083fe:	61fb      	str	r3, [r7, #28]
}
 8008400:	bf00      	nop
 8008402:	bf00      	nop
 8008404:	e7fd      	b.n	8008402 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008406:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800840c:	6850      	ldr	r0, [r2, #4]
 800840e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008410:	6892      	ldr	r2, [r2, #8]
 8008412:	4611      	mov	r1, r2
 8008414:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2b00      	cmp	r3, #0
 800841a:	f2c0 80ae 	blt.w	800857a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	2b00      	cmp	r3, #0
 8008428:	d004      	beq.n	8008434 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800842a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800842c:	3304      	adds	r3, #4
 800842e:	4618      	mov	r0, r3
 8008430:	f7fd fdf4 	bl	800601c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008434:	463b      	mov	r3, r7
 8008436:	4618      	mov	r0, r3
 8008438:	f7ff ff6a 	bl	8008310 <prvSampleTimeNow>
 800843c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2b09      	cmp	r3, #9
 8008442:	f200 8097 	bhi.w	8008574 <prvProcessReceivedCommands+0x1a0>
 8008446:	a201      	add	r2, pc, #4	@ (adr r2, 800844c <prvProcessReceivedCommands+0x78>)
 8008448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800844c:	08008475 	.word	0x08008475
 8008450:	08008475 	.word	0x08008475
 8008454:	08008475 	.word	0x08008475
 8008458:	080084eb 	.word	0x080084eb
 800845c:	080084ff 	.word	0x080084ff
 8008460:	0800854b 	.word	0x0800854b
 8008464:	08008475 	.word	0x08008475
 8008468:	08008475 	.word	0x08008475
 800846c:	080084eb 	.word	0x080084eb
 8008470:	080084ff 	.word	0x080084ff
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008476:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800847a:	f043 0301 	orr.w	r3, r3, #1
 800847e:	b2da      	uxtb	r2, r3
 8008480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008482:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008486:	68ba      	ldr	r2, [r7, #8]
 8008488:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800848a:	699b      	ldr	r3, [r3, #24]
 800848c:	18d1      	adds	r1, r2, r3
 800848e:	68bb      	ldr	r3, [r7, #8]
 8008490:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008492:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008494:	f7ff ff5c 	bl	8008350 <prvInsertTimerInActiveList>
 8008498:	4603      	mov	r3, r0
 800849a:	2b00      	cmp	r3, #0
 800849c:	d06c      	beq.n	8008578 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800849e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a0:	6a1b      	ldr	r3, [r3, #32]
 80084a2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084a4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80084a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084ac:	f003 0304 	and.w	r3, r3, #4
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d061      	beq.n	8008578 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80084b4:	68ba      	ldr	r2, [r7, #8]
 80084b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084b8:	699b      	ldr	r3, [r3, #24]
 80084ba:	441a      	add	r2, r3
 80084bc:	2300      	movs	r3, #0
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	2300      	movs	r3, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80084c6:	f7ff fe01 	bl	80080cc <xTimerGenericCommand>
 80084ca:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80084cc:	6a3b      	ldr	r3, [r7, #32]
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d152      	bne.n	8008578 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80084d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80084d6:	f383 8811 	msr	BASEPRI, r3
 80084da:	f3bf 8f6f 	isb	sy
 80084de:	f3bf 8f4f 	dsb	sy
 80084e2:	61bb      	str	r3, [r7, #24]
}
 80084e4:	bf00      	nop
 80084e6:	bf00      	nop
 80084e8:	e7fd      	b.n	80084e6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80084ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ec:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80084f0:	f023 0301 	bic.w	r3, r3, #1
 80084f4:	b2da      	uxtb	r2, r3
 80084f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80084fc:	e03d      	b.n	800857a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80084fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008500:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008504:	f043 0301 	orr.w	r3, r3, #1
 8008508:	b2da      	uxtb	r2, r3
 800850a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800850c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008510:	68ba      	ldr	r2, [r7, #8]
 8008512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008514:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008518:	699b      	ldr	r3, [r3, #24]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10b      	bne.n	8008536 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800851e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008522:	f383 8811 	msr	BASEPRI, r3
 8008526:	f3bf 8f6f 	isb	sy
 800852a:	f3bf 8f4f 	dsb	sy
 800852e:	617b      	str	r3, [r7, #20]
}
 8008530:	bf00      	nop
 8008532:	bf00      	nop
 8008534:	e7fd      	b.n	8008532 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008538:	699a      	ldr	r2, [r3, #24]
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	18d1      	adds	r1, r2, r3
 800853e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008540:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008542:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008544:	f7ff ff04 	bl	8008350 <prvInsertTimerInActiveList>
					break;
 8008548:	e017      	b.n	800857a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800854a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800854c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008550:	f003 0302 	and.w	r3, r3, #2
 8008554:	2b00      	cmp	r3, #0
 8008556:	d103      	bne.n	8008560 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800855a:	f000 fc05 	bl	8008d68 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800855e:	e00c      	b.n	800857a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008562:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008566:	f023 0301 	bic.w	r3, r3, #1
 800856a:	b2da      	uxtb	r2, r3
 800856c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008572:	e002      	b.n	800857a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8008574:	bf00      	nop
 8008576:	e000      	b.n	800857a <prvProcessReceivedCommands+0x1a6>
					break;
 8008578:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800857a:	4b08      	ldr	r3, [pc, #32]	@ (800859c <prvProcessReceivedCommands+0x1c8>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	1d39      	adds	r1, r7, #4
 8008580:	2200      	movs	r2, #0
 8008582:	4618      	mov	r0, r3
 8008584:	f7fe f912 	bl	80067ac <xQueueReceive>
 8008588:	4603      	mov	r3, r0
 800858a:	2b00      	cmp	r3, #0
 800858c:	f47f af26 	bne.w	80083dc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008590:	bf00      	nop
 8008592:	bf00      	nop
 8008594:	3730      	adds	r7, #48	@ 0x30
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20006d7c 	.word	0x20006d7c

080085a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b088      	sub	sp, #32
 80085a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80085a6:	e049      	b.n	800863c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085a8:	4b2e      	ldr	r3, [pc, #184]	@ (8008664 <prvSwitchTimerLists+0xc4>)
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68db      	ldr	r3, [r3, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80085b2:	4b2c      	ldr	r3, [pc, #176]	@ (8008664 <prvSwitchTimerLists+0xc4>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	3304      	adds	r3, #4
 80085c0:	4618      	mov	r0, r3
 80085c2:	f7fd fd2b 	bl	800601c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80085d4:	f003 0304 	and.w	r3, r3, #4
 80085d8:	2b00      	cmp	r3, #0
 80085da:	d02f      	beq.n	800863c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	699b      	ldr	r3, [r3, #24]
 80085e0:	693a      	ldr	r2, [r7, #16]
 80085e2:	4413      	add	r3, r2
 80085e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80085e6:	68ba      	ldr	r2, [r7, #8]
 80085e8:	693b      	ldr	r3, [r7, #16]
 80085ea:	429a      	cmp	r2, r3
 80085ec:	d90e      	bls.n	800860c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	68ba      	ldr	r2, [r7, #8]
 80085f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	68fa      	ldr	r2, [r7, #12]
 80085f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80085fa:	4b1a      	ldr	r3, [pc, #104]	@ (8008664 <prvSwitchTimerLists+0xc4>)
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3304      	adds	r3, #4
 8008602:	4619      	mov	r1, r3
 8008604:	4610      	mov	r0, r2
 8008606:	f7fd fcd0 	bl	8005faa <vListInsert>
 800860a:	e017      	b.n	800863c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800860c:	2300      	movs	r3, #0
 800860e:	9300      	str	r3, [sp, #0]
 8008610:	2300      	movs	r3, #0
 8008612:	693a      	ldr	r2, [r7, #16]
 8008614:	2100      	movs	r1, #0
 8008616:	68f8      	ldr	r0, [r7, #12]
 8008618:	f7ff fd58 	bl	80080cc <xTimerGenericCommand>
 800861c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	2b00      	cmp	r3, #0
 8008622:	d10b      	bne.n	800863c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008624:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008628:	f383 8811 	msr	BASEPRI, r3
 800862c:	f3bf 8f6f 	isb	sy
 8008630:	f3bf 8f4f 	dsb	sy
 8008634:	603b      	str	r3, [r7, #0]
}
 8008636:	bf00      	nop
 8008638:	bf00      	nop
 800863a:	e7fd      	b.n	8008638 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800863c:	4b09      	ldr	r3, [pc, #36]	@ (8008664 <prvSwitchTimerLists+0xc4>)
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1b0      	bne.n	80085a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008646:	4b07      	ldr	r3, [pc, #28]	@ (8008664 <prvSwitchTimerLists+0xc4>)
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800864c:	4b06      	ldr	r3, [pc, #24]	@ (8008668 <prvSwitchTimerLists+0xc8>)
 800864e:	681b      	ldr	r3, [r3, #0]
 8008650:	4a04      	ldr	r2, [pc, #16]	@ (8008664 <prvSwitchTimerLists+0xc4>)
 8008652:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008654:	4a04      	ldr	r2, [pc, #16]	@ (8008668 <prvSwitchTimerLists+0xc8>)
 8008656:	697b      	ldr	r3, [r7, #20]
 8008658:	6013      	str	r3, [r2, #0]
}
 800865a:	bf00      	nop
 800865c:	3718      	adds	r7, #24
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}
 8008662:	bf00      	nop
 8008664:	20006d74 	.word	0x20006d74
 8008668:	20006d78 	.word	0x20006d78

0800866c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008672:	f000 f989 	bl	8008988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008676:	4b15      	ldr	r3, [pc, #84]	@ (80086cc <prvCheckForValidListAndQueue+0x60>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d120      	bne.n	80086c0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800867e:	4814      	ldr	r0, [pc, #80]	@ (80086d0 <prvCheckForValidListAndQueue+0x64>)
 8008680:	f7fd fc42 	bl	8005f08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008684:	4813      	ldr	r0, [pc, #76]	@ (80086d4 <prvCheckForValidListAndQueue+0x68>)
 8008686:	f7fd fc3f 	bl	8005f08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800868a:	4b13      	ldr	r3, [pc, #76]	@ (80086d8 <prvCheckForValidListAndQueue+0x6c>)
 800868c:	4a10      	ldr	r2, [pc, #64]	@ (80086d0 <prvCheckForValidListAndQueue+0x64>)
 800868e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008690:	4b12      	ldr	r3, [pc, #72]	@ (80086dc <prvCheckForValidListAndQueue+0x70>)
 8008692:	4a10      	ldr	r2, [pc, #64]	@ (80086d4 <prvCheckForValidListAndQueue+0x68>)
 8008694:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008696:	2300      	movs	r3, #0
 8008698:	9300      	str	r3, [sp, #0]
 800869a:	4b11      	ldr	r3, [pc, #68]	@ (80086e0 <prvCheckForValidListAndQueue+0x74>)
 800869c:	4a11      	ldr	r2, [pc, #68]	@ (80086e4 <prvCheckForValidListAndQueue+0x78>)
 800869e:	2110      	movs	r1, #16
 80086a0:	200a      	movs	r0, #10
 80086a2:	f7fd fd4f 	bl	8006144 <xQueueGenericCreateStatic>
 80086a6:	4603      	mov	r3, r0
 80086a8:	4a08      	ldr	r2, [pc, #32]	@ (80086cc <prvCheckForValidListAndQueue+0x60>)
 80086aa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80086ac:	4b07      	ldr	r3, [pc, #28]	@ (80086cc <prvCheckForValidListAndQueue+0x60>)
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80086b4:	4b05      	ldr	r3, [pc, #20]	@ (80086cc <prvCheckForValidListAndQueue+0x60>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	490b      	ldr	r1, [pc, #44]	@ (80086e8 <prvCheckForValidListAndQueue+0x7c>)
 80086ba:	4618      	mov	r0, r3
 80086bc:	f7fe fb90 	bl	8006de0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80086c0:	f000 f994 	bl	80089ec <vPortExitCritical>
}
 80086c4:	bf00      	nop
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	20006d7c 	.word	0x20006d7c
 80086d0:	20006d4c 	.word	0x20006d4c
 80086d4:	20006d60 	.word	0x20006d60
 80086d8:	20006d74 	.word	0x20006d74
 80086dc:	20006d78 	.word	0x20006d78
 80086e0:	20006e28 	.word	0x20006e28
 80086e4:	20006d88 	.word	0x20006d88
 80086e8:	0801042c 	.word	0x0801042c

080086ec <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80086ec:	b580      	push	{r7, lr}
 80086ee:	b08a      	sub	sp, #40	@ 0x28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 80086fa:	f06f 0301 	mvn.w	r3, #1
 80086fe:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800870c:	4b06      	ldr	r3, [pc, #24]	@ (8008728 <xTimerPendFunctionCallFromISR+0x3c>)
 800870e:	6818      	ldr	r0, [r3, #0]
 8008710:	f107 0114 	add.w	r1, r7, #20
 8008714:	2300      	movs	r3, #0
 8008716:	683a      	ldr	r2, [r7, #0]
 8008718:	f7fd ffaa 	bl	8006670 <xQueueGenericSendFromISR>
 800871c:	6278      	str	r0, [r7, #36]	@ 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800871e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8008720:	4618      	mov	r0, r3
 8008722:	3728      	adds	r7, #40	@ 0x28
 8008724:	46bd      	mov	sp, r7
 8008726:	bd80      	pop	{r7, pc}
 8008728:	20006d7c 	.word	0x20006d7c

0800872c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800872c:	b480      	push	{r7}
 800872e:	b085      	sub	sp, #20
 8008730:	af00      	add	r7, sp, #0
 8008732:	60f8      	str	r0, [r7, #12]
 8008734:	60b9      	str	r1, [r7, #8]
 8008736:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	3b04      	subs	r3, #4
 800873c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008744:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	3b04      	subs	r3, #4
 800874a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800874c:	68bb      	ldr	r3, [r7, #8]
 800874e:	f023 0201 	bic.w	r2, r3, #1
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	3b04      	subs	r3, #4
 800875a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800875c:	4a0c      	ldr	r2, [pc, #48]	@ (8008790 <pxPortInitialiseStack+0x64>)
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3b14      	subs	r3, #20
 8008766:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008768:	687a      	ldr	r2, [r7, #4]
 800876a:	68fb      	ldr	r3, [r7, #12]
 800876c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	3b04      	subs	r3, #4
 8008772:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	f06f 0202 	mvn.w	r2, #2
 800877a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	3b20      	subs	r3, #32
 8008780:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008782:	68fb      	ldr	r3, [r7, #12]
}
 8008784:	4618      	mov	r0, r3
 8008786:	3714      	adds	r7, #20
 8008788:	46bd      	mov	sp, r7
 800878a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878e:	4770      	bx	lr
 8008790:	08008795 	.word	0x08008795

08008794 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008794:	b480      	push	{r7}
 8008796:	b085      	sub	sp, #20
 8008798:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800879a:	2300      	movs	r3, #0
 800879c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800879e:	4b13      	ldr	r3, [pc, #76]	@ (80087ec <prvTaskExitError+0x58>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80087a6:	d00b      	beq.n	80087c0 <prvTaskExitError+0x2c>
	__asm volatile
 80087a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087ac:	f383 8811 	msr	BASEPRI, r3
 80087b0:	f3bf 8f6f 	isb	sy
 80087b4:	f3bf 8f4f 	dsb	sy
 80087b8:	60fb      	str	r3, [r7, #12]
}
 80087ba:	bf00      	nop
 80087bc:	bf00      	nop
 80087be:	e7fd      	b.n	80087bc <prvTaskExitError+0x28>
	__asm volatile
 80087c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c4:	f383 8811 	msr	BASEPRI, r3
 80087c8:	f3bf 8f6f 	isb	sy
 80087cc:	f3bf 8f4f 	dsb	sy
 80087d0:	60bb      	str	r3, [r7, #8]
}
 80087d2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80087d4:	bf00      	nop
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d0fc      	beq.n	80087d6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80087dc:	bf00      	nop
 80087de:	bf00      	nop
 80087e0:	3714      	adds	r7, #20
 80087e2:	46bd      	mov	sp, r7
 80087e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087e8:	4770      	bx	lr
 80087ea:	bf00      	nop
 80087ec:	20000014 	.word	0x20000014

080087f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80087f0:	4b07      	ldr	r3, [pc, #28]	@ (8008810 <pxCurrentTCBConst2>)
 80087f2:	6819      	ldr	r1, [r3, #0]
 80087f4:	6808      	ldr	r0, [r1, #0]
 80087f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fa:	f380 8809 	msr	PSP, r0
 80087fe:	f3bf 8f6f 	isb	sy
 8008802:	f04f 0000 	mov.w	r0, #0
 8008806:	f380 8811 	msr	BASEPRI, r0
 800880a:	4770      	bx	lr
 800880c:	f3af 8000 	nop.w

08008810 <pxCurrentTCBConst2>:
 8008810:	2000684c 	.word	0x2000684c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008814:	bf00      	nop
 8008816:	bf00      	nop

08008818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008818:	4808      	ldr	r0, [pc, #32]	@ (800883c <prvPortStartFirstTask+0x24>)
 800881a:	6800      	ldr	r0, [r0, #0]
 800881c:	6800      	ldr	r0, [r0, #0]
 800881e:	f380 8808 	msr	MSP, r0
 8008822:	f04f 0000 	mov.w	r0, #0
 8008826:	f380 8814 	msr	CONTROL, r0
 800882a:	b662      	cpsie	i
 800882c:	b661      	cpsie	f
 800882e:	f3bf 8f4f 	dsb	sy
 8008832:	f3bf 8f6f 	isb	sy
 8008836:	df00      	svc	0
 8008838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800883a:	bf00      	nop
 800883c:	e000ed08 	.word	0xe000ed08

08008840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008840:	b580      	push	{r7, lr}
 8008842:	b086      	sub	sp, #24
 8008844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008846:	4b47      	ldr	r3, [pc, #284]	@ (8008964 <xPortStartScheduler+0x124>)
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a47      	ldr	r2, [pc, #284]	@ (8008968 <xPortStartScheduler+0x128>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d10b      	bne.n	8008868 <xPortStartScheduler+0x28>
	__asm volatile
 8008850:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008854:	f383 8811 	msr	BASEPRI, r3
 8008858:	f3bf 8f6f 	isb	sy
 800885c:	f3bf 8f4f 	dsb	sy
 8008860:	60fb      	str	r3, [r7, #12]
}
 8008862:	bf00      	nop
 8008864:	bf00      	nop
 8008866:	e7fd      	b.n	8008864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008868:	4b3e      	ldr	r3, [pc, #248]	@ (8008964 <xPortStartScheduler+0x124>)
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3f      	ldr	r2, [pc, #252]	@ (800896c <xPortStartScheduler+0x12c>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d10b      	bne.n	800888a <xPortStartScheduler+0x4a>
	__asm volatile
 8008872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008876:	f383 8811 	msr	BASEPRI, r3
 800887a:	f3bf 8f6f 	isb	sy
 800887e:	f3bf 8f4f 	dsb	sy
 8008882:	613b      	str	r3, [r7, #16]
}
 8008884:	bf00      	nop
 8008886:	bf00      	nop
 8008888:	e7fd      	b.n	8008886 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800888a:	4b39      	ldr	r3, [pc, #228]	@ (8008970 <xPortStartScheduler+0x130>)
 800888c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800888e:	697b      	ldr	r3, [r7, #20]
 8008890:	781b      	ldrb	r3, [r3, #0]
 8008892:	b2db      	uxtb	r3, r3
 8008894:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008896:	697b      	ldr	r3, [r7, #20]
 8008898:	22ff      	movs	r2, #255	@ 0xff
 800889a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800889c:	697b      	ldr	r3, [r7, #20]
 800889e:	781b      	ldrb	r3, [r3, #0]
 80088a0:	b2db      	uxtb	r3, r3
 80088a2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80088a4:	78fb      	ldrb	r3, [r7, #3]
 80088a6:	b2db      	uxtb	r3, r3
 80088a8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	4b31      	ldr	r3, [pc, #196]	@ (8008974 <xPortStartScheduler+0x134>)
 80088b0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80088b2:	4b31      	ldr	r3, [pc, #196]	@ (8008978 <xPortStartScheduler+0x138>)
 80088b4:	2207      	movs	r2, #7
 80088b6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088b8:	e009      	b.n	80088ce <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 80088ba:	4b2f      	ldr	r3, [pc, #188]	@ (8008978 <xPortStartScheduler+0x138>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	3b01      	subs	r3, #1
 80088c0:	4a2d      	ldr	r2, [pc, #180]	@ (8008978 <xPortStartScheduler+0x138>)
 80088c2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80088c4:	78fb      	ldrb	r3, [r7, #3]
 80088c6:	b2db      	uxtb	r3, r3
 80088c8:	005b      	lsls	r3, r3, #1
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80088ce:	78fb      	ldrb	r3, [r7, #3]
 80088d0:	b2db      	uxtb	r3, r3
 80088d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80088d6:	2b80      	cmp	r3, #128	@ 0x80
 80088d8:	d0ef      	beq.n	80088ba <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80088da:	4b27      	ldr	r3, [pc, #156]	@ (8008978 <xPortStartScheduler+0x138>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f1c3 0307 	rsb	r3, r3, #7
 80088e2:	2b04      	cmp	r3, #4
 80088e4:	d00b      	beq.n	80088fe <xPortStartScheduler+0xbe>
	__asm volatile
 80088e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088ea:	f383 8811 	msr	BASEPRI, r3
 80088ee:	f3bf 8f6f 	isb	sy
 80088f2:	f3bf 8f4f 	dsb	sy
 80088f6:	60bb      	str	r3, [r7, #8]
}
 80088f8:	bf00      	nop
 80088fa:	bf00      	nop
 80088fc:	e7fd      	b.n	80088fa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80088fe:	4b1e      	ldr	r3, [pc, #120]	@ (8008978 <xPortStartScheduler+0x138>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	021b      	lsls	r3, r3, #8
 8008904:	4a1c      	ldr	r2, [pc, #112]	@ (8008978 <xPortStartScheduler+0x138>)
 8008906:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008908:	4b1b      	ldr	r3, [pc, #108]	@ (8008978 <xPortStartScheduler+0x138>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008910:	4a19      	ldr	r2, [pc, #100]	@ (8008978 <xPortStartScheduler+0x138>)
 8008912:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	b2da      	uxtb	r2, r3
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800891c:	4b17      	ldr	r3, [pc, #92]	@ (800897c <xPortStartScheduler+0x13c>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	4a16      	ldr	r2, [pc, #88]	@ (800897c <xPortStartScheduler+0x13c>)
 8008922:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008926:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008928:	4b14      	ldr	r3, [pc, #80]	@ (800897c <xPortStartScheduler+0x13c>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a13      	ldr	r2, [pc, #76]	@ (800897c <xPortStartScheduler+0x13c>)
 800892e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008932:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008934:	f000 f8da 	bl	8008aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008938:	4b11      	ldr	r3, [pc, #68]	@ (8008980 <xPortStartScheduler+0x140>)
 800893a:	2200      	movs	r2, #0
 800893c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800893e:	f000 f8f9 	bl	8008b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008942:	4b10      	ldr	r3, [pc, #64]	@ (8008984 <xPortStartScheduler+0x144>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a0f      	ldr	r2, [pc, #60]	@ (8008984 <xPortStartScheduler+0x144>)
 8008948:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800894c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800894e:	f7ff ff63 	bl	8008818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008952:	f7fe fe47 	bl	80075e4 <vTaskSwitchContext>
	prvTaskExitError();
 8008956:	f7ff ff1d 	bl	8008794 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3718      	adds	r7, #24
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	e000ed00 	.word	0xe000ed00
 8008968:	410fc271 	.word	0x410fc271
 800896c:	410fc270 	.word	0x410fc270
 8008970:	e000e400 	.word	0xe000e400
 8008974:	20006e78 	.word	0x20006e78
 8008978:	20006e7c 	.word	0x20006e7c
 800897c:	e000ed20 	.word	0xe000ed20
 8008980:	20000014 	.word	0x20000014
 8008984:	e000ef34 	.word	0xe000ef34

08008988 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008988:	b480      	push	{r7}
 800898a:	b083      	sub	sp, #12
 800898c:	af00      	add	r7, sp, #0
	__asm volatile
 800898e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008992:	f383 8811 	msr	BASEPRI, r3
 8008996:	f3bf 8f6f 	isb	sy
 800899a:	f3bf 8f4f 	dsb	sy
 800899e:	607b      	str	r3, [r7, #4]
}
 80089a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80089a2:	4b10      	ldr	r3, [pc, #64]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	3301      	adds	r3, #1
 80089a8:	4a0e      	ldr	r2, [pc, #56]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089aa:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80089ac:	4b0d      	ldr	r3, [pc, #52]	@ (80089e4 <vPortEnterCritical+0x5c>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	2b01      	cmp	r3, #1
 80089b2:	d110      	bne.n	80089d6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80089b4:	4b0c      	ldr	r3, [pc, #48]	@ (80089e8 <vPortEnterCritical+0x60>)
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d00b      	beq.n	80089d6 <vPortEnterCritical+0x4e>
	__asm volatile
 80089be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c2:	f383 8811 	msr	BASEPRI, r3
 80089c6:	f3bf 8f6f 	isb	sy
 80089ca:	f3bf 8f4f 	dsb	sy
 80089ce:	603b      	str	r3, [r7, #0]
}
 80089d0:	bf00      	nop
 80089d2:	bf00      	nop
 80089d4:	e7fd      	b.n	80089d2 <vPortEnterCritical+0x4a>
	}
}
 80089d6:	bf00      	nop
 80089d8:	370c      	adds	r7, #12
 80089da:	46bd      	mov	sp, r7
 80089dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e0:	4770      	bx	lr
 80089e2:	bf00      	nop
 80089e4:	20000014 	.word	0x20000014
 80089e8:	e000ed04 	.word	0xe000ed04

080089ec <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80089ec:	b480      	push	{r7}
 80089ee:	b083      	sub	sp, #12
 80089f0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80089f2:	4b12      	ldr	r3, [pc, #72]	@ (8008a3c <vPortExitCritical+0x50>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d10b      	bne.n	8008a12 <vPortExitCritical+0x26>
	__asm volatile
 80089fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089fe:	f383 8811 	msr	BASEPRI, r3
 8008a02:	f3bf 8f6f 	isb	sy
 8008a06:	f3bf 8f4f 	dsb	sy
 8008a0a:	607b      	str	r3, [r7, #4]
}
 8008a0c:	bf00      	nop
 8008a0e:	bf00      	nop
 8008a10:	e7fd      	b.n	8008a0e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008a12:	4b0a      	ldr	r3, [pc, #40]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	3b01      	subs	r3, #1
 8008a18:	4a08      	ldr	r2, [pc, #32]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a1a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008a1c:	4b07      	ldr	r3, [pc, #28]	@ (8008a3c <vPortExitCritical+0x50>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d105      	bne.n	8008a30 <vPortExitCritical+0x44>
 8008a24:	2300      	movs	r3, #0
 8008a26:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	f383 8811 	msr	BASEPRI, r3
}
 8008a2e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008a30:	bf00      	nop
 8008a32:	370c      	adds	r7, #12
 8008a34:	46bd      	mov	sp, r7
 8008a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3a:	4770      	bx	lr
 8008a3c:	20000014 	.word	0x20000014

08008a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008a40:	f3ef 8009 	mrs	r0, PSP
 8008a44:	f3bf 8f6f 	isb	sy
 8008a48:	4b15      	ldr	r3, [pc, #84]	@ (8008aa0 <pxCurrentTCBConst>)
 8008a4a:	681a      	ldr	r2, [r3, #0]
 8008a4c:	f01e 0f10 	tst.w	lr, #16
 8008a50:	bf08      	it	eq
 8008a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a5a:	6010      	str	r0, [r2, #0]
 8008a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008a60:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008a64:	f380 8811 	msr	BASEPRI, r0
 8008a68:	f3bf 8f4f 	dsb	sy
 8008a6c:	f3bf 8f6f 	isb	sy
 8008a70:	f7fe fdb8 	bl	80075e4 <vTaskSwitchContext>
 8008a74:	f04f 0000 	mov.w	r0, #0
 8008a78:	f380 8811 	msr	BASEPRI, r0
 8008a7c:	bc09      	pop	{r0, r3}
 8008a7e:	6819      	ldr	r1, [r3, #0]
 8008a80:	6808      	ldr	r0, [r1, #0]
 8008a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a86:	f01e 0f10 	tst.w	lr, #16
 8008a8a:	bf08      	it	eq
 8008a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008a90:	f380 8809 	msr	PSP, r0
 8008a94:	f3bf 8f6f 	isb	sy
 8008a98:	4770      	bx	lr
 8008a9a:	bf00      	nop
 8008a9c:	f3af 8000 	nop.w

08008aa0 <pxCurrentTCBConst>:
 8008aa0:	2000684c 	.word	0x2000684c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008aa4:	bf00      	nop
 8008aa6:	bf00      	nop

08008aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	607b      	str	r3, [r7, #4]
}
 8008ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008ac2:	f7fe fcd5 	bl	8007470 <xTaskIncrementTick>
 8008ac6:	4603      	mov	r3, r0
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d003      	beq.n	8008ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008acc:	4b06      	ldr	r3, [pc, #24]	@ (8008ae8 <xPortSysTickHandler+0x40>)
 8008ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008ad2:	601a      	str	r2, [r3, #0]
 8008ad4:	2300      	movs	r3, #0
 8008ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008ad8:	683b      	ldr	r3, [r7, #0]
 8008ada:	f383 8811 	msr	BASEPRI, r3
}
 8008ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008ae0:	bf00      	nop
 8008ae2:	3708      	adds	r7, #8
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}
 8008ae8:	e000ed04 	.word	0xe000ed04

08008aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008aec:	b480      	push	{r7}
 8008aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008af0:	4b0b      	ldr	r3, [pc, #44]	@ (8008b20 <vPortSetupTimerInterrupt+0x34>)
 8008af2:	2200      	movs	r2, #0
 8008af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008af6:	4b0b      	ldr	r3, [pc, #44]	@ (8008b24 <vPortSetupTimerInterrupt+0x38>)
 8008af8:	2200      	movs	r2, #0
 8008afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008afc:	4b0a      	ldr	r3, [pc, #40]	@ (8008b28 <vPortSetupTimerInterrupt+0x3c>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4a0a      	ldr	r2, [pc, #40]	@ (8008b2c <vPortSetupTimerInterrupt+0x40>)
 8008b02:	fba2 2303 	umull	r2, r3, r2, r3
 8008b06:	099b      	lsrs	r3, r3, #6
 8008b08:	4a09      	ldr	r2, [pc, #36]	@ (8008b30 <vPortSetupTimerInterrupt+0x44>)
 8008b0a:	3b01      	subs	r3, #1
 8008b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008b0e:	4b04      	ldr	r3, [pc, #16]	@ (8008b20 <vPortSetupTimerInterrupt+0x34>)
 8008b10:	2207      	movs	r2, #7
 8008b12:	601a      	str	r2, [r3, #0]
}
 8008b14:	bf00      	nop
 8008b16:	46bd      	mov	sp, r7
 8008b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1c:	4770      	bx	lr
 8008b1e:	bf00      	nop
 8008b20:	e000e010 	.word	0xe000e010
 8008b24:	e000e018 	.word	0xe000e018
 8008b28:	20000008 	.word	0x20000008
 8008b2c:	10624dd3 	.word	0x10624dd3
 8008b30:	e000e014 	.word	0xe000e014

08008b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008b34:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8008b44 <vPortEnableVFP+0x10>
 8008b38:	6801      	ldr	r1, [r0, #0]
 8008b3a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8008b3e:	6001      	str	r1, [r0, #0]
 8008b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008b42:	bf00      	nop
 8008b44:	e000ed88 	.word	0xe000ed88

08008b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008b48:	b480      	push	{r7}
 8008b4a:	b085      	sub	sp, #20
 8008b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008b4e:	f3ef 8305 	mrs	r3, IPSR
 8008b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	2b0f      	cmp	r3, #15
 8008b58:	d915      	bls.n	8008b86 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008b5a:	4a18      	ldr	r2, [pc, #96]	@ (8008bbc <vPortValidateInterruptPriority+0x74>)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	4413      	add	r3, r2
 8008b60:	781b      	ldrb	r3, [r3, #0]
 8008b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008b64:	4b16      	ldr	r3, [pc, #88]	@ (8008bc0 <vPortValidateInterruptPriority+0x78>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	7afa      	ldrb	r2, [r7, #11]
 8008b6a:	429a      	cmp	r2, r3
 8008b6c:	d20b      	bcs.n	8008b86 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8008b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b72:	f383 8811 	msr	BASEPRI, r3
 8008b76:	f3bf 8f6f 	isb	sy
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	607b      	str	r3, [r7, #4]
}
 8008b80:	bf00      	nop
 8008b82:	bf00      	nop
 8008b84:	e7fd      	b.n	8008b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008b86:	4b0f      	ldr	r3, [pc, #60]	@ (8008bc4 <vPortValidateInterruptPriority+0x7c>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8008b8e:	4b0e      	ldr	r3, [pc, #56]	@ (8008bc8 <vPortValidateInterruptPriority+0x80>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	429a      	cmp	r2, r3
 8008b94:	d90b      	bls.n	8008bae <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8008b96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b9a:	f383 8811 	msr	BASEPRI, r3
 8008b9e:	f3bf 8f6f 	isb	sy
 8008ba2:	f3bf 8f4f 	dsb	sy
 8008ba6:	603b      	str	r3, [r7, #0]
}
 8008ba8:	bf00      	nop
 8008baa:	bf00      	nop
 8008bac:	e7fd      	b.n	8008baa <vPortValidateInterruptPriority+0x62>
	}
 8008bae:	bf00      	nop
 8008bb0:	3714      	adds	r7, #20
 8008bb2:	46bd      	mov	sp, r7
 8008bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bb8:	4770      	bx	lr
 8008bba:	bf00      	nop
 8008bbc:	e000e3f0 	.word	0xe000e3f0
 8008bc0:	20006e78 	.word	0x20006e78
 8008bc4:	e000ed0c 	.word	0xe000ed0c
 8008bc8:	20006e7c 	.word	0x20006e7c

08008bcc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b08a      	sub	sp, #40	@ 0x28
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008bd8:	f7fe fb8e 	bl	80072f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008bdc:	4b5c      	ldr	r3, [pc, #368]	@ (8008d50 <pvPortMalloc+0x184>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d101      	bne.n	8008be8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008be4:	f000 f924 	bl	8008e30 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008be8:	4b5a      	ldr	r3, [pc, #360]	@ (8008d54 <pvPortMalloc+0x188>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	4013      	ands	r3, r2
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	f040 8095 	bne.w	8008d20 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d01e      	beq.n	8008c3a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008bfc:	2208      	movs	r2, #8
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	4413      	add	r3, r2
 8008c02:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	f003 0307 	and.w	r3, r3, #7
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d015      	beq.n	8008c3a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f023 0307 	bic.w	r3, r3, #7
 8008c14:	3308      	adds	r3, #8
 8008c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	f003 0307 	and.w	r3, r3, #7
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d00b      	beq.n	8008c3a <pvPortMalloc+0x6e>
	__asm volatile
 8008c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c26:	f383 8811 	msr	BASEPRI, r3
 8008c2a:	f3bf 8f6f 	isb	sy
 8008c2e:	f3bf 8f4f 	dsb	sy
 8008c32:	617b      	str	r3, [r7, #20]
}
 8008c34:	bf00      	nop
 8008c36:	bf00      	nop
 8008c38:	e7fd      	b.n	8008c36 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d06f      	beq.n	8008d20 <pvPortMalloc+0x154>
 8008c40:	4b45      	ldr	r3, [pc, #276]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d86a      	bhi.n	8008d20 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c4a:	4b44      	ldr	r3, [pc, #272]	@ (8008d5c <pvPortMalloc+0x190>)
 8008c4c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008c4e:	4b43      	ldr	r3, [pc, #268]	@ (8008d5c <pvPortMalloc+0x190>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c54:	e004      	b.n	8008c60 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c58:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c62:	685b      	ldr	r3, [r3, #4]
 8008c64:	687a      	ldr	r2, [r7, #4]
 8008c66:	429a      	cmp	r2, r3
 8008c68:	d903      	bls.n	8008c72 <pvPortMalloc+0xa6>
 8008c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	d1f1      	bne.n	8008c56 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c72:	4b37      	ldr	r3, [pc, #220]	@ (8008d50 <pvPortMalloc+0x184>)
 8008c74:	681b      	ldr	r3, [r3, #0]
 8008c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d051      	beq.n	8008d20 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c7c:	6a3b      	ldr	r3, [r7, #32]
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	2208      	movs	r2, #8
 8008c82:	4413      	add	r3, r2
 8008c84:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c88:	681a      	ldr	r2, [r3, #0]
 8008c8a:	6a3b      	ldr	r3, [r7, #32]
 8008c8c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c90:	685a      	ldr	r2, [r3, #4]
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	1ad2      	subs	r2, r2, r3
 8008c96:	2308      	movs	r3, #8
 8008c98:	005b      	lsls	r3, r3, #1
 8008c9a:	429a      	cmp	r2, r3
 8008c9c:	d920      	bls.n	8008ce0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c9e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	4413      	add	r3, r2
 8008ca4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008ca6:	69bb      	ldr	r3, [r7, #24]
 8008ca8:	f003 0307 	and.w	r3, r3, #7
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d00b      	beq.n	8008cc8 <pvPortMalloc+0xfc>
	__asm volatile
 8008cb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cb4:	f383 8811 	msr	BASEPRI, r3
 8008cb8:	f3bf 8f6f 	isb	sy
 8008cbc:	f3bf 8f4f 	dsb	sy
 8008cc0:	613b      	str	r3, [r7, #16]
}
 8008cc2:	bf00      	nop
 8008cc4:	bf00      	nop
 8008cc6:	e7fd      	b.n	8008cc4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008cc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cca:	685a      	ldr	r2, [r3, #4]
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	1ad2      	subs	r2, r2, r3
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008cd6:	687a      	ldr	r2, [r7, #4]
 8008cd8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cda:	69b8      	ldr	r0, [r7, #24]
 8008cdc:	f000 f90a 	bl	8008ef4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ce6:	685b      	ldr	r3, [r3, #4]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	4a1b      	ldr	r2, [pc, #108]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008cec:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cee:	4b1a      	ldr	r3, [pc, #104]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008cf0:	681a      	ldr	r2, [r3, #0]
 8008cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8008d60 <pvPortMalloc+0x194>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	429a      	cmp	r2, r3
 8008cf8:	d203      	bcs.n	8008d02 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cfa:	4b17      	ldr	r3, [pc, #92]	@ (8008d58 <pvPortMalloc+0x18c>)
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	4a18      	ldr	r2, [pc, #96]	@ (8008d60 <pvPortMalloc+0x194>)
 8008d00:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d04:	685a      	ldr	r2, [r3, #4]
 8008d06:	4b13      	ldr	r3, [pc, #76]	@ (8008d54 <pvPortMalloc+0x188>)
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	431a      	orrs	r2, r3
 8008d0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d0e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008d10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d12:	2200      	movs	r2, #0
 8008d14:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008d16:	4b13      	ldr	r3, [pc, #76]	@ (8008d64 <pvPortMalloc+0x198>)
 8008d18:	681b      	ldr	r3, [r3, #0]
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	4a11      	ldr	r2, [pc, #68]	@ (8008d64 <pvPortMalloc+0x198>)
 8008d1e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008d20:	f7fe faf8 	bl	8007314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f003 0307 	and.w	r3, r3, #7
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d00b      	beq.n	8008d46 <pvPortMalloc+0x17a>
	__asm volatile
 8008d2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d32:	f383 8811 	msr	BASEPRI, r3
 8008d36:	f3bf 8f6f 	isb	sy
 8008d3a:	f3bf 8f4f 	dsb	sy
 8008d3e:	60fb      	str	r3, [r7, #12]
}
 8008d40:	bf00      	nop
 8008d42:	bf00      	nop
 8008d44:	e7fd      	b.n	8008d42 <pvPortMalloc+0x176>
	return pvReturn;
 8008d46:	69fb      	ldr	r3, [r7, #28]
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3728      	adds	r7, #40	@ 0x28
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	bd80      	pop	{r7, pc}
 8008d50:	2000aa88 	.word	0x2000aa88
 8008d54:	2000aa9c 	.word	0x2000aa9c
 8008d58:	2000aa8c 	.word	0x2000aa8c
 8008d5c:	2000aa80 	.word	0x2000aa80
 8008d60:	2000aa90 	.word	0x2000aa90
 8008d64:	2000aa94 	.word	0x2000aa94

08008d68 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b086      	sub	sp, #24
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d04f      	beq.n	8008e1a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d7a:	2308      	movs	r3, #8
 8008d7c:	425b      	negs	r3, r3
 8008d7e:	697a      	ldr	r2, [r7, #20]
 8008d80:	4413      	add	r3, r2
 8008d82:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d84:	697b      	ldr	r3, [r7, #20]
 8008d86:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d88:	693b      	ldr	r3, [r7, #16]
 8008d8a:	685a      	ldr	r2, [r3, #4]
 8008d8c:	4b25      	ldr	r3, [pc, #148]	@ (8008e24 <vPortFree+0xbc>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4013      	ands	r3, r2
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d10b      	bne.n	8008dae <vPortFree+0x46>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	60fb      	str	r3, [r7, #12]
}
 8008da8:	bf00      	nop
 8008daa:	bf00      	nop
 8008dac:	e7fd      	b.n	8008daa <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008dae:	693b      	ldr	r3, [r7, #16]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00b      	beq.n	8008dce <vPortFree+0x66>
	__asm volatile
 8008db6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dba:	f383 8811 	msr	BASEPRI, r3
 8008dbe:	f3bf 8f6f 	isb	sy
 8008dc2:	f3bf 8f4f 	dsb	sy
 8008dc6:	60bb      	str	r3, [r7, #8]
}
 8008dc8:	bf00      	nop
 8008dca:	bf00      	nop
 8008dcc:	e7fd      	b.n	8008dca <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008dce:	693b      	ldr	r3, [r7, #16]
 8008dd0:	685a      	ldr	r2, [r3, #4]
 8008dd2:	4b14      	ldr	r3, [pc, #80]	@ (8008e24 <vPortFree+0xbc>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	4013      	ands	r3, r2
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d01e      	beq.n	8008e1a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008ddc:	693b      	ldr	r3, [r7, #16]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d11a      	bne.n	8008e1a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008de4:	693b      	ldr	r3, [r7, #16]
 8008de6:	685a      	ldr	r2, [r3, #4]
 8008de8:	4b0e      	ldr	r3, [pc, #56]	@ (8008e24 <vPortFree+0xbc>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	43db      	mvns	r3, r3
 8008dee:	401a      	ands	r2, r3
 8008df0:	693b      	ldr	r3, [r7, #16]
 8008df2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008df4:	f7fe fa80 	bl	80072f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008df8:	693b      	ldr	r3, [r7, #16]
 8008dfa:	685a      	ldr	r2, [r3, #4]
 8008dfc:	4b0a      	ldr	r3, [pc, #40]	@ (8008e28 <vPortFree+0xc0>)
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	4413      	add	r3, r2
 8008e02:	4a09      	ldr	r2, [pc, #36]	@ (8008e28 <vPortFree+0xc0>)
 8008e04:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008e06:	6938      	ldr	r0, [r7, #16]
 8008e08:	f000 f874 	bl	8008ef4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008e0c:	4b07      	ldr	r3, [pc, #28]	@ (8008e2c <vPortFree+0xc4>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	3301      	adds	r3, #1
 8008e12:	4a06      	ldr	r2, [pc, #24]	@ (8008e2c <vPortFree+0xc4>)
 8008e14:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008e16:	f7fe fa7d 	bl	8007314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008e1a:	bf00      	nop
 8008e1c:	3718      	adds	r7, #24
 8008e1e:	46bd      	mov	sp, r7
 8008e20:	bd80      	pop	{r7, pc}
 8008e22:	bf00      	nop
 8008e24:	2000aa9c 	.word	0x2000aa9c
 8008e28:	2000aa8c 	.word	0x2000aa8c
 8008e2c:	2000aa98 	.word	0x2000aa98

08008e30 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008e30:	b480      	push	{r7}
 8008e32:	b085      	sub	sp, #20
 8008e34:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008e36:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8008e3a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008e3c:	4b27      	ldr	r3, [pc, #156]	@ (8008edc <prvHeapInit+0xac>)
 8008e3e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	f003 0307 	and.w	r3, r3, #7
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00c      	beq.n	8008e64 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	3307      	adds	r3, #7
 8008e4e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	f023 0307 	bic.w	r3, r3, #7
 8008e56:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	1ad3      	subs	r3, r2, r3
 8008e5e:	4a1f      	ldr	r2, [pc, #124]	@ (8008edc <prvHeapInit+0xac>)
 8008e60:	4413      	add	r3, r2
 8008e62:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008e68:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee0 <prvHeapInit+0xb0>)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e6e:	4b1c      	ldr	r3, [pc, #112]	@ (8008ee0 <prvHeapInit+0xb0>)
 8008e70:	2200      	movs	r2, #0
 8008e72:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	68ba      	ldr	r2, [r7, #8]
 8008e78:	4413      	add	r3, r2
 8008e7a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e7c:	2208      	movs	r2, #8
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	1a9b      	subs	r3, r3, r2
 8008e82:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f023 0307 	bic.w	r3, r3, #7
 8008e8a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	4a15      	ldr	r2, [pc, #84]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008e90:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008e92:	4b14      	ldr	r3, [pc, #80]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2200      	movs	r2, #0
 8008e98:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e9a:	4b12      	ldr	r3, [pc, #72]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	1ad2      	subs	r2, r2, r3
 8008eac:	683b      	ldr	r3, [r7, #0]
 8008eae:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008eb0:	4b0c      	ldr	r3, [pc, #48]	@ (8008ee4 <prvHeapInit+0xb4>)
 8008eb2:	681a      	ldr	r2, [r3, #0]
 8008eb4:	683b      	ldr	r3, [r7, #0]
 8008eb6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008eb8:	683b      	ldr	r3, [r7, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee8 <prvHeapInit+0xb8>)
 8008ebe:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ec0:	683b      	ldr	r3, [r7, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	4a09      	ldr	r2, [pc, #36]	@ (8008eec <prvHeapInit+0xbc>)
 8008ec6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008ec8:	4b09      	ldr	r3, [pc, #36]	@ (8008ef0 <prvHeapInit+0xc0>)
 8008eca:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008ece:	601a      	str	r2, [r3, #0]
}
 8008ed0:	bf00      	nop
 8008ed2:	3714      	adds	r7, #20
 8008ed4:	46bd      	mov	sp, r7
 8008ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eda:	4770      	bx	lr
 8008edc:	20006e80 	.word	0x20006e80
 8008ee0:	2000aa80 	.word	0x2000aa80
 8008ee4:	2000aa88 	.word	0x2000aa88
 8008ee8:	2000aa90 	.word	0x2000aa90
 8008eec:	2000aa8c 	.word	0x2000aa8c
 8008ef0:	2000aa9c 	.word	0x2000aa9c

08008ef4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008ef4:	b480      	push	{r7}
 8008ef6:	b085      	sub	sp, #20
 8008ef8:	af00      	add	r7, sp, #0
 8008efa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008efc:	4b28      	ldr	r3, [pc, #160]	@ (8008fa0 <prvInsertBlockIntoFreeList+0xac>)
 8008efe:	60fb      	str	r3, [r7, #12]
 8008f00:	e002      	b.n	8008f08 <prvInsertBlockIntoFreeList+0x14>
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	60fb      	str	r3, [r7, #12]
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	687a      	ldr	r2, [r7, #4]
 8008f0e:	429a      	cmp	r2, r3
 8008f10:	d8f7      	bhi.n	8008f02 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008f16:	68fb      	ldr	r3, [r7, #12]
 8008f18:	685b      	ldr	r3, [r3, #4]
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	4413      	add	r3, r2
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	429a      	cmp	r2, r3
 8008f22:	d108      	bne.n	8008f36 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	685b      	ldr	r3, [r3, #4]
 8008f2c:	441a      	add	r2, r3
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	68ba      	ldr	r2, [r7, #8]
 8008f40:	441a      	add	r2, r3
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	429a      	cmp	r2, r3
 8008f48:	d118      	bne.n	8008f7c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	681a      	ldr	r2, [r3, #0]
 8008f4e:	4b15      	ldr	r3, [pc, #84]	@ (8008fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	429a      	cmp	r2, r3
 8008f54:	d00d      	beq.n	8008f72 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685a      	ldr	r2, [r3, #4]
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	685b      	ldr	r3, [r3, #4]
 8008f60:	441a      	add	r2, r3
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008f66:	68fb      	ldr	r3, [r7, #12]
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	681a      	ldr	r2, [r3, #0]
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	601a      	str	r2, [r3, #0]
 8008f70:	e008      	b.n	8008f84 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f72:	4b0c      	ldr	r3, [pc, #48]	@ (8008fa4 <prvInsertBlockIntoFreeList+0xb0>)
 8008f74:	681a      	ldr	r2, [r3, #0]
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	601a      	str	r2, [r3, #0]
 8008f7a:	e003      	b.n	8008f84 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681a      	ldr	r2, [r3, #0]
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f84:	68fa      	ldr	r2, [r7, #12]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d002      	beq.n	8008f92 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f92:	bf00      	nop
 8008f94:	3714      	adds	r7, #20
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	2000aa80 	.word	0x2000aa80
 8008fa4:	2000aa88 	.word	0x2000aa88

08008fa8 <MX_PDM2PCM_Init>:
/* USER CODE BEGIN 1 */
/* USER CODE END 1 */

/* PDM2PCM init function */
void MX_PDM2PCM_Init(void)
{
 8008fa8:	b580      	push	{r7, lr}
 8008faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

   /**
  */
  PDM1_filter_handler.bit_order = PDM_FILTER_BIT_ORDER_LSB;
 8008fac:	4b10      	ldr	r3, [pc, #64]	@ (8008ff0 <MX_PDM2PCM_Init+0x48>)
 8008fae:	2200      	movs	r2, #0
 8008fb0:	801a      	strh	r2, [r3, #0]
  PDM1_filter_handler.endianness = PDM_FILTER_ENDIANNESS_LE;
 8008fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8008ff0 <MX_PDM2PCM_Init+0x48>)
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	805a      	strh	r2, [r3, #2]
  PDM1_filter_handler.high_pass_tap = 2122358088;
 8008fb8:	4b0d      	ldr	r3, [pc, #52]	@ (8008ff0 <MX_PDM2PCM_Init+0x48>)
 8008fba:	4a0e      	ldr	r2, [pc, #56]	@ (8008ff4 <MX_PDM2PCM_Init+0x4c>)
 8008fbc:	605a      	str	r2, [r3, #4]
  PDM1_filter_handler.in_ptr_channels = 1;
 8008fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8008ff0 <MX_PDM2PCM_Init+0x48>)
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	811a      	strh	r2, [r3, #8]
  PDM1_filter_handler.out_ptr_channels = 1;
 8008fc4:	4b0a      	ldr	r3, [pc, #40]	@ (8008ff0 <MX_PDM2PCM_Init+0x48>)
 8008fc6:	2201      	movs	r2, #1
 8008fc8:	815a      	strh	r2, [r3, #10]
  PDM_Filter_Init(&PDM1_filter_handler);
 8008fca:	4809      	ldr	r0, [pc, #36]	@ (8008ff0 <MX_PDM2PCM_Init+0x48>)
 8008fcc:	f001 fd26 	bl	800aa1c <PDM_Filter_Init>

  PDM1_filter_config.decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8008fd0:	4b09      	ldr	r3, [pc, #36]	@ (8008ff8 <MX_PDM2PCM_Init+0x50>)
 8008fd2:	2202      	movs	r2, #2
 8008fd4:	801a      	strh	r2, [r3, #0]
  PDM1_filter_config.output_samples_number = 16;
 8008fd6:	4b08      	ldr	r3, [pc, #32]	@ (8008ff8 <MX_PDM2PCM_Init+0x50>)
 8008fd8:	2210      	movs	r2, #16
 8008fda:	805a      	strh	r2, [r3, #2]
  PDM1_filter_config.mic_gain = 24;
 8008fdc:	4b06      	ldr	r3, [pc, #24]	@ (8008ff8 <MX_PDM2PCM_Init+0x50>)
 8008fde:	2218      	movs	r2, #24
 8008fe0:	809a      	strh	r2, [r3, #4]
  PDM_Filter_setConfig(&PDM1_filter_handler, &PDM1_filter_config);
 8008fe2:	4905      	ldr	r1, [pc, #20]	@ (8008ff8 <MX_PDM2PCM_Init+0x50>)
 8008fe4:	4802      	ldr	r0, [pc, #8]	@ (8008ff0 <MX_PDM2PCM_Init+0x48>)
 8008fe6:	f001 fde9 	bl	800abbc <PDM_Filter_setConfig>

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8008fea:	bf00      	nop
 8008fec:	bd80      	pop	{r7, pc}
 8008fee:	bf00      	nop
 8008ff0:	2000aaa0 	.word	0x2000aaa0
 8008ff4:	7e809d48 	.word	0x7e809d48
 8008ff8:	2000aaec 	.word	0x2000aaec

08008ffc <D16_GENERIC>:
 8008ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009000:	e9d2 6402 	ldrd	r6, r4, [r2, #8]
 8009004:	b089      	sub	sp, #36	@ 0x24
 8009006:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8009008:	6993      	ldr	r3, [r2, #24]
 800900a:	9406      	str	r4, [sp, #24]
 800900c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800900e:	9307      	str	r3, [sp, #28]
 8009010:	9402      	str	r4, [sp, #8]
 8009012:	e9d2 ab04 	ldrd	sl, fp, [r2, #16]
 8009016:	69d3      	ldr	r3, [r2, #28]
 8009018:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 800901a:	9103      	str	r1, [sp, #12]
 800901c:	2d00      	cmp	r5, #0
 800901e:	d066      	beq.n	80090ee <D16_GENERIC+0xf2>
 8009020:	f004 0520 	and.w	r5, r4, #32
 8009024:	f004 0410 	and.w	r4, r4, #16
 8009028:	9505      	str	r5, [sp, #20]
 800902a:	4937      	ldr	r1, [pc, #220]	@ (8009108 <D16_GENERIC+0x10c>)
 800902c:	9404      	str	r4, [sp, #16]
 800902e:	f04f 0c00 	mov.w	ip, #0
 8009032:	4635      	mov	r5, r6
 8009034:	e04f      	b.n	80090d6 <D16_GENERIC+0xda>
 8009036:	5d87      	ldrb	r7, [r0, r6]
 8009038:	7804      	ldrb	r4, [r0, #0]
 800903a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800903e:	eb04 2407 	add.w	r4, r4, r7, lsl #8
 8009042:	b2e6      	uxtb	r6, r4
 8009044:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8009048:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 800904c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009050:	4433      	add	r3, r6
 8009052:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 8009056:	f3c4 0609 	ubfx	r6, r4, #0, #10
 800905a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800905e:	ea46 4603 	orr.w	r6, r6, r3, lsl #16
 8009062:	0aa3      	lsrs	r3, r4, #10
 8009064:	4c29      	ldr	r4, [pc, #164]	@ (800910c <D16_GENERIC+0x110>)
 8009066:	fb26 5404 	smlad	r4, r6, r4, r5
 800906a:	4d29      	ldr	r5, [pc, #164]	@ (8009110 <D16_GENERIC+0x114>)
 800906c:	fb26 f505 	smuad	r5, r6, r5
 8009070:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8009074:	eb04 080a 	add.w	r8, r4, sl
 8009078:	eba8 080b 	sub.w	r8, r8, fp
 800907c:	4646      	mov	r6, r8
 800907e:	17f7      	asrs	r7, r6, #31
 8009080:	e9cd 6700 	strd	r6, r7, [sp]
 8009084:	9e04      	ldr	r6, [sp, #16]
 8009086:	f10c 0e01 	add.w	lr, ip, #1
 800908a:	b16e      	cbz	r6, 80090a8 <D16_GENERIC+0xac>
 800908c:	6a16      	ldr	r6, [r2, #32]
 800908e:	9f01      	ldr	r7, [sp, #4]
 8009090:	fba8 ab06 	umull	sl, fp, r8, r6
 8009094:	fb06 bb07 	mla	fp, r6, r7, fp
 8009098:	f11a 4800 	adds.w	r8, sl, #2147483648	@ 0x80000000
 800909c:	f14b 0900 	adc.w	r9, fp, #0
 80090a0:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 80090a4:	46a3      	mov	fp, r4
 80090a6:	4654      	mov	r4, sl
 80090a8:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80090aa:	9f02      	ldr	r7, [sp, #8]
 80090ac:	0424      	lsls	r4, r4, #16
 80090ae:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80090b2:	f04f 0900 	mov.w	r9, #0
 80090b6:	fb0c fc06 	mul.w	ip, ip, r6
 80090ba:	fbc7 8904 	smlal	r8, r9, r7, r4
 80090be:	9e03      	ldr	r6, [sp, #12]
 80090c0:	464f      	mov	r7, r9
 80090c2:	10bc      	asrs	r4, r7, #2
 80090c4:	f304 040f 	ssat	r4, #16, r4
 80090c8:	f826 401c 	strh.w	r4, [r6, ip, lsl #1]
 80090cc:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 80090ce:	fa1f fc8e 	uxth.w	ip, lr
 80090d2:	4564      	cmp	r4, ip
 80090d4:	d90a      	bls.n	80090ec <D16_GENERIC+0xf0>
 80090d6:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80090d8:	2c01      	cmp	r4, #1
 80090da:	b2e6      	uxtb	r6, r4
 80090dc:	d1ab      	bne.n	8009036 <D16_GENERIC+0x3a>
 80090de:	9e05      	ldr	r6, [sp, #20]
 80090e0:	f850 4b02 	ldr.w	r4, [r0], #2
 80090e4:	2e00      	cmp	r6, #0
 80090e6:	d0ac      	beq.n	8009042 <D16_GENERIC+0x46>
 80090e8:	ba64      	rev16	r4, r4
 80090ea:	e7aa      	b.n	8009042 <D16_GENERIC+0x46>
 80090ec:	462e      	mov	r6, r5
 80090ee:	9906      	ldr	r1, [sp, #24]
 80090f0:	61d3      	str	r3, [r2, #28]
 80090f2:	9b07      	ldr	r3, [sp, #28]
 80090f4:	6096      	str	r6, [r2, #8]
 80090f6:	2000      	movs	r0, #0
 80090f8:	60d1      	str	r1, [r2, #12]
 80090fa:	e9c2 ab04 	strd	sl, fp, [r2, #16]
 80090fe:	6193      	str	r3, [r2, #24]
 8009100:	b009      	add	sp, #36	@ 0x24
 8009102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009106:	bf00      	nop
 8009108:	20000018 	.word	0x20000018
 800910c:	00030001 	.word	0x00030001
 8009110:	00010003 	.word	0x00010003

08009114 <D24_GENERIC>:
 8009114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009118:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 800911a:	6993      	ldr	r3, [r2, #24]
 800911c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 800911e:	b089      	sub	sp, #36	@ 0x24
 8009120:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 8009124:	9307      	str	r3, [sp, #28]
 8009126:	9503      	str	r5, [sp, #12]
 8009128:	69d3      	ldr	r3, [r2, #28]
 800912a:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 800912c:	9104      	str	r1, [sp, #16]
 800912e:	e9d2 4b02 	ldrd	r4, fp, [r2, #8]
 8009132:	2e00      	cmp	r6, #0
 8009134:	f000 808f 	beq.w	8009256 <D24_GENERIC+0x142>
 8009138:	f005 0620 	and.w	r6, r5, #32
 800913c:	f005 0510 	and.w	r5, r5, #16
 8009140:	4953      	ldr	r1, [pc, #332]	@ (8009290 <D24_GENERIC+0x17c>)
 8009142:	9606      	str	r6, [sp, #24]
 8009144:	9505      	str	r5, [sp, #20]
 8009146:	f04f 0c00 	mov.w	ip, #0
 800914a:	f8cd 9008 	str.w	r9, [sp, #8]
 800914e:	e068      	b.n	8009222 <D24_GENERIC+0x10e>
 8009150:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8009154:	f810 8007 	ldrb.w	r8, [r0, r7]
 8009158:	042d      	lsls	r5, r5, #16
 800915a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 800915e:	eb05 2508 	add.w	r5, r5, r8, lsl #8
 8009162:	44ae      	add	lr, r5
 8009164:	4438      	add	r0, r7
 8009166:	fa5f f68e 	uxtb.w	r6, lr
 800916a:	f3ce 2507 	ubfx	r5, lr, #8, #8
 800916e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8009172:	f851 7025 	ldr.w	r7, [r1, r5, lsl #2]
 8009176:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 800917a:	eb06 2693 	add.w	r6, r6, r3, lsr #10
 800917e:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009182:	f851 302e 	ldr.w	r3, [r1, lr, lsl #2]
 8009186:	f3c7 0509 	ubfx	r5, r7, #0, #10
 800918a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800918e:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8009192:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 8009196:	4d3f      	ldr	r5, [pc, #252]	@ (8009294 <D24_GENERIC+0x180>)
 8009198:	fb26 b705 	smlad	r7, r6, r5, fp
 800919c:	4d3e      	ldr	r5, [pc, #248]	@ (8009298 <D24_GENERIC+0x184>)
 800919e:	fb26 4b05 	smlad	fp, r6, r5, r4
 80091a2:	f3c3 0409 	ubfx	r4, r3, #0, #10
 80091a6:	eb04 0844 	add.w	r8, r4, r4, lsl #1
 80091aa:	eb0b 0b48 	add.w	fp, fp, r8, lsl #1
 80091ae:	2401      	movs	r4, #1
 80091b0:	fb26 f604 	smuad	r6, r6, r4
 80091b4:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 80091b8:	9f02      	ldr	r7, [sp, #8]
 80091ba:	eb0c 0e04 	add.w	lr, ip, r4
 80091be:	eb08 0406 	add.w	r4, r8, r6
 80091c2:	eb05 060a 	add.w	r6, r5, sl
 80091c6:	1bf6      	subs	r6, r6, r7
 80091c8:	4637      	mov	r7, r6
 80091ca:	ea4f 78e6 	mov.w	r8, r6, asr #31
 80091ce:	e9cd 7800 	strd	r7, r8, [sp]
 80091d2:	9f05      	ldr	r7, [sp, #20]
 80091d4:	b177      	cbz	r7, 80091f4 <D24_GENERIC+0xe0>
 80091d6:	f8d2 8020 	ldr.w	r8, [r2, #32]
 80091da:	9502      	str	r5, [sp, #8]
 80091dc:	fba6 9a08 	umull	r9, sl, r6, r8
 80091e0:	9e01      	ldr	r6, [sp, #4]
 80091e2:	fb08 aa06 	mla	sl, r8, r6, sl
 80091e6:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 80091ea:	f14a 0700 	adc.w	r7, sl, #0
 80091ee:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 80091f2:	4655      	mov	r5, sl
 80091f4:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 80091f6:	9f03      	ldr	r7, [sp, #12]
 80091f8:	03ad      	lsls	r5, r5, #14
 80091fa:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80091fe:	f04f 0900 	mov.w	r9, #0
 8009202:	fb0c fc06 	mul.w	ip, ip, r6
 8009206:	fbc7 8905 	smlal	r8, r9, r7, r5
 800920a:	9e04      	ldr	r6, [sp, #16]
 800920c:	464f      	mov	r7, r9
 800920e:	10bd      	asrs	r5, r7, #2
 8009210:	f305 050f 	ssat	r5, #16, r5
 8009214:	f826 501c 	strh.w	r5, [r6, ip, lsl #1]
 8009218:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800921a:	fa1f fc8e 	uxth.w	ip, lr
 800921e:	4565      	cmp	r5, ip
 8009220:	d917      	bls.n	8009252 <D24_GENERIC+0x13e>
 8009222:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8009224:	f890 e000 	ldrb.w	lr, [r0]
 8009228:	b2ef      	uxtb	r7, r5
 800922a:	2d01      	cmp	r5, #1
 800922c:	b23e      	sxth	r6, r7
 800922e:	d18f      	bne.n	8009150 <D24_GENERIC+0x3c>
 8009230:	9d06      	ldr	r5, [sp, #24]
 8009232:	b1dd      	cbz	r5, 800926c <D24_GENERIC+0x158>
 8009234:	78c5      	ldrb	r5, [r0, #3]
 8009236:	ea4f 280e 	mov.w	r8, lr, lsl #8
 800923a:	f01c 0f01 	tst.w	ip, #1
 800923e:	ea4f 2605 	mov.w	r6, r5, lsl #8
 8009242:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 8009246:	d11b      	bne.n	8009280 <D24_GENERIC+0x16c>
 8009248:	f890 e001 	ldrb.w	lr, [r0, #1]
 800924c:	3002      	adds	r0, #2
 800924e:	44c6      	add	lr, r8
 8009250:	e789      	b.n	8009166 <D24_GENERIC+0x52>
 8009252:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8009256:	61d3      	str	r3, [r2, #28]
 8009258:	9b07      	ldr	r3, [sp, #28]
 800925a:	6193      	str	r3, [r2, #24]
 800925c:	2000      	movs	r0, #0
 800925e:	e9c2 4b02 	strd	r4, fp, [r2, #8]
 8009262:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8009266:	b009      	add	sp, #36	@ 0x24
 8009268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800926c:	f890 8001 	ldrb.w	r8, [r0, #1]
 8009270:	7885      	ldrb	r5, [r0, #2]
 8009272:	ea4f 2808 	mov.w	r8, r8, lsl #8
 8009276:	eb08 4805 	add.w	r8, r8, r5, lsl #16
 800927a:	44c6      	add	lr, r8
 800927c:	3003      	adds	r0, #3
 800927e:	e772      	b.n	8009166 <D24_GENERIC+0x52>
 8009280:	f890 8002 	ldrb.w	r8, [r0, #2]
 8009284:	eb06 4808 	add.w	r8, r6, r8, lsl #16
 8009288:	44c6      	add	lr, r8
 800928a:	3004      	adds	r0, #4
 800928c:	e76b      	b.n	8009166 <D24_GENERIC+0x52>
 800928e:	bf00      	nop
 8009290:	20000018 	.word	0x20000018
 8009294:	00030001 	.word	0x00030001
 8009298:	00060007 	.word	0x00060007

0800929c <D32_GENERIC>:
 800929c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092a0:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80092a2:	6993      	ldr	r3, [r2, #24]
 80092a4:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 80092a6:	69d6      	ldr	r6, [r2, #28]
 80092a8:	b089      	sub	sp, #36	@ 0x24
 80092aa:	e9d2 a904 	ldrd	sl, r9, [r2, #16]
 80092ae:	9307      	str	r3, [sp, #28]
 80092b0:	9403      	str	r4, [sp, #12]
 80092b2:	e9d2 3b02 	ldrd	r3, fp, [r2, #8]
 80092b6:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 80092b8:	9104      	str	r1, [sp, #16]
 80092ba:	2d00      	cmp	r5, #0
 80092bc:	f000 809a 	beq.w	80093f4 <D32_GENERIC+0x158>
 80092c0:	f004 0520 	and.w	r5, r4, #32
 80092c4:	f004 0410 	and.w	r4, r4, #16
 80092c8:	9506      	str	r5, [sp, #24]
 80092ca:	4951      	ldr	r1, [pc, #324]	@ (8009410 <D32_GENERIC+0x174>)
 80092cc:	9405      	str	r4, [sp, #20]
 80092ce:	f04f 0e00 	mov.w	lr, #0
 80092d2:	f8cd 9008 	str.w	r9, [sp, #8]
 80092d6:	461d      	mov	r5, r3
 80092d8:	4617      	mov	r7, r2
 80092da:	e077      	b.n	80093cc <D32_GENERIC+0x130>
 80092dc:	7823      	ldrb	r3, [r4, #0]
 80092de:	f810 800c 	ldrb.w	r8, [r0, ip]
 80092e2:	f810 c002 	ldrb.w	ip, [r0, r2]
 80092e6:	7800      	ldrb	r0, [r0, #0]
 80092e8:	041b      	lsls	r3, r3, #16
 80092ea:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 80092ee:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80092f2:	4403      	add	r3, r0
 80092f4:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 80092f8:	b2dc      	uxtb	r4, r3
 80092fa:	f3c3 2207 	ubfx	r2, r3, #8, #8
 80092fe:	f3c3 4807 	ubfx	r8, r3, #16, #8
 8009302:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8009306:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800930a:	0e1b      	lsrs	r3, r3, #24
 800930c:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8009310:	f851 6028 	ldr.w	r6, [r1, r8, lsl #2]
 8009314:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009318:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 800931c:	eb06 2c92 	add.w	ip, r6, r2, lsr #10
 8009320:	eb03 269c 	add.w	r6, r3, ip, lsr #10
 8009324:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8009328:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800932c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009330:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009334:	ea43 4c0c 	orr.w	ip, r3, ip, lsl #16
 8009338:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800933c:	4b35      	ldr	r3, [pc, #212]	@ (8009414 <D32_GENERIC+0x178>)
 800933e:	fb22 b403 	smlad	r4, r2, r3, fp
 8009342:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8009346:	fb2c 4803 	smlad	r8, ip, r3, r4
 800934a:	4b33      	ldr	r3, [pc, #204]	@ (8009418 <D32_GENERIC+0x17c>)
 800934c:	fb22 5503 	smlad	r5, r2, r3, r5
 8009350:	4b32      	ldr	r3, [pc, #200]	@ (800941c <D32_GENERIC+0x180>)
 8009352:	fb2c 5b03 	smlad	fp, ip, r3, r5
 8009356:	2301      	movs	r3, #1
 8009358:	fb22 f203 	smuad	r2, r2, r3
 800935c:	4b30      	ldr	r3, [pc, #192]	@ (8009420 <D32_GENERIC+0x184>)
 800935e:	fb2c 2503 	smlad	r5, ip, r3, r2
 8009362:	9b02      	ldr	r3, [sp, #8]
 8009364:	f5a8 4480 	sub.w	r4, r8, #16384	@ 0x4000
 8009368:	eb04 080a 	add.w	r8, r4, sl
 800936c:	eba8 0803 	sub.w	r8, r8, r3
 8009370:	4642      	mov	r2, r8
 8009372:	17d3      	asrs	r3, r2, #31
 8009374:	e9cd 2300 	strd	r2, r3, [sp]
 8009378:	9b05      	ldr	r3, [sp, #20]
 800937a:	f10e 0c01 	add.w	ip, lr, #1
 800937e:	b173      	cbz	r3, 800939e <D32_GENERIC+0x102>
 8009380:	6a3a      	ldr	r2, [r7, #32]
 8009382:	9b01      	ldr	r3, [sp, #4]
 8009384:	9402      	str	r4, [sp, #8]
 8009386:	fba8 8902 	umull	r8, r9, r8, r2
 800938a:	469a      	mov	sl, r3
 800938c:	fb02 930a 	mla	r3, r2, sl, r9
 8009390:	f118 4800 	adds.w	r8, r8, #2147483648	@ 0x80000000
 8009394:	f143 0900 	adc.w	r9, r3, #0
 8009398:	ea4f 0a49 	mov.w	sl, r9, lsl #1
 800939c:	4654      	mov	r4, sl
 800939e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80093a0:	9a04      	ldr	r2, [sp, #16]
 80093a2:	fb0e fe03 	mul.w	lr, lr, r3
 80093a6:	9b03      	ldr	r3, [sp, #12]
 80093a8:	0364      	lsls	r4, r4, #13
 80093aa:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80093ae:	f04f 0900 	mov.w	r9, #0
 80093b2:	fbc3 8904 	smlal	r8, r9, r3, r4
 80093b6:	464b      	mov	r3, r9
 80093b8:	109b      	asrs	r3, r3, #2
 80093ba:	f303 030f 	ssat	r3, #16, r3
 80093be:	f822 301e 	strh.w	r3, [r2, lr, lsl #1]
 80093c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80093c4:	fa1f fe8c 	uxth.w	lr, ip
 80093c8:	4573      	cmp	r3, lr
 80093ca:	d90f      	bls.n	80093ec <D32_GENERIC+0x150>
 80093cc:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 80093ce:	b2da      	uxtb	r2, r3
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	eb00 0442 	add.w	r4, r0, r2, lsl #1
 80093d6:	eb02 0c42 	add.w	ip, r2, r2, lsl #1
 80093da:	f47f af7f 	bne.w	80092dc <D32_GENERIC+0x40>
 80093de:	1d02      	adds	r2, r0, #4
 80093e0:	6803      	ldr	r3, [r0, #0]
 80093e2:	9806      	ldr	r0, [sp, #24]
 80093e4:	b188      	cbz	r0, 800940a <D32_GENERIC+0x16e>
 80093e6:	ba5b      	rev16	r3, r3
 80093e8:	4610      	mov	r0, r2
 80093ea:	e785      	b.n	80092f8 <D32_GENERIC+0x5c>
 80093ec:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80093f0:	462b      	mov	r3, r5
 80093f2:	463a      	mov	r2, r7
 80093f4:	e9c2 3b02 	strd	r3, fp, [r2, #8]
 80093f8:	9b07      	ldr	r3, [sp, #28]
 80093fa:	61d6      	str	r6, [r2, #28]
 80093fc:	2000      	movs	r0, #0
 80093fe:	e9c2 a904 	strd	sl, r9, [r2, #16]
 8009402:	6193      	str	r3, [r2, #24]
 8009404:	b009      	add	sp, #36	@ 0x24
 8009406:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800940a:	4610      	mov	r0, r2
 800940c:	e774      	b.n	80092f8 <D32_GENERIC+0x5c>
 800940e:	bf00      	nop
 8009410:	20000018 	.word	0x20000018
 8009414:	00060003 	.word	0x00060003
 8009418:	000a000c 	.word	0x000a000c
 800941c:	000c000a 	.word	0x000c000a
 8009420:	00030006 	.word	0x00030006

08009424 <D48_GENERIC>:
 8009424:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009428:	e9d2 a304 	ldrd	sl, r3, [r2, #16]
 800942c:	b08b      	sub	sp, #44	@ 0x2c
 800942e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8009430:	9304      	str	r3, [sp, #16]
 8009432:	6993      	ldr	r3, [r2, #24]
 8009434:	9309      	str	r3, [sp, #36]	@ 0x24
 8009436:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 800943a:	9401      	str	r4, [sp, #4]
 800943c:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800943e:	9405      	str	r4, [sp, #20]
 8009440:	f8d2 c01c 	ldr.w	ip, [r2, #28]
 8009444:	6b54      	ldr	r4, [r2, #52]	@ 0x34
 8009446:	9106      	str	r1, [sp, #24]
 8009448:	2d00      	cmp	r5, #0
 800944a:	f000 80c2 	beq.w	80095d2 <D48_GENERIC+0x1ae>
 800944e:	f004 0520 	and.w	r5, r4, #32
 8009452:	f04f 0900 	mov.w	r9, #0
 8009456:	f004 0410 	and.w	r4, r4, #16
 800945a:	9508      	str	r5, [sp, #32]
 800945c:	4964      	ldr	r1, [pc, #400]	@ (80095f0 <D48_GENERIC+0x1cc>)
 800945e:	9407      	str	r4, [sp, #28]
 8009460:	464d      	mov	r5, r9
 8009462:	e09e      	b.n	80095a2 <D48_GENERIC+0x17e>
 8009464:	f81b 4007 	ldrb.w	r4, [fp, r7]
 8009468:	f810 b008 	ldrb.w	fp, [r0, r8]
 800946c:	f819 8008 	ldrb.w	r8, [r9, r8]
 8009470:	f810 9006 	ldrb.w	r9, [r0, r6]
 8009474:	7800      	ldrb	r0, [r0, #0]
 8009476:	0424      	lsls	r4, r4, #16
 8009478:	eb04 6b0b 	add.w	fp, r4, fp, lsl #24
 800947c:	f81e 4007 	ldrb.w	r4, [lr, r7]
 8009480:	eb0b 2b09 	add.w	fp, fp, r9, lsl #8
 8009484:	44be      	add	lr, r7
 8009486:	eb04 2408 	add.w	r4, r4, r8, lsl #8
 800948a:	eb0b 0700 	add.w	r7, fp, r0
 800948e:	eb0e 0046 	add.w	r0, lr, r6, lsl #1
 8009492:	fa5f fe87 	uxtb.w	lr, r7
 8009496:	f3c7 2607 	ubfx	r6, r7, #8, #8
 800949a:	f851 902e 	ldr.w	r9, [r1, lr, lsl #2]
 800949e:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80094a2:	f3c7 4e07 	ubfx	lr, r7, #16, #8
 80094a6:	0e3f      	lsrs	r7, r7, #24
 80094a8:	eb09 299c 	add.w	r9, r9, ip, lsr #10
 80094ac:	f851 b027 	ldr.w	fp, [r1, r7, lsl #2]
 80094b0:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 80094b4:	b2e7      	uxtb	r7, r4
 80094b6:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 80094ba:	f3c4 2407 	ubfx	r4, r4, #8, #8
 80094be:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 80094c2:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 80094c6:	f851 c024 	ldr.w	ip, [r1, r4, lsl #2]
 80094ca:	eb0b 249e 	add.w	r4, fp, lr, lsr #10
 80094ce:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80094d2:	eb0c 2c97 	add.w	ip, ip, r7, lsr #10
 80094d6:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80094da:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80094de:	f3cc 0809 	ubfx	r8, ip, #0, #10
 80094e2:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80094e6:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 80094ea:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80094ee:	ea46 4909 	orr.w	r9, r6, r9, lsl #16
 80094f2:	ea44 4e0e 	orr.w	lr, r4, lr, lsl #16
 80094f6:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
 80094fa:	4c3e      	ldr	r4, [pc, #248]	@ (80095f4 <D48_GENERIC+0x1d0>)
 80094fc:	9e01      	ldr	r6, [sp, #4]
 80094fe:	fb29 6404 	smlad	r4, r9, r4, r6
 8009502:	4e3d      	ldr	r6, [pc, #244]	@ (80095f8 <D48_GENERIC+0x1d4>)
 8009504:	fb2e 4406 	smlad	r4, lr, r6, r4
 8009508:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 800950c:	fb27 4b06 	smlad	fp, r7, r6, r4
 8009510:	4c3a      	ldr	r4, [pc, #232]	@ (80095fc <D48_GENERIC+0x1d8>)
 8009512:	fb29 3304 	smlad	r3, r9, r4, r3
 8009516:	f04f 141b 	mov.w	r4, #1769499	@ 0x1b001b
 800951a:	fb2e 3304 	smlad	r3, lr, r4, r3
 800951e:	4c38      	ldr	r4, [pc, #224]	@ (8009600 <D48_GENERIC+0x1dc>)
 8009520:	fb27 3304 	smlad	r3, r7, r4, r3
 8009524:	2601      	movs	r6, #1
 8009526:	9301      	str	r3, [sp, #4]
 8009528:	fb29 f906 	smuad	r9, r9, r6
 800952c:	4b35      	ldr	r3, [pc, #212]	@ (8009604 <D48_GENERIC+0x1e0>)
 800952e:	fb2e 9e03 	smlad	lr, lr, r3, r9
 8009532:	4b35      	ldr	r3, [pc, #212]	@ (8009608 <D48_GENERIC+0x1e4>)
 8009534:	fb27 e303 	smlad	r3, r7, r3, lr
 8009538:	9f04      	ldr	r7, [sp, #16]
 800953a:	f5ab 4458 	sub.w	r4, fp, #55296	@ 0xd800
 800953e:	eb05 0e06 	add.w	lr, r5, r6
 8009542:	eb04 060a 	add.w	r6, r4, sl
 8009546:	1bf6      	subs	r6, r6, r7
 8009548:	4637      	mov	r7, r6
 800954a:	ea4f 78e6 	mov.w	r8, r6, asr #31
 800954e:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8009552:	9f07      	ldr	r7, [sp, #28]
 8009554:	b177      	cbz	r7, 8009574 <D48_GENERIC+0x150>
 8009556:	f8d2 8020 	ldr.w	r8, [r2, #32]
 800955a:	9404      	str	r4, [sp, #16]
 800955c:	fba6 9a08 	umull	r9, sl, r6, r8
 8009560:	9e03      	ldr	r6, [sp, #12]
 8009562:	fb08 aa06 	mla	sl, r8, r6, sl
 8009566:	f119 4600 	adds.w	r6, r9, #2147483648	@ 0x80000000
 800956a:	f14a 0700 	adc.w	r7, sl, #0
 800956e:	ea4f 0a47 	mov.w	sl, r7, lsl #1
 8009572:	4654      	mov	r4, sl
 8009574:	8d16      	ldrh	r6, [r2, #40]	@ 0x28
 8009576:	fb05 f606 	mul.w	r6, r5, r6
 800957a:	9d05      	ldr	r5, [sp, #20]
 800957c:	02e4      	lsls	r4, r4, #11
 800957e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8009582:	f04f 0800 	mov.w	r8, #0
 8009586:	fbc5 7804 	smlal	r7, r8, r5, r4
 800958a:	4645      	mov	r5, r8
 800958c:	10ac      	asrs	r4, r5, #2
 800958e:	9d06      	ldr	r5, [sp, #24]
 8009590:	f304 040f 	ssat	r4, #16, r4
 8009594:	f825 4016 	strh.w	r4, [r5, r6, lsl #1]
 8009598:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 800959a:	fa1f f58e 	uxth.w	r5, lr
 800959e:	42ac      	cmp	r4, r5
 80095a0:	d917      	bls.n	80095d2 <D48_GENERIC+0x1ae>
 80095a2:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 80095a4:	b2e6      	uxtb	r6, r4
 80095a6:	eb06 0846 	add.w	r8, r6, r6, lsl #1
 80095aa:	4277      	negs	r7, r6
 80095ac:	eb00 0b08 	add.w	fp, r0, r8
 80095b0:	eb0b 0907 	add.w	r9, fp, r7
 80095b4:	2c01      	cmp	r4, #1
 80095b6:	eb09 0e08 	add.w	lr, r9, r8
 80095ba:	f47f af53 	bne.w	8009464 <D48_GENERIC+0x40>
 80095be:	9e08      	ldr	r6, [sp, #32]
 80095c0:	e9d0 7400 	ldrd	r7, r4, [r0]
 80095c4:	3006      	adds	r0, #6
 80095c6:	2e00      	cmp	r6, #0
 80095c8:	f43f af63 	beq.w	8009492 <D48_GENERIC+0x6e>
 80095cc:	ba7f      	rev16	r7, r7
 80095ce:	ba64      	rev16	r4, r4
 80095d0:	e75f      	b.n	8009492 <D48_GENERIC+0x6e>
 80095d2:	6093      	str	r3, [r2, #8]
 80095d4:	9b01      	ldr	r3, [sp, #4]
 80095d6:	60d3      	str	r3, [r2, #12]
 80095d8:	9b04      	ldr	r3, [sp, #16]
 80095da:	6153      	str	r3, [r2, #20]
 80095dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80095de:	f8c2 c01c 	str.w	ip, [r2, #28]
 80095e2:	2000      	movs	r0, #0
 80095e4:	f8c2 a010 	str.w	sl, [r2, #16]
 80095e8:	6193      	str	r3, [r2, #24]
 80095ea:	b00b      	add	sp, #44	@ 0x2c
 80095ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095f0:	20000018 	.word	0x20000018
 80095f4:	000f000a 	.word	0x000f000a
 80095f8:	00060003 	.word	0x00060003
 80095fc:	00150019 	.word	0x00150019
 8009600:	00190015 	.word	0x00190015
 8009604:	00030006 	.word	0x00030006
 8009608:	000a000f 	.word	0x000a000f

0800960c <D64_GENERIC>:
 800960c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009610:	b089      	sub	sp, #36	@ 0x24
 8009612:	6895      	ldr	r5, [r2, #8]
 8009614:	6913      	ldr	r3, [r2, #16]
 8009616:	9501      	str	r5, [sp, #4]
 8009618:	68d5      	ldr	r5, [r2, #12]
 800961a:	9302      	str	r3, [sp, #8]
 800961c:	9500      	str	r5, [sp, #0]
 800961e:	6953      	ldr	r3, [r2, #20]
 8009620:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8009622:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8009624:	9303      	str	r3, [sp, #12]
 8009626:	6993      	ldr	r3, [r2, #24]
 8009628:	9307      	str	r3, [sp, #28]
 800962a:	e9cd 5104 	strd	r5, r1, [sp, #16]
 800962e:	69d3      	ldr	r3, [r2, #28]
 8009630:	2c00      	cmp	r4, #0
 8009632:	f000 80d7 	beq.w	80097e4 <D64_GENERIC+0x1d8>
 8009636:	6a11      	ldr	r1, [r2, #32]
 8009638:	9106      	str	r1, [sp, #24]
 800963a:	f04f 0e00 	mov.w	lr, #0
 800963e:	f8df c1e4 	ldr.w	ip, [pc, #484]	@ 8009824 <D64_GENERIC+0x218>
 8009642:	4681      	mov	r9, r0
 8009644:	e0bf      	b.n	80097c6 <D64_GENERIC+0x1ba>
 8009646:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 800964a:	426c      	negs	r4, r5
 800964c:	eb09 0708 	add.w	r7, r9, r8
 8009650:	eb07 0a44 	add.w	sl, r7, r4, lsl #1
 8009654:	eb0a 0648 	add.w	r6, sl, r8, lsl #1
 8009658:	5d38      	ldrb	r0, [r7, r4]
 800965a:	5d31      	ldrb	r1, [r6, r4]
 800965c:	f81a b018 	ldrb.w	fp, [sl, r8, lsl #1]
 8009660:	f819 a008 	ldrb.w	sl, [r9, r8]
 8009664:	f817 8014 	ldrb.w	r8, [r7, r4, lsl #1]
 8009668:	f899 7000 	ldrb.w	r7, [r9]
 800966c:	f816 9014 	ldrb.w	r9, [r6, r4, lsl #1]
 8009670:	4426      	add	r6, r4
 8009672:	0409      	lsls	r1, r1, #16
 8009674:	0400      	lsls	r0, r0, #16
 8009676:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 800967a:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 800967e:	f816 b014 	ldrb.w	fp, [r6, r4, lsl #1]
 8009682:	eb01 2109 	add.w	r1, r1, r9, lsl #8
 8009686:	eb06 0444 	add.w	r4, r6, r4, lsl #1
 800968a:	eb00 2008 	add.w	r0, r0, r8, lsl #8
 800968e:	4459      	add	r1, fp
 8009690:	eb04 0985 	add.w	r9, r4, r5, lsl #2
 8009694:	4438      	add	r0, r7
 8009696:	b2c5      	uxtb	r5, r0
 8009698:	f3c0 2407 	ubfx	r4, r0, #8, #8
 800969c:	f85c 6025 	ldr.w	r6, [ip, r5, lsl #2]
 80096a0:	f85c 5024 	ldr.w	r5, [ip, r4, lsl #2]
 80096a4:	f3c0 4407 	ubfx	r4, r0, #16, #8
 80096a8:	0e00      	lsrs	r0, r0, #24
 80096aa:	eb03 0806 	add.w	r8, r3, r6
 80096ae:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 80096b2:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 80096b6:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80096ba:	b2c8      	uxtb	r0, r1
 80096bc:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80096c0:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 80096c4:	f85c 6020 	ldr.w	r6, [ip, r0, lsl #2]
 80096c8:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 80096cc:	f3c1 4307 	ubfx	r3, r1, #16, #8
 80096d0:	eb04 2497 	add.w	r4, r4, r7, lsr #10
 80096d4:	0e09      	lsrs	r1, r1, #24
 80096d6:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 80096da:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 80096de:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 80096e2:	eb00 2096 	add.w	r0, r0, r6, lsr #10
 80096e6:	eb03 2a90 	add.w	sl, r3, r0, lsr #10
 80096ea:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80096ee:	f3ca 0309 	ubfx	r3, sl, #0, #10
 80096f2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80096f6:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80096fa:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80096fe:	f3c1 0a09 	ubfx	sl, r1, #0, #10
 8009702:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009706:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800970a:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800970e:	ea44 4707 	orr.w	r7, r4, r7, lsl #16
 8009712:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
 8009716:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 800971a:	0a8b      	lsrs	r3, r1, #10
 800971c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8009720:	4938      	ldr	r1, [pc, #224]	@ (8009804 <D64_GENERIC+0x1f8>)
 8009722:	9c00      	ldr	r4, [sp, #0]
 8009724:	fb28 4101 	smlad	r1, r8, r1, r4
 8009728:	4c37      	ldr	r4, [pc, #220]	@ (8009808 <D64_GENERIC+0x1fc>)
 800972a:	fb27 1104 	smlad	r1, r7, r4, r1
 800972e:	4c37      	ldr	r4, [pc, #220]	@ (800980c <D64_GENERIC+0x200>)
 8009730:	fb20 1104 	smlad	r1, r0, r4, r1
 8009734:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8009738:	fb2a 1106 	smlad	r1, sl, r6, r1
 800973c:	4d34      	ldr	r5, [pc, #208]	@ (8009810 <D64_GENERIC+0x204>)
 800973e:	9c01      	ldr	r4, [sp, #4]
 8009740:	fb28 4405 	smlad	r4, r8, r5, r4
 8009744:	fb2a 4415 	smladx	r4, sl, r5, r4
 8009748:	4d32      	ldr	r5, [pc, #200]	@ (8009814 <D64_GENERIC+0x208>)
 800974a:	fb27 4405 	smlad	r4, r7, r5, r4
 800974e:	fb20 4415 	smladx	r4, r0, r5, r4
 8009752:	2501      	movs	r5, #1
 8009754:	9400      	str	r4, [sp, #0]
 8009756:	fb28 f805 	smuad	r8, r8, r5
 800975a:	4c2f      	ldr	r4, [pc, #188]	@ (8009818 <D64_GENERIC+0x20c>)
 800975c:	fb27 8704 	smlad	r7, r7, r4, r8
 8009760:	4c2e      	ldr	r4, [pc, #184]	@ (800981c <D64_GENERIC+0x210>)
 8009762:	fb20 7004 	smlad	r0, r0, r4, r7
 8009766:	4c2e      	ldr	r4, [pc, #184]	@ (8009820 <D64_GENERIC+0x214>)
 8009768:	fb2a 0004 	smlad	r0, sl, r4, r0
 800976c:	f5a1 3600 	sub.w	r6, r1, #131072	@ 0x20000
 8009770:	9906      	ldr	r1, [sp, #24]
 8009772:	9001      	str	r0, [sp, #4]
 8009774:	b181      	cbz	r1, 8009798 <D64_GENERIC+0x18c>
 8009776:	9802      	ldr	r0, [sp, #8]
 8009778:	9c03      	ldr	r4, [sp, #12]
 800977a:	4430      	add	r0, r6
 800977c:	1b00      	subs	r0, r0, r4
 800977e:	fba0 7801 	umull	r7, r8, r0, r1
 8009782:	17c5      	asrs	r5, r0, #31
 8009784:	fb01 8805 	mla	r8, r1, r5, r8
 8009788:	f117 4000 	adds.w	r0, r7, #2147483648	@ 0x80000000
 800978c:	f148 0100 	adc.w	r1, r8, #0
 8009790:	0049      	lsls	r1, r1, #1
 8009792:	e9cd 1602 	strd	r1, r6, [sp, #8]
 8009796:	460e      	mov	r6, r1
 8009798:	8d14      	ldrh	r4, [r2, #40]	@ 0x28
 800979a:	9904      	ldr	r1, [sp, #16]
 800979c:	9805      	ldr	r0, [sp, #20]
 800979e:	02b6      	lsls	r6, r6, #10
 80097a0:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 80097a4:	f04f 0800 	mov.w	r8, #0
 80097a8:	fb0e f404 	mul.w	r4, lr, r4
 80097ac:	fbc1 7806 	smlal	r7, r8, r1, r6
 80097b0:	4641      	mov	r1, r8
 80097b2:	1089      	asrs	r1, r1, #2
 80097b4:	f301 010f 	ssat	r1, #16, r1
 80097b8:	f820 1014 	strh.w	r1, [r0, r4, lsl #1]
 80097bc:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 80097be:	f10e 0e01 	add.w	lr, lr, #1
 80097c2:	4571      	cmp	r1, lr
 80097c4:	dd0e      	ble.n	80097e4 <D64_GENERIC+0x1d8>
 80097c6:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80097c8:	2d01      	cmp	r5, #1
 80097ca:	f47f af3c 	bne.w	8009646 <D64_GENERIC+0x3a>
 80097ce:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80097d0:	06ac      	lsls	r4, r5, #26
 80097d2:	e9d9 0100 	ldrd	r0, r1, [r9]
 80097d6:	f109 0908 	add.w	r9, r9, #8
 80097da:	f57f af5c 	bpl.w	8009696 <D64_GENERIC+0x8a>
 80097de:	ba40      	rev16	r0, r0
 80097e0:	ba49      	rev16	r1, r1
 80097e2:	e758      	b.n	8009696 <D64_GENERIC+0x8a>
 80097e4:	61d3      	str	r3, [r2, #28]
 80097e6:	9b02      	ldr	r3, [sp, #8]
 80097e8:	9901      	ldr	r1, [sp, #4]
 80097ea:	6113      	str	r3, [r2, #16]
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	6091      	str	r1, [r2, #8]
 80097f0:	6153      	str	r3, [r2, #20]
 80097f2:	9900      	ldr	r1, [sp, #0]
 80097f4:	9b07      	ldr	r3, [sp, #28]
 80097f6:	60d1      	str	r1, [r2, #12]
 80097f8:	2000      	movs	r0, #0
 80097fa:	6193      	str	r3, [r2, #24]
 80097fc:	b009      	add	sp, #36	@ 0x24
 80097fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009802:	bf00      	nop
 8009804:	001c0015 	.word	0x001c0015
 8009808:	000f000a 	.word	0x000f000a
 800980c:	00060003 	.word	0x00060003
 8009810:	0024002a 	.word	0x0024002a
 8009814:	002e0030 	.word	0x002e0030
 8009818:	00030006 	.word	0x00030006
 800981c:	000a000f 	.word	0x000a000f
 8009820:	0015001c 	.word	0x0015001c
 8009824:	20000018 	.word	0x20000018

08009828 <D80_GENERIC>:
 8009828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800982c:	b08b      	sub	sp, #44	@ 0x2c
 800982e:	6914      	ldr	r4, [r2, #16]
 8009830:	9405      	str	r4, [sp, #20]
 8009832:	6954      	ldr	r4, [r2, #20]
 8009834:	9406      	str	r4, [sp, #24]
 8009836:	6994      	ldr	r4, [r2, #24]
 8009838:	9409      	str	r4, [sp, #36]	@ 0x24
 800983a:	6894      	ldr	r4, [r2, #8]
 800983c:	9402      	str	r4, [sp, #8]
 800983e:	68d4      	ldr	r4, [r2, #12]
 8009840:	9401      	str	r4, [sp, #4]
 8009842:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8009844:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 8009846:	f8d2 b01c 	ldr.w	fp, [r2, #28]
 800984a:	e9cd 4107 	strd	r4, r1, [sp, #28]
 800984e:	2b00      	cmp	r3, #0
 8009850:	f000 810a 	beq.w	8009a68 <D80_GENERIC+0x240>
 8009854:	2300      	movs	r3, #0
 8009856:	f8df 9260 	ldr.w	r9, [pc, #608]	@ 8009ab8 <D80_GENERIC+0x290>
 800985a:	e9cd b303 	strd	fp, r3, [sp, #12]
 800985e:	e0ee      	b.n	8009a3e <D80_GENERIC+0x216>
 8009860:	fa5f fe8e 	uxtb.w	lr, lr
 8009864:	fa0f f48e 	sxth.w	r4, lr
 8009868:	0066      	lsls	r6, r4, #1
 800986a:	eb06 0804 	add.w	r8, r6, r4
 800986e:	f1ce 0500 	rsb	r5, lr, #0
 8009872:	eb00 0108 	add.w	r1, r0, r8
 8009876:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 800987a:	194b      	adds	r3, r1, r5
 800987c:	5d49      	ldrb	r1, [r1, r5]
 800987e:	f810 a008 	ldrb.w	sl, [r0, r8]
 8009882:	f813 b004 	ldrb.w	fp, [r3, r4]
 8009886:	f810 e00e 	ldrb.w	lr, [r0, lr]
 800988a:	f890 8000 	ldrb.w	r8, [r0]
 800988e:	eb03 0c04 	add.w	ip, r3, r4
 8009892:	eb0c 0705 	add.w	r7, ip, r5
 8009896:	0409      	lsls	r1, r1, #16
 8009898:	f81c 3005 	ldrb.w	r3, [ip, r5]
 800989c:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80098a0:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 80098a4:	eb07 0a45 	add.w	sl, r7, r5, lsl #1
 80098a8:	eb0a 0004 	add.w	r0, sl, r4
 80098ac:	041b      	lsls	r3, r3, #16
 80098ae:	f81a a004 	ldrb.w	sl, [sl, r4]
 80098b2:	f817 7015 	ldrb.w	r7, [r7, r5, lsl #1]
 80098b6:	5d44      	ldrb	r4, [r0, r5]
 80098b8:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 80098bc:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 80098c0:	4428      	add	r0, r5
 80098c2:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80098c6:	4441      	add	r1, r8
 80098c8:	4430      	add	r0, r6
 80098ca:	eb04 240a 	add.w	r4, r4, sl, lsl #8
 80098ce:	441f      	add	r7, r3
 80098d0:	b2cd      	uxtb	r5, r1
 80098d2:	f3c1 2307 	ubfx	r3, r1, #8, #8
 80098d6:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 80098da:	f859 c023 	ldr.w	ip, [r9, r3, lsl #2]
 80098de:	9b03      	ldr	r3, [sp, #12]
 80098e0:	f3c1 4507 	ubfx	r5, r1, #16, #8
 80098e4:	0e09      	lsrs	r1, r1, #24
 80098e6:	4433      	add	r3, r6
 80098e8:	f859 8025 	ldr.w	r8, [r9, r5, lsl #2]
 80098ec:	f859 6021 	ldr.w	r6, [r9, r1, lsl #2]
 80098f0:	b2fd      	uxtb	r5, r7
 80098f2:	eb0c 2193 	add.w	r1, ip, r3, lsr #10
 80098f6:	469b      	mov	fp, r3
 80098f8:	f3c7 2307 	ubfx	r3, r7, #8, #8
 80098fc:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 8009900:	f859 e025 	ldr.w	lr, [r9, r5, lsl #2]
 8009904:	f859 5023 	ldr.w	r5, [r9, r3, lsl #2]
 8009908:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 800990c:	eb06 2698 	add.w	r6, r6, r8, lsr #10
 8009910:	0e3b      	lsrs	r3, r7, #24
 8009912:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8009916:	f859 702c 	ldr.w	r7, [r9, ip, lsl #2]
 800991a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800991e:	fa5f fc84 	uxtb.w	ip, r4
 8009922:	eb05 259e 	add.w	r5, r5, lr, lsr #10
 8009926:	f3c4 2407 	ubfx	r4, r4, #8, #8
 800992a:	eb07 2795 	add.w	r7, r7, r5, lsr #10
 800992e:	f859 c02c 	ldr.w	ip, [r9, ip, lsl #2]
 8009932:	f859 4024 	ldr.w	r4, [r9, r4, lsl #2]
 8009936:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800993a:	eb0c 2c93 	add.w	ip, ip, r3, lsr #10
 800993e:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8009942:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009946:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800994a:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800994e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009952:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009956:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800995a:	ea41 4b0b 	orr.w	fp, r1, fp, lsl #16
 800995e:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 8009962:	f3c4 0109 	ubfx	r1, r4, #0, #10
 8009966:	0aa3      	lsrs	r3, r4, #10
 8009968:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800996c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009970:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009974:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
 8009978:	9303      	str	r3, [sp, #12]
 800997a:	ea46 4808 	orr.w	r8, r6, r8, lsl #16
 800997e:	ea45 4e0e 	orr.w	lr, r5, lr, lsl #16
 8009982:	4b41      	ldr	r3, [pc, #260]	@ (8009a88 <D80_GENERIC+0x260>)
 8009984:	9901      	ldr	r1, [sp, #4]
 8009986:	fb2b 1303 	smlad	r3, fp, r3, r1
 800998a:	4940      	ldr	r1, [pc, #256]	@ (8009a8c <D80_GENERIC+0x264>)
 800998c:	fb28 3301 	smlad	r3, r8, r1, r3
 8009990:	493f      	ldr	r1, [pc, #252]	@ (8009a90 <D80_GENERIC+0x268>)
 8009992:	fb2e 3301 	smlad	r3, lr, r1, r3
 8009996:	493f      	ldr	r1, [pc, #252]	@ (8009a94 <D80_GENERIC+0x26c>)
 8009998:	fb27 3301 	smlad	r3, r7, r1, r3
 800999c:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 80099a0:	fb2c 3404 	smlad	r4, ip, r4, r3
 80099a4:	4b3c      	ldr	r3, [pc, #240]	@ (8009a98 <D80_GENERIC+0x270>)
 80099a6:	9902      	ldr	r1, [sp, #8]
 80099a8:	fb2b 1303 	smlad	r3, fp, r3, r1
 80099ac:	493b      	ldr	r1, [pc, #236]	@ (8009a9c <D80_GENERIC+0x274>)
 80099ae:	fb28 3301 	smlad	r3, r8, r1, r3
 80099b2:	f04f 114b 	mov.w	r1, #4915275	@ 0x4b004b
 80099b6:	fb2e 3101 	smlad	r1, lr, r1, r3
 80099ba:	4b39      	ldr	r3, [pc, #228]	@ (8009aa0 <D80_GENERIC+0x278>)
 80099bc:	fb27 1103 	smlad	r1, r7, r3, r1
 80099c0:	4b38      	ldr	r3, [pc, #224]	@ (8009aa4 <D80_GENERIC+0x27c>)
 80099c2:	fb2c 1303 	smlad	r3, ip, r3, r1
 80099c6:	2101      	movs	r1, #1
 80099c8:	9301      	str	r3, [sp, #4]
 80099ca:	fb2b fb01 	smuad	fp, fp, r1
 80099ce:	4b36      	ldr	r3, [pc, #216]	@ (8009aa8 <D80_GENERIC+0x280>)
 80099d0:	fb28 b803 	smlad	r8, r8, r3, fp
 80099d4:	4d35      	ldr	r5, [pc, #212]	@ (8009aac <D80_GENERIC+0x284>)
 80099d6:	fb2e 8e05 	smlad	lr, lr, r5, r8
 80099da:	4d35      	ldr	r5, [pc, #212]	@ (8009ab0 <D80_GENERIC+0x288>)
 80099dc:	fb27 e705 	smlad	r7, r7, r5, lr
 80099e0:	4b34      	ldr	r3, [pc, #208]	@ (8009ab4 <D80_GENERIC+0x28c>)
 80099e2:	fb2c 7303 	smlad	r3, ip, r3, r7
 80099e6:	6a11      	ldr	r1, [r2, #32]
 80099e8:	9302      	str	r3, [sp, #8]
 80099ea:	f5a4 337a 	sub.w	r3, r4, #256000	@ 0x3e800
 80099ee:	b181      	cbz	r1, 8009a12 <D80_GENERIC+0x1ea>
 80099f0:	9c05      	ldr	r4, [sp, #20]
 80099f2:	9d06      	ldr	r5, [sp, #24]
 80099f4:	441c      	add	r4, r3
 80099f6:	1b64      	subs	r4, r4, r5
 80099f8:	fba4 ab01 	umull	sl, fp, r4, r1
 80099fc:	17e7      	asrs	r7, r4, #31
 80099fe:	fb01 bb07 	mla	fp, r1, r7, fp
 8009a02:	f11a 4400 	adds.w	r4, sl, #2147483648	@ 0x80000000
 8009a06:	f14b 0500 	adc.w	r5, fp, #0
 8009a0a:	0069      	lsls	r1, r5, #1
 8009a0c:	e9cd 1305 	strd	r1, r3, [sp, #20]
 8009a10:	460b      	mov	r3, r1
 8009a12:	9e04      	ldr	r6, [sp, #16]
 8009a14:	8d11      	ldrh	r1, [r2, #40]	@ 0x28
 8009a16:	9f07      	ldr	r7, [sp, #28]
 8009a18:	025b      	lsls	r3, r3, #9
 8009a1a:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8009a1e:	2500      	movs	r5, #0
 8009a20:	fb06 f101 	mul.w	r1, r6, r1
 8009a24:	fbc7 4503 	smlal	r4, r5, r7, r3
 8009a28:	9c08      	ldr	r4, [sp, #32]
 8009a2a:	10ab      	asrs	r3, r5, #2
 8009a2c:	f303 030f 	ssat	r3, #16, r3
 8009a30:	f824 3011 	strh.w	r3, [r4, r1, lsl #1]
 8009a34:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8009a36:	1c71      	adds	r1, r6, #1
 8009a38:	428b      	cmp	r3, r1
 8009a3a:	9104      	str	r1, [sp, #16]
 8009a3c:	dd12      	ble.n	8009a64 <D80_GENERIC+0x23c>
 8009a3e:	f8b2 e02a 	ldrh.w	lr, [r2, #42]	@ 0x2a
 8009a42:	f1be 0f01 	cmp.w	lr, #1
 8009a46:	f47f af0b 	bne.w	8009860 <D80_GENERIC+0x38>
 8009a4a:	6801      	ldr	r1, [r0, #0]
 8009a4c:	6847      	ldr	r7, [r0, #4]
 8009a4e:	6b53      	ldr	r3, [r2, #52]	@ 0x34
 8009a50:	6884      	ldr	r4, [r0, #8]
 8009a52:	069b      	lsls	r3, r3, #26
 8009a54:	f100 000a 	add.w	r0, r0, #10
 8009a58:	f57f af3a 	bpl.w	80098d0 <D80_GENERIC+0xa8>
 8009a5c:	ba49      	rev16	r1, r1
 8009a5e:	ba7f      	rev16	r7, r7
 8009a60:	ba64      	rev16	r4, r4
 8009a62:	e735      	b.n	80098d0 <D80_GENERIC+0xa8>
 8009a64:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009a68:	9b02      	ldr	r3, [sp, #8]
 8009a6a:	6093      	str	r3, [r2, #8]
 8009a6c:	9b01      	ldr	r3, [sp, #4]
 8009a6e:	60d3      	str	r3, [r2, #12]
 8009a70:	9b05      	ldr	r3, [sp, #20]
 8009a72:	6113      	str	r3, [r2, #16]
 8009a74:	9b06      	ldr	r3, [sp, #24]
 8009a76:	6153      	str	r3, [r2, #20]
 8009a78:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a7a:	f8c2 b01c 	str.w	fp, [r2, #28]
 8009a7e:	2000      	movs	r0, #0
 8009a80:	6193      	str	r3, [r2, #24]
 8009a82:	b00b      	add	sp, #44	@ 0x2c
 8009a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a88:	002d0024 	.word	0x002d0024
 8009a8c:	001c0015 	.word	0x001c0015
 8009a90:	000f000a 	.word	0x000f000a
 8009a94:	00060003 	.word	0x00060003
 8009a98:	0037003f 	.word	0x0037003f
 8009a9c:	00450049 	.word	0x00450049
 8009aa0:	00490045 	.word	0x00490045
 8009aa4:	003f0037 	.word	0x003f0037
 8009aa8:	00030006 	.word	0x00030006
 8009aac:	000a000f 	.word	0x000a000f
 8009ab0:	0015001c 	.word	0x0015001c
 8009ab4:	0024002d 	.word	0x0024002d
 8009ab8:	20000018 	.word	0x20000018

08009abc <D128_GENERIC>:
 8009abc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ac0:	b091      	sub	sp, #68	@ 0x44
 8009ac2:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8009ac4:	9004      	str	r0, [sp, #16]
 8009ac6:	6910      	ldr	r0, [r2, #16]
 8009ac8:	900a      	str	r0, [sp, #40]	@ 0x28
 8009aca:	6950      	ldr	r0, [r2, #20]
 8009acc:	900b      	str	r0, [sp, #44]	@ 0x2c
 8009ace:	6990      	ldr	r0, [r2, #24]
 8009ad0:	900f      	str	r0, [sp, #60]	@ 0x3c
 8009ad2:	69d0      	ldr	r0, [r2, #28]
 8009ad4:	9002      	str	r0, [sp, #8]
 8009ad6:	6890      	ldr	r0, [r2, #8]
 8009ad8:	9003      	str	r0, [sp, #12]
 8009ada:	68d0      	ldr	r0, [r2, #12]
 8009adc:	9001      	str	r0, [sp, #4]
 8009ade:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8009ae0:	9200      	str	r2, [sp, #0]
 8009ae2:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8009ae6:	2b00      	cmp	r3, #0
 8009ae8:	f000 8196 	beq.w	8009e18 <D128_GENERIC+0x35c>
 8009aec:	2300      	movs	r3, #0
 8009aee:	6a12      	ldr	r2, [r2, #32]
 8009af0:	920e      	str	r2, [sp, #56]	@ 0x38
 8009af2:	f8df 93a0 	ldr.w	r9, [pc, #928]	@ 8009e94 <D128_GENERIC+0x3d8>
 8009af6:	9305      	str	r3, [sp, #20]
 8009af8:	e177      	b.n	8009dea <D128_GENERIC+0x32e>
 8009afa:	b2d2      	uxtb	r2, r2
 8009afc:	9d04      	ldr	r5, [sp, #16]
 8009afe:	b214      	sxth	r4, r2
 8009b00:	eb04 0a44 	add.w	sl, r4, r4, lsl #1
 8009b04:	4250      	negs	r0, r2
 8009b06:	eb05 010a 	add.w	r1, r5, sl
 8009b0a:	00a6      	lsls	r6, r4, #2
 8009b0c:	eb01 0800 	add.w	r8, r1, r0
 8009b10:	eb06 0e04 	add.w	lr, r6, r4
 8009b14:	eb08 070e 	add.w	r7, r8, lr
 8009b18:	183b      	adds	r3, r7, r0
 8009b1a:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
 8009b1e:	eb03 0c40 	add.w	ip, r3, r0, lsl #1
 8009b22:	9608      	str	r6, [sp, #32]
 8009b24:	eb0c 0604 	add.w	r6, ip, r4
 8009b28:	9304      	str	r3, [sp, #16]
 8009b2a:	1833      	adds	r3, r6, r0
 8009b2c:	f815 b00a 	ldrb.w	fp, [r5, sl]
 8009b30:	9306      	str	r3, [sp, #24]
 8009b32:	f818 a00e 	ldrb.w	sl, [r8, lr]
 8009b36:	9b04      	ldr	r3, [sp, #16]
 8009b38:	f815 e002 	ldrb.w	lr, [r5, r2]
 8009b3c:	782d      	ldrb	r5, [r5, #0]
 8009b3e:	5c3a      	ldrb	r2, [r7, r0]
 8009b40:	9507      	str	r5, [sp, #28]
 8009b42:	9d06      	ldr	r5, [sp, #24]
 8009b44:	f813 3010 	ldrb.w	r3, [r3, r0, lsl #1]
 8009b48:	f81c 8004 	ldrb.w	r8, [ip, r4]
 8009b4c:	9304      	str	r3, [sp, #16]
 8009b4e:	f817 c010 	ldrb.w	ip, [r7, r0, lsl #1]
 8009b52:	5c33      	ldrb	r3, [r6, r0]
 8009b54:	f816 7010 	ldrb.w	r7, [r6, r0, lsl #1]
 8009b58:	5c09      	ldrb	r1, [r1, r0]
 8009b5a:	eb05 0640 	add.w	r6, r5, r0, lsl #1
 8009b5e:	0412      	lsls	r2, r2, #16
 8009b60:	eb02 620a 	add.w	r2, r2, sl, lsl #24
 8009b64:	eb06 0a04 	add.w	sl, r6, r4
 8009b68:	5d36      	ldrb	r6, [r6, r4]
 8009b6a:	f815 4010 	ldrb.w	r4, [r5, r0, lsl #1]
 8009b6e:	f81a 5000 	ldrb.w	r5, [sl, r0]
 8009b72:	042d      	lsls	r5, r5, #16
 8009b74:	eb05 6606 	add.w	r6, r5, r6, lsl #24
 8009b78:	0409      	lsls	r1, r1, #16
 8009b7a:	f81a 5010 	ldrb.w	r5, [sl, r0, lsl #1]
 8009b7e:	eb01 610b 	add.w	r1, r1, fp, lsl #24
 8009b82:	041b      	lsls	r3, r3, #16
 8009b84:	eb01 210e 	add.w	r1, r1, lr, lsl #8
 8009b88:	eb06 2605 	add.w	r6, r6, r5, lsl #8
 8009b8c:	eb0a 0e00 	add.w	lr, sl, r0
 8009b90:	9d07      	ldr	r5, [sp, #28]
 8009b92:	f81e b010 	ldrb.w	fp, [lr, r0, lsl #1]
 8009b96:	eb03 6308 	add.w	r3, r3, r8, lsl #24
 8009b9a:	eb03 2307 	add.w	r3, r3, r7, lsl #8
 8009b9e:	9f08      	ldr	r7, [sp, #32]
 8009ba0:	eb0e 0040 	add.w	r0, lr, r0, lsl #1
 8009ba4:	4429      	add	r1, r5
 8009ba6:	9d04      	ldr	r5, [sp, #16]
 8009ba8:	4438      	add	r0, r7
 8009baa:	eb02 220c 	add.w	r2, r2, ip, lsl #8
 8009bae:	9004      	str	r0, [sp, #16]
 8009bb0:	442a      	add	r2, r5
 8009bb2:	eb06 0a0b 	add.w	sl, r6, fp
 8009bb6:	1918      	adds	r0, r3, r4
 8009bb8:	b2cb      	uxtb	r3, r1
 8009bba:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8009bbe:	9e02      	ldr	r6, [sp, #8]
 8009bc0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009bc4:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8009bc8:	f3c1 4407 	ubfx	r4, r1, #16, #8
 8009bcc:	441e      	add	r6, r3
 8009bce:	0e09      	lsrs	r1, r1, #24
 8009bd0:	4633      	mov	r3, r6
 8009bd2:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009bd6:	f859 7021 	ldr.w	r7, [r9, r1, lsl #2]
 8009bda:	b2d4      	uxtb	r4, r2
 8009bdc:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009be0:	f3c2 2107 	ubfx	r1, r2, #8, #8
 8009be4:	eb06 2b95 	add.w	fp, r6, r5, lsr #10
 8009be8:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009bec:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009bf0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8009bf4:	0e12      	lsrs	r2, r2, #24
 8009bf6:	eb07 279b 	add.w	r7, r7, fp, lsr #10
 8009bfa:	eb06 2897 	add.w	r8, r6, r7, lsr #10
 8009bfe:	f859 6024 	ldr.w	r6, [r9, r4, lsl #2]
 8009c02:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8009c06:	9702      	str	r7, [sp, #8]
 8009c08:	b2c2      	uxtb	r2, r0
 8009c0a:	eb01 2198 	add.w	r1, r1, r8, lsr #10
 8009c0e:	eb06 2e91 	add.w	lr, r6, r1, lsr #10
 8009c12:	f859 6022 	ldr.w	r6, [r9, r2, lsl #2]
 8009c16:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8009c1a:	f3c0 2207 	ubfx	r2, r0, #8, #8
 8009c1e:	eb06 2c94 	add.w	ip, r6, r4, lsr #10
 8009c22:	f3c0 4607 	ubfx	r6, r0, #16, #8
 8009c26:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8009c2a:	f859 7026 	ldr.w	r7, [r9, r6, lsl #2]
 8009c2e:	0e00      	lsrs	r0, r0, #24
 8009c30:	fa5f f68a 	uxtb.w	r6, sl
 8009c34:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009c38:	9308      	str	r3, [sp, #32]
 8009c3a:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8009c3e:	f859 6026 	ldr.w	r6, [r9, r6, lsl #2]
 8009c42:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 8009c46:	f3ca 2307 	ubfx	r3, sl, #8, #8
 8009c4a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009c4e:	9509      	str	r5, [sp, #36]	@ 0x24
 8009c50:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 8009c54:	f3ca 4507 	ubfx	r5, sl, #16, #8
 8009c58:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 8009c5c:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009c60:	f859 5025 	ldr.w	r5, [r9, r5, lsl #2]
 8009c64:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8009c68:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 8009c6c:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 8009c70:	f859 a02a 	ldr.w	sl, [r9, sl, lsl #2]
 8009c74:	9306      	str	r3, [sp, #24]
 8009c76:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 8009c7a:	9b02      	ldr	r3, [sp, #8]
 8009c7c:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8009c80:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8009c84:	f8cd a01c 	str.w	sl, [sp, #28]
 8009c88:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 8009c8c:	9b06      	ldr	r3, [sp, #24]
 8009c8e:	9506      	str	r5, [sp, #24]
 8009c90:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009c92:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8009c96:	f8cd e008 	str.w	lr, [sp, #8]
 8009c9a:	46ae      	mov	lr, r5
 8009c9c:	9d08      	ldr	r5, [sp, #32]
 8009c9e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8009ca2:	ea4e 4e05 	orr.w	lr, lr, r5, lsl #16
 8009ca6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8009caa:	9d02      	ldr	r5, [sp, #8]
 8009cac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8009cb0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8009cb4:	9f07      	ldr	r7, [sp, #28]
 8009cb6:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8009cba:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8009cbe:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8009cc2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8009cc6:	9d06      	ldr	r5, [sp, #24]
 8009cc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009ccc:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 8009cd0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8009cd4:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 8009cd8:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8009cdc:	f3c7 0c09 	ubfx	ip, r7, #0, #10
 8009ce0:	0abe      	lsrs	r6, r7, #10
 8009ce2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8009ce6:	9602      	str	r6, [sp, #8]
 8009ce8:	ea4a 4a0b 	orr.w	sl, sl, fp, lsl #16
 8009cec:	ea41 4108 	orr.w	r1, r1, r8, lsl #16
 8009cf0:	ea4c 4505 	orr.w	r5, ip, r5, lsl #16
 8009cf4:	4e52      	ldr	r6, [pc, #328]	@ (8009e40 <D128_GENERIC+0x384>)
 8009cf6:	9f01      	ldr	r7, [sp, #4]
 8009cf8:	fb2e 7606 	smlad	r6, lr, r6, r7
 8009cfc:	4f51      	ldr	r7, [pc, #324]	@ (8009e44 <D128_GENERIC+0x388>)
 8009cfe:	fb2a 6607 	smlad	r6, sl, r7, r6
 8009d02:	4f51      	ldr	r7, [pc, #324]	@ (8009e48 <D128_GENERIC+0x38c>)
 8009d04:	fb21 6607 	smlad	r6, r1, r7, r6
 8009d08:	4f50      	ldr	r7, [pc, #320]	@ (8009e4c <D128_GENERIC+0x390>)
 8009d0a:	fb24 6607 	smlad	r6, r4, r7, r6
 8009d0e:	4f50      	ldr	r7, [pc, #320]	@ (8009e50 <D128_GENERIC+0x394>)
 8009d10:	fb22 6607 	smlad	r6, r2, r7, r6
 8009d14:	4f4f      	ldr	r7, [pc, #316]	@ (8009e54 <D128_GENERIC+0x398>)
 8009d16:	fb20 6607 	smlad	r6, r0, r7, r6
 8009d1a:	4f4f      	ldr	r7, [pc, #316]	@ (8009e58 <D128_GENERIC+0x39c>)
 8009d1c:	fb23 6607 	smlad	r6, r3, r7, r6
 8009d20:	f44f 3780 	mov.w	r7, #65536	@ 0x10000
 8009d24:	fb25 6807 	smlad	r8, r5, r7, r6
 8009d28:	4f4c      	ldr	r7, [pc, #304]	@ (8009e5c <D128_GENERIC+0x3a0>)
 8009d2a:	9e03      	ldr	r6, [sp, #12]
 8009d2c:	fb2e 6c07 	smlad	ip, lr, r7, r6
 8009d30:	4e4b      	ldr	r6, [pc, #300]	@ (8009e60 <D128_GENERIC+0x3a4>)
 8009d32:	fb2a cc06 	smlad	ip, sl, r6, ip
 8009d36:	4f4b      	ldr	r7, [pc, #300]	@ (8009e64 <D128_GENERIC+0x3a8>)
 8009d38:	fb21 cc07 	smlad	ip, r1, r7, ip
 8009d3c:	4f4a      	ldr	r7, [pc, #296]	@ (8009e68 <D128_GENERIC+0x3ac>)
 8009d3e:	fb24 cc07 	smlad	ip, r4, r7, ip
 8009d42:	4f4a      	ldr	r7, [pc, #296]	@ (8009e6c <D128_GENERIC+0x3b0>)
 8009d44:	fb22 cc07 	smlad	ip, r2, r7, ip
 8009d48:	4f49      	ldr	r7, [pc, #292]	@ (8009e70 <D128_GENERIC+0x3b4>)
 8009d4a:	fb20 cc07 	smlad	ip, r0, r7, ip
 8009d4e:	4f49      	ldr	r7, [pc, #292]	@ (8009e74 <D128_GENERIC+0x3b8>)
 8009d50:	fb23 c707 	smlad	r7, r3, r7, ip
 8009d54:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8009e98 <D128_GENERIC+0x3dc>
 8009d58:	fb25 760c 	smlad	r6, r5, ip, r7
 8009d5c:	f04f 0b01 	mov.w	fp, #1
 8009d60:	9601      	str	r6, [sp, #4]
 8009d62:	fb2e fb0b 	smuad	fp, lr, fp
 8009d66:	4f44      	ldr	r7, [pc, #272]	@ (8009e78 <D128_GENERIC+0x3bc>)
 8009d68:	fb2a ba07 	smlad	sl, sl, r7, fp
 8009d6c:	4f43      	ldr	r7, [pc, #268]	@ (8009e7c <D128_GENERIC+0x3c0>)
 8009d6e:	fb21 aa07 	smlad	sl, r1, r7, sl
 8009d72:	4f43      	ldr	r7, [pc, #268]	@ (8009e80 <D128_GENERIC+0x3c4>)
 8009d74:	fb24 aa07 	smlad	sl, r4, r7, sl
 8009d78:	4f42      	ldr	r7, [pc, #264]	@ (8009e84 <D128_GENERIC+0x3c8>)
 8009d7a:	fb22 a707 	smlad	r7, r2, r7, sl
 8009d7e:	4a42      	ldr	r2, [pc, #264]	@ (8009e88 <D128_GENERIC+0x3cc>)
 8009d80:	fb20 7702 	smlad	r7, r0, r2, r7
 8009d84:	4a41      	ldr	r2, [pc, #260]	@ (8009e8c <D128_GENERIC+0x3d0>)
 8009d86:	fb23 7702 	smlad	r7, r3, r2, r7
 8009d8a:	4b41      	ldr	r3, [pc, #260]	@ (8009e90 <D128_GENERIC+0x3d4>)
 8009d8c:	fb25 7303 	smlad	r3, r5, r3, r7
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009d94:	f5a8 1680 	sub.w	r6, r8, #1048576	@ 0x100000
 8009d98:	b183      	cbz	r3, 8009dbc <D128_GENERIC+0x300>
 8009d9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009d9c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009d9e:	4432      	add	r2, r6
 8009da0:	1a52      	subs	r2, r2, r1
 8009da2:	fba2 4503 	umull	r4, r5, r2, r3
 8009da6:	17d1      	asrs	r1, r2, #31
 8009da8:	fb03 5501 	mla	r5, r3, r1, r5
 8009dac:	f114 4200 	adds.w	r2, r4, #2147483648	@ 0x80000000
 8009db0:	f145 0300 	adc.w	r3, r5, #0
 8009db4:	005b      	lsls	r3, r3, #1
 8009db6:	e9cd 360a 	strd	r3, r6, [sp, #40]	@ 0x28
 8009dba:	461e      	mov	r6, r3
 8009dbc:	9800      	ldr	r0, [sp, #0]
 8009dbe:	9c05      	ldr	r4, [sp, #20]
 8009dc0:	8d01      	ldrh	r1, [r0, #40]	@ 0x28
 8009dc2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8009dc4:	01f6      	lsls	r6, r6, #7
 8009dc6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8009dca:	2300      	movs	r3, #0
 8009dcc:	fbc5 2306 	smlal	r2, r3, r5, r6
 8009dd0:	fb04 f101 	mul.w	r1, r4, r1
 8009dd4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009dd6:	109b      	asrs	r3, r3, #2
 8009dd8:	f303 030f 	ssat	r3, #16, r3
 8009ddc:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
 8009de0:	8cc3      	ldrh	r3, [r0, #38]	@ 0x26
 8009de2:	1c62      	adds	r2, r4, #1
 8009de4:	4293      	cmp	r3, r2
 8009de6:	9205      	str	r2, [sp, #20]
 8009de8:	dd16      	ble.n	8009e18 <D128_GENERIC+0x35c>
 8009dea:	9b00      	ldr	r3, [sp, #0]
 8009dec:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8009dee:	2a01      	cmp	r2, #1
 8009df0:	f47f ae83 	bne.w	8009afa <D128_GENERIC+0x3e>
 8009df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009df6:	9c04      	ldr	r4, [sp, #16]
 8009df8:	069b      	lsls	r3, r3, #26
 8009dfa:	e9d4 1200 	ldrd	r1, r2, [r4]
 8009dfe:	68a0      	ldr	r0, [r4, #8]
 8009e00:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8009e04:	f104 0410 	add.w	r4, r4, #16
 8009e08:	d517      	bpl.n	8009e3a <D128_GENERIC+0x37e>
 8009e0a:	ba49      	rev16	r1, r1
 8009e0c:	ba52      	rev16	r2, r2
 8009e0e:	ba40      	rev16	r0, r0
 8009e10:	fa9a fa9a 	rev16.w	sl, sl
 8009e14:	9404      	str	r4, [sp, #16]
 8009e16:	e6cf      	b.n	8009bb8 <D128_GENERIC+0xfc>
 8009e18:	9b00      	ldr	r3, [sp, #0]
 8009e1a:	9903      	ldr	r1, [sp, #12]
 8009e1c:	6099      	str	r1, [r3, #8]
 8009e1e:	9901      	ldr	r1, [sp, #4]
 8009e20:	60d9      	str	r1, [r3, #12]
 8009e22:	9902      	ldr	r1, [sp, #8]
 8009e24:	61d9      	str	r1, [r3, #28]
 8009e26:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009e28:	6119      	str	r1, [r3, #16]
 8009e2a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8009e2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e2e:	6159      	str	r1, [r3, #20]
 8009e30:	2000      	movs	r0, #0
 8009e32:	619a      	str	r2, [r3, #24]
 8009e34:	b011      	add	sp, #68	@ 0x44
 8009e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e3a:	9404      	str	r4, [sp, #16]
 8009e3c:	e6bc      	b.n	8009bb8 <D128_GENERIC+0xfc>
 8009e3e:	bf00      	nop
 8009e40:	00780069 	.word	0x00780069
 8009e44:	005b004e 	.word	0x005b004e
 8009e48:	00420037 	.word	0x00420037
 8009e4c:	002d0024 	.word	0x002d0024
 8009e50:	001c0015 	.word	0x001c0015
 8009e54:	000f000a 	.word	0x000f000a
 8009e58:	00060003 	.word	0x00060003
 8009e5c:	00880096 	.word	0x00880096
 8009e60:	00a200ac 	.word	0x00a200ac
 8009e64:	00b400ba 	.word	0x00b400ba
 8009e68:	00be00c0 	.word	0x00be00c0
 8009e6c:	00c000be 	.word	0x00c000be
 8009e70:	00ba00b4 	.word	0x00ba00b4
 8009e74:	00ac00a2 	.word	0x00ac00a2
 8009e78:	00030006 	.word	0x00030006
 8009e7c:	000a000f 	.word	0x000a000f
 8009e80:	0015001c 	.word	0x0015001c
 8009e84:	0024002d 	.word	0x0024002d
 8009e88:	00370042 	.word	0x00370042
 8009e8c:	004e005b 	.word	0x004e005b
 8009e90:	00690078 	.word	0x00690078
 8009e94:	20000018 	.word	0x20000018
 8009e98:	00960088 	.word	0x00960088

08009e9c <D16_1CH_HTONS_VOL_HP>:
 8009e9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea0:	e9d2 5402 	ldrd	r5, r4, [r2, #8]
 8009ea4:	b085      	sub	sp, #20
 8009ea6:	4681      	mov	r9, r0
 8009ea8:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 8009eaa:	6993      	ldr	r3, [r2, #24]
 8009eac:	9303      	str	r3, [sp, #12]
 8009eae:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 8009eb2:	69d3      	ldr	r3, [r2, #28]
 8009eb4:	9402      	str	r4, [sp, #8]
 8009eb6:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8009eba:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8009ebe:	2800      	cmp	r0, #0
 8009ec0:	d057      	beq.n	8009f72 <D16_1CH_HTONS_VOL_HP+0xd6>
 8009ec2:	eb09 0b40 	add.w	fp, r9, r0, lsl #1
 8009ec6:	f8df e0b8 	ldr.w	lr, [pc, #184]	@ 8009f80 <D16_1CH_HTONS_VOL_HP+0xe4>
 8009eca:	f1a1 0802 	sub.w	r8, r1, #2
 8009ece:	4639      	mov	r1, r7
 8009ed0:	465f      	mov	r7, fp
 8009ed2:	46d3      	mov	fp, sl
 8009ed4:	46ca      	mov	sl, r9
 8009ed6:	4699      	mov	r9, r3
 8009ed8:	4633      	mov	r3, r6
 8009eda:	4616      	mov	r6, r2
 8009edc:	f85a 2b02 	ldr.w	r2, [sl], #2
 8009ee0:	ba52      	rev16	r2, r2
 8009ee2:	b2d4      	uxtb	r4, r2
 8009ee4:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8009ee8:	f85e 2024 	ldr.w	r2, [lr, r4, lsl #2]
 8009eec:	f85e 0020 	ldr.w	r0, [lr, r0, lsl #2]
 8009ef0:	4491      	add	r9, r2
 8009ef2:	eb00 2099 	add.w	r0, r0, r9, lsr #10
 8009ef6:	f3c0 0209 	ubfx	r2, r0, #0, #10
 8009efa:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8009efe:	ea42 4209 	orr.w	r2, r2, r9, lsl #16
 8009f02:	ea4f 2990 	mov.w	r9, r0, lsr #10
 8009f06:	481c      	ldr	r0, [pc, #112]	@ (8009f78 <D16_1CH_HTONS_VOL_HP+0xdc>)
 8009f08:	fb22 5400 	smlad	r4, r2, r0, r5
 8009f0c:	481b      	ldr	r0, [pc, #108]	@ (8009f7c <D16_1CH_HTONS_VOL_HP+0xe0>)
 8009f0e:	fb22 f500 	smuad	r5, r2, r0
 8009f12:	f5a4 6400 	sub.w	r4, r4, #2048	@ 0x800
 8009f16:	18e2      	adds	r2, r4, r3
 8009f18:	1a52      	subs	r2, r2, r1
 8009f1a:	17d1      	asrs	r1, r2, #31
 8009f1c:	fba2 230c 	umull	r2, r3, r2, ip
 8009f20:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 8009f24:	fb0c 3301 	mla	r3, ip, r1, r3
 8009f28:	f143 0100 	adc.w	r1, r3, #0
 8009f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8009f30:	044a      	lsls	r2, r1, #17
 8009f32:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8009f36:	2100      	movs	r1, #0
 8009f38:	9b01      	ldr	r3, [sp, #4]
 8009f3a:	fbcb 0102 	smlal	r0, r1, fp, r2
 8009f3e:	45ba      	cmp	sl, r7
 8009f40:	ea4f 02a1 	mov.w	r2, r1, asr #2
 8009f44:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f48:	f302 020f 	ssat	r2, #16, r2
 8009f4c:	4621      	mov	r1, r4
 8009f4e:	f828 2f02 	strh.w	r2, [r8, #2]!
 8009f52:	d1c3      	bne.n	8009edc <D16_1CH_HTONS_VOL_HP+0x40>
 8009f54:	4632      	mov	r2, r6
 8009f56:	461e      	mov	r6, r3
 8009f58:	464b      	mov	r3, r9
 8009f5a:	9902      	ldr	r1, [sp, #8]
 8009f5c:	61d3      	str	r3, [r2, #28]
 8009f5e:	9b03      	ldr	r3, [sp, #12]
 8009f60:	6095      	str	r5, [r2, #8]
 8009f62:	2000      	movs	r0, #0
 8009f64:	60d1      	str	r1, [r2, #12]
 8009f66:	e9c2 6404 	strd	r6, r4, [r2, #16]
 8009f6a:	6193      	str	r3, [r2, #24]
 8009f6c:	b005      	add	sp, #20
 8009f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f72:	463c      	mov	r4, r7
 8009f74:	e7f1      	b.n	8009f5a <D16_1CH_HTONS_VOL_HP+0xbe>
 8009f76:	bf00      	nop
 8009f78:	00030001 	.word	0x00030001
 8009f7c:	00010003 	.word	0x00010003
 8009f80:	20000018 	.word	0x20000018

08009f84 <D24_1CH_HTONS_VOL_HP>:
 8009f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f88:	4696      	mov	lr, r2
 8009f8a:	b089      	sub	sp, #36	@ 0x24
 8009f8c:	f8de 7030 	ldr.w	r7, [lr, #48]	@ 0x30
 8009f90:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8009f92:	f8de 3018 	ldr.w	r3, [lr, #24]
 8009f96:	9703      	str	r7, [sp, #12]
 8009f98:	f8de 7020 	ldr.w	r7, [lr, #32]
 8009f9c:	9306      	str	r3, [sp, #24]
 8009f9e:	9205      	str	r2, [sp, #20]
 8009fa0:	e9de 5404 	ldrd	r5, r4, [lr, #16]
 8009fa4:	f8de 601c 	ldr.w	r6, [lr, #28]
 8009fa8:	9704      	str	r7, [sp, #16]
 8009faa:	e9de 3a02 	ldrd	r3, sl, [lr, #8]
 8009fae:	2a00      	cmp	r2, #0
 8009fb0:	f000 8081 	beq.w	800a0b6 <D24_1CH_HTONS_VOL_HP+0x132>
 8009fb4:	f1a1 0b02 	sub.w	fp, r1, #2
 8009fb8:	2700      	movs	r7, #0
 8009fba:	46d9      	mov	r9, fp
 8009fbc:	f8cd e01c 	str.w	lr, [sp, #28]
 8009fc0:	46d3      	mov	fp, sl
 8009fc2:	f8df c100 	ldr.w	ip, [pc, #256]	@ 800a0c4 <D24_1CH_HTONS_VOL_HP+0x140>
 8009fc6:	46a8      	mov	r8, r5
 8009fc8:	46ba      	mov	sl, r7
 8009fca:	469e      	mov	lr, r3
 8009fcc:	e052      	b.n	800a074 <D24_1CH_HTONS_VOL_HP+0xf0>
 8009fce:	7842      	ldrb	r2, [r0, #1]
 8009fd0:	3002      	adds	r0, #2
 8009fd2:	4413      	add	r3, r2
 8009fd4:	b2d9      	uxtb	r1, r3
 8009fd6:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8009fda:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 8009fde:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 8009fe2:	0c1b      	lsrs	r3, r3, #16
 8009fe4:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8009fe8:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8009fec:	f85c 6023 	ldr.w	r6, [ip, r3, lsl #2]
 8009ff0:	f3c7 0309 	ubfx	r3, r7, #0, #10
 8009ff4:	f3c2 0709 	ubfx	r7, r2, #0, #10
 8009ff8:	eb06 2692 	add.w	r6, r6, r2, lsr #10
 8009ffc:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 800a000:	4a2e      	ldr	r2, [pc, #184]	@ (800a0bc <D24_1CH_HTONS_VOL_HP+0x138>)
 800a002:	fb23 b102 	smlad	r1, r3, r2, fp
 800a006:	4a2e      	ldr	r2, [pc, #184]	@ (800a0c0 <D24_1CH_HTONS_VOL_HP+0x13c>)
 800a008:	fb23 eb02 	smlad	fp, r3, r2, lr
 800a00c:	f3c6 0e09 	ubfx	lr, r6, #0, #10
 800a010:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 800a014:	eb0b 0b4e 	add.w	fp, fp, lr, lsl #1
 800a018:	2201      	movs	r2, #1
 800a01a:	fb23 f702 	smuad	r7, r3, r2
 800a01e:	f5a1 51d8 	sub.w	r1, r1, #6912	@ 0x1b00
 800a022:	eb01 0208 	add.w	r2, r1, r8
 800a026:	1b12      	subs	r2, r2, r4
 800a028:	17d4      	asrs	r4, r2, #31
 800a02a:	4613      	mov	r3, r2
 800a02c:	e9cd 3400 	strd	r3, r4, [sp]
 800a030:	9c04      	ldr	r4, [sp, #16]
 800a032:	9d01      	ldr	r5, [sp, #4]
 800a034:	fba2 2304 	umull	r2, r3, r2, r4
 800a038:	fb04 3305 	mla	r3, r4, r5, r3
 800a03c:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 800a040:	f143 0500 	adc.w	r5, r3, #0
 800a044:	9b03      	ldr	r3, [sp, #12]
 800a046:	e9cd 4500 	strd	r4, r5, [sp]
 800a04a:	03ea      	lsls	r2, r5, #15
 800a04c:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 800a050:	2500      	movs	r5, #0
 800a052:	fbc3 4502 	smlal	r4, r5, r3, r2
 800a056:	9b01      	ldr	r3, [sp, #4]
 800a058:	ea4f 0843 	mov.w	r8, r3, lsl #1
 800a05c:	10ab      	asrs	r3, r5, #2
 800a05e:	f303 030f 	ssat	r3, #16, r3
 800a062:	f829 3f02 	strh.w	r3, [r9, #2]!
 800a066:	9b05      	ldr	r3, [sp, #20]
 800a068:	f10a 0a01 	add.w	sl, sl, #1
 800a06c:	459a      	cmp	sl, r3
 800a06e:	44be      	add	lr, r7
 800a070:	460c      	mov	r4, r1
 800a072:	d00e      	beq.n	800a092 <D24_1CH_HTONS_VOL_HP+0x10e>
 800a074:	7801      	ldrb	r1, [r0, #0]
 800a076:	78c2      	ldrb	r2, [r0, #3]
 800a078:	020b      	lsls	r3, r1, #8
 800a07a:	f01a 0f01 	tst.w	sl, #1
 800a07e:	eb03 4302 	add.w	r3, r3, r2, lsl #16
 800a082:	d0a4      	beq.n	8009fce <D24_1CH_HTONS_VOL_HP+0x4a>
 800a084:	7885      	ldrb	r5, [r0, #2]
 800a086:	0212      	lsls	r2, r2, #8
 800a088:	eb02 4305 	add.w	r3, r2, r5, lsl #16
 800a08c:	440b      	add	r3, r1
 800a08e:	3004      	adds	r0, #4
 800a090:	e7a0      	b.n	8009fd4 <D24_1CH_HTONS_VOL_HP+0x50>
 800a092:	4673      	mov	r3, lr
 800a094:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800a098:	46da      	mov	sl, fp
 800a09a:	4645      	mov	r5, r8
 800a09c:	e9ce 3a02 	strd	r3, sl, [lr, #8]
 800a0a0:	9b06      	ldr	r3, [sp, #24]
 800a0a2:	f8ce 601c 	str.w	r6, [lr, #28]
 800a0a6:	2000      	movs	r0, #0
 800a0a8:	e9ce 5104 	strd	r5, r1, [lr, #16]
 800a0ac:	f8ce 3018 	str.w	r3, [lr, #24]
 800a0b0:	b009      	add	sp, #36	@ 0x24
 800a0b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0b6:	4621      	mov	r1, r4
 800a0b8:	e7f0      	b.n	800a09c <D24_1CH_HTONS_VOL_HP+0x118>
 800a0ba:	bf00      	nop
 800a0bc:	00030001 	.word	0x00030001
 800a0c0:	00060007 	.word	0x00060007
 800a0c4:	20000018 	.word	0x20000018

0800a0c8 <D32_1CH_HTONS_VOL_HP>:
 800a0c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0cc:	4682      	mov	sl, r0
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800a0d2:	6993      	ldr	r3, [r2, #24]
 800a0d4:	9304      	str	r3, [sp, #16]
 800a0d6:	e9d2 6704 	ldrd	r6, r7, [r2, #16]
 800a0da:	69d5      	ldr	r5, [r2, #28]
 800a0dc:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800a0de:	f8d2 9020 	ldr.w	r9, [r2, #32]
 800a0e2:	e9d2 3802 	ldrd	r3, r8, [r2, #8]
 800a0e6:	2800      	cmp	r0, #0
 800a0e8:	d070      	beq.n	800a1cc <D32_1CH_HTONS_VOL_HP+0x104>
 800a0ea:	468e      	mov	lr, r1
 800a0ec:	f8df c0f0 	ldr.w	ip, [pc, #240]	@ 800a1e0 <D32_1CH_HTONS_VOL_HP+0x118>
 800a0f0:	9205      	str	r2, [sp, #20]
 800a0f2:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a0f6:	46d3      	mov	fp, sl
 800a0f8:	4638      	mov	r0, r7
 800a0fa:	46ca      	mov	sl, r9
 800a0fc:	9103      	str	r1, [sp, #12]
 800a0fe:	4627      	mov	r7, r4
 800a100:	4699      	mov	r9, r3
 800a102:	f85b 1b04 	ldr.w	r1, [fp], #4
 800a106:	ba49      	rev16	r1, r1
 800a108:	b2ca      	uxtb	r2, r1
 800a10a:	f3c1 2307 	ubfx	r3, r1, #8, #8
 800a10e:	f85c 2022 	ldr.w	r2, [ip, r2, lsl #2]
 800a112:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800a116:	f3c1 4407 	ubfx	r4, r1, #16, #8
 800a11a:	0e09      	lsrs	r1, r1, #24
 800a11c:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 800a120:	f85c 4024 	ldr.w	r4, [ip, r4, lsl #2]
 800a124:	f85c 5021 	ldr.w	r5, [ip, r1, lsl #2]
 800a128:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 800a12c:	eb04 2493 	add.w	r4, r4, r3, lsr #10
 800a130:	eb05 2594 	add.w	r5, r5, r4, lsr #10
 800a134:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a138:	f3c5 0109 	ubfx	r1, r5, #0, #10
 800a13c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a140:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a144:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a148:	ea41 4404 	orr.w	r4, r1, r4, lsl #16
 800a14c:	4a20      	ldr	r2, [pc, #128]	@ (800a1d0 <D32_1CH_HTONS_VOL_HP+0x108>)
 800a14e:	fb23 8802 	smlad	r8, r3, r2, r8
 800a152:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a156:	fb24 8102 	smlad	r1, r4, r2, r8
 800a15a:	4a1e      	ldr	r2, [pc, #120]	@ (800a1d4 <D32_1CH_HTONS_VOL_HP+0x10c>)
 800a15c:	fb23 9802 	smlad	r8, r3, r2, r9
 800a160:	4a1d      	ldr	r2, [pc, #116]	@ (800a1d8 <D32_1CH_HTONS_VOL_HP+0x110>)
 800a162:	fb24 8802 	smlad	r8, r4, r2, r8
 800a166:	2201      	movs	r2, #1
 800a168:	fb23 f302 	smuad	r3, r3, r2
 800a16c:	4a1b      	ldr	r2, [pc, #108]	@ (800a1dc <D32_1CH_HTONS_VOL_HP+0x114>)
 800a16e:	fb24 3902 	smlad	r9, r4, r2, r3
 800a172:	f5a1 4480 	sub.w	r4, r1, #16384	@ 0x4000
 800a176:	19a2      	adds	r2, r4, r6
 800a178:	1a12      	subs	r2, r2, r0
 800a17a:	17d1      	asrs	r1, r2, #31
 800a17c:	fba2 230a 	umull	r2, r3, r2, sl
 800a180:	f112 4000 	adds.w	r0, r2, #2147483648	@ 0x80000000
 800a184:	fb0a 3301 	mla	r3, sl, r1, r3
 800a188:	f143 0100 	adc.w	r1, r3, #0
 800a18c:	e9cd 0100 	strd	r0, r1, [sp]
 800a190:	038a      	lsls	r2, r1, #14
 800a192:	9b01      	ldr	r3, [sp, #4]
 800a194:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a198:	2100      	movs	r1, #0
 800a19a:	fbc7 0102 	smlal	r0, r1, r7, r2
 800a19e:	108a      	asrs	r2, r1, #2
 800a1a0:	005e      	lsls	r6, r3, #1
 800a1a2:	f302 020f 	ssat	r2, #16, r2
 800a1a6:	9b03      	ldr	r3, [sp, #12]
 800a1a8:	f82e 2b02 	strh.w	r2, [lr], #2
 800a1ac:	459e      	cmp	lr, r3
 800a1ae:	4620      	mov	r0, r4
 800a1b0:	d1a7      	bne.n	800a102 <D32_1CH_HTONS_VOL_HP+0x3a>
 800a1b2:	9a05      	ldr	r2, [sp, #20]
 800a1b4:	464b      	mov	r3, r9
 800a1b6:	e9c2 3802 	strd	r3, r8, [r2, #8]
 800a1ba:	9b04      	ldr	r3, [sp, #16]
 800a1bc:	61d5      	str	r5, [r2, #28]
 800a1be:	2000      	movs	r0, #0
 800a1c0:	e9c2 6404 	strd	r6, r4, [r2, #16]
 800a1c4:	6193      	str	r3, [r2, #24]
 800a1c6:	b007      	add	sp, #28
 800a1c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a1cc:	463c      	mov	r4, r7
 800a1ce:	e7f2      	b.n	800a1b6 <D32_1CH_HTONS_VOL_HP+0xee>
 800a1d0:	00060003 	.word	0x00060003
 800a1d4:	000a000c 	.word	0x000a000c
 800a1d8:	000c000a 	.word	0x000c000a
 800a1dc:	00030006 	.word	0x00030006
 800a1e0:	20000018 	.word	0x20000018

0800a1e4 <D48_1CH_HTONS_VOL_HP>:
 800a1e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1e8:	b087      	sub	sp, #28
 800a1ea:	6b17      	ldr	r7, [r2, #48]	@ 0x30
 800a1ec:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 800a1ee:	6993      	ldr	r3, [r2, #24]
 800a1f0:	9702      	str	r7, [sp, #8]
 800a1f2:	6a17      	ldr	r7, [r2, #32]
 800a1f4:	9304      	str	r3, [sp, #16]
 800a1f6:	e9d2 4904 	ldrd	r4, r9, [r2, #16]
 800a1fa:	69d6      	ldr	r6, [r2, #28]
 800a1fc:	9705      	str	r7, [sp, #20]
 800a1fe:	e9d2 3c02 	ldrd	r3, ip, [r2, #8]
 800a202:	2d00      	cmp	r5, #0
 800a204:	f000 8093 	beq.w	800a32e <D48_1CH_HTONS_VOL_HP+0x14a>
 800a208:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a20c:	46ba      	mov	sl, r7
 800a20e:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800a212:	3902      	subs	r1, #2
 800a214:	4f47      	ldr	r7, [pc, #284]	@ (800a334 <D48_1CH_HTONS_VOL_HP+0x150>)
 800a216:	9503      	str	r5, [sp, #12]
 800a218:	9101      	str	r1, [sp, #4]
 800a21a:	469e      	mov	lr, r3
 800a21c:	9205      	str	r2, [sp, #20]
 800a21e:	e9d0 3500 	ldrd	r3, r5, [r0]
 800a222:	3006      	adds	r0, #6
 800a224:	ba5b      	rev16	r3, r3
 800a226:	ba6d      	rev16	r5, r5
 800a228:	b2da      	uxtb	r2, r3
 800a22a:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800a22e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 800a232:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
 800a236:	f3c3 4807 	ubfx	r8, r3, #16, #8
 800a23a:	0e1b      	lsrs	r3, r3, #24
 800a23c:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 800a240:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 800a244:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
 800a248:	fa5f fb85 	uxtb.w	fp, r5
 800a24c:	eb01 2192 	add.w	r1, r1, r2, lsr #10
 800a250:	f3c5 2607 	ubfx	r6, r5, #8, #8
 800a254:	eb08 2891 	add.w	r8, r8, r1, lsr #10
 800a258:	f857 502b 	ldr.w	r5, [r7, fp, lsl #2]
 800a25c:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 800a260:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 800a264:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a268:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 800a26c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a270:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a274:	f3c6 0b09 	ubfx	fp, r6, #0, #10
 800a278:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a27c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a280:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a284:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 800a288:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 800a28c:	ea4b 4505 	orr.w	r5, fp, r5, lsl #16
 800a290:	4b29      	ldr	r3, [pc, #164]	@ (800a338 <D48_1CH_HTONS_VOL_HP+0x154>)
 800a292:	fb22 c103 	smlad	r1, r2, r3, ip
 800a296:	4b29      	ldr	r3, [pc, #164]	@ (800a33c <D48_1CH_HTONS_VOL_HP+0x158>)
 800a298:	fb28 1103 	smlad	r1, r8, r3, r1
 800a29c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800a2a0:	fb25 1103 	smlad	r1, r5, r3, r1
 800a2a4:	4b26      	ldr	r3, [pc, #152]	@ (800a340 <D48_1CH_HTONS_VOL_HP+0x15c>)
 800a2a6:	fb22 ec03 	smlad	ip, r2, r3, lr
 800a2aa:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 800a2ae:	fb28 cc03 	smlad	ip, r8, r3, ip
 800a2b2:	4b24      	ldr	r3, [pc, #144]	@ (800a344 <D48_1CH_HTONS_VOL_HP+0x160>)
 800a2b4:	fb25 cc03 	smlad	ip, r5, r3, ip
 800a2b8:	f04f 0e01 	mov.w	lr, #1
 800a2bc:	fb22 f20e 	smuad	r2, r2, lr
 800a2c0:	4b21      	ldr	r3, [pc, #132]	@ (800a348 <D48_1CH_HTONS_VOL_HP+0x164>)
 800a2c2:	fb28 2803 	smlad	r8, r8, r3, r2
 800a2c6:	4b21      	ldr	r3, [pc, #132]	@ (800a34c <D48_1CH_HTONS_VOL_HP+0x168>)
 800a2c8:	fb25 8e03 	smlad	lr, r5, r3, r8
 800a2cc:	f5a1 4158 	sub.w	r1, r1, #55296	@ 0xd800
 800a2d0:	190a      	adds	r2, r1, r4
 800a2d2:	eba2 0209 	sub.w	r2, r2, r9
 800a2d6:	17d5      	asrs	r5, r2, #31
 800a2d8:	fba2 230a 	umull	r2, r3, r2, sl
 800a2dc:	f112 4400 	adds.w	r4, r2, #2147483648	@ 0x80000000
 800a2e0:	fb0a 3305 	mla	r3, sl, r5, r3
 800a2e4:	f143 0500 	adc.w	r5, r3, #0
 800a2e8:	9b02      	ldr	r3, [sp, #8]
 800a2ea:	032a      	lsls	r2, r5, #12
 800a2ec:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800a2f0:	f04f 0900 	mov.w	r9, #0
 800a2f4:	fbc3 8902 	smlal	r8, r9, r3, r2
 800a2f8:	9a01      	ldr	r2, [sp, #4]
 800a2fa:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800a2fe:	f303 030f 	ssat	r3, #16, r3
 800a302:	f822 3f02 	strh.w	r3, [r2, #2]!
 800a306:	9b03      	ldr	r3, [sp, #12]
 800a308:	9201      	str	r2, [sp, #4]
 800a30a:	4283      	cmp	r3, r0
 800a30c:	ea4f 0445 	mov.w	r4, r5, lsl #1
 800a310:	4689      	mov	r9, r1
 800a312:	d184      	bne.n	800a21e <D48_1CH_HTONS_VOL_HP+0x3a>
 800a314:	9a05      	ldr	r2, [sp, #20]
 800a316:	4673      	mov	r3, lr
 800a318:	e9c2 3c02 	strd	r3, ip, [r2, #8]
 800a31c:	9b04      	ldr	r3, [sp, #16]
 800a31e:	61d6      	str	r6, [r2, #28]
 800a320:	2000      	movs	r0, #0
 800a322:	e9c2 4104 	strd	r4, r1, [r2, #16]
 800a326:	6193      	str	r3, [r2, #24]
 800a328:	b007      	add	sp, #28
 800a32a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a32e:	4649      	mov	r1, r9
 800a330:	e7f2      	b.n	800a318 <D48_1CH_HTONS_VOL_HP+0x134>
 800a332:	bf00      	nop
 800a334:	20000018 	.word	0x20000018
 800a338:	000f000a 	.word	0x000f000a
 800a33c:	00060003 	.word	0x00060003
 800a340:	00150019 	.word	0x00150019
 800a344:	00190015 	.word	0x00190015
 800a348:	00030006 	.word	0x00030006
 800a34c:	000a000f 	.word	0x000a000f

0800a350 <D64_1CH_HTONS_VOL_HP>:
 800a350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a354:	b087      	sub	sp, #28
 800a356:	6913      	ldr	r3, [r2, #16]
 800a358:	9300      	str	r3, [sp, #0]
 800a35a:	e9d2 4305 	ldrd	r4, r3, [r2, #20]
 800a35e:	6b16      	ldr	r6, [r2, #48]	@ 0x30
 800a360:	9601      	str	r6, [sp, #4]
 800a362:	4681      	mov	r9, r0
 800a364:	8cd0      	ldrh	r0, [r2, #38]	@ 0x26
 800a366:	6a16      	ldr	r6, [r2, #32]
 800a368:	9304      	str	r3, [sp, #16]
 800a36a:	e9d2 5802 	ldrd	r5, r8, [r2, #8]
 800a36e:	69d3      	ldr	r3, [r2, #28]
 800a370:	9602      	str	r6, [sp, #8]
 800a372:	2800      	cmp	r0, #0
 800a374:	f000 809d 	beq.w	800a4b2 <D64_1CH_HTONS_VOL_HP+0x162>
 800a378:	468e      	mov	lr, r1
 800a37a:	f8df c170 	ldr.w	ip, [pc, #368]	@ 800a4ec <D64_1CH_HTONS_VOL_HP+0x19c>
 800a37e:	9205      	str	r2, [sp, #20]
 800a380:	eb01 0140 	add.w	r1, r1, r0, lsl #1
 800a384:	9103      	str	r1, [sp, #12]
 800a386:	4622      	mov	r2, r4
 800a388:	4619      	mov	r1, r3
 800a38a:	f859 3b08 	ldr.w	r3, [r9], #8
 800a38e:	f859 6c04 	ldr.w	r6, [r9, #-4]
 800a392:	ba5b      	rev16	r3, r3
 800a394:	ba76      	rev16	r6, r6
 800a396:	b2dc      	uxtb	r4, r3
 800a398:	f3c3 2007 	ubfx	r0, r3, #8, #8
 800a39c:	f85c 7024 	ldr.w	r7, [ip, r4, lsl #2]
 800a3a0:	f85c 4020 	ldr.w	r4, [ip, r0, lsl #2]
 800a3a4:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a3a8:	0e1b      	lsrs	r3, r3, #24
 800a3aa:	eb01 0b07 	add.w	fp, r1, r7
 800a3ae:	f85c 7020 	ldr.w	r7, [ip, r0, lsl #2]
 800a3b2:	f85c 0023 	ldr.w	r0, [ip, r3, lsl #2]
 800a3b6:	b2f1      	uxtb	r1, r6
 800a3b8:	eb04 249b 	add.w	r4, r4, fp, lsr #10
 800a3bc:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800a3c0:	eb07 2a94 	add.w	sl, r7, r4, lsr #10
 800a3c4:	f85c 7021 	ldr.w	r7, [ip, r1, lsl #2]
 800a3c8:	f85c 3023 	ldr.w	r3, [ip, r3, lsl #2]
 800a3cc:	f3c6 4107 	ubfx	r1, r6, #16, #8
 800a3d0:	eb00 209a 	add.w	r0, r0, sl, lsr #10
 800a3d4:	0e36      	lsrs	r6, r6, #24
 800a3d6:	eb07 2790 	add.w	r7, r7, r0, lsr #10
 800a3da:	f85c 1021 	ldr.w	r1, [ip, r1, lsl #2]
 800a3de:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 800a3e2:	eb03 2397 	add.w	r3, r3, r7, lsr #10
 800a3e6:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 800a3ea:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 800a3ee:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a3f2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a3f6:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a3fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a3fe:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a402:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 800a406:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a40a:	f3c6 0409 	ubfx	r4, r6, #0, #10
 800a40e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a412:	ea40 4a0a 	orr.w	sl, r0, sl, lsl #16
 800a416:	ea43 4707 	orr.w	r7, r3, r7, lsl #16
 800a41a:	ea44 4001 	orr.w	r0, r4, r1, lsl #16
 800a41e:	4b2b      	ldr	r3, [pc, #172]	@ (800a4cc <D64_1CH_HTONS_VOL_HP+0x17c>)
 800a420:	0ab1      	lsrs	r1, r6, #10
 800a422:	fb2b 8803 	smlad	r8, fp, r3, r8
 800a426:	4b2a      	ldr	r3, [pc, #168]	@ (800a4d0 <D64_1CH_HTONS_VOL_HP+0x180>)
 800a428:	fb2a 8803 	smlad	r8, sl, r3, r8
 800a42c:	4b29      	ldr	r3, [pc, #164]	@ (800a4d4 <D64_1CH_HTONS_VOL_HP+0x184>)
 800a42e:	fb27 8803 	smlad	r8, r7, r3, r8
 800a432:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 800a436:	fb20 8604 	smlad	r6, r0, r4, r8
 800a43a:	4b27      	ldr	r3, [pc, #156]	@ (800a4d8 <D64_1CH_HTONS_VOL_HP+0x188>)
 800a43c:	fb2b 5803 	smlad	r8, fp, r3, r5
 800a440:	fb20 8813 	smladx	r8, r0, r3, r8
 800a444:	4b25      	ldr	r3, [pc, #148]	@ (800a4dc <D64_1CH_HTONS_VOL_HP+0x18c>)
 800a446:	fb2a 8803 	smlad	r8, sl, r3, r8
 800a44a:	fb27 8813 	smladx	r8, r7, r3, r8
 800a44e:	2401      	movs	r4, #1
 800a450:	fb2b fb04 	smuad	fp, fp, r4
 800a454:	4b22      	ldr	r3, [pc, #136]	@ (800a4e0 <D64_1CH_HTONS_VOL_HP+0x190>)
 800a456:	fb2a ba03 	smlad	sl, sl, r3, fp
 800a45a:	4b22      	ldr	r3, [pc, #136]	@ (800a4e4 <D64_1CH_HTONS_VOL_HP+0x194>)
 800a45c:	fb27 a703 	smlad	r7, r7, r3, sl
 800a460:	4b21      	ldr	r3, [pc, #132]	@ (800a4e8 <D64_1CH_HTONS_VOL_HP+0x198>)
 800a462:	fb20 7503 	smlad	r5, r0, r3, r7
 800a466:	9b00      	ldr	r3, [sp, #0]
 800a468:	9802      	ldr	r0, [sp, #8]
 800a46a:	f5a6 3400 	sub.w	r4, r6, #131072	@ 0x20000
 800a46e:	4423      	add	r3, r4
 800a470:	1a9a      	subs	r2, r3, r2
 800a472:	17d7      	asrs	r7, r2, #31
 800a474:	fba2 2300 	umull	r2, r3, r2, r0
 800a478:	fb00 3307 	mla	r3, r0, r7, r3
 800a47c:	f112 4a00 	adds.w	sl, r2, #2147483648	@ 0x80000000
 800a480:	f143 0b00 	adc.w	fp, r3, #0
 800a484:	9b01      	ldr	r3, [sp, #4]
 800a486:	ea4f 22cb 	mov.w	r2, fp, lsl #11
 800a48a:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 800a48e:	2700      	movs	r7, #0
 800a490:	fbc3 6702 	smlal	r6, r7, r3, r2
 800a494:	ea4f 034b 	mov.w	r3, fp, lsl #1
 800a498:	10ba      	asrs	r2, r7, #2
 800a49a:	9300      	str	r3, [sp, #0]
 800a49c:	f302 020f 	ssat	r2, #16, r2
 800a4a0:	9b03      	ldr	r3, [sp, #12]
 800a4a2:	f82e 2b02 	strh.w	r2, [lr], #2
 800a4a6:	459e      	cmp	lr, r3
 800a4a8:	4622      	mov	r2, r4
 800a4aa:	f47f af6e 	bne.w	800a38a <D64_1CH_HTONS_VOL_HP+0x3a>
 800a4ae:	9a05      	ldr	r2, [sp, #20]
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	61d3      	str	r3, [r2, #28]
 800a4b4:	9b00      	ldr	r3, [sp, #0]
 800a4b6:	e9c2 3404 	strd	r3, r4, [r2, #16]
 800a4ba:	9b04      	ldr	r3, [sp, #16]
 800a4bc:	6193      	str	r3, [r2, #24]
 800a4be:	2000      	movs	r0, #0
 800a4c0:	e9c2 5802 	strd	r5, r8, [r2, #8]
 800a4c4:	b007      	add	sp, #28
 800a4c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4ca:	bf00      	nop
 800a4cc:	001c0015 	.word	0x001c0015
 800a4d0:	000f000a 	.word	0x000f000a
 800a4d4:	00060003 	.word	0x00060003
 800a4d8:	0024002a 	.word	0x0024002a
 800a4dc:	002e0030 	.word	0x002e0030
 800a4e0:	00030006 	.word	0x00030006
 800a4e4:	000a000f 	.word	0x000a000f
 800a4e8:	0015001c 	.word	0x0015001c
 800a4ec:	20000018 	.word	0x20000018

0800a4f0 <D80_1CH_HTONS_VOL_HP>:
 800a4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4f4:	4615      	mov	r5, r2
 800a4f6:	b089      	sub	sp, #36	@ 0x24
 800a4f8:	e9d5 c402 	ldrd	ip, r4, [r5, #8]
 800a4fc:	692b      	ldr	r3, [r5, #16]
 800a4fe:	9301      	str	r3, [sp, #4]
 800a500:	e9d5 6305 	ldrd	r6, r3, [r5, #20]
 800a504:	9400      	str	r4, [sp, #0]
 800a506:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 800a508:	6b2c      	ldr	r4, [r5, #48]	@ 0x30
 800a50a:	9403      	str	r4, [sp, #12]
 800a50c:	6a2c      	ldr	r4, [r5, #32]
 800a50e:	9306      	str	r3, [sp, #24]
 800a510:	9404      	str	r4, [sp, #16]
 800a512:	69eb      	ldr	r3, [r5, #28]
 800a514:	2a00      	cmp	r2, #0
 800a516:	f000 80d3 	beq.w	800a6c0 <D80_1CH_HTONS_VOL_HP+0x1d0>
 800a51a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 800a51e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 800a522:	9205      	str	r2, [sp, #20]
 800a524:	4c67      	ldr	r4, [pc, #412]	@ (800a6c4 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 800a526:	9507      	str	r5, [sp, #28]
 800a528:	1e8a      	subs	r2, r1, #2
 800a52a:	9202      	str	r2, [sp, #8]
 800a52c:	469b      	mov	fp, r3
 800a52e:	6807      	ldr	r7, [r0, #0]
 800a530:	6842      	ldr	r2, [r0, #4]
 800a532:	6883      	ldr	r3, [r0, #8]
 800a534:	300a      	adds	r0, #10
 800a536:	ba7f      	rev16	r7, r7
 800a538:	ba52      	rev16	r2, r2
 800a53a:	ba5b      	rev16	r3, r3
 800a53c:	b2fd      	uxtb	r5, r7
 800a53e:	f3c7 2107 	ubfx	r1, r7, #8, #8
 800a542:	f854 e025 	ldr.w	lr, [r4, r5, lsl #2]
 800a546:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
 800a54a:	f3c7 4507 	ubfx	r5, r7, #16, #8
 800a54e:	44f3      	add	fp, lr
 800a550:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800a554:	0e3f      	lsrs	r7, r7, #24
 800a556:	fa5f fe82 	uxtb.w	lr, r2
 800a55a:	eb01 219b 	add.w	r1, r1, fp, lsr #10
 800a55e:	eb05 2a91 	add.w	sl, r5, r1, lsr #10
 800a562:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 800a566:	f854 902e 	ldr.w	r9, [r4, lr, lsl #2]
 800a56a:	f3c2 2507 	ubfx	r5, r2, #8, #8
 800a56e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 800a572:	eb07 279a 	add.w	r7, r7, sl, lsr #10
 800a576:	f854 5025 	ldr.w	r5, [r4, r5, lsl #2]
 800a57a:	f854 802e 	ldr.w	r8, [r4, lr, lsl #2]
 800a57e:	0e12      	lsrs	r2, r2, #24
 800a580:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 800a584:	fa5f fe83 	uxtb.w	lr, r3
 800a588:	eb05 2599 	add.w	r5, r5, r9, lsr #10
 800a58c:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a590:	f854 e02e 	ldr.w	lr, [r4, lr, lsl #2]
 800a594:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800a598:	eb08 2895 	add.w	r8, r8, r5, lsr #10
 800a59c:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 800a5a0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 800a5a4:	eb0e 2e92 	add.w	lr, lr, r2, lsr #10
 800a5a8:	eb03 239e 	add.w	r3, r3, lr, lsr #10
 800a5ac:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 800a5b0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a5b4:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 800a5b8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a5bc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a5c0:	ea41 410b 	orr.w	r1, r1, fp, lsl #16
 800a5c4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a5c8:	f3c3 0b09 	ubfx	fp, r3, #0, #10
 800a5cc:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a5d0:	f3c8 0809 	ubfx	r8, r8, #0, #10
 800a5d4:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a5d8:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 800a5dc:	ea4b 4e0e 	orr.w	lr, fp, lr, lsl #16
 800a5e0:	ea47 470a 	orr.w	r7, r7, sl, lsl #16
 800a5e4:	ea4f 2b93 	mov.w	fp, r3, lsr #10
 800a5e8:	ea45 4509 	orr.w	r5, r5, r9, lsl #16
 800a5ec:	4b36      	ldr	r3, [pc, #216]	@ (800a6c8 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 800a5ee:	9a00      	ldr	r2, [sp, #0]
 800a5f0:	fb21 2303 	smlad	r3, r1, r3, r2
 800a5f4:	4a35      	ldr	r2, [pc, #212]	@ (800a6cc <D80_1CH_HTONS_VOL_HP+0x1dc>)
 800a5f6:	fb27 3302 	smlad	r3, r7, r2, r3
 800a5fa:	4a35      	ldr	r2, [pc, #212]	@ (800a6d0 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 800a5fc:	fb25 3302 	smlad	r3, r5, r2, r3
 800a600:	4a34      	ldr	r2, [pc, #208]	@ (800a6d4 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 800a602:	fb28 3302 	smlad	r3, r8, r2, r3
 800a606:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800a60a:	fb2e 3302 	smlad	r3, lr, r2, r3
 800a60e:	4a32      	ldr	r2, [pc, #200]	@ (800a6d8 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 800a610:	fb21 cc02 	smlad	ip, r1, r2, ip
 800a614:	4a31      	ldr	r2, [pc, #196]	@ (800a6dc <D80_1CH_HTONS_VOL_HP+0x1ec>)
 800a616:	fb27 cc02 	smlad	ip, r7, r2, ip
 800a61a:	f04f 194b 	mov.w	r9, #4915275	@ 0x4b004b
 800a61e:	fb25 c909 	smlad	r9, r5, r9, ip
 800a622:	4a2f      	ldr	r2, [pc, #188]	@ (800a6e0 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 800a624:	fb28 9902 	smlad	r9, r8, r2, r9
 800a628:	4a2e      	ldr	r2, [pc, #184]	@ (800a6e4 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 800a62a:	fb2e 9202 	smlad	r2, lr, r2, r9
 800a62e:	f04f 0a01 	mov.w	sl, #1
 800a632:	9200      	str	r2, [sp, #0]
 800a634:	fb21 fa0a 	smuad	sl, r1, sl
 800a638:	4a2b      	ldr	r2, [pc, #172]	@ (800a6e8 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 800a63a:	fb27 a702 	smlad	r7, r7, r2, sl
 800a63e:	4a2b      	ldr	r2, [pc, #172]	@ (800a6ec <D80_1CH_HTONS_VOL_HP+0x1fc>)
 800a640:	fb25 7702 	smlad	r7, r5, r2, r7
 800a644:	4a2a      	ldr	r2, [pc, #168]	@ (800a6f0 <D80_1CH_HTONS_VOL_HP+0x200>)
 800a646:	fb28 7202 	smlad	r2, r8, r2, r7
 800a64a:	4d2a      	ldr	r5, [pc, #168]	@ (800a6f4 <D80_1CH_HTONS_VOL_HP+0x204>)
 800a64c:	fb2e 2c05 	smlad	ip, lr, r5, r2
 800a650:	f5a3 327a 	sub.w	r2, r3, #256000	@ 0x3e800
 800a654:	9b01      	ldr	r3, [sp, #4]
 800a656:	9903      	ldr	r1, [sp, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	1b9e      	subs	r6, r3, r6
 800a65c:	9b04      	ldr	r3, [sp, #16]
 800a65e:	ea4f 79e6 	mov.w	r9, r6, asr #31
 800a662:	fba6 5603 	umull	r5, r6, r6, r3
 800a666:	fb03 6309 	mla	r3, r3, r9, r6
 800a66a:	462e      	mov	r6, r5
 800a66c:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 800a670:	f143 0700 	adc.w	r7, r3, #0
 800a674:	02bb      	lsls	r3, r7, #10
 800a676:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 800a67a:	f04f 0900 	mov.w	r9, #0
 800a67e:	fbc1 8903 	smlal	r8, r9, r1, r3
 800a682:	9902      	ldr	r1, [sp, #8]
 800a684:	007b      	lsls	r3, r7, #1
 800a686:	9301      	str	r3, [sp, #4]
 800a688:	ea4f 03a9 	mov.w	r3, r9, asr #2
 800a68c:	f303 030f 	ssat	r3, #16, r3
 800a690:	f821 3f02 	strh.w	r3, [r1, #2]!
 800a694:	9b05      	ldr	r3, [sp, #20]
 800a696:	9102      	str	r1, [sp, #8]
 800a698:	4283      	cmp	r3, r0
 800a69a:	4616      	mov	r6, r2
 800a69c:	f47f af47 	bne.w	800a52e <D80_1CH_HTONS_VOL_HP+0x3e>
 800a6a0:	9d07      	ldr	r5, [sp, #28]
 800a6a2:	465b      	mov	r3, fp
 800a6a4:	61eb      	str	r3, [r5, #28]
 800a6a6:	9b01      	ldr	r3, [sp, #4]
 800a6a8:	9900      	ldr	r1, [sp, #0]
 800a6aa:	f8c5 c008 	str.w	ip, [r5, #8]
 800a6ae:	e9c5 3204 	strd	r3, r2, [r5, #16]
 800a6b2:	9b06      	ldr	r3, [sp, #24]
 800a6b4:	60e9      	str	r1, [r5, #12]
 800a6b6:	2000      	movs	r0, #0
 800a6b8:	61ab      	str	r3, [r5, #24]
 800a6ba:	b009      	add	sp, #36	@ 0x24
 800a6bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6c0:	4632      	mov	r2, r6
 800a6c2:	e7ef      	b.n	800a6a4 <D80_1CH_HTONS_VOL_HP+0x1b4>
 800a6c4:	20000018 	.word	0x20000018
 800a6c8:	002d0024 	.word	0x002d0024
 800a6cc:	001c0015 	.word	0x001c0015
 800a6d0:	000f000a 	.word	0x000f000a
 800a6d4:	00060003 	.word	0x00060003
 800a6d8:	0037003f 	.word	0x0037003f
 800a6dc:	00450049 	.word	0x00450049
 800a6e0:	00490045 	.word	0x00490045
 800a6e4:	003f0037 	.word	0x003f0037
 800a6e8:	00030006 	.word	0x00030006
 800a6ec:	000a000f 	.word	0x000a000f
 800a6f0:	0015001c 	.word	0x0015001c
 800a6f4:	0024002d 	.word	0x0024002d

0800a6f8 <D128_1CH_HTONS_VOL_HP>:
 800a6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6fc:	b093      	sub	sp, #76	@ 0x4c
 800a6fe:	6914      	ldr	r4, [r2, #16]
 800a700:	9404      	str	r4, [sp, #16]
 800a702:	6954      	ldr	r4, [r2, #20]
 800a704:	9406      	str	r4, [sp, #24]
 800a706:	6994      	ldr	r4, [r2, #24]
 800a708:	9410      	str	r4, [sp, #64]	@ 0x40
 800a70a:	6894      	ldr	r4, [r2, #8]
 800a70c:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 800a70e:	9403      	str	r4, [sp, #12]
 800a710:	68d4      	ldr	r4, [r2, #12]
 800a712:	9211      	str	r2, [sp, #68]	@ 0x44
 800a714:	69d6      	ldr	r6, [r2, #28]
 800a716:	9402      	str	r4, [sp, #8]
 800a718:	6b14      	ldr	r4, [r2, #48]	@ 0x30
 800a71a:	6a12      	ldr	r2, [r2, #32]
 800a71c:	940d      	str	r4, [sp, #52]	@ 0x34
 800a71e:	920e      	str	r2, [sp, #56]	@ 0x38
 800a720:	2b00      	cmp	r3, #0
 800a722:	f000 814a 	beq.w	800a9ba <D128_1CH_HTONS_VOL_HP+0x2c2>
 800a726:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800a72a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a72c:	f8df 82c8 	ldr.w	r8, [pc, #712]	@ 800a9f8 <D128_1CH_HTONS_VOL_HP+0x300>
 800a730:	9107      	str	r1, [sp, #28]
 800a732:	f100 0310 	add.w	r3, r0, #16
 800a736:	469b      	mov	fp, r3
 800a738:	9605      	str	r6, [sp, #20]
 800a73a:	e95b 1204 	ldrd	r1, r2, [fp, #-16]
 800a73e:	e95b 3002 	ldrd	r3, r0, [fp, #-8]
 800a742:	ba49      	rev16	r1, r1
 800a744:	ba52      	rev16	r2, r2
 800a746:	ba5b      	rev16	r3, r3
 800a748:	fa90 fa90 	rev16.w	sl, r0
 800a74c:	f3c1 2007 	ubfx	r0, r1, #8, #8
 800a750:	b2cc      	uxtb	r4, r1
 800a752:	9e05      	ldr	r6, [sp, #20]
 800a754:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 800a758:	f858 5020 	ldr.w	r5, [r8, r0, lsl #2]
 800a75c:	f3c1 4007 	ubfx	r0, r1, #16, #8
 800a760:	0e09      	lsrs	r1, r1, #24
 800a762:	4426      	add	r6, r4
 800a764:	f858 4020 	ldr.w	r4, [r8, r0, lsl #2]
 800a768:	f858 7021 	ldr.w	r7, [r8, r1, lsl #2]
 800a76c:	b2d0      	uxtb	r0, r2
 800a76e:	eb05 2596 	add.w	r5, r5, r6, lsr #10
 800a772:	f3c2 2107 	ubfx	r1, r2, #8, #8
 800a776:	f858 c020 	ldr.w	ip, [r8, r0, lsl #2]
 800a77a:	f858 1021 	ldr.w	r1, [r8, r1, lsl #2]
 800a77e:	eb04 2495 	add.w	r4, r4, r5, lsr #10
 800a782:	f3c2 4007 	ubfx	r0, r2, #16, #8
 800a786:	0e12      	lsrs	r2, r2, #24
 800a788:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 800a78c:	9401      	str	r4, [sp, #4]
 800a78e:	eb0c 2997 	add.w	r9, ip, r7, lsr #10
 800a792:	f858 0020 	ldr.w	r0, [r8, r0, lsl #2]
 800a796:	f858 4022 	ldr.w	r4, [r8, r2, lsl #2]
 800a79a:	9705      	str	r7, [sp, #20]
 800a79c:	b2da      	uxtb	r2, r3
 800a79e:	eb01 2199 	add.w	r1, r1, r9, lsr #10
 800a7a2:	eb00 2e91 	add.w	lr, r0, r1, lsr #10
 800a7a6:	f858 0022 	ldr.w	r0, [r8, r2, lsl #2]
 800a7aa:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 800a7ae:	eb00 2c94 	add.w	ip, r0, r4, lsr #10
 800a7b2:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800a7b6:	f3c3 4007 	ubfx	r0, r3, #16, #8
 800a7ba:	0e1b      	lsrs	r3, r3, #24
 800a7bc:	f858 7020 	ldr.w	r7, [r8, r0, lsl #2]
 800a7c0:	f858 2022 	ldr.w	r2, [r8, r2, lsl #2]
 800a7c4:	f858 0023 	ldr.w	r0, [r8, r3, lsl #2]
 800a7c8:	fa5f f38a 	uxtb.w	r3, sl
 800a7cc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a7d0:	960a      	str	r6, [sp, #40]	@ 0x28
 800a7d2:	eb02 229c 	add.w	r2, r2, ip, lsr #10
 800a7d6:	f858 6023 	ldr.w	r6, [r8, r3, lsl #2]
 800a7da:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a7de:	f3ca 2307 	ubfx	r3, sl, #8, #8
 800a7e2:	950b      	str	r5, [sp, #44]	@ 0x2c
 800a7e4:	eb07 2792 	add.w	r7, r7, r2, lsr #10
 800a7e8:	f3ca 4507 	ubfx	r5, sl, #16, #8
 800a7ec:	eb00 2097 	add.w	r0, r0, r7, lsr #10
 800a7f0:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 800a7f4:	f858 5025 	ldr.w	r5, [r8, r5, lsl #2]
 800a7f8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 800a7fc:	eb06 2690 	add.w	r6, r6, r0, lsr #10
 800a800:	eb03 2396 	add.w	r3, r3, r6, lsr #10
 800a804:	f858 a02a 	ldr.w	sl, [r8, sl, lsl #2]
 800a808:	9308      	str	r3, [sp, #32]
 800a80a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800a80e:	eb05 2593 	add.w	r5, r5, r3, lsr #10
 800a812:	920c      	str	r2, [sp, #48]	@ 0x30
 800a814:	9b01      	ldr	r3, [sp, #4]
 800a816:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800a818:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 800a81c:	f3c9 0909 	ubfx	r9, r9, #0, #10
 800a820:	f8cd a024 	str.w	sl, [sp, #36]	@ 0x24
 800a824:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800a828:	9b05      	ldr	r3, [sp, #20]
 800a82a:	f8cd 9014 	str.w	r9, [sp, #20]
 800a82e:	4691      	mov	r9, r2
 800a830:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a832:	f8cd a004 	str.w	sl, [sp, #4]
 800a836:	ea49 4902 	orr.w	r9, r9, r2, lsl #16
 800a83a:	9a01      	ldr	r2, [sp, #4]
 800a83c:	f3c3 0a09 	ubfx	sl, r3, #0, #10
 800a840:	ea4a 4a02 	orr.w	sl, sl, r2, lsl #16
 800a844:	9b08      	ldr	r3, [sp, #32]
 800a846:	9a05      	ldr	r2, [sp, #20]
 800a848:	f3c1 0109 	ubfx	r1, r1, #0, #10
 800a84c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a850:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a852:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 800a856:	ea42 420c 	orr.w	r2, r2, ip, lsl #16
 800a85a:	9201      	str	r2, [sp, #4]
 800a85c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a85e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 800a862:	f3c0 0009 	ubfx	r0, r0, #0, #10
 800a866:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 800a86a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 800a86e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 800a872:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 800a876:	f3c4 0409 	ubfx	r4, r4, #0, #10
 800a87a:	f3c2 0709 	ubfx	r7, r2, #0, #10
 800a87e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a882:	0a92      	lsrs	r2, r2, #10
 800a884:	ea47 4705 	orr.w	r7, r7, r5, lsl #16
 800a888:	9205      	str	r2, [sp, #20]
 800a88a:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800a88e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800a892:	4d4b      	ldr	r5, [pc, #300]	@ (800a9c0 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 800a894:	9a02      	ldr	r2, [sp, #8]
 800a896:	fb29 2505 	smlad	r5, r9, r5, r2
 800a89a:	4a4a      	ldr	r2, [pc, #296]	@ (800a9c4 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 800a89c:	fb2a 5502 	smlad	r5, sl, r2, r5
 800a8a0:	4a49      	ldr	r2, [pc, #292]	@ (800a9c8 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 800a8a2:	fb21 5502 	smlad	r5, r1, r2, r5
 800a8a6:	4a49      	ldr	r2, [pc, #292]	@ (800a9cc <D128_1CH_HTONS_VOL_HP+0x2d4>)
 800a8a8:	fb24 5502 	smlad	r5, r4, r2, r5
 800a8ac:	4a48      	ldr	r2, [pc, #288]	@ (800a9d0 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 800a8ae:	9e01      	ldr	r6, [sp, #4]
 800a8b0:	fb26 5502 	smlad	r5, r6, r2, r5
 800a8b4:	4a47      	ldr	r2, [pc, #284]	@ (800a9d4 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 800a8b6:	fb20 5502 	smlad	r5, r0, r2, r5
 800a8ba:	4a47      	ldr	r2, [pc, #284]	@ (800a9d8 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 800a8bc:	fb23 5502 	smlad	r5, r3, r2, r5
 800a8c0:	f44f 3c80 	mov.w	ip, #65536	@ 0x10000
 800a8c4:	fb27 520c 	smlad	r2, r7, ip, r5
 800a8c8:	4616      	mov	r6, r2
 800a8ca:	9d03      	ldr	r5, [sp, #12]
 800a8cc:	4a43      	ldr	r2, [pc, #268]	@ (800a9dc <D128_1CH_HTONS_VOL_HP+0x2e4>)
 800a8ce:	fb29 5c02 	smlad	ip, r9, r2, r5
 800a8d2:	4a43      	ldr	r2, [pc, #268]	@ (800a9e0 <D128_1CH_HTONS_VOL_HP+0x2e8>)
 800a8d4:	fb2a ce02 	smlad	lr, sl, r2, ip
 800a8d8:	f8df c120 	ldr.w	ip, [pc, #288]	@ 800a9fc <D128_1CH_HTONS_VOL_HP+0x304>
 800a8dc:	fb21 ec0c 	smlad	ip, r1, ip, lr
 800a8e0:	f8df e11c 	ldr.w	lr, [pc, #284]	@ 800aa00 <D128_1CH_HTONS_VOL_HP+0x308>
 800a8e4:	fb24 cc0e 	smlad	ip, r4, lr, ip
 800a8e8:	f8df e118 	ldr.w	lr, [pc, #280]	@ 800aa04 <D128_1CH_HTONS_VOL_HP+0x30c>
 800a8ec:	9d01      	ldr	r5, [sp, #4]
 800a8ee:	fb25 ce0e 	smlad	lr, r5, lr, ip
 800a8f2:	f8df c114 	ldr.w	ip, [pc, #276]	@ 800aa08 <D128_1CH_HTONS_VOL_HP+0x310>
 800a8f6:	fb20 ee0c 	smlad	lr, r0, ip, lr
 800a8fa:	f8df c110 	ldr.w	ip, [pc, #272]	@ 800aa0c <D128_1CH_HTONS_VOL_HP+0x314>
 800a8fe:	fb23 ec0c 	smlad	ip, r3, ip, lr
 800a902:	f8df e10c 	ldr.w	lr, [pc, #268]	@ 800aa10 <D128_1CH_HTONS_VOL_HP+0x318>
 800a906:	fb27 c20e 	smlad	r2, r7, lr, ip
 800a90a:	f04f 0c01 	mov.w	ip, #1
 800a90e:	9202      	str	r2, [sp, #8]
 800a910:	fb29 fc0c 	smuad	ip, r9, ip
 800a914:	f8df 90fc 	ldr.w	r9, [pc, #252]	@ 800aa14 <D128_1CH_HTONS_VOL_HP+0x31c>
 800a918:	fb2a ca09 	smlad	sl, sl, r9, ip
 800a91c:	f8df 90f8 	ldr.w	r9, [pc, #248]	@ 800aa18 <D128_1CH_HTONS_VOL_HP+0x320>
 800a920:	fb21 a909 	smlad	r9, r1, r9, sl
 800a924:	492f      	ldr	r1, [pc, #188]	@ (800a9e4 <D128_1CH_HTONS_VOL_HP+0x2ec>)
 800a926:	fb24 9901 	smlad	r9, r4, r1, r9
 800a92a:	492f      	ldr	r1, [pc, #188]	@ (800a9e8 <D128_1CH_HTONS_VOL_HP+0x2f0>)
 800a92c:	fb25 9901 	smlad	r9, r5, r1, r9
 800a930:	492e      	ldr	r1, [pc, #184]	@ (800a9ec <D128_1CH_HTONS_VOL_HP+0x2f4>)
 800a932:	fb20 9901 	smlad	r9, r0, r1, r9
 800a936:	492e      	ldr	r1, [pc, #184]	@ (800a9f0 <D128_1CH_HTONS_VOL_HP+0x2f8>)
 800a938:	fb23 9301 	smlad	r3, r3, r1, r9
 800a93c:	482d      	ldr	r0, [pc, #180]	@ (800a9f4 <D128_1CH_HTONS_VOL_HP+0x2fc>)
 800a93e:	fb27 3300 	smlad	r3, r7, r0, r3
 800a942:	9303      	str	r3, [sp, #12]
 800a944:	9b04      	ldr	r3, [sp, #16]
 800a946:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 800a948:	f5a6 1580 	sub.w	r5, r6, #1048576	@ 0x100000
 800a94c:	442b      	add	r3, r5
 800a94e:	461a      	mov	r2, r3
 800a950:	9b06      	ldr	r3, [sp, #24]
 800a952:	9506      	str	r5, [sp, #24]
 800a954:	1ad2      	subs	r2, r2, r3
 800a956:	17d1      	asrs	r1, r2, #31
 800a958:	fba2 2304 	umull	r2, r3, r2, r4
 800a95c:	fb04 3301 	mla	r3, r4, r1, r3
 800a960:	f112 4900 	adds.w	r9, r2, #2147483648	@ 0x80000000
 800a964:	f143 0a00 	adc.w	sl, r3, #0
 800a968:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a96a:	ea4f 220a 	mov.w	r2, sl, lsl #8
 800a96e:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 800a972:	2100      	movs	r1, #0
 800a974:	fbc3 0102 	smlal	r0, r1, r3, r2
 800a978:	9b07      	ldr	r3, [sp, #28]
 800a97a:	108a      	asrs	r2, r1, #2
 800a97c:	f302 020f 	ssat	r2, #16, r2
 800a980:	f823 2b02 	strh.w	r2, [r3], #2
 800a984:	ea4f 024a 	mov.w	r2, sl, lsl #1
 800a988:	9204      	str	r2, [sp, #16]
 800a98a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a98c:	9307      	str	r3, [sp, #28]
 800a98e:	4293      	cmp	r3, r2
 800a990:	f10b 0b10 	add.w	fp, fp, #16
 800a994:	f47f aed1 	bne.w	800a73a <D128_1CH_HTONS_VOL_HP+0x42>
 800a998:	9e05      	ldr	r6, [sp, #20]
 800a99a:	4629      	mov	r1, r5
 800a99c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a99e:	9803      	ldr	r0, [sp, #12]
 800a9a0:	6098      	str	r0, [r3, #8]
 800a9a2:	9802      	ldr	r0, [sp, #8]
 800a9a4:	60d8      	str	r0, [r3, #12]
 800a9a6:	9804      	ldr	r0, [sp, #16]
 800a9a8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800a9aa:	61de      	str	r6, [r3, #28]
 800a9ac:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800a9b0:	2000      	movs	r0, #0
 800a9b2:	619a      	str	r2, [r3, #24]
 800a9b4:	b013      	add	sp, #76	@ 0x4c
 800a9b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9ba:	9906      	ldr	r1, [sp, #24]
 800a9bc:	e7ee      	b.n	800a99c <D128_1CH_HTONS_VOL_HP+0x2a4>
 800a9be:	bf00      	nop
 800a9c0:	00780069 	.word	0x00780069
 800a9c4:	005b004e 	.word	0x005b004e
 800a9c8:	00420037 	.word	0x00420037
 800a9cc:	002d0024 	.word	0x002d0024
 800a9d0:	001c0015 	.word	0x001c0015
 800a9d4:	000f000a 	.word	0x000f000a
 800a9d8:	00060003 	.word	0x00060003
 800a9dc:	00880096 	.word	0x00880096
 800a9e0:	00a200ac 	.word	0x00a200ac
 800a9e4:	0015001c 	.word	0x0015001c
 800a9e8:	0024002d 	.word	0x0024002d
 800a9ec:	00370042 	.word	0x00370042
 800a9f0:	004e005b 	.word	0x004e005b
 800a9f4:	00690078 	.word	0x00690078
 800a9f8:	20000018 	.word	0x20000018
 800a9fc:	00b400ba 	.word	0x00b400ba
 800aa00:	00be00c0 	.word	0x00be00c0
 800aa04:	00c000be 	.word	0x00c000be
 800aa08:	00ba00b4 	.word	0x00ba00b4
 800aa0c:	00ac00a2 	.word	0x00ac00a2
 800aa10:	00960088 	.word	0x00960088
 800aa14:	00030006 	.word	0x00030006
 800aa18:	000a000f 	.word	0x000a000f

0800aa1c <PDM_Filter_Init>:
 800aa1c:	4a59      	ldr	r2, [pc, #356]	@ (800ab84 <PDM_Filter_Init+0x168>)
 800aa1e:	495a      	ldr	r1, [pc, #360]	@ (800ab88 <PDM_Filter_Init+0x16c>)
 800aa20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa22:	6813      	ldr	r3, [r2, #0]
 800aa24:	f023 0301 	bic.w	r3, r3, #1
 800aa28:	6013      	str	r3, [r2, #0]
 800aa2a:	680b      	ldr	r3, [r1, #0]
 800aa2c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 800aa30:	4013      	ands	r3, r2
 800aa32:	f24c 2540 	movw	r5, #49728	@ 0xc240
 800aa36:	42ab      	cmp	r3, r5
 800aa38:	4604      	mov	r4, r0
 800aa3a:	d044      	beq.n	800aac6 <PDM_Filter_Init+0xaa>
 800aa3c:	680b      	ldr	r3, [r1, #0]
 800aa3e:	f24c 2170 	movw	r1, #49776	@ 0xc270
 800aa42:	401a      	ands	r2, r3
 800aa44:	428a      	cmp	r2, r1
 800aa46:	d03e      	beq.n	800aac6 <PDM_Filter_Init+0xaa>
 800aa48:	4b50      	ldr	r3, [pc, #320]	@ (800ab8c <PDM_Filter_Init+0x170>)
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	601a      	str	r2, [r3, #0]
 800aa4e:	6819      	ldr	r1, [r3, #0]
 800aa50:	2900      	cmp	r1, #0
 800aa52:	d1fc      	bne.n	800aa4e <PDM_Filter_Init+0x32>
 800aa54:	4b4e      	ldr	r3, [pc, #312]	@ (800ab90 <PDM_Filter_Init+0x174>)
 800aa56:	4a4f      	ldr	r2, [pc, #316]	@ (800ab94 <PDM_Filter_Init+0x178>)
 800aa58:	601a      	str	r2, [r3, #0]
 800aa5a:	681a      	ldr	r2, [r3, #0]
 800aa5c:	4b4e      	ldr	r3, [pc, #312]	@ (800ab98 <PDM_Filter_Init+0x17c>)
 800aa5e:	429a      	cmp	r2, r3
 800aa60:	f104 000c 	add.w	r0, r4, #12
 800aa64:	f04f 0240 	mov.w	r2, #64	@ 0x40
 800aa68:	d047      	beq.n	800aafa <PDM_Filter_Init+0xde>
 800aa6a:	f002 f8f8 	bl	800cc5e <memset>
 800aa6e:	2300      	movs	r3, #0
 800aa70:	6463      	str	r3, [r4, #68]	@ 0x44
 800aa72:	8820      	ldrh	r0, [r4, #0]
 800aa74:	8963      	ldrh	r3, [r4, #10]
 800aa76:	8922      	ldrh	r2, [r4, #8]
 800aa78:	86a3      	strh	r3, [r4, #52]	@ 0x34
 800aa7a:	2801      	cmp	r0, #1
 800aa7c:	f04f 0300 	mov.w	r3, #0
 800aa80:	61a3      	str	r3, [r4, #24]
 800aa82:	e9c4 3304 	strd	r3, r3, [r4, #16]
 800aa86:	60e3      	str	r3, [r4, #12]
 800aa88:	6263      	str	r3, [r4, #36]	@ 0x24
 800aa8a:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800aa8e:	6423      	str	r3, [r4, #64]	@ 0x40
 800aa90:	86e2      	strh	r2, [r4, #54]	@ 0x36
 800aa92:	d93a      	bls.n	800ab0a <PDM_Filter_Init+0xee>
 800aa94:	2003      	movs	r0, #3
 800aa96:	2302      	movs	r3, #2
 800aa98:	8862      	ldrh	r2, [r4, #2]
 800aa9a:	2a01      	cmp	r2, #1
 800aa9c:	d932      	bls.n	800ab04 <PDM_Filter_Init+0xe8>
 800aa9e:	2140      	movs	r1, #64	@ 0x40
 800aaa0:	2300      	movs	r3, #0
 800aaa2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800aaa4:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 800aaa8:	6862      	ldr	r2, [r4, #4]
 800aaaa:	bf04      	itt	eq
 800aaac:	6421      	streq	r1, [r4, #64]	@ 0x40
 800aaae:	460b      	moveq	r3, r1
 800aab0:	b11a      	cbz	r2, 800aaba <PDM_Filter_Init+0x9e>
 800aab2:	f043 0310 	orr.w	r3, r3, #16
 800aab6:	6423      	str	r3, [r4, #64]	@ 0x40
 800aab8:	62e2      	str	r2, [r4, #44]	@ 0x2c
 800aaba:	2200      	movs	r2, #0
 800aabc:	8722      	strh	r2, [r4, #56]	@ 0x38
 800aabe:	b908      	cbnz	r0, 800aac4 <PDM_Filter_Init+0xa8>
 800aac0:	3380      	adds	r3, #128	@ 0x80
 800aac2:	6423      	str	r3, [r4, #64]	@ 0x40
 800aac4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aac6:	4b35      	ldr	r3, [pc, #212]	@ (800ab9c <PDM_Filter_Init+0x180>)
 800aac8:	681b      	ldr	r3, [r3, #0]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d1bc      	bne.n	800aa48 <PDM_Filter_Init+0x2c>
 800aace:	4a34      	ldr	r2, [pc, #208]	@ (800aba0 <PDM_Filter_Init+0x184>)
 800aad0:	6813      	ldr	r3, [r2, #0]
 800aad2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aad6:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 800aada:	d006      	beq.n	800aaea <PDM_Filter_Init+0xce>
 800aadc:	6813      	ldr	r3, [r2, #0]
 800aade:	f240 4283 	movw	r2, #1155	@ 0x483
 800aae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aae6:	4293      	cmp	r3, r2
 800aae8:	d1ae      	bne.n	800aa48 <PDM_Filter_Init+0x2c>
 800aaea:	4b2e      	ldr	r3, [pc, #184]	@ (800aba4 <PDM_Filter_Init+0x188>)
 800aaec:	2201      	movs	r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	6819      	ldr	r1, [r3, #0]
 800aaf2:	2900      	cmp	r1, #0
 800aaf4:	d1fc      	bne.n	800aaf0 <PDM_Filter_Init+0xd4>
 800aaf6:	4b2c      	ldr	r3, [pc, #176]	@ (800aba8 <PDM_Filter_Init+0x18c>)
 800aaf8:	e7ad      	b.n	800aa56 <PDM_Filter_Init+0x3a>
 800aafa:	f002 f8b0 	bl	800cc5e <memset>
 800aafe:	4b26      	ldr	r3, [pc, #152]	@ (800ab98 <PDM_Filter_Init+0x17c>)
 800ab00:	6463      	str	r3, [r4, #68]	@ 0x44
 800ab02:	e7b6      	b.n	800aa72 <PDM_Filter_Init+0x56>
 800ab04:	d038      	beq.n	800ab78 <PDM_Filter_Init+0x15c>
 800ab06:	4618      	mov	r0, r3
 800ab08:	e7c9      	b.n	800aa9e <PDM_Filter_Init+0x82>
 800ab0a:	4d28      	ldr	r5, [pc, #160]	@ (800abac <PDM_Filter_Init+0x190>)
 800ab0c:	782a      	ldrb	r2, [r5, #0]
 800ab0e:	d01a      	beq.n	800ab46 <PDM_Filter_Init+0x12a>
 800ab10:	2a01      	cmp	r2, #1
 800ab12:	d001      	beq.n	800ab18 <PDM_Filter_Init+0xfc>
 800ab14:	2001      	movs	r0, #1
 800ab16:	e7bf      	b.n	800aa98 <PDM_Filter_Init+0x7c>
 800ab18:	4925      	ldr	r1, [pc, #148]	@ (800abb0 <PDM_Filter_Init+0x194>)
 800ab1a:	f8df c09c 	ldr.w	ip, [pc, #156]	@ 800abb8 <PDM_Filter_Init+0x19c>
 800ab1e:	4f25      	ldr	r7, [pc, #148]	@ (800abb4 <PDM_Filter_Init+0x198>)
 800ab20:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800ab24:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ab28:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800ab2c:	ea02 0007 	and.w	r0, r2, r7
 800ab30:	4303      	orrs	r3, r0
 800ab32:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ab36:	4413      	add	r3, r2
 800ab38:	428e      	cmp	r6, r1
 800ab3a:	600b      	str	r3, [r1, #0]
 800ab3c:	d1f2      	bne.n	800ab24 <PDM_Filter_Init+0x108>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	702b      	strb	r3, [r5, #0]
 800ab42:	2001      	movs	r0, #1
 800ab44:	e7a8      	b.n	800aa98 <PDM_Filter_Init+0x7c>
 800ab46:	2a00      	cmp	r2, #0
 800ab48:	d1a6      	bne.n	800aa98 <PDM_Filter_Init+0x7c>
 800ab4a:	4919      	ldr	r1, [pc, #100]	@ (800abb0 <PDM_Filter_Init+0x194>)
 800ab4c:	f8df c068 	ldr.w	ip, [pc, #104]	@ 800abb8 <PDM_Filter_Init+0x19c>
 800ab50:	4f18      	ldr	r7, [pc, #96]	@ (800abb4 <PDM_Filter_Init+0x198>)
 800ab52:	f501 6680 	add.w	r6, r1, #1024	@ 0x400
 800ab56:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800ab5a:	ea0c 5302 	and.w	r3, ip, r2, lsl #20
 800ab5e:	ea02 0007 	and.w	r0, r2, r7
 800ab62:	4303      	orrs	r3, r0
 800ab64:	f3c2 5209 	ubfx	r2, r2, #20, #10
 800ab68:	4413      	add	r3, r2
 800ab6a:	428e      	cmp	r6, r1
 800ab6c:	600b      	str	r3, [r1, #0]
 800ab6e:	d1f2      	bne.n	800ab56 <PDM_Filter_Init+0x13a>
 800ab70:	2001      	movs	r0, #1
 800ab72:	7028      	strb	r0, [r5, #0]
 800ab74:	2300      	movs	r3, #0
 800ab76:	e78f      	b.n	800aa98 <PDM_Filter_Init+0x7c>
 800ab78:	2220      	movs	r2, #32
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	6422      	str	r2, [r4, #64]	@ 0x40
 800ab7e:	4613      	mov	r3, r2
 800ab80:	2160      	movs	r1, #96	@ 0x60
 800ab82:	e78e      	b.n	800aaa2 <PDM_Filter_Init+0x86>
 800ab84:	e0002000 	.word	0xe0002000
 800ab88:	e000ed00 	.word	0xe000ed00
 800ab8c:	40023008 	.word	0x40023008
 800ab90:	40023000 	.word	0x40023000
 800ab94:	f407a5c2 	.word	0xf407a5c2
 800ab98:	b5e8b5cd 	.word	0xb5e8b5cd
 800ab9c:	e0042000 	.word	0xe0042000
 800aba0:	5c001000 	.word	0x5c001000
 800aba4:	58024c08 	.word	0x58024c08
 800aba8:	58024c00 	.word	0x58024c00
 800abac:	2000aaf2 	.word	0x2000aaf2
 800abb0:	20000014 	.word	0x20000014
 800abb4:	000ffc00 	.word	0x000ffc00
 800abb8:	3ff00000 	.word	0x3ff00000

0800abbc <PDM_Filter_setConfig>:
 800abbc:	4b6d      	ldr	r3, [pc, #436]	@ (800ad74 <PDM_Filter_setConfig+0x1b8>)
 800abbe:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 800abc0:	429a      	cmp	r2, r3
 800abc2:	d12f      	bne.n	800ac24 <PDM_Filter_setConfig+0x68>
 800abc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc6:	880e      	ldrh	r6, [r1, #0]
 800abc8:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800abca:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800abce:	ed2d 8b02 	vpush	{d8}
 800abd2:	4604      	mov	r4, r0
 800abd4:	1e72      	subs	r2, r6, #1
 800abd6:	460d      	mov	r5, r1
 800abd8:	2a06      	cmp	r2, #6
 800abda:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800abde:	f9b0 0038 	ldrsh.w	r0, [r0, #56]	@ 0x38
 800abe2:	6421      	str	r1, [r4, #64]	@ 0x40
 800abe4:	b083      	sub	sp, #12
 800abe6:	d904      	bls.n	800abf2 <PDM_Filter_setConfig+0x36>
 800abe8:	42b8      	cmp	r0, r7
 800abea:	f000 80bb 	beq.w	800ad64 <PDM_Filter_setConfig+0x1a8>
 800abee:	2008      	movs	r0, #8
 800abf0:	e01d      	b.n	800ac2e <PDM_Filter_setConfig+0x72>
 800abf2:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 800abf4:	42b2      	cmp	r2, r6
 800abf6:	d070      	beq.n	800acda <PDM_Filter_setConfig+0x11e>
 800abf8:	f423 7387 	bic.w	r3, r3, #270	@ 0x10e
 800abfc:	f023 0301 	bic.w	r3, r3, #1
 800ac00:	4333      	orrs	r3, r6
 800ac02:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 800ac06:	6423      	str	r3, [r4, #64]	@ 0x40
 800ac08:	2a70      	cmp	r2, #112	@ 0x70
 800ac0a:	f003 030f 	and.w	r3, r3, #15
 800ac0e:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ac12:	d067      	beq.n	800ace4 <PDM_Filter_setConfig+0x128>
 800ac14:	2b06      	cmp	r3, #6
 800ac16:	d809      	bhi.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ac18:	e8df f003 	tbb	[pc, r3]
 800ac1c:	89868380 	.word	0x89868380
 800ac20:	8f8c      	.short	0x8f8c
 800ac22:	7d          	.byte	0x7d
 800ac23:	00          	.byte	0x00
 800ac24:	2004      	movs	r0, #4
 800ac26:	4770      	bx	lr
 800ac28:	4b53      	ldr	r3, [pc, #332]	@ (800ad78 <PDM_Filter_setConfig+0x1bc>)
 800ac2a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ac2c:	2000      	movs	r0, #0
 800ac2e:	f117 0f0c 	cmn.w	r7, #12
 800ac32:	da0a      	bge.n	800ac4a <PDM_Filter_setConfig+0x8e>
 800ac34:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 800ac38:	3040      	adds	r0, #64	@ 0x40
 800ac3a:	80ab      	strh	r3, [r5, #4]
 800ac3c:	886b      	ldrh	r3, [r5, #2]
 800ac3e:	8663      	strh	r3, [r4, #50]	@ 0x32
 800ac40:	8626      	strh	r6, [r4, #48]	@ 0x30
 800ac42:	b003      	add	sp, #12
 800ac44:	ecbd 8b02 	vpop	{d8}
 800ac48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac4a:	2f33      	cmp	r7, #51	@ 0x33
 800ac4c:	dc41      	bgt.n	800acd2 <PDM_Filter_setConfig+0x116>
 800ac4e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ac50:	f003 030f 	and.w	r3, r3, #15
 800ac54:	3b01      	subs	r3, #1
 800ac56:	2b06      	cmp	r3, #6
 800ac58:	d858      	bhi.n	800ad0c <PDM_Filter_setConfig+0x150>
 800ac5a:	4948      	ldr	r1, [pc, #288]	@ (800ad7c <PDM_Filter_setConfig+0x1c0>)
 800ac5c:	4a48      	ldr	r2, [pc, #288]	@ (800ad80 <PDM_Filter_setConfig+0x1c4>)
 800ac5e:	eddf 0a49 	vldr	s1, [pc, #292]	@ 800ad84 <PDM_Filter_setConfig+0x1c8>
 800ac62:	9001      	str	r0, [sp, #4]
 800ac64:	009b      	lsls	r3, r3, #2
 800ac66:	4419      	add	r1, r3
 800ac68:	edd1 7a00 	vldr	s15, [r1]
 800ac6c:	4413      	add	r3, r2
 800ac6e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ac72:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 800ac76:	ed93 8a00 	vldr	s16, [r3]
 800ac7a:	f004 f949 	bl	800ef10 <powf>
 800ac7e:	9801      	ldr	r0, [sp, #4]
 800ac80:	eef0 8a40 	vmov.f32	s17, s0
 800ac84:	ee07 7a10 	vmov	s14, r7
 800ac88:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800ad88 <PDM_Filter_setConfig+0x1cc>
 800ac8c:	9001      	str	r0, [sp, #4]
 800ac8e:	eef8 0ac7 	vcvt.f32.s32	s1, s14
 800ac92:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 800ac96:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800ac9a:	f004 f939 	bl	800ef10 <powf>
 800ac9e:	ee28 8a28 	vmul.f32	s16, s16, s17
 800aca2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800aca6:	f004 fa01 	bl	800f0ac <roundf>
 800acaa:	9801      	ldr	r0, [sp, #4]
 800acac:	886b      	ldrh	r3, [r5, #2]
 800acae:	8663      	strh	r3, [r4, #50]	@ 0x32
 800acb0:	eebc 0ac0 	vcvt.u32.f32	s0, s0
 800acb4:	8727      	strh	r7, [r4, #56]	@ 0x38
 800acb6:	8626      	strh	r6, [r4, #48]	@ 0x30
 800acb8:	ed84 0a0f 	vstr	s0, [r4, #60]	@ 0x3c
 800acbc:	2800      	cmp	r0, #0
 800acbe:	d1c0      	bne.n	800ac42 <PDM_Filter_setConfig+0x86>
 800acc0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800acc2:	2000      	movs	r0, #0
 800acc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800acc8:	6423      	str	r3, [r4, #64]	@ 0x40
 800acca:	b003      	add	sp, #12
 800accc:	ecbd 8b02 	vpop	{d8}
 800acd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acd2:	2333      	movs	r3, #51	@ 0x33
 800acd4:	3040      	adds	r0, #64	@ 0x40
 800acd6:	80ab      	strh	r3, [r5, #4]
 800acd8:	e7b0      	b.n	800ac3c <PDM_Filter_setConfig+0x80>
 800acda:	42b8      	cmp	r0, r7
 800acdc:	d1a6      	bne.n	800ac2c <PDM_Filter_setConfig+0x70>
 800acde:	886b      	ldrh	r3, [r5, #2]
 800ace0:	8663      	strh	r3, [r4, #50]	@ 0x32
 800ace2:	e7ed      	b.n	800acc0 <PDM_Filter_setConfig+0x104>
 800ace4:	2b06      	cmp	r3, #6
 800ace6:	d8a1      	bhi.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ace8:	a201      	add	r2, pc, #4	@ (adr r2, 800acf0 <PDM_Filter_setConfig+0x134>)
 800acea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800acee:	bf00      	nop
 800acf0:	0800ad5f 	.word	0x0800ad5f
 800acf4:	0800ad59 	.word	0x0800ad59
 800acf8:	0800ad4d 	.word	0x0800ad4d
 800acfc:	0800ad47 	.word	0x0800ad47
 800ad00:	0800ac29 	.word	0x0800ac29
 800ad04:	0800ad41 	.word	0x0800ad41
 800ad08:	0800ad53 	.word	0x0800ad53
 800ad0c:	eddf 8a1f 	vldr	s17, [pc, #124]	@ 800ad8c <PDM_Filter_setConfig+0x1d0>
 800ad10:	ed9f 8a1f 	vldr	s16, [pc, #124]	@ 800ad90 <PDM_Filter_setConfig+0x1d4>
 800ad14:	e7b6      	b.n	800ac84 <PDM_Filter_setConfig+0xc8>
 800ad16:	4b1f      	ldr	r3, [pc, #124]	@ (800ad94 <PDM_Filter_setConfig+0x1d8>)
 800ad18:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad1a:	e787      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad1c:	4b1e      	ldr	r3, [pc, #120]	@ (800ad98 <PDM_Filter_setConfig+0x1dc>)
 800ad1e:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad20:	e784      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad22:	4b1e      	ldr	r3, [pc, #120]	@ (800ad9c <PDM_Filter_setConfig+0x1e0>)
 800ad24:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad26:	e781      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad28:	4b1d      	ldr	r3, [pc, #116]	@ (800ada0 <PDM_Filter_setConfig+0x1e4>)
 800ad2a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad2c:	e77e      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad2e:	4b1d      	ldr	r3, [pc, #116]	@ (800ada4 <PDM_Filter_setConfig+0x1e8>)
 800ad30:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad32:	e77b      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad34:	4b1c      	ldr	r3, [pc, #112]	@ (800ada8 <PDM_Filter_setConfig+0x1ec>)
 800ad36:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad38:	e778      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad3a:	4b1c      	ldr	r3, [pc, #112]	@ (800adac <PDM_Filter_setConfig+0x1f0>)
 800ad3c:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad3e:	e775      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad40:	4b1b      	ldr	r3, [pc, #108]	@ (800adb0 <PDM_Filter_setConfig+0x1f4>)
 800ad42:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad44:	e772      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad46:	4b1b      	ldr	r3, [pc, #108]	@ (800adb4 <PDM_Filter_setConfig+0x1f8>)
 800ad48:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad4a:	e76f      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad4c:	4b1a      	ldr	r3, [pc, #104]	@ (800adb8 <PDM_Filter_setConfig+0x1fc>)
 800ad4e:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad50:	e76c      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad52:	4b1a      	ldr	r3, [pc, #104]	@ (800adbc <PDM_Filter_setConfig+0x200>)
 800ad54:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad56:	e769      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad58:	4b19      	ldr	r3, [pc, #100]	@ (800adc0 <PDM_Filter_setConfig+0x204>)
 800ad5a:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad5c:	e766      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad5e:	4b19      	ldr	r3, [pc, #100]	@ (800adc4 <PDM_Filter_setConfig+0x208>)
 800ad60:	64a3      	str	r3, [r4, #72]	@ 0x48
 800ad62:	e763      	b.n	800ac2c <PDM_Filter_setConfig+0x70>
 800ad64:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 800ad66:	42b3      	cmp	r3, r6
 800ad68:	f47f af41 	bne.w	800abee <PDM_Filter_setConfig+0x32>
 800ad6c:	886b      	ldrh	r3, [r5, #2]
 800ad6e:	8663      	strh	r3, [r4, #50]	@ 0x32
 800ad70:	2008      	movs	r0, #8
 800ad72:	e766      	b.n	800ac42 <PDM_Filter_setConfig+0x86>
 800ad74:	b5e8b5cd 	.word	0xb5e8b5cd
 800ad78:	08009e9d 	.word	0x08009e9d
 800ad7c:	08010c7c 	.word	0x08010c7c
 800ad80:	08010c98 	.word	0x08010c98
 800ad84:	42000000 	.word	0x42000000
 800ad88:	3d4ccccd 	.word	0x3d4ccccd
 800ad8c:	4f800000 	.word	0x4f800000
 800ad90:	00000000 	.word	0x00000000
 800ad94:	0800929d 	.word	0x0800929d
 800ad98:	08009425 	.word	0x08009425
 800ad9c:	0800960d 	.word	0x0800960d
 800ada0:	08009829 	.word	0x08009829
 800ada4:	08009abd 	.word	0x08009abd
 800ada8:	08008ffd 	.word	0x08008ffd
 800adac:	08009115 	.word	0x08009115
 800adb0:	08009f85 	.word	0x08009f85
 800adb4:	0800a6f9 	.word	0x0800a6f9
 800adb8:	0800a4f1 	.word	0x0800a4f1
 800adbc:	0800a0c9 	.word	0x0800a0c9
 800adc0:	0800a351 	.word	0x0800a351
 800adc4:	0800a1e5 	.word	0x0800a1e5

0800adc8 <PDM_Filter>:
 800adc8:	b410      	push	{r4}
 800adca:	4b0b      	ldr	r3, [pc, #44]	@ (800adf8 <PDM_Filter+0x30>)
 800adcc:	6c54      	ldr	r4, [r2, #68]	@ 0x44
 800adce:	429c      	cmp	r4, r3
 800add0:	d107      	bne.n	800ade2 <PDM_Filter+0x1a>
 800add2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800add4:	05dc      	lsls	r4, r3, #23
 800add6:	d508      	bpl.n	800adea <PDM_Filter+0x22>
 800add8:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 800adda:	f85d 4b04 	ldr.w	r4, [sp], #4
 800adde:	320c      	adds	r2, #12
 800ade0:	4718      	bx	r3
 800ade2:	2004      	movs	r0, #4
 800ade4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ade8:	4770      	bx	lr
 800adea:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800adee:	bf14      	ite	ne
 800adf0:	2020      	movne	r0, #32
 800adf2:	2030      	moveq	r0, #48	@ 0x30
 800adf4:	e7f6      	b.n	800ade4 <PDM_Filter+0x1c>
 800adf6:	bf00      	nop
 800adf8:	b5e8b5cd 	.word	0xb5e8b5cd

0800adfc <arm_rfft_32_fast_init_f32>:
 800adfc:	b150      	cbz	r0, 800ae14 <arm_rfft_32_fast_init_f32+0x18>
 800adfe:	b510      	push	{r4, lr}
 800ae00:	2110      	movs	r1, #16
 800ae02:	4604      	mov	r4, r0
 800ae04:	f000 fe7c 	bl	800bb00 <arm_cfft_init_f32>
 800ae08:	b918      	cbnz	r0, 800ae12 <arm_rfft_32_fast_init_f32+0x16>
 800ae0a:	4b04      	ldr	r3, [pc, #16]	@ (800ae1c <arm_rfft_32_fast_init_f32+0x20>)
 800ae0c:	6163      	str	r3, [r4, #20]
 800ae0e:	2220      	movs	r2, #32
 800ae10:	8222      	strh	r2, [r4, #16]
 800ae12:	bd10      	pop	{r4, pc}
 800ae14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae18:	4770      	bx	lr
 800ae1a:	bf00      	nop
 800ae1c:	0802970c 	.word	0x0802970c

0800ae20 <arm_rfft_64_fast_init_f32>:
 800ae20:	b150      	cbz	r0, 800ae38 <arm_rfft_64_fast_init_f32+0x18>
 800ae22:	b510      	push	{r4, lr}
 800ae24:	2120      	movs	r1, #32
 800ae26:	4604      	mov	r4, r0
 800ae28:	f000 fe6a 	bl	800bb00 <arm_cfft_init_f32>
 800ae2c:	b918      	cbnz	r0, 800ae36 <arm_rfft_64_fast_init_f32+0x16>
 800ae2e:	4b04      	ldr	r3, [pc, #16]	@ (800ae40 <arm_rfft_64_fast_init_f32+0x20>)
 800ae30:	6163      	str	r3, [r4, #20]
 800ae32:	2240      	movs	r2, #64	@ 0x40
 800ae34:	8222      	strh	r2, [r4, #16]
 800ae36:	bd10      	pop	{r4, pc}
 800ae38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae3c:	4770      	bx	lr
 800ae3e:	bf00      	nop
 800ae40:	0802df8c 	.word	0x0802df8c

0800ae44 <arm_rfft_128_fast_init_f32>:
 800ae44:	b150      	cbz	r0, 800ae5c <arm_rfft_128_fast_init_f32+0x18>
 800ae46:	b510      	push	{r4, lr}
 800ae48:	2140      	movs	r1, #64	@ 0x40
 800ae4a:	4604      	mov	r4, r0
 800ae4c:	f000 fe58 	bl	800bb00 <arm_cfft_init_f32>
 800ae50:	b918      	cbnz	r0, 800ae5a <arm_rfft_128_fast_init_f32+0x16>
 800ae52:	4b04      	ldr	r3, [pc, #16]	@ (800ae64 <arm_rfft_128_fast_init_f32+0x20>)
 800ae54:	6163      	str	r3, [r4, #20]
 800ae56:	2280      	movs	r2, #128	@ 0x80
 800ae58:	8222      	strh	r2, [r4, #16]
 800ae5a:	bd10      	pop	{r4, pc}
 800ae5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae60:	4770      	bx	lr
 800ae62:	bf00      	nop
 800ae64:	0802710c 	.word	0x0802710c

0800ae68 <arm_rfft_256_fast_init_f32>:
 800ae68:	b158      	cbz	r0, 800ae82 <arm_rfft_256_fast_init_f32+0x1a>
 800ae6a:	b510      	push	{r4, lr}
 800ae6c:	2180      	movs	r1, #128	@ 0x80
 800ae6e:	4604      	mov	r4, r0
 800ae70:	f000 fe46 	bl	800bb00 <arm_cfft_init_f32>
 800ae74:	b920      	cbnz	r0, 800ae80 <arm_rfft_256_fast_init_f32+0x18>
 800ae76:	4b04      	ldr	r3, [pc, #16]	@ (800ae88 <arm_rfft_256_fast_init_f32+0x20>)
 800ae78:	6163      	str	r3, [r4, #20]
 800ae7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ae7e:	8222      	strh	r2, [r4, #16]
 800ae80:	bd10      	pop	{r4, pc}
 800ae82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae86:	4770      	bx	lr
 800ae88:	0802930c 	.word	0x0802930c

0800ae8c <arm_rfft_512_fast_init_f32>:
 800ae8c:	b160      	cbz	r0, 800aea8 <arm_rfft_512_fast_init_f32+0x1c>
 800ae8e:	b510      	push	{r4, lr}
 800ae90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800ae94:	4604      	mov	r4, r0
 800ae96:	f000 fe33 	bl	800bb00 <arm_cfft_init_f32>
 800ae9a:	b920      	cbnz	r0, 800aea6 <arm_rfft_512_fast_init_f32+0x1a>
 800ae9c:	4b04      	ldr	r3, [pc, #16]	@ (800aeb0 <arm_rfft_512_fast_init_f32+0x24>)
 800ae9e:	6163      	str	r3, [r4, #20]
 800aea0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800aea4:	8222      	strh	r2, [r4, #16]
 800aea6:	bd10      	pop	{r4, pc}
 800aea8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aeac:	4770      	bx	lr
 800aeae:	bf00      	nop
 800aeb0:	0802d78c 	.word	0x0802d78c

0800aeb4 <arm_rfft_1024_fast_init_f32>:
 800aeb4:	b160      	cbz	r0, 800aed0 <arm_rfft_1024_fast_init_f32+0x1c>
 800aeb6:	b510      	push	{r4, lr}
 800aeb8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800aebc:	4604      	mov	r4, r0
 800aebe:	f000 fe1f 	bl	800bb00 <arm_cfft_init_f32>
 800aec2:	b920      	cbnz	r0, 800aece <arm_rfft_1024_fast_init_f32+0x1a>
 800aec4:	4b04      	ldr	r3, [pc, #16]	@ (800aed8 <arm_rfft_1024_fast_init_f32+0x24>)
 800aec6:	6163      	str	r3, [r4, #20]
 800aec8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800aecc:	8222      	strh	r2, [r4, #16]
 800aece:	bd10      	pop	{r4, pc}
 800aed0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aed4:	4770      	bx	lr
 800aed6:	bf00      	nop
 800aed8:	0802610c 	.word	0x0802610c

0800aedc <arm_rfft_2048_fast_init_f32>:
 800aedc:	b160      	cbz	r0, 800aef8 <arm_rfft_2048_fast_init_f32+0x1c>
 800aede:	b510      	push	{r4, lr}
 800aee0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800aee4:	4604      	mov	r4, r0
 800aee6:	f000 fe0b 	bl	800bb00 <arm_cfft_init_f32>
 800aeea:	b920      	cbnz	r0, 800aef6 <arm_rfft_2048_fast_init_f32+0x1a>
 800aeec:	4b04      	ldr	r3, [pc, #16]	@ (800af00 <arm_rfft_2048_fast_init_f32+0x24>)
 800aeee:	6163      	str	r3, [r4, #20]
 800aef0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800aef4:	8222      	strh	r2, [r4, #16]
 800aef6:	bd10      	pop	{r4, pc}
 800aef8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aefc:	4770      	bx	lr
 800aefe:	bf00      	nop
 800af00:	0802730c 	.word	0x0802730c

0800af04 <arm_rfft_4096_fast_init_f32>:
 800af04:	b160      	cbz	r0, 800af20 <arm_rfft_4096_fast_init_f32+0x1c>
 800af06:	b510      	push	{r4, lr}
 800af08:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 800af0c:	4604      	mov	r4, r0
 800af0e:	f000 fdf7 	bl	800bb00 <arm_cfft_init_f32>
 800af12:	b920      	cbnz	r0, 800af1e <arm_rfft_4096_fast_init_f32+0x1a>
 800af14:	4b04      	ldr	r3, [pc, #16]	@ (800af28 <arm_rfft_4096_fast_init_f32+0x24>)
 800af16:	6163      	str	r3, [r4, #20]
 800af18:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800af1c:	8222      	strh	r2, [r4, #16]
 800af1e:	bd10      	pop	{r4, pc}
 800af20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af24:	4770      	bx	lr
 800af26:	bf00      	nop
 800af28:	0802978c 	.word	0x0802978c

0800af2c <arm_rfft_fast_init_f32>:
 800af2c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800af30:	d024      	beq.n	800af7c <arm_rfft_fast_init_f32+0x50>
 800af32:	d807      	bhi.n	800af44 <arm_rfft_fast_init_f32+0x18>
 800af34:	2980      	cmp	r1, #128	@ 0x80
 800af36:	d01c      	beq.n	800af72 <arm_rfft_fast_init_f32+0x46>
 800af38:	d90c      	bls.n	800af54 <arm_rfft_fast_init_f32+0x28>
 800af3a:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800af3e:	d11a      	bne.n	800af76 <arm_rfft_fast_init_f32+0x4a>
 800af40:	4b0f      	ldr	r3, [pc, #60]	@ (800af80 <arm_rfft_fast_init_f32+0x54>)
 800af42:	4718      	bx	r3
 800af44:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800af48:	d011      	beq.n	800af6e <arm_rfft_fast_init_f32+0x42>
 800af4a:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800af4e:	d107      	bne.n	800af60 <arm_rfft_fast_init_f32+0x34>
 800af50:	4b0c      	ldr	r3, [pc, #48]	@ (800af84 <arm_rfft_fast_init_f32+0x58>)
 800af52:	4718      	bx	r3
 800af54:	2920      	cmp	r1, #32
 800af56:	d008      	beq.n	800af6a <arm_rfft_fast_init_f32+0x3e>
 800af58:	2940      	cmp	r1, #64	@ 0x40
 800af5a:	d10c      	bne.n	800af76 <arm_rfft_fast_init_f32+0x4a>
 800af5c:	4b0a      	ldr	r3, [pc, #40]	@ (800af88 <arm_rfft_fast_init_f32+0x5c>)
 800af5e:	e7f0      	b.n	800af42 <arm_rfft_fast_init_f32+0x16>
 800af60:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800af64:	d107      	bne.n	800af76 <arm_rfft_fast_init_f32+0x4a>
 800af66:	4b09      	ldr	r3, [pc, #36]	@ (800af8c <arm_rfft_fast_init_f32+0x60>)
 800af68:	e7eb      	b.n	800af42 <arm_rfft_fast_init_f32+0x16>
 800af6a:	4b09      	ldr	r3, [pc, #36]	@ (800af90 <arm_rfft_fast_init_f32+0x64>)
 800af6c:	e7e9      	b.n	800af42 <arm_rfft_fast_init_f32+0x16>
 800af6e:	4b09      	ldr	r3, [pc, #36]	@ (800af94 <arm_rfft_fast_init_f32+0x68>)
 800af70:	e7e7      	b.n	800af42 <arm_rfft_fast_init_f32+0x16>
 800af72:	4b09      	ldr	r3, [pc, #36]	@ (800af98 <arm_rfft_fast_init_f32+0x6c>)
 800af74:	e7e5      	b.n	800af42 <arm_rfft_fast_init_f32+0x16>
 800af76:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af7a:	4770      	bx	lr
 800af7c:	4b07      	ldr	r3, [pc, #28]	@ (800af9c <arm_rfft_fast_init_f32+0x70>)
 800af7e:	e7e0      	b.n	800af42 <arm_rfft_fast_init_f32+0x16>
 800af80:	0800ae69 	.word	0x0800ae69
 800af84:	0800af05 	.word	0x0800af05
 800af88:	0800ae21 	.word	0x0800ae21
 800af8c:	0800aeb5 	.word	0x0800aeb5
 800af90:	0800adfd 	.word	0x0800adfd
 800af94:	0800aedd 	.word	0x0800aedd
 800af98:	0800ae45 	.word	0x0800ae45
 800af9c:	0800ae8d 	.word	0x0800ae8d

0800afa0 <stage_rfft_f32>:
 800afa0:	b410      	push	{r4}
 800afa2:	edd1 7a00 	vldr	s15, [r1]
 800afa6:	ed91 7a01 	vldr	s14, [r1, #4]
 800afaa:	8804      	ldrh	r4, [r0, #0]
 800afac:	6940      	ldr	r0, [r0, #20]
 800afae:	ee37 7a07 	vadd.f32	s14, s14, s14
 800afb2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800afb6:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800afba:	ee77 6a87 	vadd.f32	s13, s15, s14
 800afbe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800afc2:	3c01      	subs	r4, #1
 800afc4:	ee26 7a84 	vmul.f32	s14, s13, s8
 800afc8:	ee67 7a84 	vmul.f32	s15, s15, s8
 800afcc:	eb01 03c4 	add.w	r3, r1, r4, lsl #3
 800afd0:	ed82 7a00 	vstr	s14, [r2]
 800afd4:	edc2 7a01 	vstr	s15, [r2, #4]
 800afd8:	3010      	adds	r0, #16
 800afda:	3210      	adds	r2, #16
 800afdc:	3b08      	subs	r3, #8
 800afde:	3110      	adds	r1, #16
 800afe0:	ed11 5a02 	vldr	s10, [r1, #-8]
 800afe4:	ed93 7a02 	vldr	s14, [r3, #8]
 800afe8:	ed50 6a02 	vldr	s13, [r0, #-8]
 800afec:	edd3 4a03 	vldr	s9, [r3, #12]
 800aff0:	ed51 7a01 	vldr	s15, [r1, #-4]
 800aff4:	ed10 6a01 	vldr	s12, [r0, #-4]
 800aff8:	ee77 5a45 	vsub.f32	s11, s14, s10
 800affc:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b000:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b004:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b008:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b00c:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b010:	ee37 7a23 	vadd.f32	s14, s14, s7
 800b014:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b018:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b01c:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b020:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b024:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b028:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b02c:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b030:	3c01      	subs	r4, #1
 800b032:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b036:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b03a:	f1a3 0308 	sub.w	r3, r3, #8
 800b03e:	f101 0108 	add.w	r1, r1, #8
 800b042:	f100 0008 	add.w	r0, r0, #8
 800b046:	f102 0208 	add.w	r2, r2, #8
 800b04a:	d1c9      	bne.n	800afe0 <stage_rfft_f32+0x40>
 800b04c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b050:	4770      	bx	lr
 800b052:	bf00      	nop

0800b054 <merge_rfft_f32>:
 800b054:	b410      	push	{r4}
 800b056:	edd1 7a00 	vldr	s15, [r1]
 800b05a:	edd1 6a01 	vldr	s13, [r1, #4]
 800b05e:	8804      	ldrh	r4, [r0, #0]
 800b060:	6940      	ldr	r0, [r0, #20]
 800b062:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800b066:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b06a:	eeb6 4a00 	vmov.f32	s8, #96	@ 0x3f000000  0.5
 800b06e:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b072:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b076:	3c01      	subs	r4, #1
 800b078:	ed82 7a00 	vstr	s14, [r2]
 800b07c:	edc2 7a01 	vstr	s15, [r2, #4]
 800b080:	b3dc      	cbz	r4, 800b0fa <merge_rfft_f32+0xa6>
 800b082:	00e3      	lsls	r3, r4, #3
 800b084:	3b08      	subs	r3, #8
 800b086:	440b      	add	r3, r1
 800b088:	3010      	adds	r0, #16
 800b08a:	3210      	adds	r2, #16
 800b08c:	3110      	adds	r1, #16
 800b08e:	ed11 5a02 	vldr	s10, [r1, #-8]
 800b092:	ed93 7a02 	vldr	s14, [r3, #8]
 800b096:	ed50 6a02 	vldr	s13, [r0, #-8]
 800b09a:	edd3 4a03 	vldr	s9, [r3, #12]
 800b09e:	ed51 7a01 	vldr	s15, [r1, #-4]
 800b0a2:	ed10 6a01 	vldr	s12, [r0, #-4]
 800b0a6:	ee75 5a47 	vsub.f32	s11, s10, s14
 800b0aa:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b0ae:	ee66 3aa5 	vmul.f32	s7, s13, s11
 800b0b2:	ee34 5aa7 	vadd.f32	s10, s9, s15
 800b0b6:	ee66 5a25 	vmul.f32	s11, s12, s11
 800b0ba:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800b0be:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b0c2:	ee66 6a85 	vmul.f32	s13, s13, s10
 800b0c6:	ee26 6a05 	vmul.f32	s12, s12, s10
 800b0ca:	ee77 7aa5 	vadd.f32	s15, s15, s11
 800b0ce:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b0d2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800b0d6:	ee27 7a04 	vmul.f32	s14, s14, s8
 800b0da:	ee67 7a84 	vmul.f32	s15, s15, s8
 800b0de:	3c01      	subs	r4, #1
 800b0e0:	ed02 7a02 	vstr	s14, [r2, #-8]
 800b0e4:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b0e8:	f1a3 0308 	sub.w	r3, r3, #8
 800b0ec:	f101 0108 	add.w	r1, r1, #8
 800b0f0:	f100 0008 	add.w	r0, r0, #8
 800b0f4:	f102 0208 	add.w	r2, r2, #8
 800b0f8:	d1c9      	bne.n	800b08e <merge_rfft_f32+0x3a>
 800b0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <arm_rfft_fast_f32>:
 800b100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b104:	461c      	mov	r4, r3
 800b106:	4605      	mov	r5, r0
 800b108:	4616      	mov	r6, r2
 800b10a:	b14b      	cbz	r3, 800b120 <arm_rfft_fast_f32+0x20>
 800b10c:	f7ff ffa2 	bl	800b054 <merge_rfft_f32>
 800b110:	4622      	mov	r2, r4
 800b112:	4631      	mov	r1, r6
 800b114:	4628      	mov	r0, r5
 800b116:	2301      	movs	r3, #1
 800b118:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b11c:	f000 bb34 	b.w	800b788 <arm_cfft_f32>
 800b120:	460f      	mov	r7, r1
 800b122:	461a      	mov	r2, r3
 800b124:	2301      	movs	r3, #1
 800b126:	f000 fb2f 	bl	800b788 <arm_cfft_f32>
 800b12a:	4632      	mov	r2, r6
 800b12c:	4639      	mov	r1, r7
 800b12e:	4628      	mov	r0, r5
 800b130:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b134:	f7ff bf34 	b.w	800afa0 <stage_rfft_f32>

0800b138 <arm_cfft_radix8by2_f32>:
 800b138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b13c:	ed2d 8b08 	vpush	{d8-d11}
 800b140:	f8b0 c000 	ldrh.w	ip, [r0]
 800b144:	6842      	ldr	r2, [r0, #4]
 800b146:	4607      	mov	r7, r0
 800b148:	4608      	mov	r0, r1
 800b14a:	eb00 088c 	add.w	r8, r0, ip, lsl #2
 800b14e:	ea4f 015c 	mov.w	r1, ip, lsr #1
 800b152:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800b156:	b082      	sub	sp, #8
 800b158:	f000 80b0 	beq.w	800b2bc <arm_cfft_radix8by2_f32+0x184>
 800b15c:	008c      	lsls	r4, r1, #2
 800b15e:	3410      	adds	r4, #16
 800b160:	f100 0310 	add.w	r3, r0, #16
 800b164:	1906      	adds	r6, r0, r4
 800b166:	3210      	adds	r2, #16
 800b168:	4444      	add	r4, r8
 800b16a:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
 800b16e:	f108 0510 	add.w	r5, r8, #16
 800b172:	ed15 2a04 	vldr	s4, [r5, #-16]
 800b176:	ed55 2a03 	vldr	s5, [r5, #-12]
 800b17a:	ed54 4a04 	vldr	s9, [r4, #-16]
 800b17e:	ed14 4a03 	vldr	s8, [r4, #-12]
 800b182:	ed14 6a02 	vldr	s12, [r4, #-8]
 800b186:	ed54 5a01 	vldr	s11, [r4, #-4]
 800b18a:	ed53 3a04 	vldr	s7, [r3, #-16]
 800b18e:	ed15 0a02 	vldr	s0, [r5, #-8]
 800b192:	ed55 0a01 	vldr	s1, [r5, #-4]
 800b196:	ed56 6a04 	vldr	s13, [r6, #-16]
 800b19a:	ed16 3a03 	vldr	s6, [r6, #-12]
 800b19e:	ed13 7a03 	vldr	s14, [r3, #-12]
 800b1a2:	ed13 5a02 	vldr	s10, [r3, #-8]
 800b1a6:	ed53 7a01 	vldr	s15, [r3, #-4]
 800b1aa:	ed16 1a02 	vldr	s2, [r6, #-8]
 800b1ae:	ed56 1a01 	vldr	s3, [r6, #-4]
 800b1b2:	ee73 ba82 	vadd.f32	s23, s7, s4
 800b1b6:	ee37 ba22 	vadd.f32	s22, s14, s5
 800b1ba:	ee76 9aa4 	vadd.f32	s19, s13, s9
 800b1be:	ee33 9a04 	vadd.f32	s18, s6, s8
 800b1c2:	ee31 8aa5 	vadd.f32	s16, s3, s11
 800b1c6:	ee75 aa00 	vadd.f32	s21, s10, s0
 800b1ca:	ee37 aaa0 	vadd.f32	s20, s15, s1
 800b1ce:	ee71 8a06 	vadd.f32	s17, s2, s12
 800b1d2:	ed43 ba04 	vstr	s23, [r3, #-16]
 800b1d6:	ed03 ba03 	vstr	s22, [r3, #-12]
 800b1da:	ed43 aa02 	vstr	s21, [r3, #-8]
 800b1de:	ed03 aa01 	vstr	s20, [r3, #-4]
 800b1e2:	ed06 8a01 	vstr	s16, [r6, #-4]
 800b1e6:	ed46 9a04 	vstr	s19, [r6, #-16]
 800b1ea:	ed06 9a03 	vstr	s18, [r6, #-12]
 800b1ee:	ed46 8a02 	vstr	s17, [r6, #-8]
 800b1f2:	ee37 7a62 	vsub.f32	s14, s14, s5
 800b1f6:	ee74 4ae6 	vsub.f32	s9, s9, s13
 800b1fa:	ee34 4a43 	vsub.f32	s8, s8, s6
 800b1fe:	ed52 6a03 	vldr	s13, [r2, #-12]
 800b202:	ed12 3a04 	vldr	s6, [r2, #-16]
 800b206:	ee73 3ac2 	vsub.f32	s7, s7, s4
 800b20a:	ee27 8a26 	vmul.f32	s16, s14, s13
 800b20e:	ee64 2aa6 	vmul.f32	s5, s9, s13
 800b212:	ee23 2a83 	vmul.f32	s4, s7, s6
 800b216:	ee64 4a83 	vmul.f32	s9, s9, s6
 800b21a:	ee63 3aa6 	vmul.f32	s7, s7, s13
 800b21e:	ee27 7a03 	vmul.f32	s14, s14, s6
 800b222:	ee64 6a26 	vmul.f32	s13, s8, s13
 800b226:	ee24 4a03 	vmul.f32	s8, s8, s6
 800b22a:	ee37 7a63 	vsub.f32	s14, s14, s7
 800b22e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b232:	ee32 4ac4 	vsub.f32	s8, s5, s8
 800b236:	ee32 3a08 	vadd.f32	s6, s4, s16
 800b23a:	ed05 7a03 	vstr	s14, [r5, #-12]
 800b23e:	ed05 3a04 	vstr	s6, [r5, #-16]
 800b242:	ed04 4a04 	vstr	s8, [r4, #-16]
 800b246:	ed44 6a03 	vstr	s13, [r4, #-12]
 800b24a:	ed12 7a01 	vldr	s14, [r2, #-4]
 800b24e:	ee76 6a41 	vsub.f32	s13, s12, s2
 800b252:	ee35 5a40 	vsub.f32	s10, s10, s0
 800b256:	ee35 6ae1 	vsub.f32	s12, s11, s3
 800b25a:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800b25e:	ed52 5a02 	vldr	s11, [r2, #-8]
 800b262:	ee67 3a87 	vmul.f32	s7, s15, s14
 800b266:	ee66 4a87 	vmul.f32	s9, s13, s14
 800b26a:	ee25 4a25 	vmul.f32	s8, s10, s11
 800b26e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b272:	ee25 5a07 	vmul.f32	s10, s10, s14
 800b276:	ee66 6aa5 	vmul.f32	s13, s13, s11
 800b27a:	ee26 7a07 	vmul.f32	s14, s12, s14
 800b27e:	ee26 6a25 	vmul.f32	s12, s12, s11
 800b282:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800b286:	ee74 5a23 	vadd.f32	s11, s8, s7
 800b28a:	ee34 6ac6 	vsub.f32	s12, s9, s12
 800b28e:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b292:	3310      	adds	r3, #16
 800b294:	4563      	cmp	r3, ip
 800b296:	ed45 5a02 	vstr	s11, [r5, #-8]
 800b29a:	f106 0610 	add.w	r6, r6, #16
 800b29e:	ed45 7a01 	vstr	s15, [r5, #-4]
 800b2a2:	f102 0210 	add.w	r2, r2, #16
 800b2a6:	ed04 6a02 	vstr	s12, [r4, #-8]
 800b2aa:	ed04 7a01 	vstr	s14, [r4, #-4]
 800b2ae:	f105 0510 	add.w	r5, r5, #16
 800b2b2:	f104 0410 	add.w	r4, r4, #16
 800b2b6:	f47f af5c 	bne.w	800b172 <arm_cfft_radix8by2_f32+0x3a>
 800b2ba:	687a      	ldr	r2, [r7, #4]
 800b2bc:	b289      	uxth	r1, r1
 800b2be:	2302      	movs	r3, #2
 800b2c0:	9101      	str	r1, [sp, #4]
 800b2c2:	f000 fc6f 	bl	800bba4 <arm_radix8_butterfly_f32>
 800b2c6:	9901      	ldr	r1, [sp, #4]
 800b2c8:	687a      	ldr	r2, [r7, #4]
 800b2ca:	4640      	mov	r0, r8
 800b2cc:	2302      	movs	r3, #2
 800b2ce:	b002      	add	sp, #8
 800b2d0:	ecbd 8b08 	vpop	{d8-d11}
 800b2d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b2d8:	f000 bc64 	b.w	800bba4 <arm_radix8_butterfly_f32>

0800b2dc <arm_cfft_radix8by4_f32>:
 800b2dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2e0:	ed2d 8b0a 	vpush	{d8-d12}
 800b2e4:	8803      	ldrh	r3, [r0, #0]
 800b2e6:	6842      	ldr	r2, [r0, #4]
 800b2e8:	b08d      	sub	sp, #52	@ 0x34
 800b2ea:	085b      	lsrs	r3, r3, #1
 800b2ec:	900a      	str	r0, [sp, #40]	@ 0x28
 800b2ee:	4608      	mov	r0, r1
 800b2f0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b2f4:	edd1 5a00 	vldr	s11, [r1]
 800b2f8:	edd0 7a00 	vldr	s15, [r0]
 800b2fc:	edd1 3a01 	vldr	s7, [r1, #4]
 800b300:	ed90 5a01 	vldr	s10, [r0, #4]
 800b304:	9108      	str	r1, [sp, #32]
 800b306:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800b30a:	ed96 7a00 	vldr	s14, [r6]
 800b30e:	ed96 4a01 	vldr	s8, [r6, #4]
 800b312:	9607      	str	r6, [sp, #28]
 800b314:	ee37 6aa5 	vadd.f32	s12, s15, s11
 800b318:	eb01 0883 	add.w	r8, r1, r3, lsl #2
 800b31c:	edd8 4a00 	vldr	s9, [r8]
 800b320:	ed98 3a01 	vldr	s6, [r8, #4]
 800b324:	ee77 6a06 	vadd.f32	s13, s14, s12
 800b328:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800b32c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 800b330:	4604      	mov	r4, r0
 800b332:	edc0 6a00 	vstr	s13, [r0]
 800b336:	edd6 5a01 	vldr	s11, [r6, #4]
 800b33a:	edd8 2a01 	vldr	s5, [r8, #4]
 800b33e:	ee75 6a23 	vadd.f32	s13, s10, s7
 800b342:	ee35 5a63 	vsub.f32	s10, s10, s7
 800b346:	ee36 6a47 	vsub.f32	s12, s12, s14
 800b34a:	ee74 3a27 	vadd.f32	s7, s8, s15
 800b34e:	ee76 5aa5 	vadd.f32	s11, s13, s11
 800b352:	ee77 7ac4 	vsub.f32	s15, s15, s8
 800b356:	ee76 6ac4 	vsub.f32	s13, s13, s8
 800b35a:	3408      	adds	r4, #8
 800b35c:	ee35 4a47 	vsub.f32	s8, s10, s14
 800b360:	460d      	mov	r5, r1
 800b362:	ee37 7a05 	vadd.f32	s14, s14, s10
 800b366:	4637      	mov	r7, r6
 800b368:	9402      	str	r4, [sp, #8]
 800b36a:	3708      	adds	r7, #8
 800b36c:	460c      	mov	r4, r1
 800b36e:	3508      	adds	r5, #8
 800b370:	0859      	lsrs	r1, r3, #1
 800b372:	9109      	str	r1, [sp, #36]	@ 0x24
 800b374:	9706      	str	r7, [sp, #24]
 800b376:	9505      	str	r5, [sp, #20]
 800b378:	f102 0708 	add.w	r7, r2, #8
 800b37c:	ee36 6a64 	vsub.f32	s12, s12, s9
 800b380:	ee76 6ac3 	vsub.f32	s13, s13, s6
 800b384:	ee75 5aa2 	vadd.f32	s11, s11, s5
 800b388:	ee73 3ac3 	vsub.f32	s7, s7, s6
 800b38c:	ee77 7a83 	vadd.f32	s15, s15, s6
 800b390:	ee34 5a24 	vadd.f32	s10, s8, s9
 800b394:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b398:	3902      	subs	r1, #2
 800b39a:	4645      	mov	r5, r8
 800b39c:	9701      	str	r7, [sp, #4]
 800b39e:	f102 0c18 	add.w	ip, r2, #24
 800b3a2:	f102 0710 	add.w	r7, r2, #16
 800b3a6:	3508      	adds	r5, #8
 800b3a8:	0849      	lsrs	r1, r1, #1
 800b3aa:	edc0 5a01 	vstr	s11, [r0, #4]
 800b3ae:	9703      	str	r7, [sp, #12]
 800b3b0:	edc6 3a00 	vstr	s7, [r6]
 800b3b4:	ed86 5a01 	vstr	s10, [r6, #4]
 800b3b8:	f8cd c000 	str.w	ip, [sp]
 800b3bc:	ed84 6a00 	vstr	s12, [r4]
 800b3c0:	edc4 6a01 	vstr	s13, [r4, #4]
 800b3c4:	9504      	str	r5, [sp, #16]
 800b3c6:	edc8 7a00 	vstr	s15, [r8]
 800b3ca:	ed88 7a01 	vstr	s14, [r8, #4]
 800b3ce:	910b      	str	r1, [sp, #44]	@ 0x2c
 800b3d0:	f000 8138 	beq.w	800b644 <arm_cfft_radix8by4_f32+0x368>
 800b3d4:	009b      	lsls	r3, r3, #2
 800b3d6:	3b0c      	subs	r3, #12
 800b3d8:	f1a6 0c0c 	sub.w	ip, r6, #12
 800b3dc:	f106 0510 	add.w	r5, r6, #16
 800b3e0:	4626      	mov	r6, r4
 800b3e2:	46bb      	mov	fp, r7
 800b3e4:	f102 0a20 	add.w	sl, r2, #32
 800b3e8:	f102 0930 	add.w	r9, r2, #48	@ 0x30
 800b3ec:	f106 0710 	add.w	r7, r6, #16
 800b3f0:	4443      	add	r3, r8
 800b3f2:	f100 0e10 	add.w	lr, r0, #16
 800b3f6:	3c0c      	subs	r4, #12
 800b3f8:	f1a8 060c 	sub.w	r6, r8, #12
 800b3fc:	f108 0210 	add.w	r2, r8, #16
 800b400:	ed1e 5a02 	vldr	s10, [lr, #-8]
 800b404:	ed57 5a02 	vldr	s11, [r7, #-8]
 800b408:	ed55 7a02 	vldr	s15, [r5, #-8]
 800b40c:	ed52 1a02 	vldr	s3, [r2, #-8]
 800b410:	ed57 6a01 	vldr	s13, [r7, #-4]
 800b414:	ed1e 0a01 	vldr	s0, [lr, #-4]
 800b418:	ed12 1a01 	vldr	s2, [r2, #-4]
 800b41c:	ed15 8a01 	vldr	s16, [r5, #-4]
 800b420:	ee35 4a25 	vadd.f32	s8, s10, s11
 800b424:	ee30 6a26 	vadd.f32	s12, s0, s13
 800b428:	ee37 7a84 	vadd.f32	s14, s15, s8
 800b42c:	ee30 0a66 	vsub.f32	s0, s0, s13
 800b430:	ee37 7a21 	vadd.f32	s14, s14, s3
 800b434:	ee75 5a65 	vsub.f32	s11, s10, s11
 800b438:	ed0e 7a02 	vstr	s14, [lr, #-8]
 800b43c:	ed15 7a01 	vldr	s14, [r5, #-4]
 800b440:	ed52 6a01 	vldr	s13, [r2, #-4]
 800b444:	ee36 7a07 	vadd.f32	s14, s12, s14
 800b448:	ee78 aa25 	vadd.f32	s21, s16, s11
 800b44c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b450:	ee70 3a67 	vsub.f32	s7, s0, s15
 800b454:	ed0e 7a01 	vstr	s14, [lr, #-4]
 800b458:	ed96 7a02 	vldr	s14, [r6, #8]
 800b45c:	ed9c 2a02 	vldr	s4, [ip, #8]
 800b460:	ed94 ba02 	vldr	s22, [r4, #8]
 800b464:	edd3 9a02 	vldr	s19, [r3, #8]
 800b468:	edd6 2a01 	vldr	s5, [r6, #4]
 800b46c:	ed9c 9a01 	vldr	s18, [ip, #4]
 800b470:	ed93 5a01 	vldr	s10, [r3, #4]
 800b474:	edd4 0a01 	vldr	s1, [r4, #4]
 800b478:	ee72 6a07 	vadd.f32	s13, s4, s14
 800b47c:	ee32 2a47 	vsub.f32	s4, s4, s14
 800b480:	ee7b 8a26 	vadd.f32	s17, s22, s13
 800b484:	ee79 4a22 	vadd.f32	s9, s18, s5
 800b488:	ee38 7aa9 	vadd.f32	s14, s17, s19
 800b48c:	ee79 2a62 	vsub.f32	s5, s18, s5
 800b490:	ed8c 7a02 	vstr	s14, [ip, #8]
 800b494:	ed94 7a01 	vldr	s14, [r4, #4]
 800b498:	edd3 8a01 	vldr	s17, [r3, #4]
 800b49c:	ee34 7a87 	vadd.f32	s14, s9, s14
 800b4a0:	ee3b 3a69 	vsub.f32	s6, s22, s19
 800b4a4:	ee37 7a28 	vadd.f32	s14, s14, s17
 800b4a8:	ee32 9a60 	vsub.f32	s18, s4, s1
 800b4ac:	ed8c 7a01 	vstr	s14, [ip, #4]
 800b4b0:	ed1b 7a01 	vldr	s14, [fp, #-4]
 800b4b4:	ed1b aa02 	vldr	s20, [fp, #-8]
 800b4b8:	ee73 8a22 	vadd.f32	s17, s6, s5
 800b4bc:	ee39 9a05 	vadd.f32	s18, s18, s10
 800b4c0:	ee7a aac1 	vsub.f32	s21, s21, s2
 800b4c4:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800b4c8:	ee2a ca8a 	vmul.f32	s24, s21, s20
 800b4cc:	ee69 ba07 	vmul.f32	s23, s18, s14
 800b4d0:	ee6a aa87 	vmul.f32	s21, s21, s14
 800b4d4:	ee29 9a0a 	vmul.f32	s18, s18, s20
 800b4d8:	ee63 ca87 	vmul.f32	s25, s7, s14
 800b4dc:	ee63 3a8a 	vmul.f32	s7, s7, s20
 800b4e0:	ee28 aa8a 	vmul.f32	s20, s17, s20
 800b4e4:	ee68 8a87 	vmul.f32	s17, s17, s14
 800b4e8:	ee73 3aea 	vsub.f32	s7, s7, s21
 800b4ec:	ee78 8a89 	vadd.f32	s17, s17, s18
 800b4f0:	ee3c 7a2c 	vadd.f32	s14, s24, s25
 800b4f4:	ee3b aaca 	vsub.f32	s20, s23, s20
 800b4f8:	ee34 4a67 	vsub.f32	s8, s8, s15
 800b4fc:	ee76 6acb 	vsub.f32	s13, s13, s22
 800b500:	ee36 6a48 	vsub.f32	s12, s12, s16
 800b504:	ee74 4ae0 	vsub.f32	s9, s9, s1
 800b508:	ed05 7a02 	vstr	s14, [r5, #-8]
 800b50c:	ed45 3a01 	vstr	s7, [r5, #-4]
 800b510:	edc4 8a01 	vstr	s17, [r4, #4]
 800b514:	ed84 aa02 	vstr	s20, [r4, #8]
 800b518:	ed5a 3a04 	vldr	s7, [sl, #-16]
 800b51c:	ee36 7ae9 	vsub.f32	s14, s13, s19
 800b520:	ee74 4ac5 	vsub.f32	s9, s9, s10
 800b524:	ed5a 6a03 	vldr	s13, [sl, #-12]
 800b528:	ee34 4a61 	vsub.f32	s8, s8, s3
 800b52c:	ee36 6a41 	vsub.f32	s12, s12, s2
 800b530:	ee67 8a63 	vnmul.f32	s17, s14, s7
 800b534:	ee66 9a26 	vmul.f32	s19, s12, s13
 800b538:	ee24 9a23 	vmul.f32	s18, s8, s7
 800b53c:	ee26 6a23 	vmul.f32	s12, s12, s7
 800b540:	ee24 4a26 	vmul.f32	s8, s8, s13
 800b544:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b548:	ee64 6aa6 	vmul.f32	s13, s9, s13
 800b54c:	ee64 4aa3 	vmul.f32	s9, s9, s7
 800b550:	ee36 6a44 	vsub.f32	s12, s12, s8
 800b554:	ee37 7a64 	vsub.f32	s14, s14, s9
 800b558:	ee38 4ae6 	vsub.f32	s8, s17, s13
 800b55c:	ee79 3a29 	vadd.f32	s7, s18, s19
 800b560:	ee75 6a60 	vsub.f32	s13, s10, s1
 800b564:	ee75 5ac8 	vsub.f32	s11, s11, s16
 800b568:	ee77 7a80 	vadd.f32	s15, s15, s0
 800b56c:	ed47 3a02 	vstr	s7, [r7, #-8]
 800b570:	ed07 6a01 	vstr	s12, [r7, #-4]
 800b574:	ed86 7a01 	vstr	s14, [r6, #4]
 800b578:	ed86 4a02 	vstr	s8, [r6, #8]
 800b57c:	ee35 6a81 	vadd.f32	s12, s11, s2
 800b580:	ee36 7ac2 	vsub.f32	s14, s13, s4
 800b584:	ed59 5a06 	vldr	s11, [r9, #-24]	@ 0xffffffe8
 800b588:	ed59 6a05 	vldr	s13, [r9, #-20]	@ 0xffffffec
 800b58c:	ee33 3a62 	vsub.f32	s6, s6, s5
 800b590:	ee77 7ae1 	vsub.f32	s15, s15, s3
 800b594:	ee67 2a26 	vmul.f32	s5, s14, s13
 800b598:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800b59c:	ee26 5a25 	vmul.f32	s10, s12, s11
 800b5a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b5a4:	ee26 6a26 	vmul.f32	s12, s12, s13
 800b5a8:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b5ac:	ee63 6a26 	vmul.f32	s13, s6, s13
 800b5b0:	ee23 3a25 	vmul.f32	s6, s6, s11
 800b5b4:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800b5b8:	ee75 5a24 	vadd.f32	s11, s10, s9
 800b5bc:	ee32 3ac3 	vsub.f32	s6, s5, s6
 800b5c0:	ee36 7a87 	vadd.f32	s14, s13, s14
 800b5c4:	3901      	subs	r1, #1
 800b5c6:	ed42 5a02 	vstr	s11, [r2, #-8]
 800b5ca:	ed42 7a01 	vstr	s15, [r2, #-4]
 800b5ce:	f10e 0e08 	add.w	lr, lr, #8
 800b5d2:	ed83 3a02 	vstr	s6, [r3, #8]
 800b5d6:	ed83 7a01 	vstr	s14, [r3, #4]
 800b5da:	f1ac 0c08 	sub.w	ip, ip, #8
 800b5de:	f10b 0b08 	add.w	fp, fp, #8
 800b5e2:	f105 0508 	add.w	r5, r5, #8
 800b5e6:	f1a4 0408 	sub.w	r4, r4, #8
 800b5ea:	f10a 0a10 	add.w	sl, sl, #16
 800b5ee:	f107 0708 	add.w	r7, r7, #8
 800b5f2:	f1a6 0608 	sub.w	r6, r6, #8
 800b5f6:	f109 0918 	add.w	r9, r9, #24
 800b5fa:	f102 0208 	add.w	r2, r2, #8
 800b5fe:	f1a3 0308 	sub.w	r3, r3, #8
 800b602:	f47f aefd 	bne.w	800b400 <arm_cfft_radix8by4_f32+0x124>
 800b606:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b608:	9902      	ldr	r1, [sp, #8]
 800b60a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b60e:	9102      	str	r1, [sp, #8]
 800b610:	9901      	ldr	r1, [sp, #4]
 800b612:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b616:	9101      	str	r1, [sp, #4]
 800b618:	9906      	ldr	r1, [sp, #24]
 800b61a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b61e:	9106      	str	r1, [sp, #24]
 800b620:	9903      	ldr	r1, [sp, #12]
 800b622:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 800b626:	9103      	str	r1, [sp, #12]
 800b628:	9905      	ldr	r1, [sp, #20]
 800b62a:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800b62e:	9105      	str	r1, [sp, #20]
 800b630:	9904      	ldr	r1, [sp, #16]
 800b632:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 800b636:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 800b63a:	9204      	str	r2, [sp, #16]
 800b63c:	9a00      	ldr	r2, [sp, #0]
 800b63e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b642:	9300      	str	r3, [sp, #0]
 800b644:	9902      	ldr	r1, [sp, #8]
 800b646:	9d05      	ldr	r5, [sp, #20]
 800b648:	ed91 4a00 	vldr	s8, [r1]
 800b64c:	edd5 6a00 	vldr	s13, [r5]
 800b650:	9b06      	ldr	r3, [sp, #24]
 800b652:	9c04      	ldr	r4, [sp, #16]
 800b654:	edd3 7a00 	vldr	s15, [r3]
 800b658:	ed94 3a00 	vldr	s6, [r4]
 800b65c:	edd5 4a01 	vldr	s9, [r5, #4]
 800b660:	edd1 3a01 	vldr	s7, [r1, #4]
 800b664:	ed94 2a01 	vldr	s4, [r4, #4]
 800b668:	ed93 7a01 	vldr	s14, [r3, #4]
 800b66c:	9a01      	ldr	r2, [sp, #4]
 800b66e:	ee34 6a26 	vadd.f32	s12, s8, s13
 800b672:	ee73 5aa4 	vadd.f32	s11, s7, s9
 800b676:	ee37 5a86 	vadd.f32	s10, s15, s12
 800b67a:	ee73 3ae4 	vsub.f32	s7, s7, s9
 800b67e:	ee35 5a03 	vadd.f32	s10, s10, s6
 800b682:	ee74 6a66 	vsub.f32	s13, s8, s13
 800b686:	ed81 5a00 	vstr	s10, [r1]
 800b68a:	ed93 5a01 	vldr	s10, [r3, #4]
 800b68e:	edd4 4a01 	vldr	s9, [r4, #4]
 800b692:	ee35 5a85 	vadd.f32	s10, s11, s10
 800b696:	ee37 4a26 	vadd.f32	s8, s14, s13
 800b69a:	ee35 5a24 	vadd.f32	s10, s10, s9
 800b69e:	ee73 4ae7 	vsub.f32	s9, s7, s15
 800b6a2:	ed81 5a01 	vstr	s10, [r1, #4]
 800b6a6:	edd2 1a00 	vldr	s3, [r2]
 800b6aa:	edd2 2a01 	vldr	s5, [r2, #4]
 800b6ae:	f8bd 1024 	ldrh.w	r1, [sp, #36]	@ 0x24
 800b6b2:	ee34 5a83 	vadd.f32	s10, s9, s6
 800b6b6:	ee34 4a42 	vsub.f32	s8, s8, s4
 800b6ba:	ee36 6a67 	vsub.f32	s12, s12, s15
 800b6be:	ee64 4a21 	vmul.f32	s9, s8, s3
 800b6c2:	ee24 4a22 	vmul.f32	s8, s8, s5
 800b6c6:	ee65 2a22 	vmul.f32	s5, s10, s5
 800b6ca:	ee25 5a21 	vmul.f32	s10, s10, s3
 800b6ce:	ee74 2aa2 	vadd.f32	s5, s9, s5
 800b6d2:	ee35 5a44 	vsub.f32	s10, s10, s8
 800b6d6:	edc3 2a00 	vstr	s5, [r3]
 800b6da:	ed83 5a01 	vstr	s10, [r3, #4]
 800b6de:	ee75 5ac7 	vsub.f32	s11, s11, s14
 800b6e2:	9b03      	ldr	r3, [sp, #12]
 800b6e4:	ee36 6a43 	vsub.f32	s12, s12, s6
 800b6e8:	ed93 4a01 	vldr	s8, [r3, #4]
 800b6ec:	ed93 5a00 	vldr	s10, [r3]
 800b6f0:	9b00      	ldr	r3, [sp, #0]
 800b6f2:	ee75 5ac2 	vsub.f32	s11, s11, s4
 800b6f6:	ee66 4a05 	vmul.f32	s9, s12, s10
 800b6fa:	ee25 5a85 	vmul.f32	s10, s11, s10
 800b6fe:	ee26 6a04 	vmul.f32	s12, s12, s8
 800b702:	ee65 5a84 	vmul.f32	s11, s11, s8
 800b706:	ee35 6a46 	vsub.f32	s12, s10, s12
 800b70a:	ee74 5aa5 	vadd.f32	s11, s9, s11
 800b70e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 800b712:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b716:	ed85 6a01 	vstr	s12, [r5, #4]
 800b71a:	edc5 5a00 	vstr	s11, [r5]
 800b71e:	edd3 5a01 	vldr	s11, [r3, #4]
 800b722:	edd3 6a00 	vldr	s13, [r3]
 800b726:	ee37 7a02 	vadd.f32	s14, s14, s4
 800b72a:	ee77 7ac3 	vsub.f32	s15, s15, s6
 800b72e:	ee27 6a26 	vmul.f32	s12, s14, s13
 800b732:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800b736:	ee27 7a25 	vmul.f32	s14, s14, s11
 800b73a:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800b73e:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800b742:	ee76 7a27 	vadd.f32	s15, s12, s15
 800b746:	ed84 7a01 	vstr	s14, [r4, #4]
 800b74a:	edc4 7a00 	vstr	s15, [r4]
 800b74e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b750:	9100      	str	r1, [sp, #0]
 800b752:	6862      	ldr	r2, [r4, #4]
 800b754:	2304      	movs	r3, #4
 800b756:	f000 fa25 	bl	800bba4 <arm_radix8_butterfly_f32>
 800b75a:	9807      	ldr	r0, [sp, #28]
 800b75c:	9900      	ldr	r1, [sp, #0]
 800b75e:	6862      	ldr	r2, [r4, #4]
 800b760:	2304      	movs	r3, #4
 800b762:	f000 fa1f 	bl	800bba4 <arm_radix8_butterfly_f32>
 800b766:	9808      	ldr	r0, [sp, #32]
 800b768:	9900      	ldr	r1, [sp, #0]
 800b76a:	6862      	ldr	r2, [r4, #4]
 800b76c:	2304      	movs	r3, #4
 800b76e:	f000 fa19 	bl	800bba4 <arm_radix8_butterfly_f32>
 800b772:	9900      	ldr	r1, [sp, #0]
 800b774:	6862      	ldr	r2, [r4, #4]
 800b776:	4640      	mov	r0, r8
 800b778:	2304      	movs	r3, #4
 800b77a:	b00d      	add	sp, #52	@ 0x34
 800b77c:	ecbd 8b0a 	vpop	{d8-d12}
 800b780:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b784:	f000 ba0e 	b.w	800bba4 <arm_radix8_butterfly_f32>

0800b788 <arm_cfft_f32>:
 800b788:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b78c:	2a01      	cmp	r2, #1
 800b78e:	8805      	ldrh	r5, [r0, #0]
 800b790:	4607      	mov	r7, r0
 800b792:	4690      	mov	r8, r2
 800b794:	460c      	mov	r4, r1
 800b796:	4699      	mov	r9, r3
 800b798:	d05c      	beq.n	800b854 <arm_cfft_f32+0xcc>
 800b79a:	f5b5 7f80 	cmp.w	r5, #256	@ 0x100
 800b79e:	d054      	beq.n	800b84a <arm_cfft_f32+0xc2>
 800b7a0:	d810      	bhi.n	800b7c4 <arm_cfft_f32+0x3c>
 800b7a2:	2d40      	cmp	r5, #64	@ 0x40
 800b7a4:	d015      	beq.n	800b7d2 <arm_cfft_f32+0x4a>
 800b7a6:	d94c      	bls.n	800b842 <arm_cfft_f32+0xba>
 800b7a8:	2d80      	cmp	r5, #128	@ 0x80
 800b7aa:	d103      	bne.n	800b7b4 <arm_cfft_f32+0x2c>
 800b7ac:	4621      	mov	r1, r4
 800b7ae:	4638      	mov	r0, r7
 800b7b0:	f7ff fcc2 	bl	800b138 <arm_cfft_radix8by2_f32>
 800b7b4:	f1b9 0f00 	cmp.w	r9, #0
 800b7b8:	d114      	bne.n	800b7e4 <arm_cfft_f32+0x5c>
 800b7ba:	f1b8 0f01 	cmp.w	r8, #1
 800b7be:	d019      	beq.n	800b7f4 <arm_cfft_f32+0x6c>
 800b7c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7c4:	f5b5 6f00 	cmp.w	r5, #2048	@ 0x800
 800b7c8:	d03f      	beq.n	800b84a <arm_cfft_f32+0xc2>
 800b7ca:	d933      	bls.n	800b834 <arm_cfft_f32+0xac>
 800b7cc:	f5b5 5f80 	cmp.w	r5, #4096	@ 0x1000
 800b7d0:	d1f0      	bne.n	800b7b4 <arm_cfft_f32+0x2c>
 800b7d2:	687a      	ldr	r2, [r7, #4]
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	4629      	mov	r1, r5
 800b7d8:	4620      	mov	r0, r4
 800b7da:	f000 f9e3 	bl	800bba4 <arm_radix8_butterfly_f32>
 800b7de:	f1b9 0f00 	cmp.w	r9, #0
 800b7e2:	d0ea      	beq.n	800b7ba <arm_cfft_f32+0x32>
 800b7e4:	68ba      	ldr	r2, [r7, #8]
 800b7e6:	89b9      	ldrh	r1, [r7, #12]
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f000 f845 	bl	800b878 <arm_bitreversal_32>
 800b7ee:	f1b8 0f01 	cmp.w	r8, #1
 800b7f2:	d1e5      	bne.n	800b7c0 <arm_cfft_f32+0x38>
 800b7f4:	ee07 5a90 	vmov	s15, r5
 800b7f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800b800:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800b804:	2d00      	cmp	r5, #0
 800b806:	d0db      	beq.n	800b7c0 <arm_cfft_f32+0x38>
 800b808:	f104 0108 	add.w	r1, r4, #8
 800b80c:	2300      	movs	r3, #0
 800b80e:	3301      	adds	r3, #1
 800b810:	429d      	cmp	r5, r3
 800b812:	f101 0108 	add.w	r1, r1, #8
 800b816:	ed11 7a04 	vldr	s14, [r1, #-16]
 800b81a:	ed51 7a03 	vldr	s15, [r1, #-12]
 800b81e:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b822:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800b826:	ed01 7a04 	vstr	s14, [r1, #-16]
 800b82a:	ed41 7a03 	vstr	s15, [r1, #-12]
 800b82e:	d1ee      	bne.n	800b80e <arm_cfft_f32+0x86>
 800b830:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b834:	f5b5 7f00 	cmp.w	r5, #512	@ 0x200
 800b838:	d0cb      	beq.n	800b7d2 <arm_cfft_f32+0x4a>
 800b83a:	f5b5 6f80 	cmp.w	r5, #1024	@ 0x400
 800b83e:	d0b5      	beq.n	800b7ac <arm_cfft_f32+0x24>
 800b840:	e7b8      	b.n	800b7b4 <arm_cfft_f32+0x2c>
 800b842:	2d10      	cmp	r5, #16
 800b844:	d0b2      	beq.n	800b7ac <arm_cfft_f32+0x24>
 800b846:	2d20      	cmp	r5, #32
 800b848:	d1b4      	bne.n	800b7b4 <arm_cfft_f32+0x2c>
 800b84a:	4621      	mov	r1, r4
 800b84c:	4638      	mov	r0, r7
 800b84e:	f7ff fd45 	bl	800b2dc <arm_cfft_radix8by4_f32>
 800b852:	e7af      	b.n	800b7b4 <arm_cfft_f32+0x2c>
 800b854:	b16d      	cbz	r5, 800b872 <arm_cfft_f32+0xea>
 800b856:	310c      	adds	r1, #12
 800b858:	2600      	movs	r6, #0
 800b85a:	ed51 7a02 	vldr	s15, [r1, #-8]
 800b85e:	3601      	adds	r6, #1
 800b860:	eef1 7a67 	vneg.f32	s15, s15
 800b864:	42b5      	cmp	r5, r6
 800b866:	ed41 7a02 	vstr	s15, [r1, #-8]
 800b86a:	f101 0108 	add.w	r1, r1, #8
 800b86e:	d1f4      	bne.n	800b85a <arm_cfft_f32+0xd2>
 800b870:	e793      	b.n	800b79a <arm_cfft_f32+0x12>
 800b872:	2b00      	cmp	r3, #0
 800b874:	d0a4      	beq.n	800b7c0 <arm_cfft_f32+0x38>
 800b876:	e7b5      	b.n	800b7e4 <arm_cfft_f32+0x5c>

0800b878 <arm_bitreversal_32>:
 800b878:	b1e9      	cbz	r1, 800b8b6 <arm_bitreversal_32+0x3e>
 800b87a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b87c:	2500      	movs	r5, #0
 800b87e:	f102 0e02 	add.w	lr, r2, #2
 800b882:	f83e 4015 	ldrh.w	r4, [lr, r5, lsl #1]
 800b886:	f832 3015 	ldrh.w	r3, [r2, r5, lsl #1]
 800b88a:	08a4      	lsrs	r4, r4, #2
 800b88c:	089b      	lsrs	r3, r3, #2
 800b88e:	f850 6024 	ldr.w	r6, [r0, r4, lsl #2]
 800b892:	f850 c023 	ldr.w	ip, [r0, r3, lsl #2]
 800b896:	f840 6023 	str.w	r6, [r0, r3, lsl #2]
 800b89a:	00a6      	lsls	r6, r4, #2
 800b89c:	009b      	lsls	r3, r3, #2
 800b89e:	f840 c024 	str.w	ip, [r0, r4, lsl #2]
 800b8a2:	3304      	adds	r3, #4
 800b8a4:	1d34      	adds	r4, r6, #4
 800b8a6:	3502      	adds	r5, #2
 800b8a8:	58c6      	ldr	r6, [r0, r3]
 800b8aa:	5907      	ldr	r7, [r0, r4]
 800b8ac:	50c7      	str	r7, [r0, r3]
 800b8ae:	428d      	cmp	r5, r1
 800b8b0:	5106      	str	r6, [r0, r4]
 800b8b2:	d3e6      	bcc.n	800b882 <arm_bitreversal_32+0xa>
 800b8b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b8b6:	4770      	bx	lr

0800b8b8 <arm_cmplx_mag_f32>:
 800b8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b8bc:	ed2d 8b02 	vpush	{d8}
 800b8c0:	0897      	lsrs	r7, r2, #2
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	d077      	beq.n	800b9b6 <arm_cmplx_mag_f32+0xfe>
 800b8c6:	f04f 0800 	mov.w	r8, #0
 800b8ca:	f100 0420 	add.w	r4, r0, #32
 800b8ce:	f101 0510 	add.w	r5, r1, #16
 800b8d2:	463e      	mov	r6, r7
 800b8d4:	ed14 0a08 	vldr	s0, [r4, #-32]	@ 0xffffffe0
 800b8d8:	ed54 7a07 	vldr	s15, [r4, #-28]	@ 0xffffffe4
 800b8dc:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b8e0:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b8e4:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b8e8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b8ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8f0:	f2c0 80c5 	blt.w	800ba7e <arm_cmplx_mag_f32+0x1c6>
 800b8f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b8f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b8fc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b900:	f100 80cb 	bmi.w	800ba9a <arm_cmplx_mag_f32+0x1e2>
 800b904:	ed05 8a04 	vstr	s16, [r5, #-16]
 800b908:	ed14 0a06 	vldr	s0, [r4, #-24]	@ 0xffffffe8
 800b90c:	ed54 7a05 	vldr	s15, [r4, #-20]	@ 0xffffffec
 800b910:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b914:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b918:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b91c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b920:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b924:	f2c0 80a8 	blt.w	800ba78 <arm_cmplx_mag_f32+0x1c0>
 800b928:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b92c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b930:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b934:	f100 80a8 	bmi.w	800ba88 <arm_cmplx_mag_f32+0x1d0>
 800b938:	ed05 8a03 	vstr	s16, [r5, #-12]
 800b93c:	ed14 0a04 	vldr	s0, [r4, #-16]
 800b940:	ed54 7a03 	vldr	s15, [r4, #-12]
 800b944:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b948:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b94c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b950:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b958:	f2c0 808b 	blt.w	800ba72 <arm_cmplx_mag_f32+0x1ba>
 800b95c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b964:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b968:	f100 80a9 	bmi.w	800babe <arm_cmplx_mag_f32+0x206>
 800b96c:	ed05 8a02 	vstr	s16, [r5, #-8]
 800b970:	ed14 0a02 	vldr	s0, [r4, #-8]
 800b974:	ed54 7a01 	vldr	s15, [r4, #-4]
 800b978:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b97c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b980:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b984:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b98c:	db6e      	blt.n	800ba6c <arm_cmplx_mag_f32+0x1b4>
 800b98e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b996:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b99a:	f100 8087 	bmi.w	800baac <arm_cmplx_mag_f32+0x1f4>
 800b99e:	ed05 8a01 	vstr	s16, [r5, #-4]
 800b9a2:	3e01      	subs	r6, #1
 800b9a4:	f104 0420 	add.w	r4, r4, #32
 800b9a8:	f105 0510 	add.w	r5, r5, #16
 800b9ac:	d192      	bne.n	800b8d4 <arm_cmplx_mag_f32+0x1c>
 800b9ae:	eb00 1047 	add.w	r0, r0, r7, lsl #5
 800b9b2:	eb01 1107 	add.w	r1, r1, r7, lsl #4
 800b9b6:	f012 0203 	ands.w	r2, r2, #3
 800b9ba:	d052      	beq.n	800ba62 <arm_cmplx_mag_f32+0x1aa>
 800b9bc:	ed90 0a00 	vldr	s0, [r0]
 800b9c0:	edd0 7a01 	vldr	s15, [r0, #4]
 800b9c4:	ee20 0a00 	vmul.f32	s0, s0, s0
 800b9c8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b9d2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b9d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9da:	bfb8      	it	lt
 800b9dc:	600b      	strlt	r3, [r1, #0]
 800b9de:	db08      	blt.n	800b9f2 <arm_cmplx_mag_f32+0x13a>
 800b9e0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b9e8:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800b9ec:	d479      	bmi.n	800bae2 <arm_cmplx_mag_f32+0x22a>
 800b9ee:	ed81 8a00 	vstr	s16, [r1]
 800b9f2:	3a01      	subs	r2, #1
 800b9f4:	d035      	beq.n	800ba62 <arm_cmplx_mag_f32+0x1aa>
 800b9f6:	ed90 0a02 	vldr	s0, [r0, #8]
 800b9fa:	edd0 7a03 	vldr	s15, [r0, #12]
 800b9fe:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ba02:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ba06:	2300      	movs	r3, #0
 800ba08:	ee37 0a80 	vadd.f32	s0, s15, s0
 800ba0c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ba10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba14:	bfb8      	it	lt
 800ba16:	604b      	strlt	r3, [r1, #4]
 800ba18:	db08      	blt.n	800ba2c <arm_cmplx_mag_f32+0x174>
 800ba1a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ba1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba22:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ba26:	d453      	bmi.n	800bad0 <arm_cmplx_mag_f32+0x218>
 800ba28:	ed81 8a01 	vstr	s16, [r1, #4]
 800ba2c:	2a01      	cmp	r2, #1
 800ba2e:	d018      	beq.n	800ba62 <arm_cmplx_mag_f32+0x1aa>
 800ba30:	ed90 0a04 	vldr	s0, [r0, #16]
 800ba34:	edd0 7a05 	vldr	s15, [r0, #20]
 800ba38:	ee20 0a00 	vmul.f32	s0, s0, s0
 800ba3c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800ba40:	2300      	movs	r3, #0
 800ba42:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ba46:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800ba4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba4e:	db19      	blt.n	800ba84 <arm_cmplx_mag_f32+0x1cc>
 800ba50:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ba54:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba58:	eeb1 8ac0 	vsqrt.f32	s16, s0
 800ba5c:	d44a      	bmi.n	800baf4 <arm_cmplx_mag_f32+0x23c>
 800ba5e:	ed81 8a02 	vstr	s16, [r1, #8]
 800ba62:	b004      	add	sp, #16
 800ba64:	ecbd 8b02 	vpop	{d8}
 800ba68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba6c:	f845 8c04 	str.w	r8, [r5, #-4]
 800ba70:	e797      	b.n	800b9a2 <arm_cmplx_mag_f32+0xea>
 800ba72:	f845 8c08 	str.w	r8, [r5, #-8]
 800ba76:	e77b      	b.n	800b970 <arm_cmplx_mag_f32+0xb8>
 800ba78:	f845 8c0c 	str.w	r8, [r5, #-12]
 800ba7c:	e75e      	b.n	800b93c <arm_cmplx_mag_f32+0x84>
 800ba7e:	f845 8c10 	str.w	r8, [r5, #-16]
 800ba82:	e741      	b.n	800b908 <arm_cmplx_mag_f32+0x50>
 800ba84:	608b      	str	r3, [r1, #8]
 800ba86:	e7ec      	b.n	800ba62 <arm_cmplx_mag_f32+0x1aa>
 800ba88:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ba8c:	9001      	str	r0, [sp, #4]
 800ba8e:	f003 fa97 	bl	800efc0 <sqrtf>
 800ba92:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800ba96:	9801      	ldr	r0, [sp, #4]
 800ba98:	e74e      	b.n	800b938 <arm_cmplx_mag_f32+0x80>
 800ba9a:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800ba9e:	9001      	str	r0, [sp, #4]
 800baa0:	f003 fa8e 	bl	800efc0 <sqrtf>
 800baa4:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800baa8:	9801      	ldr	r0, [sp, #4]
 800baaa:	e72b      	b.n	800b904 <arm_cmplx_mag_f32+0x4c>
 800baac:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bab0:	9001      	str	r0, [sp, #4]
 800bab2:	f003 fa85 	bl	800efc0 <sqrtf>
 800bab6:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800baba:	9801      	ldr	r0, [sp, #4]
 800babc:	e76f      	b.n	800b99e <arm_cmplx_mag_f32+0xe6>
 800babe:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800bac2:	9001      	str	r0, [sp, #4]
 800bac4:	f003 fa7c 	bl	800efc0 <sqrtf>
 800bac8:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800bacc:	9801      	ldr	r0, [sp, #4]
 800bace:	e74d      	b.n	800b96c <arm_cmplx_mag_f32+0xb4>
 800bad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bad4:	9201      	str	r2, [sp, #4]
 800bad6:	f003 fa73 	bl	800efc0 <sqrtf>
 800bada:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800bade:	9903      	ldr	r1, [sp, #12]
 800bae0:	e7a2      	b.n	800ba28 <arm_cmplx_mag_f32+0x170>
 800bae2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bae6:	9201      	str	r2, [sp, #4]
 800bae8:	f003 fa6a 	bl	800efc0 <sqrtf>
 800baec:	e9dd 2001 	ldrd	r2, r0, [sp, #4]
 800baf0:	9903      	ldr	r1, [sp, #12]
 800baf2:	e77c      	b.n	800b9ee <arm_cmplx_mag_f32+0x136>
 800baf4:	9101      	str	r1, [sp, #4]
 800baf6:	f003 fa63 	bl	800efc0 <sqrtf>
 800bafa:	9901      	ldr	r1, [sp, #4]
 800bafc:	e7af      	b.n	800ba5e <arm_cmplx_mag_f32+0x1a6>
 800bafe:	bf00      	nop

0800bb00 <arm_cfft_init_f32>:
 800bb00:	4603      	mov	r3, r0
 800bb02:	f5b1 7f80 	cmp.w	r1, #256	@ 0x100
 800bb06:	f04f 0000 	mov.w	r0, #0
 800bb0a:	b410      	push	{r4}
 800bb0c:	8019      	strh	r1, [r3, #0]
 800bb0e:	6058      	str	r0, [r3, #4]
 800bb10:	d033      	beq.n	800bb7a <arm_cfft_init_f32+0x7a>
 800bb12:	d918      	bls.n	800bb46 <arm_cfft_init_f32+0x46>
 800bb14:	f5b1 6f00 	cmp.w	r1, #2048	@ 0x800
 800bb18:	d027      	beq.n	800bb6a <arm_cfft_init_f32+0x6a>
 800bb1a:	d90c      	bls.n	800bb36 <arm_cfft_init_f32+0x36>
 800bb1c:	f5b1 5f80 	cmp.w	r1, #4096	@ 0x1000
 800bb20:	d11e      	bne.n	800bb60 <arm_cfft_init_f32+0x60>
 800bb22:	4a17      	ldr	r2, [pc, #92]	@ (800bb80 <arm_cfft_init_f32+0x80>)
 800bb24:	8994      	ldrh	r4, [r2, #12]
 800bb26:	819c      	strh	r4, [r3, #12]
 800bb28:	e9d2 2101 	ldrd	r2, r1, [r2, #4]
 800bb2c:	e9c3 2101 	strd	r2, r1, [r3, #4]
 800bb30:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800bb3a:	d018      	beq.n	800bb6e <arm_cfft_init_f32+0x6e>
 800bb3c:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800bb40:	d10e      	bne.n	800bb60 <arm_cfft_init_f32+0x60>
 800bb42:	4a10      	ldr	r2, [pc, #64]	@ (800bb84 <arm_cfft_init_f32+0x84>)
 800bb44:	e7ee      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb46:	2940      	cmp	r1, #64	@ 0x40
 800bb48:	d013      	beq.n	800bb72 <arm_cfft_init_f32+0x72>
 800bb4a:	d903      	bls.n	800bb54 <arm_cfft_init_f32+0x54>
 800bb4c:	2980      	cmp	r1, #128	@ 0x80
 800bb4e:	d107      	bne.n	800bb60 <arm_cfft_init_f32+0x60>
 800bb50:	4a0d      	ldr	r2, [pc, #52]	@ (800bb88 <arm_cfft_init_f32+0x88>)
 800bb52:	e7e7      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb54:	2910      	cmp	r1, #16
 800bb56:	d00e      	beq.n	800bb76 <arm_cfft_init_f32+0x76>
 800bb58:	2920      	cmp	r1, #32
 800bb5a:	d101      	bne.n	800bb60 <arm_cfft_init_f32+0x60>
 800bb5c:	4a0b      	ldr	r2, [pc, #44]	@ (800bb8c <arm_cfft_init_f32+0x8c>)
 800bb5e:	e7e1      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800bb64:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bb68:	4770      	bx	lr
 800bb6a:	4a09      	ldr	r2, [pc, #36]	@ (800bb90 <arm_cfft_init_f32+0x90>)
 800bb6c:	e7da      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb6e:	4a09      	ldr	r2, [pc, #36]	@ (800bb94 <arm_cfft_init_f32+0x94>)
 800bb70:	e7d8      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb72:	4a09      	ldr	r2, [pc, #36]	@ (800bb98 <arm_cfft_init_f32+0x98>)
 800bb74:	e7d6      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb76:	4a09      	ldr	r2, [pc, #36]	@ (800bb9c <arm_cfft_init_f32+0x9c>)
 800bb78:	e7d4      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb7a:	4a09      	ldr	r2, [pc, #36]	@ (800bba0 <arm_cfft_init_f32+0xa0>)
 800bb7c:	e7d2      	b.n	800bb24 <arm_cfft_init_f32+0x24>
 800bb7e:	bf00      	nop
 800bb80:	0802e0ec 	.word	0x0802e0ec
 800bb84:	0802e08c 	.word	0x0802e08c
 800bb88:	0802e09c 	.word	0x0802e09c
 800bb8c:	0802e0dc 	.word	0x0802e0dc
 800bb90:	0802e0bc 	.word	0x0802e0bc
 800bb94:	0802e0fc 	.word	0x0802e0fc
 800bb98:	0802e10c 	.word	0x0802e10c
 800bb9c:	0802e0ac 	.word	0x0802e0ac
 800bba0:	0802e0cc 	.word	0x0802e0cc

0800bba4 <arm_radix8_butterfly_f32>:
 800bba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bba8:	ed2d 8b10 	vpush	{d8-d15}
 800bbac:	b093      	sub	sp, #76	@ 0x4c
 800bbae:	e9cd 320e 	strd	r3, r2, [sp, #56]	@ 0x38
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	3304      	adds	r3, #4
 800bbb6:	ed9f bac0 	vldr	s22, [pc, #768]	@ 800beb8 <arm_radix8_butterfly_f32+0x314>
 800bbba:	9010      	str	r0, [sp, #64]	@ 0x40
 800bbbc:	468b      	mov	fp, r1
 800bbbe:	9311      	str	r3, [sp, #68]	@ 0x44
 800bbc0:	4689      	mov	r9, r1
 800bbc2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 800bbc4:	ea4f 05db 	mov.w	r5, fp, lsr #3
 800bbc8:	eb04 1245 	add.w	r2, r4, r5, lsl #5
 800bbcc:	eb02 1105 	add.w	r1, r2, r5, lsl #4
 800bbd0:	eba5 0385 	sub.w	r3, r5, r5, lsl #2
 800bbd4:	ea4f 08c5 	mov.w	r8, r5, lsl #3
 800bbd8:	ea4f 1e05 	mov.w	lr, r5, lsl #4
 800bbdc:	eb05 0a85 	add.w	sl, r5, r5, lsl #2
 800bbe0:	9100      	str	r1, [sp, #0]
 800bbe2:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 800bbe6:	f108 0004 	add.w	r0, r8, #4
 800bbea:	f10e 0104 	add.w	r1, lr, #4
 800bbee:	462e      	mov	r6, r5
 800bbf0:	4420      	add	r0, r4
 800bbf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bbf6:	4421      	add	r1, r4
 800bbf8:	ea4f 04ca 	mov.w	r4, sl, lsl #3
 800bbfc:	960d      	str	r6, [sp, #52]	@ 0x34
 800bbfe:	9402      	str	r4, [sp, #8]
 800bc00:	012c      	lsls	r4, r5, #4
 800bc02:	ebc6 0cc6 	rsb	ip, r6, r6, lsl #3
 800bc06:	9403      	str	r4, [sp, #12]
 800bc08:	00ec      	lsls	r4, r5, #3
 800bc0a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800bc0c:	9404      	str	r4, [sp, #16]
 800bc0e:	ea4f 04cc 	mov.w	r4, ip, lsl #3
 800bc12:	9405      	str	r4, [sp, #20]
 800bc14:	016c      	lsls	r4, r5, #5
 800bc16:	9401      	str	r4, [sp, #4]
 800bc18:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 800bc1a:	9c00      	ldr	r4, [sp, #0]
 800bc1c:	eb03 1746 	add.w	r7, r3, r6, lsl #5
 800bc20:	ea4f 0acb 	mov.w	sl, fp, lsl #3
 800bc24:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800bc28:	f04f 0c00 	mov.w	ip, #0
 800bc2c:	edd6 6a00 	vldr	s13, [r6]
 800bc30:	edd7 1a00 	vldr	s3, [r7]
 800bc34:	ed15 aa01 	vldr	s20, [r5, #-4]
 800bc38:	edd2 5a00 	vldr	s11, [r2]
 800bc3c:	ed51 9a01 	vldr	s19, [r1, #-4]
 800bc40:	ed94 6a00 	vldr	s12, [r4]
 800bc44:	ed50 7a01 	vldr	s15, [r0, #-4]
 800bc48:	ed93 3a00 	vldr	s6, [r3]
 800bc4c:	ee39 0a86 	vadd.f32	s0, s19, s12
 800bc50:	ee33 2a21 	vadd.f32	s4, s6, s3
 800bc54:	ee37 5aa6 	vadd.f32	s10, s15, s13
 800bc58:	ee7a 4a25 	vadd.f32	s9, s20, s11
 800bc5c:	ee35 7a02 	vadd.f32	s14, s10, s4
 800bc60:	ee34 4a80 	vadd.f32	s8, s9, s0
 800bc64:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bc68:	ee74 6a07 	vadd.f32	s13, s8, s14
 800bc6c:	ee34 4a47 	vsub.f32	s8, s8, s14
 800bc70:	ed45 6a01 	vstr	s13, [r5, #-4]
 800bc74:	ed82 4a00 	vstr	s8, [r2]
 800bc78:	edd0 6a00 	vldr	s13, [r0]
 800bc7c:	ed96 9a01 	vldr	s18, [r6, #4]
 800bc80:	edd3 2a01 	vldr	s5, [r3, #4]
 800bc84:	edd7 8a01 	vldr	s17, [r7, #4]
 800bc88:	edd5 0a00 	vldr	s1, [r5]
 800bc8c:	edd2 3a01 	vldr	s7, [r2, #4]
 800bc90:	ed94 8a01 	vldr	s16, [r4, #4]
 800bc94:	ed91 7a00 	vldr	s14, [r1]
 800bc98:	ee33 3a61 	vsub.f32	s6, s6, s3
 800bc9c:	ee36 4ac9 	vsub.f32	s8, s13, s18
 800bca0:	ee72 aae8 	vsub.f32	s21, s5, s17
 800bca4:	ee77 1ac3 	vsub.f32	s3, s15, s6
 800bca8:	ee34 1a2a 	vadd.f32	s2, s8, s21
 800bcac:	ee77 7a83 	vadd.f32	s15, s15, s6
 800bcb0:	ee34 4a6a 	vsub.f32	s8, s8, s21
 800bcb4:	ee30 3aa3 	vadd.f32	s6, s1, s7
 800bcb8:	ee39 6ac6 	vsub.f32	s12, s19, s12
 800bcbc:	ee70 3ae3 	vsub.f32	s7, s1, s7
 800bcc0:	ee72 2aa8 	vadd.f32	s5, s5, s17
 800bcc4:	ee77 0a08 	vadd.f32	s1, s14, s16
 800bcc8:	ee21 1a0b 	vmul.f32	s2, s2, s22
 800bccc:	ee37 7a48 	vsub.f32	s14, s14, s16
 800bcd0:	ee61 1a8b 	vmul.f32	s3, s3, s22
 800bcd4:	ee7a 5a65 	vsub.f32	s11, s20, s11
 800bcd8:	ee76 6a89 	vadd.f32	s13, s13, s18
 800bcdc:	ee24 4a0b 	vmul.f32	s8, s8, s22
 800bce0:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800bce4:	ee74 4ac0 	vsub.f32	s9, s9, s0
 800bce8:	ee35 5a42 	vsub.f32	s10, s10, s4
 800bcec:	ee36 0aa2 	vadd.f32	s0, s13, s5
 800bcf0:	ee33 2a20 	vadd.f32	s4, s6, s1
 800bcf4:	ee76 6ae2 	vsub.f32	s13, s13, s5
 800bcf8:	ee33 3a60 	vsub.f32	s6, s6, s1
 800bcfc:	ee75 2aa1 	vadd.f32	s5, s11, s3
 800bd00:	ee77 0a01 	vadd.f32	s1, s14, s2
 800bd04:	ee75 5ae1 	vsub.f32	s11, s11, s3
 800bd08:	ee37 7a41 	vsub.f32	s14, s14, s2
 800bd0c:	ee73 1a84 	vadd.f32	s3, s7, s8
 800bd10:	ee33 4ac4 	vsub.f32	s8, s7, s8
 800bd14:	ee76 3a27 	vadd.f32	s7, s12, s15
 800bd18:	ee76 7a67 	vsub.f32	s15, s12, s15
 800bd1c:	ee32 8a00 	vadd.f32	s16, s4, s0
 800bd20:	ee33 1a45 	vsub.f32	s2, s6, s10
 800bd24:	ee32 2a40 	vsub.f32	s4, s4, s0
 800bd28:	ee35 5a03 	vadd.f32	s10, s10, s6
 800bd2c:	ee34 0aa6 	vadd.f32	s0, s9, s13
 800bd30:	ee32 3aa0 	vadd.f32	s6, s5, s1
 800bd34:	ee74 6ae6 	vsub.f32	s13, s9, s13
 800bd38:	ee34 6a67 	vsub.f32	s12, s8, s15
 800bd3c:	ee75 4a87 	vadd.f32	s9, s11, s14
 800bd40:	ee72 2ae0 	vsub.f32	s5, s5, s1
 800bd44:	ee35 7ac7 	vsub.f32	s14, s11, s14
 800bd48:	ee77 7a84 	vadd.f32	s15, s15, s8
 800bd4c:	ee71 5ae3 	vsub.f32	s11, s3, s7
 800bd50:	44dc      	add	ip, fp
 800bd52:	ee73 3aa1 	vadd.f32	s7, s7, s3
 800bd56:	45e1      	cmp	r9, ip
 800bd58:	ed85 8a00 	vstr	s16, [r5]
 800bd5c:	ed82 2a01 	vstr	s4, [r2, #4]
 800bd60:	4455      	add	r5, sl
 800bd62:	ed01 0a01 	vstr	s0, [r1, #-4]
 800bd66:	4452      	add	r2, sl
 800bd68:	edc4 6a00 	vstr	s13, [r4]
 800bd6c:	ed81 1a00 	vstr	s2, [r1]
 800bd70:	ed84 5a01 	vstr	s10, [r4, #4]
 800bd74:	4451      	add	r1, sl
 800bd76:	ed00 3a01 	vstr	s6, [r0, #-4]
 800bd7a:	4454      	add	r4, sl
 800bd7c:	edc7 2a00 	vstr	s5, [r7]
 800bd80:	edc6 4a00 	vstr	s9, [r6]
 800bd84:	ed83 7a00 	vstr	s14, [r3]
 800bd88:	edc0 5a00 	vstr	s11, [r0]
 800bd8c:	edc7 3a01 	vstr	s7, [r7, #4]
 800bd90:	4450      	add	r0, sl
 800bd92:	ed86 6a01 	vstr	s12, [r6, #4]
 800bd96:	4457      	add	r7, sl
 800bd98:	edc3 7a01 	vstr	s15, [r3, #4]
 800bd9c:	4456      	add	r6, sl
 800bd9e:	4453      	add	r3, sl
 800bda0:	f63f af44 	bhi.w	800bc2c <arm_radix8_butterfly_f32+0x88>
 800bda4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bda6:	2b07      	cmp	r3, #7
 800bda8:	f240 81c3 	bls.w	800c132 <arm_radix8_butterfly_f32+0x58e>
 800bdac:	9805      	ldr	r0, [sp, #20]
 800bdae:	9a01      	ldr	r2, [sp, #4]
 800bdb0:	9b03      	ldr	r3, [sp, #12]
 800bdb2:	9d04      	ldr	r5, [sp, #16]
 800bdb4:	9902      	ldr	r1, [sp, #8]
 800bdb6:	f100 0c08 	add.w	ip, r0, #8
 800bdba:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800bdbc:	3208      	adds	r2, #8
 800bdbe:	1882      	adds	r2, r0, r2
 800bdc0:	3308      	adds	r3, #8
 800bdc2:	920a      	str	r2, [sp, #40]	@ 0x28
 800bdc4:	4602      	mov	r2, r0
 800bdc6:	18d3      	adds	r3, r2, r3
 800bdc8:	3108      	adds	r1, #8
 800bdca:	3508      	adds	r5, #8
 800bdcc:	1851      	adds	r1, r2, r1
 800bdce:	9307      	str	r3, [sp, #28]
 800bdd0:	4613      	mov	r3, r2
 800bdd2:	442a      	add	r2, r5
 800bdd4:	9206      	str	r2, [sp, #24]
 800bdd6:	461a      	mov	r2, r3
 800bdd8:	4462      	add	r2, ip
 800bdda:	f10e 0e0c 	add.w	lr, lr, #12
 800bdde:	9205      	str	r2, [sp, #20]
 800bde0:	461a      	mov	r2, r3
 800bde2:	4472      	add	r2, lr
 800bde4:	f108 0808 	add.w	r8, r8, #8
 800bde8:	330c      	adds	r3, #12
 800bdea:	4440      	add	r0, r8
 800bdec:	f04f 0e00 	mov.w	lr, #0
 800bdf0:	9203      	str	r2, [sp, #12]
 800bdf2:	9304      	str	r3, [sp, #16]
 800bdf4:	465a      	mov	r2, fp
 800bdf6:	464b      	mov	r3, r9
 800bdf8:	46f3      	mov	fp, lr
 800bdfa:	46d1      	mov	r9, sl
 800bdfc:	9009      	str	r0, [sp, #36]	@ 0x24
 800bdfe:	9108      	str	r1, [sp, #32]
 800be00:	f04f 0801 	mov.w	r8, #1
 800be04:	469a      	mov	sl, r3
 800be06:	4696      	mov	lr, r2
 800be08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be0a:	449b      	add	fp, r3
 800be0c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800be0e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800be12:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800be16:	eb02 00cb 	add.w	r0, r2, fp, lsl #3
 800be1a:	eb00 04cb 	add.w	r4, r0, fp, lsl #3
 800be1e:	eb04 05cb 	add.w	r5, r4, fp, lsl #3
 800be22:	eb05 06cb 	add.w	r6, r5, fp, lsl #3
 800be26:	930c      	str	r3, [sp, #48]	@ 0x30
 800be28:	eb06 07cb 	add.w	r7, r6, fp, lsl #3
 800be2c:	ebab 038b 	sub.w	r3, fp, fp, lsl #2
 800be30:	920b      	str	r2, [sp, #44]	@ 0x2c
 800be32:	eb07 1203 	add.w	r2, r7, r3, lsl #4
 800be36:	eb02 0ccb 	add.w	ip, r2, fp, lsl #3
 800be3a:	eb0c 03cb 	add.w	r3, ip, fp, lsl #3
 800be3e:	9202      	str	r2, [sp, #8]
 800be40:	eb03 02cb 	add.w	r2, r3, fp, lsl #3
 800be44:	9301      	str	r3, [sp, #4]
 800be46:	4613      	mov	r3, r2
 800be48:	edd3 da01 	vldr	s27, [r3, #4]
 800be4c:	9b01      	ldr	r3, [sp, #4]
 800be4e:	edd0 7a00 	vldr	s15, [r0]
 800be52:	ed93 da01 	vldr	s26, [r3, #4]
 800be56:	9b02      	ldr	r3, [sp, #8]
 800be58:	edcd 7a02 	vstr	s15, [sp, #8]
 800be5c:	ed93 ca01 	vldr	s24, [r3, #4]
 800be60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800be62:	eddc ca01 	vldr	s25, [ip, #4]
 800be66:	edd3 7a00 	vldr	s15, [r3]
 800be6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800be6c:	edcd 7a01 	vstr	s15, [sp, #4]
 800be70:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800be74:	eb02 01cb 	add.w	r1, r2, fp, lsl #3
 800be78:	9200      	str	r2, [sp, #0]
 800be7a:	eb01 02cb 	add.w	r2, r1, fp, lsl #3
 800be7e:	edd3 7a00 	vldr	s15, [r3]
 800be82:	ed92 fa01 	vldr	s30, [r2, #4]
 800be86:	9a00      	ldr	r2, [sp, #0]
 800be88:	edd1 ea01 	vldr	s29, [r1, #4]
 800be8c:	ed92 ea01 	vldr	s28, [r2, #4]
 800be90:	edd7 ba00 	vldr	s23, [r7]
 800be94:	edd6 aa00 	vldr	s21, [r6]
 800be98:	ed95 aa00 	vldr	s20, [r5]
 800be9c:	edd4 9a00 	vldr	s19, [r4]
 800bea0:	edcd 7a00 	vstr	s15, [sp]
 800bea4:	e9dd 7603 	ldrd	r7, r6, [sp, #12]
 800bea8:	e9dd 5405 	ldrd	r5, r4, [sp, #20]
 800beac:	e9dd 0107 	ldrd	r0, r1, [sp, #28]
 800beb0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	@ 0x24
 800beb4:	46c4      	mov	ip, r8
 800beb6:	e001      	b.n	800bebc <arm_radix8_butterfly_f32+0x318>
 800beb8:	3f3504f3 	.word	0x3f3504f3
 800bebc:	ed91 6a00 	vldr	s12, [r1]
 800bec0:	ed93 5a00 	vldr	s10, [r3]
 800bec4:	edd0 fa00 	vldr	s31, [r0]
 800bec8:	edd4 7a00 	vldr	s15, [r4]
 800becc:	ed95 7a00 	vldr	s14, [r5]
 800bed0:	ed56 3a01 	vldr	s7, [r6, #-4]
 800bed4:	ed17 3a01 	vldr	s6, [r7, #-4]
 800bed8:	ed92 2a00 	vldr	s4, [r2]
 800bedc:	ed96 0a00 	vldr	s0, [r6]
 800bee0:	ee33 8a85 	vadd.f32	s16, s7, s10
 800bee4:	ee32 1a06 	vadd.f32	s2, s4, s12
 800bee8:	ee33 4a2f 	vadd.f32	s8, s6, s31
 800beec:	ee77 4a87 	vadd.f32	s9, s15, s14
 800bef0:	ee78 1a04 	vadd.f32	s3, s16, s8
 800bef4:	ee71 6a24 	vadd.f32	s13, s2, s9
 800bef8:	ee32 2a46 	vsub.f32	s4, s4, s12
 800befc:	ee31 6aa6 	vadd.f32	s12, s3, s13
 800bf00:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800bf04:	ed06 6a01 	vstr	s12, [r6, #-4]
 800bf08:	edd4 8a01 	vldr	s17, [r4, #4]
 800bf0c:	ed92 9a01 	vldr	s18, [r2, #4]
 800bf10:	edd7 0a00 	vldr	s1, [r7]
 800bf14:	edd1 2a01 	vldr	s5, [r1, #4]
 800bf18:	ed95 7a01 	vldr	s14, [r5, #4]
 800bf1c:	ed93 6a01 	vldr	s12, [r3, #4]
 800bf20:	edd0 5a01 	vldr	s11, [r0, #4]
 800bf24:	ee73 3ac5 	vsub.f32	s7, s7, s10
 800bf28:	ee33 3a6f 	vsub.f32	s6, s6, s31
 800bf2c:	ee39 5a62 	vsub.f32	s10, s18, s5
 800bf30:	ee78 fac7 	vsub.f32	s31, s17, s14
 800bf34:	ee38 4a44 	vsub.f32	s8, s16, s8
 800bf38:	ee38 7a87 	vadd.f32	s14, s17, s14
 800bf3c:	ee30 8aa5 	vadd.f32	s16, s1, s11
 800bf40:	ee79 2a22 	vadd.f32	s5, s18, s5
 800bf44:	ee32 9a27 	vadd.f32	s18, s4, s15
 800bf48:	ee72 7a67 	vsub.f32	s15, s4, s15
 800bf4c:	ee30 2a06 	vadd.f32	s4, s0, s12
 800bf50:	ee75 8a6f 	vsub.f32	s17, s10, s31
 800bf54:	ee71 4a64 	vsub.f32	s9, s2, s9
 800bf58:	ee35 5a2f 	vadd.f32	s10, s10, s31
 800bf5c:	ee32 1a08 	vadd.f32	s2, s4, s16
 800bf60:	ee72 fa87 	vadd.f32	s31, s5, s14
 800bf64:	ee32 2a48 	vsub.f32	s4, s4, s16
 800bf68:	ee68 8a8b 	vmul.f32	s17, s17, s22
 800bf6c:	ee25 5a0b 	vmul.f32	s10, s10, s22
 800bf70:	ee70 5ae5 	vsub.f32	s11, s1, s11
 800bf74:	ee72 2ac7 	vsub.f32	s5, s5, s14
 800bf78:	ee71 6ae6 	vsub.f32	s13, s3, s13
 800bf7c:	ee29 9a0b 	vmul.f32	s18, s18, s22
 800bf80:	ee71 1a6f 	vsub.f32	s3, s2, s31
 800bf84:	ee67 7a8b 	vmul.f32	s15, s15, s22
 800bf88:	ee30 6a46 	vsub.f32	s12, s0, s12
 800bf8c:	ee74 0a22 	vadd.f32	s1, s8, s5
 800bf90:	ee36 0a28 	vadd.f32	s0, s12, s17
 800bf94:	ee74 2a62 	vsub.f32	s5, s8, s5
 800bf98:	ee36 6a68 	vsub.f32	s12, s12, s17
 800bf9c:	ee32 4a64 	vsub.f32	s8, s4, s9
 800bfa0:	ee73 8a09 	vadd.f32	s17, s6, s18
 800bfa4:	ee74 4a82 	vadd.f32	s9, s9, s4
 800bfa8:	ee33 9a49 	vsub.f32	s18, s6, s18
 800bfac:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 800bfb0:	ee35 3a85 	vadd.f32	s6, s11, s10
 800bfb4:	ee75 5ac5 	vsub.f32	s11, s11, s10
 800bfb8:	ee33 5aa7 	vadd.f32	s10, s7, s15
 800bfbc:	ee73 7ae7 	vsub.f32	s15, s7, s15
 800bfc0:	ee69 3aa6 	vmul.f32	s7, s19, s13
 800bfc4:	ee30 7a68 	vsub.f32	s14, s0, s17
 800bfc8:	ee35 8a03 	vadd.f32	s16, s10, s6
 800bfcc:	ee38 0a80 	vadd.f32	s0, s17, s0
 800bfd0:	ee73 3a82 	vadd.f32	s7, s7, s4
 800bfd4:	ee69 8aa1 	vmul.f32	s17, s19, s3
 800bfd8:	ed9d 2a00 	vldr	s4, [sp]
 800bfdc:	eddd 1a01 	vldr	s3, [sp, #4]
 800bfe0:	ee35 5a43 	vsub.f32	s10, s10, s6
 800bfe4:	ee71 fa2f 	vadd.f32	s31, s2, s31
 800bfe8:	ee37 3aa5 	vadd.f32	s6, s15, s11
 800bfec:	ee21 1aa0 	vmul.f32	s2, s3, s1
 800bff0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800bff4:	ee6d 6aa6 	vmul.f32	s13, s27, s13
 800bff8:	ee76 5a49 	vsub.f32	s11, s12, s18
 800bffc:	ee6c 0aa0 	vmul.f32	s1, s25, s1
 800c000:	ee39 6a06 	vadd.f32	s12, s18, s12
 800c004:	ee2c 9a84 	vmul.f32	s18, s25, s8
 800c008:	ee21 4a84 	vmul.f32	s8, s3, s8
 800c00c:	ee6c 1a07 	vmul.f32	s3, s24, s14
 800c010:	ee22 7a07 	vmul.f32	s14, s4, s14
 800c014:	ee22 2a08 	vmul.f32	s4, s4, s16
 800c018:	ee2c 8a08 	vmul.f32	s16, s24, s16
 800c01c:	ee78 6ae6 	vsub.f32	s13, s17, s13
 800c020:	ee31 1a09 	vadd.f32	s2, s2, s18
 800c024:	ee6a 8aa2 	vmul.f32	s17, s21, s5
 800c028:	ee2e 9aa4 	vmul.f32	s18, s29, s9
 800c02c:	ee74 0a60 	vsub.f32	s1, s8, s1
 800c030:	ee37 7a48 	vsub.f32	s14, s14, s16
 800c034:	ee2f 4a00 	vmul.f32	s8, s30, s0
 800c038:	ee2b 8a85 	vmul.f32	s16, s23, s10
 800c03c:	ee72 1a21 	vadd.f32	s3, s4, s3
 800c040:	ee6a 4aa4 	vmul.f32	s9, s21, s9
 800c044:	ee38 2a89 	vadd.f32	s4, s17, s18
 800c048:	ee2f 5a05 	vmul.f32	s10, s30, s10
 800c04c:	ee38 8a04 	vadd.f32	s16, s16, s8
 800c050:	ee2e 9a25 	vmul.f32	s18, s28, s11
 800c054:	ee2a 4a25 	vmul.f32	s8, s20, s11
 800c058:	ee6e 2aa2 	vmul.f32	s5, s29, s5
 800c05c:	eddd 5a02 	vldr	s11, [sp, #8]
 800c060:	edc6 fa00 	vstr	s31, [r6]
 800c064:	ee2b 0a80 	vmul.f32	s0, s23, s0
 800c068:	ee74 2ae2 	vsub.f32	s5, s9, s5
 800c06c:	ee30 0a45 	vsub.f32	s0, s0, s10
 800c070:	ee6a 4a03 	vmul.f32	s9, s20, s6
 800c074:	ee65 8aa7 	vmul.f32	s17, s11, s15
 800c078:	ee2d 5a06 	vmul.f32	s10, s26, s12
 800c07c:	ee2e 3a03 	vmul.f32	s6, s28, s6
 800c080:	ee6d 7a27 	vmul.f32	s15, s26, s15
 800c084:	ee25 6a86 	vmul.f32	s12, s11, s12
 800c088:	ee74 4a89 	vadd.f32	s9, s9, s18
 800c08c:	ee34 3a43 	vsub.f32	s6, s8, s6
 800c090:	ee78 8a85 	vadd.f32	s17, s17, s10
 800c094:	ee36 6a67 	vsub.f32	s12, s12, s15
 800c098:	44f4      	add	ip, lr
 800c09a:	45e2      	cmp	sl, ip
 800c09c:	edc3 3a00 	vstr	s7, [r3]
 800c0a0:	edc3 6a01 	vstr	s13, [r3, #4]
 800c0a4:	444e      	add	r6, r9
 800c0a6:	ed07 1a01 	vstr	s2, [r7, #-4]
 800c0aa:	edc7 0a00 	vstr	s1, [r7]
 800c0ae:	444b      	add	r3, r9
 800c0b0:	ed80 2a00 	vstr	s4, [r0]
 800c0b4:	edc0 2a01 	vstr	s5, [r0, #4]
 800c0b8:	444f      	add	r7, r9
 800c0ba:	edc2 1a00 	vstr	s3, [r2]
 800c0be:	ed82 7a01 	vstr	s14, [r2, #4]
 800c0c2:	4448      	add	r0, r9
 800c0c4:	ed85 8a00 	vstr	s16, [r5]
 800c0c8:	ed85 0a01 	vstr	s0, [r5, #4]
 800c0cc:	444a      	add	r2, r9
 800c0ce:	edc1 4a00 	vstr	s9, [r1]
 800c0d2:	444d      	add	r5, r9
 800c0d4:	ed81 3a01 	vstr	s6, [r1, #4]
 800c0d8:	edc4 8a00 	vstr	s17, [r4]
 800c0dc:	ed84 6a01 	vstr	s12, [r4, #4]
 800c0e0:	4449      	add	r1, r9
 800c0e2:	444c      	add	r4, r9
 800c0e4:	f63f aeea 	bhi.w	800bebc <arm_radix8_butterfly_f32+0x318>
 800c0e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c0ea:	3308      	adds	r3, #8
 800c0ec:	930a      	str	r3, [sp, #40]	@ 0x28
 800c0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0f0:	3308      	adds	r3, #8
 800c0f2:	9309      	str	r3, [sp, #36]	@ 0x24
 800c0f4:	9b08      	ldr	r3, [sp, #32]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	9308      	str	r3, [sp, #32]
 800c0fa:	9b07      	ldr	r3, [sp, #28]
 800c0fc:	3308      	adds	r3, #8
 800c0fe:	9307      	str	r3, [sp, #28]
 800c100:	9b06      	ldr	r3, [sp, #24]
 800c102:	3308      	adds	r3, #8
 800c104:	9306      	str	r3, [sp, #24]
 800c106:	9b05      	ldr	r3, [sp, #20]
 800c108:	3308      	adds	r3, #8
 800c10a:	9305      	str	r3, [sp, #20]
 800c10c:	9b04      	ldr	r3, [sp, #16]
 800c10e:	3308      	adds	r3, #8
 800c110:	9304      	str	r3, [sp, #16]
 800c112:	9b03      	ldr	r3, [sp, #12]
 800c114:	3308      	adds	r3, #8
 800c116:	9303      	str	r3, [sp, #12]
 800c118:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c11a:	f108 0801 	add.w	r8, r8, #1
 800c11e:	4543      	cmp	r3, r8
 800c120:	f47f ae72 	bne.w	800be08 <arm_radix8_butterfly_f32+0x264>
 800c124:	469b      	mov	fp, r3
 800c126:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c128:	00db      	lsls	r3, r3, #3
 800c12a:	b29b      	uxth	r3, r3
 800c12c:	46d1      	mov	r9, sl
 800c12e:	930e      	str	r3, [sp, #56]	@ 0x38
 800c130:	e547      	b.n	800bbc2 <arm_radix8_butterfly_f32+0x1e>
 800c132:	b013      	add	sp, #76	@ 0x4c
 800c134:	ecbd 8b10 	vpop	{d8-d15}
 800c138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c13c <__cvt>:
 800c13c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c140:	ec57 6b10 	vmov	r6, r7, d0
 800c144:	2f00      	cmp	r7, #0
 800c146:	460c      	mov	r4, r1
 800c148:	4619      	mov	r1, r3
 800c14a:	463b      	mov	r3, r7
 800c14c:	bfbb      	ittet	lt
 800c14e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c152:	461f      	movlt	r7, r3
 800c154:	2300      	movge	r3, #0
 800c156:	232d      	movlt	r3, #45	@ 0x2d
 800c158:	700b      	strb	r3, [r1, #0]
 800c15a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c15c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c160:	4691      	mov	r9, r2
 800c162:	f023 0820 	bic.w	r8, r3, #32
 800c166:	bfbc      	itt	lt
 800c168:	4632      	movlt	r2, r6
 800c16a:	4616      	movlt	r6, r2
 800c16c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c170:	d005      	beq.n	800c17e <__cvt+0x42>
 800c172:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c176:	d100      	bne.n	800c17a <__cvt+0x3e>
 800c178:	3401      	adds	r4, #1
 800c17a:	2102      	movs	r1, #2
 800c17c:	e000      	b.n	800c180 <__cvt+0x44>
 800c17e:	2103      	movs	r1, #3
 800c180:	ab03      	add	r3, sp, #12
 800c182:	9301      	str	r3, [sp, #4]
 800c184:	ab02      	add	r3, sp, #8
 800c186:	9300      	str	r3, [sp, #0]
 800c188:	ec47 6b10 	vmov	d0, r6, r7
 800c18c:	4653      	mov	r3, sl
 800c18e:	4622      	mov	r2, r4
 800c190:	f000 feda 	bl	800cf48 <_dtoa_r>
 800c194:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c198:	4605      	mov	r5, r0
 800c19a:	d119      	bne.n	800c1d0 <__cvt+0x94>
 800c19c:	f019 0f01 	tst.w	r9, #1
 800c1a0:	d00e      	beq.n	800c1c0 <__cvt+0x84>
 800c1a2:	eb00 0904 	add.w	r9, r0, r4
 800c1a6:	2200      	movs	r2, #0
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	4630      	mov	r0, r6
 800c1ac:	4639      	mov	r1, r7
 800c1ae:	f7f4 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1b2:	b108      	cbz	r0, 800c1b8 <__cvt+0x7c>
 800c1b4:	f8cd 900c 	str.w	r9, [sp, #12]
 800c1b8:	2230      	movs	r2, #48	@ 0x30
 800c1ba:	9b03      	ldr	r3, [sp, #12]
 800c1bc:	454b      	cmp	r3, r9
 800c1be:	d31e      	bcc.n	800c1fe <__cvt+0xc2>
 800c1c0:	9b03      	ldr	r3, [sp, #12]
 800c1c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c1c4:	1b5b      	subs	r3, r3, r5
 800c1c6:	4628      	mov	r0, r5
 800c1c8:	6013      	str	r3, [r2, #0]
 800c1ca:	b004      	add	sp, #16
 800c1cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c1d0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c1d4:	eb00 0904 	add.w	r9, r0, r4
 800c1d8:	d1e5      	bne.n	800c1a6 <__cvt+0x6a>
 800c1da:	7803      	ldrb	r3, [r0, #0]
 800c1dc:	2b30      	cmp	r3, #48	@ 0x30
 800c1de:	d10a      	bne.n	800c1f6 <__cvt+0xba>
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	4630      	mov	r0, r6
 800c1e6:	4639      	mov	r1, r7
 800c1e8:	f7f4 fc6e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1ec:	b918      	cbnz	r0, 800c1f6 <__cvt+0xba>
 800c1ee:	f1c4 0401 	rsb	r4, r4, #1
 800c1f2:	f8ca 4000 	str.w	r4, [sl]
 800c1f6:	f8da 3000 	ldr.w	r3, [sl]
 800c1fa:	4499      	add	r9, r3
 800c1fc:	e7d3      	b.n	800c1a6 <__cvt+0x6a>
 800c1fe:	1c59      	adds	r1, r3, #1
 800c200:	9103      	str	r1, [sp, #12]
 800c202:	701a      	strb	r2, [r3, #0]
 800c204:	e7d9      	b.n	800c1ba <__cvt+0x7e>

0800c206 <__exponent>:
 800c206:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c208:	2900      	cmp	r1, #0
 800c20a:	bfba      	itte	lt
 800c20c:	4249      	neglt	r1, r1
 800c20e:	232d      	movlt	r3, #45	@ 0x2d
 800c210:	232b      	movge	r3, #43	@ 0x2b
 800c212:	2909      	cmp	r1, #9
 800c214:	7002      	strb	r2, [r0, #0]
 800c216:	7043      	strb	r3, [r0, #1]
 800c218:	dd29      	ble.n	800c26e <__exponent+0x68>
 800c21a:	f10d 0307 	add.w	r3, sp, #7
 800c21e:	461d      	mov	r5, r3
 800c220:	270a      	movs	r7, #10
 800c222:	461a      	mov	r2, r3
 800c224:	fbb1 f6f7 	udiv	r6, r1, r7
 800c228:	fb07 1416 	mls	r4, r7, r6, r1
 800c22c:	3430      	adds	r4, #48	@ 0x30
 800c22e:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c232:	460c      	mov	r4, r1
 800c234:	2c63      	cmp	r4, #99	@ 0x63
 800c236:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800c23a:	4631      	mov	r1, r6
 800c23c:	dcf1      	bgt.n	800c222 <__exponent+0x1c>
 800c23e:	3130      	adds	r1, #48	@ 0x30
 800c240:	1e94      	subs	r4, r2, #2
 800c242:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c246:	1c41      	adds	r1, r0, #1
 800c248:	4623      	mov	r3, r4
 800c24a:	42ab      	cmp	r3, r5
 800c24c:	d30a      	bcc.n	800c264 <__exponent+0x5e>
 800c24e:	f10d 0309 	add.w	r3, sp, #9
 800c252:	1a9b      	subs	r3, r3, r2
 800c254:	42ac      	cmp	r4, r5
 800c256:	bf88      	it	hi
 800c258:	2300      	movhi	r3, #0
 800c25a:	3302      	adds	r3, #2
 800c25c:	4403      	add	r3, r0
 800c25e:	1a18      	subs	r0, r3, r0
 800c260:	b003      	add	sp, #12
 800c262:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c264:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c268:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c26c:	e7ed      	b.n	800c24a <__exponent+0x44>
 800c26e:	2330      	movs	r3, #48	@ 0x30
 800c270:	3130      	adds	r1, #48	@ 0x30
 800c272:	7083      	strb	r3, [r0, #2]
 800c274:	70c1      	strb	r1, [r0, #3]
 800c276:	1d03      	adds	r3, r0, #4
 800c278:	e7f1      	b.n	800c25e <__exponent+0x58>
	...

0800c27c <_printf_float>:
 800c27c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c280:	b08d      	sub	sp, #52	@ 0x34
 800c282:	460c      	mov	r4, r1
 800c284:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c288:	4616      	mov	r6, r2
 800c28a:	461f      	mov	r7, r3
 800c28c:	4605      	mov	r5, r0
 800c28e:	f000 fcef 	bl	800cc70 <_localeconv_r>
 800c292:	6803      	ldr	r3, [r0, #0]
 800c294:	9304      	str	r3, [sp, #16]
 800c296:	4618      	mov	r0, r3
 800c298:	f7f3 ffea 	bl	8000270 <strlen>
 800c29c:	2300      	movs	r3, #0
 800c29e:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2a0:	f8d8 3000 	ldr.w	r3, [r8]
 800c2a4:	9005      	str	r0, [sp, #20]
 800c2a6:	3307      	adds	r3, #7
 800c2a8:	f023 0307 	bic.w	r3, r3, #7
 800c2ac:	f103 0208 	add.w	r2, r3, #8
 800c2b0:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c2b4:	f8d4 b000 	ldr.w	fp, [r4]
 800c2b8:	f8c8 2000 	str.w	r2, [r8]
 800c2bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c2c0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c2c4:	9307      	str	r3, [sp, #28]
 800c2c6:	f8cd 8018 	str.w	r8, [sp, #24]
 800c2ca:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c2ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2d2:	4b9c      	ldr	r3, [pc, #624]	@ (800c544 <_printf_float+0x2c8>)
 800c2d4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2d8:	f7f4 fc28 	bl	8000b2c <__aeabi_dcmpun>
 800c2dc:	bb70      	cbnz	r0, 800c33c <_printf_float+0xc0>
 800c2de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c2e2:	4b98      	ldr	r3, [pc, #608]	@ (800c544 <_printf_float+0x2c8>)
 800c2e4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800c2e8:	f7f4 fc02 	bl	8000af0 <__aeabi_dcmple>
 800c2ec:	bb30      	cbnz	r0, 800c33c <_printf_float+0xc0>
 800c2ee:	2200      	movs	r2, #0
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	4640      	mov	r0, r8
 800c2f4:	4649      	mov	r1, r9
 800c2f6:	f7f4 fbf1 	bl	8000adc <__aeabi_dcmplt>
 800c2fa:	b110      	cbz	r0, 800c302 <_printf_float+0x86>
 800c2fc:	232d      	movs	r3, #45	@ 0x2d
 800c2fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c302:	4a91      	ldr	r2, [pc, #580]	@ (800c548 <_printf_float+0x2cc>)
 800c304:	4b91      	ldr	r3, [pc, #580]	@ (800c54c <_printf_float+0x2d0>)
 800c306:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c30a:	bf8c      	ite	hi
 800c30c:	4690      	movhi	r8, r2
 800c30e:	4698      	movls	r8, r3
 800c310:	2303      	movs	r3, #3
 800c312:	6123      	str	r3, [r4, #16]
 800c314:	f02b 0304 	bic.w	r3, fp, #4
 800c318:	6023      	str	r3, [r4, #0]
 800c31a:	f04f 0900 	mov.w	r9, #0
 800c31e:	9700      	str	r7, [sp, #0]
 800c320:	4633      	mov	r3, r6
 800c322:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c324:	4621      	mov	r1, r4
 800c326:	4628      	mov	r0, r5
 800c328:	f000 f9d2 	bl	800c6d0 <_printf_common>
 800c32c:	3001      	adds	r0, #1
 800c32e:	f040 808d 	bne.w	800c44c <_printf_float+0x1d0>
 800c332:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c336:	b00d      	add	sp, #52	@ 0x34
 800c338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c33c:	4642      	mov	r2, r8
 800c33e:	464b      	mov	r3, r9
 800c340:	4640      	mov	r0, r8
 800c342:	4649      	mov	r1, r9
 800c344:	f7f4 fbf2 	bl	8000b2c <__aeabi_dcmpun>
 800c348:	b140      	cbz	r0, 800c35c <_printf_float+0xe0>
 800c34a:	464b      	mov	r3, r9
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	bfbc      	itt	lt
 800c350:	232d      	movlt	r3, #45	@ 0x2d
 800c352:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c356:	4a7e      	ldr	r2, [pc, #504]	@ (800c550 <_printf_float+0x2d4>)
 800c358:	4b7e      	ldr	r3, [pc, #504]	@ (800c554 <_printf_float+0x2d8>)
 800c35a:	e7d4      	b.n	800c306 <_printf_float+0x8a>
 800c35c:	6863      	ldr	r3, [r4, #4]
 800c35e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c362:	9206      	str	r2, [sp, #24]
 800c364:	1c5a      	adds	r2, r3, #1
 800c366:	d13b      	bne.n	800c3e0 <_printf_float+0x164>
 800c368:	2306      	movs	r3, #6
 800c36a:	6063      	str	r3, [r4, #4]
 800c36c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c370:	2300      	movs	r3, #0
 800c372:	6022      	str	r2, [r4, #0]
 800c374:	9303      	str	r3, [sp, #12]
 800c376:	ab0a      	add	r3, sp, #40	@ 0x28
 800c378:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c37c:	ab09      	add	r3, sp, #36	@ 0x24
 800c37e:	9300      	str	r3, [sp, #0]
 800c380:	6861      	ldr	r1, [r4, #4]
 800c382:	ec49 8b10 	vmov	d0, r8, r9
 800c386:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c38a:	4628      	mov	r0, r5
 800c38c:	f7ff fed6 	bl	800c13c <__cvt>
 800c390:	9b06      	ldr	r3, [sp, #24]
 800c392:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c394:	2b47      	cmp	r3, #71	@ 0x47
 800c396:	4680      	mov	r8, r0
 800c398:	d129      	bne.n	800c3ee <_printf_float+0x172>
 800c39a:	1cc8      	adds	r0, r1, #3
 800c39c:	db02      	blt.n	800c3a4 <_printf_float+0x128>
 800c39e:	6863      	ldr	r3, [r4, #4]
 800c3a0:	4299      	cmp	r1, r3
 800c3a2:	dd41      	ble.n	800c428 <_printf_float+0x1ac>
 800c3a4:	f1aa 0a02 	sub.w	sl, sl, #2
 800c3a8:	fa5f fa8a 	uxtb.w	sl, sl
 800c3ac:	3901      	subs	r1, #1
 800c3ae:	4652      	mov	r2, sl
 800c3b0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c3b4:	9109      	str	r1, [sp, #36]	@ 0x24
 800c3b6:	f7ff ff26 	bl	800c206 <__exponent>
 800c3ba:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3bc:	1813      	adds	r3, r2, r0
 800c3be:	2a01      	cmp	r2, #1
 800c3c0:	4681      	mov	r9, r0
 800c3c2:	6123      	str	r3, [r4, #16]
 800c3c4:	dc02      	bgt.n	800c3cc <_printf_float+0x150>
 800c3c6:	6822      	ldr	r2, [r4, #0]
 800c3c8:	07d2      	lsls	r2, r2, #31
 800c3ca:	d501      	bpl.n	800c3d0 <_printf_float+0x154>
 800c3cc:	3301      	adds	r3, #1
 800c3ce:	6123      	str	r3, [r4, #16]
 800c3d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c3d4:	2b00      	cmp	r3, #0
 800c3d6:	d0a2      	beq.n	800c31e <_printf_float+0xa2>
 800c3d8:	232d      	movs	r3, #45	@ 0x2d
 800c3da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c3de:	e79e      	b.n	800c31e <_printf_float+0xa2>
 800c3e0:	9a06      	ldr	r2, [sp, #24]
 800c3e2:	2a47      	cmp	r2, #71	@ 0x47
 800c3e4:	d1c2      	bne.n	800c36c <_printf_float+0xf0>
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d1c0      	bne.n	800c36c <_printf_float+0xf0>
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e7bd      	b.n	800c36a <_printf_float+0xee>
 800c3ee:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c3f2:	d9db      	bls.n	800c3ac <_printf_float+0x130>
 800c3f4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c3f8:	d118      	bne.n	800c42c <_printf_float+0x1b0>
 800c3fa:	2900      	cmp	r1, #0
 800c3fc:	6863      	ldr	r3, [r4, #4]
 800c3fe:	dd0b      	ble.n	800c418 <_printf_float+0x19c>
 800c400:	6121      	str	r1, [r4, #16]
 800c402:	b913      	cbnz	r3, 800c40a <_printf_float+0x18e>
 800c404:	6822      	ldr	r2, [r4, #0]
 800c406:	07d0      	lsls	r0, r2, #31
 800c408:	d502      	bpl.n	800c410 <_printf_float+0x194>
 800c40a:	3301      	adds	r3, #1
 800c40c:	440b      	add	r3, r1
 800c40e:	6123      	str	r3, [r4, #16]
 800c410:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c412:	f04f 0900 	mov.w	r9, #0
 800c416:	e7db      	b.n	800c3d0 <_printf_float+0x154>
 800c418:	b913      	cbnz	r3, 800c420 <_printf_float+0x1a4>
 800c41a:	6822      	ldr	r2, [r4, #0]
 800c41c:	07d2      	lsls	r2, r2, #31
 800c41e:	d501      	bpl.n	800c424 <_printf_float+0x1a8>
 800c420:	3302      	adds	r3, #2
 800c422:	e7f4      	b.n	800c40e <_printf_float+0x192>
 800c424:	2301      	movs	r3, #1
 800c426:	e7f2      	b.n	800c40e <_printf_float+0x192>
 800c428:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c42c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c42e:	4299      	cmp	r1, r3
 800c430:	db05      	blt.n	800c43e <_printf_float+0x1c2>
 800c432:	6823      	ldr	r3, [r4, #0]
 800c434:	6121      	str	r1, [r4, #16]
 800c436:	07d8      	lsls	r0, r3, #31
 800c438:	d5ea      	bpl.n	800c410 <_printf_float+0x194>
 800c43a:	1c4b      	adds	r3, r1, #1
 800c43c:	e7e7      	b.n	800c40e <_printf_float+0x192>
 800c43e:	2900      	cmp	r1, #0
 800c440:	bfd4      	ite	le
 800c442:	f1c1 0202 	rsble	r2, r1, #2
 800c446:	2201      	movgt	r2, #1
 800c448:	4413      	add	r3, r2
 800c44a:	e7e0      	b.n	800c40e <_printf_float+0x192>
 800c44c:	6823      	ldr	r3, [r4, #0]
 800c44e:	055a      	lsls	r2, r3, #21
 800c450:	d407      	bmi.n	800c462 <_printf_float+0x1e6>
 800c452:	6923      	ldr	r3, [r4, #16]
 800c454:	4642      	mov	r2, r8
 800c456:	4631      	mov	r1, r6
 800c458:	4628      	mov	r0, r5
 800c45a:	47b8      	blx	r7
 800c45c:	3001      	adds	r0, #1
 800c45e:	d12b      	bne.n	800c4b8 <_printf_float+0x23c>
 800c460:	e767      	b.n	800c332 <_printf_float+0xb6>
 800c462:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c466:	f240 80dd 	bls.w	800c624 <_printf_float+0x3a8>
 800c46a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c46e:	2200      	movs	r2, #0
 800c470:	2300      	movs	r3, #0
 800c472:	f7f4 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 800c476:	2800      	cmp	r0, #0
 800c478:	d033      	beq.n	800c4e2 <_printf_float+0x266>
 800c47a:	4a37      	ldr	r2, [pc, #220]	@ (800c558 <_printf_float+0x2dc>)
 800c47c:	2301      	movs	r3, #1
 800c47e:	4631      	mov	r1, r6
 800c480:	4628      	mov	r0, r5
 800c482:	47b8      	blx	r7
 800c484:	3001      	adds	r0, #1
 800c486:	f43f af54 	beq.w	800c332 <_printf_float+0xb6>
 800c48a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c48e:	4543      	cmp	r3, r8
 800c490:	db02      	blt.n	800c498 <_printf_float+0x21c>
 800c492:	6823      	ldr	r3, [r4, #0]
 800c494:	07d8      	lsls	r0, r3, #31
 800c496:	d50f      	bpl.n	800c4b8 <_printf_float+0x23c>
 800c498:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c49c:	4631      	mov	r1, r6
 800c49e:	4628      	mov	r0, r5
 800c4a0:	47b8      	blx	r7
 800c4a2:	3001      	adds	r0, #1
 800c4a4:	f43f af45 	beq.w	800c332 <_printf_float+0xb6>
 800c4a8:	f04f 0900 	mov.w	r9, #0
 800c4ac:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800c4b0:	f104 0a1a 	add.w	sl, r4, #26
 800c4b4:	45c8      	cmp	r8, r9
 800c4b6:	dc09      	bgt.n	800c4cc <_printf_float+0x250>
 800c4b8:	6823      	ldr	r3, [r4, #0]
 800c4ba:	079b      	lsls	r3, r3, #30
 800c4bc:	f100 8103 	bmi.w	800c6c6 <_printf_float+0x44a>
 800c4c0:	68e0      	ldr	r0, [r4, #12]
 800c4c2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c4c4:	4298      	cmp	r0, r3
 800c4c6:	bfb8      	it	lt
 800c4c8:	4618      	movlt	r0, r3
 800c4ca:	e734      	b.n	800c336 <_printf_float+0xba>
 800c4cc:	2301      	movs	r3, #1
 800c4ce:	4652      	mov	r2, sl
 800c4d0:	4631      	mov	r1, r6
 800c4d2:	4628      	mov	r0, r5
 800c4d4:	47b8      	blx	r7
 800c4d6:	3001      	adds	r0, #1
 800c4d8:	f43f af2b 	beq.w	800c332 <_printf_float+0xb6>
 800c4dc:	f109 0901 	add.w	r9, r9, #1
 800c4e0:	e7e8      	b.n	800c4b4 <_printf_float+0x238>
 800c4e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4e4:	2b00      	cmp	r3, #0
 800c4e6:	dc39      	bgt.n	800c55c <_printf_float+0x2e0>
 800c4e8:	4a1b      	ldr	r2, [pc, #108]	@ (800c558 <_printf_float+0x2dc>)
 800c4ea:	2301      	movs	r3, #1
 800c4ec:	4631      	mov	r1, r6
 800c4ee:	4628      	mov	r0, r5
 800c4f0:	47b8      	blx	r7
 800c4f2:	3001      	adds	r0, #1
 800c4f4:	f43f af1d 	beq.w	800c332 <_printf_float+0xb6>
 800c4f8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c4fc:	ea59 0303 	orrs.w	r3, r9, r3
 800c500:	d102      	bne.n	800c508 <_printf_float+0x28c>
 800c502:	6823      	ldr	r3, [r4, #0]
 800c504:	07d9      	lsls	r1, r3, #31
 800c506:	d5d7      	bpl.n	800c4b8 <_printf_float+0x23c>
 800c508:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c50c:	4631      	mov	r1, r6
 800c50e:	4628      	mov	r0, r5
 800c510:	47b8      	blx	r7
 800c512:	3001      	adds	r0, #1
 800c514:	f43f af0d 	beq.w	800c332 <_printf_float+0xb6>
 800c518:	f04f 0a00 	mov.w	sl, #0
 800c51c:	f104 0b1a 	add.w	fp, r4, #26
 800c520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c522:	425b      	negs	r3, r3
 800c524:	4553      	cmp	r3, sl
 800c526:	dc01      	bgt.n	800c52c <_printf_float+0x2b0>
 800c528:	464b      	mov	r3, r9
 800c52a:	e793      	b.n	800c454 <_printf_float+0x1d8>
 800c52c:	2301      	movs	r3, #1
 800c52e:	465a      	mov	r2, fp
 800c530:	4631      	mov	r1, r6
 800c532:	4628      	mov	r0, r5
 800c534:	47b8      	blx	r7
 800c536:	3001      	adds	r0, #1
 800c538:	f43f aefb 	beq.w	800c332 <_printf_float+0xb6>
 800c53c:	f10a 0a01 	add.w	sl, sl, #1
 800c540:	e7ee      	b.n	800c520 <_printf_float+0x2a4>
 800c542:	bf00      	nop
 800c544:	7fefffff 	.word	0x7fefffff
 800c548:	0802e120 	.word	0x0802e120
 800c54c:	0802e11c 	.word	0x0802e11c
 800c550:	0802e128 	.word	0x0802e128
 800c554:	0802e124 	.word	0x0802e124
 800c558:	0802e12c 	.word	0x0802e12c
 800c55c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c55e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c562:	4553      	cmp	r3, sl
 800c564:	bfa8      	it	ge
 800c566:	4653      	movge	r3, sl
 800c568:	2b00      	cmp	r3, #0
 800c56a:	4699      	mov	r9, r3
 800c56c:	dc36      	bgt.n	800c5dc <_printf_float+0x360>
 800c56e:	f04f 0b00 	mov.w	fp, #0
 800c572:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c576:	f104 021a 	add.w	r2, r4, #26
 800c57a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c57c:	9306      	str	r3, [sp, #24]
 800c57e:	eba3 0309 	sub.w	r3, r3, r9
 800c582:	455b      	cmp	r3, fp
 800c584:	dc31      	bgt.n	800c5ea <_printf_float+0x36e>
 800c586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c588:	459a      	cmp	sl, r3
 800c58a:	dc3a      	bgt.n	800c602 <_printf_float+0x386>
 800c58c:	6823      	ldr	r3, [r4, #0]
 800c58e:	07da      	lsls	r2, r3, #31
 800c590:	d437      	bmi.n	800c602 <_printf_float+0x386>
 800c592:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c594:	ebaa 0903 	sub.w	r9, sl, r3
 800c598:	9b06      	ldr	r3, [sp, #24]
 800c59a:	ebaa 0303 	sub.w	r3, sl, r3
 800c59e:	4599      	cmp	r9, r3
 800c5a0:	bfa8      	it	ge
 800c5a2:	4699      	movge	r9, r3
 800c5a4:	f1b9 0f00 	cmp.w	r9, #0
 800c5a8:	dc33      	bgt.n	800c612 <_printf_float+0x396>
 800c5aa:	f04f 0800 	mov.w	r8, #0
 800c5ae:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c5b2:	f104 0b1a 	add.w	fp, r4, #26
 800c5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5b8:	ebaa 0303 	sub.w	r3, sl, r3
 800c5bc:	eba3 0309 	sub.w	r3, r3, r9
 800c5c0:	4543      	cmp	r3, r8
 800c5c2:	f77f af79 	ble.w	800c4b8 <_printf_float+0x23c>
 800c5c6:	2301      	movs	r3, #1
 800c5c8:	465a      	mov	r2, fp
 800c5ca:	4631      	mov	r1, r6
 800c5cc:	4628      	mov	r0, r5
 800c5ce:	47b8      	blx	r7
 800c5d0:	3001      	adds	r0, #1
 800c5d2:	f43f aeae 	beq.w	800c332 <_printf_float+0xb6>
 800c5d6:	f108 0801 	add.w	r8, r8, #1
 800c5da:	e7ec      	b.n	800c5b6 <_printf_float+0x33a>
 800c5dc:	4642      	mov	r2, r8
 800c5de:	4631      	mov	r1, r6
 800c5e0:	4628      	mov	r0, r5
 800c5e2:	47b8      	blx	r7
 800c5e4:	3001      	adds	r0, #1
 800c5e6:	d1c2      	bne.n	800c56e <_printf_float+0x2f2>
 800c5e8:	e6a3      	b.n	800c332 <_printf_float+0xb6>
 800c5ea:	2301      	movs	r3, #1
 800c5ec:	4631      	mov	r1, r6
 800c5ee:	4628      	mov	r0, r5
 800c5f0:	9206      	str	r2, [sp, #24]
 800c5f2:	47b8      	blx	r7
 800c5f4:	3001      	adds	r0, #1
 800c5f6:	f43f ae9c 	beq.w	800c332 <_printf_float+0xb6>
 800c5fa:	9a06      	ldr	r2, [sp, #24]
 800c5fc:	f10b 0b01 	add.w	fp, fp, #1
 800c600:	e7bb      	b.n	800c57a <_printf_float+0x2fe>
 800c602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c606:	4631      	mov	r1, r6
 800c608:	4628      	mov	r0, r5
 800c60a:	47b8      	blx	r7
 800c60c:	3001      	adds	r0, #1
 800c60e:	d1c0      	bne.n	800c592 <_printf_float+0x316>
 800c610:	e68f      	b.n	800c332 <_printf_float+0xb6>
 800c612:	9a06      	ldr	r2, [sp, #24]
 800c614:	464b      	mov	r3, r9
 800c616:	4442      	add	r2, r8
 800c618:	4631      	mov	r1, r6
 800c61a:	4628      	mov	r0, r5
 800c61c:	47b8      	blx	r7
 800c61e:	3001      	adds	r0, #1
 800c620:	d1c3      	bne.n	800c5aa <_printf_float+0x32e>
 800c622:	e686      	b.n	800c332 <_printf_float+0xb6>
 800c624:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c628:	f1ba 0f01 	cmp.w	sl, #1
 800c62c:	dc01      	bgt.n	800c632 <_printf_float+0x3b6>
 800c62e:	07db      	lsls	r3, r3, #31
 800c630:	d536      	bpl.n	800c6a0 <_printf_float+0x424>
 800c632:	2301      	movs	r3, #1
 800c634:	4642      	mov	r2, r8
 800c636:	4631      	mov	r1, r6
 800c638:	4628      	mov	r0, r5
 800c63a:	47b8      	blx	r7
 800c63c:	3001      	adds	r0, #1
 800c63e:	f43f ae78 	beq.w	800c332 <_printf_float+0xb6>
 800c642:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c646:	4631      	mov	r1, r6
 800c648:	4628      	mov	r0, r5
 800c64a:	47b8      	blx	r7
 800c64c:	3001      	adds	r0, #1
 800c64e:	f43f ae70 	beq.w	800c332 <_printf_float+0xb6>
 800c652:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c656:	2200      	movs	r2, #0
 800c658:	2300      	movs	r3, #0
 800c65a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800c65e:	f7f4 fa33 	bl	8000ac8 <__aeabi_dcmpeq>
 800c662:	b9c0      	cbnz	r0, 800c696 <_printf_float+0x41a>
 800c664:	4653      	mov	r3, sl
 800c666:	f108 0201 	add.w	r2, r8, #1
 800c66a:	4631      	mov	r1, r6
 800c66c:	4628      	mov	r0, r5
 800c66e:	47b8      	blx	r7
 800c670:	3001      	adds	r0, #1
 800c672:	d10c      	bne.n	800c68e <_printf_float+0x412>
 800c674:	e65d      	b.n	800c332 <_printf_float+0xb6>
 800c676:	2301      	movs	r3, #1
 800c678:	465a      	mov	r2, fp
 800c67a:	4631      	mov	r1, r6
 800c67c:	4628      	mov	r0, r5
 800c67e:	47b8      	blx	r7
 800c680:	3001      	adds	r0, #1
 800c682:	f43f ae56 	beq.w	800c332 <_printf_float+0xb6>
 800c686:	f108 0801 	add.w	r8, r8, #1
 800c68a:	45d0      	cmp	r8, sl
 800c68c:	dbf3      	blt.n	800c676 <_printf_float+0x3fa>
 800c68e:	464b      	mov	r3, r9
 800c690:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c694:	e6df      	b.n	800c456 <_printf_float+0x1da>
 800c696:	f04f 0800 	mov.w	r8, #0
 800c69a:	f104 0b1a 	add.w	fp, r4, #26
 800c69e:	e7f4      	b.n	800c68a <_printf_float+0x40e>
 800c6a0:	2301      	movs	r3, #1
 800c6a2:	4642      	mov	r2, r8
 800c6a4:	e7e1      	b.n	800c66a <_printf_float+0x3ee>
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	464a      	mov	r2, r9
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	f43f ae3e 	beq.w	800c332 <_printf_float+0xb6>
 800c6b6:	f108 0801 	add.w	r8, r8, #1
 800c6ba:	68e3      	ldr	r3, [r4, #12]
 800c6bc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c6be:	1a5b      	subs	r3, r3, r1
 800c6c0:	4543      	cmp	r3, r8
 800c6c2:	dcf0      	bgt.n	800c6a6 <_printf_float+0x42a>
 800c6c4:	e6fc      	b.n	800c4c0 <_printf_float+0x244>
 800c6c6:	f04f 0800 	mov.w	r8, #0
 800c6ca:	f104 0919 	add.w	r9, r4, #25
 800c6ce:	e7f4      	b.n	800c6ba <_printf_float+0x43e>

0800c6d0 <_printf_common>:
 800c6d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6d4:	4616      	mov	r6, r2
 800c6d6:	4698      	mov	r8, r3
 800c6d8:	688a      	ldr	r2, [r1, #8]
 800c6da:	690b      	ldr	r3, [r1, #16]
 800c6dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c6e0:	4293      	cmp	r3, r2
 800c6e2:	bfb8      	it	lt
 800c6e4:	4613      	movlt	r3, r2
 800c6e6:	6033      	str	r3, [r6, #0]
 800c6e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c6ec:	4607      	mov	r7, r0
 800c6ee:	460c      	mov	r4, r1
 800c6f0:	b10a      	cbz	r2, 800c6f6 <_printf_common+0x26>
 800c6f2:	3301      	adds	r3, #1
 800c6f4:	6033      	str	r3, [r6, #0]
 800c6f6:	6823      	ldr	r3, [r4, #0]
 800c6f8:	0699      	lsls	r1, r3, #26
 800c6fa:	bf42      	ittt	mi
 800c6fc:	6833      	ldrmi	r3, [r6, #0]
 800c6fe:	3302      	addmi	r3, #2
 800c700:	6033      	strmi	r3, [r6, #0]
 800c702:	6825      	ldr	r5, [r4, #0]
 800c704:	f015 0506 	ands.w	r5, r5, #6
 800c708:	d106      	bne.n	800c718 <_printf_common+0x48>
 800c70a:	f104 0a19 	add.w	sl, r4, #25
 800c70e:	68e3      	ldr	r3, [r4, #12]
 800c710:	6832      	ldr	r2, [r6, #0]
 800c712:	1a9b      	subs	r3, r3, r2
 800c714:	42ab      	cmp	r3, r5
 800c716:	dc26      	bgt.n	800c766 <_printf_common+0x96>
 800c718:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c71c:	6822      	ldr	r2, [r4, #0]
 800c71e:	3b00      	subs	r3, #0
 800c720:	bf18      	it	ne
 800c722:	2301      	movne	r3, #1
 800c724:	0692      	lsls	r2, r2, #26
 800c726:	d42b      	bmi.n	800c780 <_printf_common+0xb0>
 800c728:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c72c:	4641      	mov	r1, r8
 800c72e:	4638      	mov	r0, r7
 800c730:	47c8      	blx	r9
 800c732:	3001      	adds	r0, #1
 800c734:	d01e      	beq.n	800c774 <_printf_common+0xa4>
 800c736:	6823      	ldr	r3, [r4, #0]
 800c738:	6922      	ldr	r2, [r4, #16]
 800c73a:	f003 0306 	and.w	r3, r3, #6
 800c73e:	2b04      	cmp	r3, #4
 800c740:	bf02      	ittt	eq
 800c742:	68e5      	ldreq	r5, [r4, #12]
 800c744:	6833      	ldreq	r3, [r6, #0]
 800c746:	1aed      	subeq	r5, r5, r3
 800c748:	68a3      	ldr	r3, [r4, #8]
 800c74a:	bf0c      	ite	eq
 800c74c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c750:	2500      	movne	r5, #0
 800c752:	4293      	cmp	r3, r2
 800c754:	bfc4      	itt	gt
 800c756:	1a9b      	subgt	r3, r3, r2
 800c758:	18ed      	addgt	r5, r5, r3
 800c75a:	2600      	movs	r6, #0
 800c75c:	341a      	adds	r4, #26
 800c75e:	42b5      	cmp	r5, r6
 800c760:	d11a      	bne.n	800c798 <_printf_common+0xc8>
 800c762:	2000      	movs	r0, #0
 800c764:	e008      	b.n	800c778 <_printf_common+0xa8>
 800c766:	2301      	movs	r3, #1
 800c768:	4652      	mov	r2, sl
 800c76a:	4641      	mov	r1, r8
 800c76c:	4638      	mov	r0, r7
 800c76e:	47c8      	blx	r9
 800c770:	3001      	adds	r0, #1
 800c772:	d103      	bne.n	800c77c <_printf_common+0xac>
 800c774:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c77c:	3501      	adds	r5, #1
 800c77e:	e7c6      	b.n	800c70e <_printf_common+0x3e>
 800c780:	18e1      	adds	r1, r4, r3
 800c782:	1c5a      	adds	r2, r3, #1
 800c784:	2030      	movs	r0, #48	@ 0x30
 800c786:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c78a:	4422      	add	r2, r4
 800c78c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c790:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c794:	3302      	adds	r3, #2
 800c796:	e7c7      	b.n	800c728 <_printf_common+0x58>
 800c798:	2301      	movs	r3, #1
 800c79a:	4622      	mov	r2, r4
 800c79c:	4641      	mov	r1, r8
 800c79e:	4638      	mov	r0, r7
 800c7a0:	47c8      	blx	r9
 800c7a2:	3001      	adds	r0, #1
 800c7a4:	d0e6      	beq.n	800c774 <_printf_common+0xa4>
 800c7a6:	3601      	adds	r6, #1
 800c7a8:	e7d9      	b.n	800c75e <_printf_common+0x8e>
	...

0800c7ac <_printf_i>:
 800c7ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c7b0:	7e0f      	ldrb	r7, [r1, #24]
 800c7b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c7b4:	2f78      	cmp	r7, #120	@ 0x78
 800c7b6:	4691      	mov	r9, r2
 800c7b8:	4680      	mov	r8, r0
 800c7ba:	460c      	mov	r4, r1
 800c7bc:	469a      	mov	sl, r3
 800c7be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c7c2:	d807      	bhi.n	800c7d4 <_printf_i+0x28>
 800c7c4:	2f62      	cmp	r7, #98	@ 0x62
 800c7c6:	d80a      	bhi.n	800c7de <_printf_i+0x32>
 800c7c8:	2f00      	cmp	r7, #0
 800c7ca:	f000 80d1 	beq.w	800c970 <_printf_i+0x1c4>
 800c7ce:	2f58      	cmp	r7, #88	@ 0x58
 800c7d0:	f000 80b8 	beq.w	800c944 <_printf_i+0x198>
 800c7d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c7d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c7dc:	e03a      	b.n	800c854 <_printf_i+0xa8>
 800c7de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c7e2:	2b15      	cmp	r3, #21
 800c7e4:	d8f6      	bhi.n	800c7d4 <_printf_i+0x28>
 800c7e6:	a101      	add	r1, pc, #4	@ (adr r1, 800c7ec <_printf_i+0x40>)
 800c7e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c7ec:	0800c845 	.word	0x0800c845
 800c7f0:	0800c859 	.word	0x0800c859
 800c7f4:	0800c7d5 	.word	0x0800c7d5
 800c7f8:	0800c7d5 	.word	0x0800c7d5
 800c7fc:	0800c7d5 	.word	0x0800c7d5
 800c800:	0800c7d5 	.word	0x0800c7d5
 800c804:	0800c859 	.word	0x0800c859
 800c808:	0800c7d5 	.word	0x0800c7d5
 800c80c:	0800c7d5 	.word	0x0800c7d5
 800c810:	0800c7d5 	.word	0x0800c7d5
 800c814:	0800c7d5 	.word	0x0800c7d5
 800c818:	0800c957 	.word	0x0800c957
 800c81c:	0800c883 	.word	0x0800c883
 800c820:	0800c911 	.word	0x0800c911
 800c824:	0800c7d5 	.word	0x0800c7d5
 800c828:	0800c7d5 	.word	0x0800c7d5
 800c82c:	0800c979 	.word	0x0800c979
 800c830:	0800c7d5 	.word	0x0800c7d5
 800c834:	0800c883 	.word	0x0800c883
 800c838:	0800c7d5 	.word	0x0800c7d5
 800c83c:	0800c7d5 	.word	0x0800c7d5
 800c840:	0800c919 	.word	0x0800c919
 800c844:	6833      	ldr	r3, [r6, #0]
 800c846:	1d1a      	adds	r2, r3, #4
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	6032      	str	r2, [r6, #0]
 800c84c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c850:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c854:	2301      	movs	r3, #1
 800c856:	e09c      	b.n	800c992 <_printf_i+0x1e6>
 800c858:	6833      	ldr	r3, [r6, #0]
 800c85a:	6820      	ldr	r0, [r4, #0]
 800c85c:	1d19      	adds	r1, r3, #4
 800c85e:	6031      	str	r1, [r6, #0]
 800c860:	0606      	lsls	r6, r0, #24
 800c862:	d501      	bpl.n	800c868 <_printf_i+0xbc>
 800c864:	681d      	ldr	r5, [r3, #0]
 800c866:	e003      	b.n	800c870 <_printf_i+0xc4>
 800c868:	0645      	lsls	r5, r0, #25
 800c86a:	d5fb      	bpl.n	800c864 <_printf_i+0xb8>
 800c86c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c870:	2d00      	cmp	r5, #0
 800c872:	da03      	bge.n	800c87c <_printf_i+0xd0>
 800c874:	232d      	movs	r3, #45	@ 0x2d
 800c876:	426d      	negs	r5, r5
 800c878:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c87c:	4858      	ldr	r0, [pc, #352]	@ (800c9e0 <_printf_i+0x234>)
 800c87e:	230a      	movs	r3, #10
 800c880:	e011      	b.n	800c8a6 <_printf_i+0xfa>
 800c882:	6821      	ldr	r1, [r4, #0]
 800c884:	6833      	ldr	r3, [r6, #0]
 800c886:	0608      	lsls	r0, r1, #24
 800c888:	f853 5b04 	ldr.w	r5, [r3], #4
 800c88c:	d402      	bmi.n	800c894 <_printf_i+0xe8>
 800c88e:	0649      	lsls	r1, r1, #25
 800c890:	bf48      	it	mi
 800c892:	b2ad      	uxthmi	r5, r5
 800c894:	2f6f      	cmp	r7, #111	@ 0x6f
 800c896:	4852      	ldr	r0, [pc, #328]	@ (800c9e0 <_printf_i+0x234>)
 800c898:	6033      	str	r3, [r6, #0]
 800c89a:	bf14      	ite	ne
 800c89c:	230a      	movne	r3, #10
 800c89e:	2308      	moveq	r3, #8
 800c8a0:	2100      	movs	r1, #0
 800c8a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c8a6:	6866      	ldr	r6, [r4, #4]
 800c8a8:	60a6      	str	r6, [r4, #8]
 800c8aa:	2e00      	cmp	r6, #0
 800c8ac:	db05      	blt.n	800c8ba <_printf_i+0x10e>
 800c8ae:	6821      	ldr	r1, [r4, #0]
 800c8b0:	432e      	orrs	r6, r5
 800c8b2:	f021 0104 	bic.w	r1, r1, #4
 800c8b6:	6021      	str	r1, [r4, #0]
 800c8b8:	d04b      	beq.n	800c952 <_printf_i+0x1a6>
 800c8ba:	4616      	mov	r6, r2
 800c8bc:	fbb5 f1f3 	udiv	r1, r5, r3
 800c8c0:	fb03 5711 	mls	r7, r3, r1, r5
 800c8c4:	5dc7      	ldrb	r7, [r0, r7]
 800c8c6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c8ca:	462f      	mov	r7, r5
 800c8cc:	42bb      	cmp	r3, r7
 800c8ce:	460d      	mov	r5, r1
 800c8d0:	d9f4      	bls.n	800c8bc <_printf_i+0x110>
 800c8d2:	2b08      	cmp	r3, #8
 800c8d4:	d10b      	bne.n	800c8ee <_printf_i+0x142>
 800c8d6:	6823      	ldr	r3, [r4, #0]
 800c8d8:	07df      	lsls	r7, r3, #31
 800c8da:	d508      	bpl.n	800c8ee <_printf_i+0x142>
 800c8dc:	6923      	ldr	r3, [r4, #16]
 800c8de:	6861      	ldr	r1, [r4, #4]
 800c8e0:	4299      	cmp	r1, r3
 800c8e2:	bfde      	ittt	le
 800c8e4:	2330      	movle	r3, #48	@ 0x30
 800c8e6:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c8ea:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800c8ee:	1b92      	subs	r2, r2, r6
 800c8f0:	6122      	str	r2, [r4, #16]
 800c8f2:	f8cd a000 	str.w	sl, [sp]
 800c8f6:	464b      	mov	r3, r9
 800c8f8:	aa03      	add	r2, sp, #12
 800c8fa:	4621      	mov	r1, r4
 800c8fc:	4640      	mov	r0, r8
 800c8fe:	f7ff fee7 	bl	800c6d0 <_printf_common>
 800c902:	3001      	adds	r0, #1
 800c904:	d14a      	bne.n	800c99c <_printf_i+0x1f0>
 800c906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800c90a:	b004      	add	sp, #16
 800c90c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c910:	6823      	ldr	r3, [r4, #0]
 800c912:	f043 0320 	orr.w	r3, r3, #32
 800c916:	6023      	str	r3, [r4, #0]
 800c918:	4832      	ldr	r0, [pc, #200]	@ (800c9e4 <_printf_i+0x238>)
 800c91a:	2778      	movs	r7, #120	@ 0x78
 800c91c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c920:	6823      	ldr	r3, [r4, #0]
 800c922:	6831      	ldr	r1, [r6, #0]
 800c924:	061f      	lsls	r7, r3, #24
 800c926:	f851 5b04 	ldr.w	r5, [r1], #4
 800c92a:	d402      	bmi.n	800c932 <_printf_i+0x186>
 800c92c:	065f      	lsls	r7, r3, #25
 800c92e:	bf48      	it	mi
 800c930:	b2ad      	uxthmi	r5, r5
 800c932:	6031      	str	r1, [r6, #0]
 800c934:	07d9      	lsls	r1, r3, #31
 800c936:	bf44      	itt	mi
 800c938:	f043 0320 	orrmi.w	r3, r3, #32
 800c93c:	6023      	strmi	r3, [r4, #0]
 800c93e:	b11d      	cbz	r5, 800c948 <_printf_i+0x19c>
 800c940:	2310      	movs	r3, #16
 800c942:	e7ad      	b.n	800c8a0 <_printf_i+0xf4>
 800c944:	4826      	ldr	r0, [pc, #152]	@ (800c9e0 <_printf_i+0x234>)
 800c946:	e7e9      	b.n	800c91c <_printf_i+0x170>
 800c948:	6823      	ldr	r3, [r4, #0]
 800c94a:	f023 0320 	bic.w	r3, r3, #32
 800c94e:	6023      	str	r3, [r4, #0]
 800c950:	e7f6      	b.n	800c940 <_printf_i+0x194>
 800c952:	4616      	mov	r6, r2
 800c954:	e7bd      	b.n	800c8d2 <_printf_i+0x126>
 800c956:	6833      	ldr	r3, [r6, #0]
 800c958:	6825      	ldr	r5, [r4, #0]
 800c95a:	6961      	ldr	r1, [r4, #20]
 800c95c:	1d18      	adds	r0, r3, #4
 800c95e:	6030      	str	r0, [r6, #0]
 800c960:	062e      	lsls	r6, r5, #24
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	d501      	bpl.n	800c96a <_printf_i+0x1be>
 800c966:	6019      	str	r1, [r3, #0]
 800c968:	e002      	b.n	800c970 <_printf_i+0x1c4>
 800c96a:	0668      	lsls	r0, r5, #25
 800c96c:	d5fb      	bpl.n	800c966 <_printf_i+0x1ba>
 800c96e:	8019      	strh	r1, [r3, #0]
 800c970:	2300      	movs	r3, #0
 800c972:	6123      	str	r3, [r4, #16]
 800c974:	4616      	mov	r6, r2
 800c976:	e7bc      	b.n	800c8f2 <_printf_i+0x146>
 800c978:	6833      	ldr	r3, [r6, #0]
 800c97a:	1d1a      	adds	r2, r3, #4
 800c97c:	6032      	str	r2, [r6, #0]
 800c97e:	681e      	ldr	r6, [r3, #0]
 800c980:	6862      	ldr	r2, [r4, #4]
 800c982:	2100      	movs	r1, #0
 800c984:	4630      	mov	r0, r6
 800c986:	f7f3 fc23 	bl	80001d0 <memchr>
 800c98a:	b108      	cbz	r0, 800c990 <_printf_i+0x1e4>
 800c98c:	1b80      	subs	r0, r0, r6
 800c98e:	6060      	str	r0, [r4, #4]
 800c990:	6863      	ldr	r3, [r4, #4]
 800c992:	6123      	str	r3, [r4, #16]
 800c994:	2300      	movs	r3, #0
 800c996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c99a:	e7aa      	b.n	800c8f2 <_printf_i+0x146>
 800c99c:	6923      	ldr	r3, [r4, #16]
 800c99e:	4632      	mov	r2, r6
 800c9a0:	4649      	mov	r1, r9
 800c9a2:	4640      	mov	r0, r8
 800c9a4:	47d0      	blx	sl
 800c9a6:	3001      	adds	r0, #1
 800c9a8:	d0ad      	beq.n	800c906 <_printf_i+0x15a>
 800c9aa:	6823      	ldr	r3, [r4, #0]
 800c9ac:	079b      	lsls	r3, r3, #30
 800c9ae:	d413      	bmi.n	800c9d8 <_printf_i+0x22c>
 800c9b0:	68e0      	ldr	r0, [r4, #12]
 800c9b2:	9b03      	ldr	r3, [sp, #12]
 800c9b4:	4298      	cmp	r0, r3
 800c9b6:	bfb8      	it	lt
 800c9b8:	4618      	movlt	r0, r3
 800c9ba:	e7a6      	b.n	800c90a <_printf_i+0x15e>
 800c9bc:	2301      	movs	r3, #1
 800c9be:	4632      	mov	r2, r6
 800c9c0:	4649      	mov	r1, r9
 800c9c2:	4640      	mov	r0, r8
 800c9c4:	47d0      	blx	sl
 800c9c6:	3001      	adds	r0, #1
 800c9c8:	d09d      	beq.n	800c906 <_printf_i+0x15a>
 800c9ca:	3501      	adds	r5, #1
 800c9cc:	68e3      	ldr	r3, [r4, #12]
 800c9ce:	9903      	ldr	r1, [sp, #12]
 800c9d0:	1a5b      	subs	r3, r3, r1
 800c9d2:	42ab      	cmp	r3, r5
 800c9d4:	dcf2      	bgt.n	800c9bc <_printf_i+0x210>
 800c9d6:	e7eb      	b.n	800c9b0 <_printf_i+0x204>
 800c9d8:	2500      	movs	r5, #0
 800c9da:	f104 0619 	add.w	r6, r4, #25
 800c9de:	e7f5      	b.n	800c9cc <_printf_i+0x220>
 800c9e0:	0802e12e 	.word	0x0802e12e
 800c9e4:	0802e13f 	.word	0x0802e13f

0800c9e8 <std>:
 800c9e8:	2300      	movs	r3, #0
 800c9ea:	b510      	push	{r4, lr}
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	e9c0 3300 	strd	r3, r3, [r0]
 800c9f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c9f6:	6083      	str	r3, [r0, #8]
 800c9f8:	8181      	strh	r1, [r0, #12]
 800c9fa:	6643      	str	r3, [r0, #100]	@ 0x64
 800c9fc:	81c2      	strh	r2, [r0, #14]
 800c9fe:	6183      	str	r3, [r0, #24]
 800ca00:	4619      	mov	r1, r3
 800ca02:	2208      	movs	r2, #8
 800ca04:	305c      	adds	r0, #92	@ 0x5c
 800ca06:	f000 f92a 	bl	800cc5e <memset>
 800ca0a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca40 <std+0x58>)
 800ca0c:	6263      	str	r3, [r4, #36]	@ 0x24
 800ca0e:	4b0d      	ldr	r3, [pc, #52]	@ (800ca44 <std+0x5c>)
 800ca10:	62a3      	str	r3, [r4, #40]	@ 0x28
 800ca12:	4b0d      	ldr	r3, [pc, #52]	@ (800ca48 <std+0x60>)
 800ca14:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ca16:	4b0d      	ldr	r3, [pc, #52]	@ (800ca4c <std+0x64>)
 800ca18:	6323      	str	r3, [r4, #48]	@ 0x30
 800ca1a:	4b0d      	ldr	r3, [pc, #52]	@ (800ca50 <std+0x68>)
 800ca1c:	6224      	str	r4, [r4, #32]
 800ca1e:	429c      	cmp	r4, r3
 800ca20:	d006      	beq.n	800ca30 <std+0x48>
 800ca22:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ca26:	4294      	cmp	r4, r2
 800ca28:	d002      	beq.n	800ca30 <std+0x48>
 800ca2a:	33d0      	adds	r3, #208	@ 0xd0
 800ca2c:	429c      	cmp	r4, r3
 800ca2e:	d105      	bne.n	800ca3c <std+0x54>
 800ca30:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800ca34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca38:	f000 b9ec 	b.w	800ce14 <__retarget_lock_init_recursive>
 800ca3c:	bd10      	pop	{r4, pc}
 800ca3e:	bf00      	nop
 800ca40:	0800cbd9 	.word	0x0800cbd9
 800ca44:	0800cbfb 	.word	0x0800cbfb
 800ca48:	0800cc33 	.word	0x0800cc33
 800ca4c:	0800cc57 	.word	0x0800cc57
 800ca50:	2000aaf4 	.word	0x2000aaf4

0800ca54 <stdio_exit_handler>:
 800ca54:	4a02      	ldr	r2, [pc, #8]	@ (800ca60 <stdio_exit_handler+0xc>)
 800ca56:	4903      	ldr	r1, [pc, #12]	@ (800ca64 <stdio_exit_handler+0x10>)
 800ca58:	4803      	ldr	r0, [pc, #12]	@ (800ca68 <stdio_exit_handler+0x14>)
 800ca5a:	f000 b869 	b.w	800cb30 <_fwalk_sglue>
 800ca5e:	bf00      	nop
 800ca60:	20000418 	.word	0x20000418
 800ca64:	0800e795 	.word	0x0800e795
 800ca68:	20000428 	.word	0x20000428

0800ca6c <cleanup_stdio>:
 800ca6c:	6841      	ldr	r1, [r0, #4]
 800ca6e:	4b0c      	ldr	r3, [pc, #48]	@ (800caa0 <cleanup_stdio+0x34>)
 800ca70:	4299      	cmp	r1, r3
 800ca72:	b510      	push	{r4, lr}
 800ca74:	4604      	mov	r4, r0
 800ca76:	d001      	beq.n	800ca7c <cleanup_stdio+0x10>
 800ca78:	f001 fe8c 	bl	800e794 <_fflush_r>
 800ca7c:	68a1      	ldr	r1, [r4, #8]
 800ca7e:	4b09      	ldr	r3, [pc, #36]	@ (800caa4 <cleanup_stdio+0x38>)
 800ca80:	4299      	cmp	r1, r3
 800ca82:	d002      	beq.n	800ca8a <cleanup_stdio+0x1e>
 800ca84:	4620      	mov	r0, r4
 800ca86:	f001 fe85 	bl	800e794 <_fflush_r>
 800ca8a:	68e1      	ldr	r1, [r4, #12]
 800ca8c:	4b06      	ldr	r3, [pc, #24]	@ (800caa8 <cleanup_stdio+0x3c>)
 800ca8e:	4299      	cmp	r1, r3
 800ca90:	d004      	beq.n	800ca9c <cleanup_stdio+0x30>
 800ca92:	4620      	mov	r0, r4
 800ca94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca98:	f001 be7c 	b.w	800e794 <_fflush_r>
 800ca9c:	bd10      	pop	{r4, pc}
 800ca9e:	bf00      	nop
 800caa0:	2000aaf4 	.word	0x2000aaf4
 800caa4:	2000ab5c 	.word	0x2000ab5c
 800caa8:	2000abc4 	.word	0x2000abc4

0800caac <global_stdio_init.part.0>:
 800caac:	b510      	push	{r4, lr}
 800caae:	4b0b      	ldr	r3, [pc, #44]	@ (800cadc <global_stdio_init.part.0+0x30>)
 800cab0:	4c0b      	ldr	r4, [pc, #44]	@ (800cae0 <global_stdio_init.part.0+0x34>)
 800cab2:	4a0c      	ldr	r2, [pc, #48]	@ (800cae4 <global_stdio_init.part.0+0x38>)
 800cab4:	601a      	str	r2, [r3, #0]
 800cab6:	4620      	mov	r0, r4
 800cab8:	2200      	movs	r2, #0
 800caba:	2104      	movs	r1, #4
 800cabc:	f7ff ff94 	bl	800c9e8 <std>
 800cac0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cac4:	2201      	movs	r2, #1
 800cac6:	2109      	movs	r1, #9
 800cac8:	f7ff ff8e 	bl	800c9e8 <std>
 800cacc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cad0:	2202      	movs	r2, #2
 800cad2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cad6:	2112      	movs	r1, #18
 800cad8:	f7ff bf86 	b.w	800c9e8 <std>
 800cadc:	2000ac2c 	.word	0x2000ac2c
 800cae0:	2000aaf4 	.word	0x2000aaf4
 800cae4:	0800ca55 	.word	0x0800ca55

0800cae8 <__sfp_lock_acquire>:
 800cae8:	4801      	ldr	r0, [pc, #4]	@ (800caf0 <__sfp_lock_acquire+0x8>)
 800caea:	f000 b994 	b.w	800ce16 <__retarget_lock_acquire_recursive>
 800caee:	bf00      	nop
 800caf0:	2000ac35 	.word	0x2000ac35

0800caf4 <__sfp_lock_release>:
 800caf4:	4801      	ldr	r0, [pc, #4]	@ (800cafc <__sfp_lock_release+0x8>)
 800caf6:	f000 b98f 	b.w	800ce18 <__retarget_lock_release_recursive>
 800cafa:	bf00      	nop
 800cafc:	2000ac35 	.word	0x2000ac35

0800cb00 <__sinit>:
 800cb00:	b510      	push	{r4, lr}
 800cb02:	4604      	mov	r4, r0
 800cb04:	f7ff fff0 	bl	800cae8 <__sfp_lock_acquire>
 800cb08:	6a23      	ldr	r3, [r4, #32]
 800cb0a:	b11b      	cbz	r3, 800cb14 <__sinit+0x14>
 800cb0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cb10:	f7ff bff0 	b.w	800caf4 <__sfp_lock_release>
 800cb14:	4b04      	ldr	r3, [pc, #16]	@ (800cb28 <__sinit+0x28>)
 800cb16:	6223      	str	r3, [r4, #32]
 800cb18:	4b04      	ldr	r3, [pc, #16]	@ (800cb2c <__sinit+0x2c>)
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d1f5      	bne.n	800cb0c <__sinit+0xc>
 800cb20:	f7ff ffc4 	bl	800caac <global_stdio_init.part.0>
 800cb24:	e7f2      	b.n	800cb0c <__sinit+0xc>
 800cb26:	bf00      	nop
 800cb28:	0800ca6d 	.word	0x0800ca6d
 800cb2c:	2000ac2c 	.word	0x2000ac2c

0800cb30 <_fwalk_sglue>:
 800cb30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb34:	4607      	mov	r7, r0
 800cb36:	4688      	mov	r8, r1
 800cb38:	4614      	mov	r4, r2
 800cb3a:	2600      	movs	r6, #0
 800cb3c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb40:	f1b9 0901 	subs.w	r9, r9, #1
 800cb44:	d505      	bpl.n	800cb52 <_fwalk_sglue+0x22>
 800cb46:	6824      	ldr	r4, [r4, #0]
 800cb48:	2c00      	cmp	r4, #0
 800cb4a:	d1f7      	bne.n	800cb3c <_fwalk_sglue+0xc>
 800cb4c:	4630      	mov	r0, r6
 800cb4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb52:	89ab      	ldrh	r3, [r5, #12]
 800cb54:	2b01      	cmp	r3, #1
 800cb56:	d907      	bls.n	800cb68 <_fwalk_sglue+0x38>
 800cb58:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb5c:	3301      	adds	r3, #1
 800cb5e:	d003      	beq.n	800cb68 <_fwalk_sglue+0x38>
 800cb60:	4629      	mov	r1, r5
 800cb62:	4638      	mov	r0, r7
 800cb64:	47c0      	blx	r8
 800cb66:	4306      	orrs	r6, r0
 800cb68:	3568      	adds	r5, #104	@ 0x68
 800cb6a:	e7e9      	b.n	800cb40 <_fwalk_sglue+0x10>

0800cb6c <sniprintf>:
 800cb6c:	b40c      	push	{r2, r3}
 800cb6e:	b530      	push	{r4, r5, lr}
 800cb70:	4b18      	ldr	r3, [pc, #96]	@ (800cbd4 <sniprintf+0x68>)
 800cb72:	1e0c      	subs	r4, r1, #0
 800cb74:	681d      	ldr	r5, [r3, #0]
 800cb76:	b09d      	sub	sp, #116	@ 0x74
 800cb78:	da08      	bge.n	800cb8c <sniprintf+0x20>
 800cb7a:	238b      	movs	r3, #139	@ 0x8b
 800cb7c:	602b      	str	r3, [r5, #0]
 800cb7e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cb82:	b01d      	add	sp, #116	@ 0x74
 800cb84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cb88:	b002      	add	sp, #8
 800cb8a:	4770      	bx	lr
 800cb8c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800cb90:	f8ad 3014 	strh.w	r3, [sp, #20]
 800cb94:	f04f 0300 	mov.w	r3, #0
 800cb98:	931b      	str	r3, [sp, #108]	@ 0x6c
 800cb9a:	bf14      	ite	ne
 800cb9c:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800cba0:	4623      	moveq	r3, r4
 800cba2:	9304      	str	r3, [sp, #16]
 800cba4:	9307      	str	r3, [sp, #28]
 800cba6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800cbaa:	9002      	str	r0, [sp, #8]
 800cbac:	9006      	str	r0, [sp, #24]
 800cbae:	f8ad 3016 	strh.w	r3, [sp, #22]
 800cbb2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800cbb4:	ab21      	add	r3, sp, #132	@ 0x84
 800cbb6:	a902      	add	r1, sp, #8
 800cbb8:	4628      	mov	r0, r5
 800cbba:	9301      	str	r3, [sp, #4]
 800cbbc:	f001 fc6a 	bl	800e494 <_svfiprintf_r>
 800cbc0:	1c43      	adds	r3, r0, #1
 800cbc2:	bfbc      	itt	lt
 800cbc4:	238b      	movlt	r3, #139	@ 0x8b
 800cbc6:	602b      	strlt	r3, [r5, #0]
 800cbc8:	2c00      	cmp	r4, #0
 800cbca:	d0da      	beq.n	800cb82 <sniprintf+0x16>
 800cbcc:	9b02      	ldr	r3, [sp, #8]
 800cbce:	2200      	movs	r2, #0
 800cbd0:	701a      	strb	r2, [r3, #0]
 800cbd2:	e7d6      	b.n	800cb82 <sniprintf+0x16>
 800cbd4:	20000424 	.word	0x20000424

0800cbd8 <__sread>:
 800cbd8:	b510      	push	{r4, lr}
 800cbda:	460c      	mov	r4, r1
 800cbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbe0:	f000 f8ca 	bl	800cd78 <_read_r>
 800cbe4:	2800      	cmp	r0, #0
 800cbe6:	bfab      	itete	ge
 800cbe8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800cbea:	89a3      	ldrhlt	r3, [r4, #12]
 800cbec:	181b      	addge	r3, r3, r0
 800cbee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800cbf2:	bfac      	ite	ge
 800cbf4:	6563      	strge	r3, [r4, #84]	@ 0x54
 800cbf6:	81a3      	strhlt	r3, [r4, #12]
 800cbf8:	bd10      	pop	{r4, pc}

0800cbfa <__swrite>:
 800cbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbfe:	461f      	mov	r7, r3
 800cc00:	898b      	ldrh	r3, [r1, #12]
 800cc02:	05db      	lsls	r3, r3, #23
 800cc04:	4605      	mov	r5, r0
 800cc06:	460c      	mov	r4, r1
 800cc08:	4616      	mov	r6, r2
 800cc0a:	d505      	bpl.n	800cc18 <__swrite+0x1e>
 800cc0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc10:	2302      	movs	r3, #2
 800cc12:	2200      	movs	r2, #0
 800cc14:	f000 f89e 	bl	800cd54 <_lseek_r>
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc1e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800cc22:	81a3      	strh	r3, [r4, #12]
 800cc24:	4632      	mov	r2, r6
 800cc26:	463b      	mov	r3, r7
 800cc28:	4628      	mov	r0, r5
 800cc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cc2e:	f000 b8b5 	b.w	800cd9c <_write_r>

0800cc32 <__sseek>:
 800cc32:	b510      	push	{r4, lr}
 800cc34:	460c      	mov	r4, r1
 800cc36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc3a:	f000 f88b 	bl	800cd54 <_lseek_r>
 800cc3e:	1c43      	adds	r3, r0, #1
 800cc40:	89a3      	ldrh	r3, [r4, #12]
 800cc42:	bf15      	itete	ne
 800cc44:	6560      	strne	r0, [r4, #84]	@ 0x54
 800cc46:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800cc4a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800cc4e:	81a3      	strheq	r3, [r4, #12]
 800cc50:	bf18      	it	ne
 800cc52:	81a3      	strhne	r3, [r4, #12]
 800cc54:	bd10      	pop	{r4, pc}

0800cc56 <__sclose>:
 800cc56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cc5a:	f000 b80d 	b.w	800cc78 <_close_r>

0800cc5e <memset>:
 800cc5e:	4402      	add	r2, r0
 800cc60:	4603      	mov	r3, r0
 800cc62:	4293      	cmp	r3, r2
 800cc64:	d100      	bne.n	800cc68 <memset+0xa>
 800cc66:	4770      	bx	lr
 800cc68:	f803 1b01 	strb.w	r1, [r3], #1
 800cc6c:	e7f9      	b.n	800cc62 <memset+0x4>
	...

0800cc70 <_localeconv_r>:
 800cc70:	4800      	ldr	r0, [pc, #0]	@ (800cc74 <_localeconv_r+0x4>)
 800cc72:	4770      	bx	lr
 800cc74:	20000564 	.word	0x20000564

0800cc78 <_close_r>:
 800cc78:	b538      	push	{r3, r4, r5, lr}
 800cc7a:	4d06      	ldr	r5, [pc, #24]	@ (800cc94 <_close_r+0x1c>)
 800cc7c:	2300      	movs	r3, #0
 800cc7e:	4604      	mov	r4, r0
 800cc80:	4608      	mov	r0, r1
 800cc82:	602b      	str	r3, [r5, #0]
 800cc84:	f7f5 fbf0 	bl	8002468 <_close>
 800cc88:	1c43      	adds	r3, r0, #1
 800cc8a:	d102      	bne.n	800cc92 <_close_r+0x1a>
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	b103      	cbz	r3, 800cc92 <_close_r+0x1a>
 800cc90:	6023      	str	r3, [r4, #0]
 800cc92:	bd38      	pop	{r3, r4, r5, pc}
 800cc94:	2000ac30 	.word	0x2000ac30

0800cc98 <_reclaim_reent>:
 800cc98:	4b2d      	ldr	r3, [pc, #180]	@ (800cd50 <_reclaim_reent+0xb8>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4283      	cmp	r3, r0
 800cc9e:	b570      	push	{r4, r5, r6, lr}
 800cca0:	4604      	mov	r4, r0
 800cca2:	d053      	beq.n	800cd4c <_reclaim_reent+0xb4>
 800cca4:	69c3      	ldr	r3, [r0, #28]
 800cca6:	b31b      	cbz	r3, 800ccf0 <_reclaim_reent+0x58>
 800cca8:	68db      	ldr	r3, [r3, #12]
 800ccaa:	b163      	cbz	r3, 800ccc6 <_reclaim_reent+0x2e>
 800ccac:	2500      	movs	r5, #0
 800ccae:	69e3      	ldr	r3, [r4, #28]
 800ccb0:	68db      	ldr	r3, [r3, #12]
 800ccb2:	5959      	ldr	r1, [r3, r5]
 800ccb4:	b9b1      	cbnz	r1, 800cce4 <_reclaim_reent+0x4c>
 800ccb6:	3504      	adds	r5, #4
 800ccb8:	2d80      	cmp	r5, #128	@ 0x80
 800ccba:	d1f8      	bne.n	800ccae <_reclaim_reent+0x16>
 800ccbc:	69e3      	ldr	r3, [r4, #28]
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	68d9      	ldr	r1, [r3, #12]
 800ccc2:	f000 ff11 	bl	800dae8 <_free_r>
 800ccc6:	69e3      	ldr	r3, [r4, #28]
 800ccc8:	6819      	ldr	r1, [r3, #0]
 800ccca:	b111      	cbz	r1, 800ccd2 <_reclaim_reent+0x3a>
 800cccc:	4620      	mov	r0, r4
 800ccce:	f000 ff0b 	bl	800dae8 <_free_r>
 800ccd2:	69e3      	ldr	r3, [r4, #28]
 800ccd4:	689d      	ldr	r5, [r3, #8]
 800ccd6:	b15d      	cbz	r5, 800ccf0 <_reclaim_reent+0x58>
 800ccd8:	4629      	mov	r1, r5
 800ccda:	4620      	mov	r0, r4
 800ccdc:	682d      	ldr	r5, [r5, #0]
 800ccde:	f000 ff03 	bl	800dae8 <_free_r>
 800cce2:	e7f8      	b.n	800ccd6 <_reclaim_reent+0x3e>
 800cce4:	680e      	ldr	r6, [r1, #0]
 800cce6:	4620      	mov	r0, r4
 800cce8:	f000 fefe 	bl	800dae8 <_free_r>
 800ccec:	4631      	mov	r1, r6
 800ccee:	e7e1      	b.n	800ccb4 <_reclaim_reent+0x1c>
 800ccf0:	6961      	ldr	r1, [r4, #20]
 800ccf2:	b111      	cbz	r1, 800ccfa <_reclaim_reent+0x62>
 800ccf4:	4620      	mov	r0, r4
 800ccf6:	f000 fef7 	bl	800dae8 <_free_r>
 800ccfa:	69e1      	ldr	r1, [r4, #28]
 800ccfc:	b111      	cbz	r1, 800cd04 <_reclaim_reent+0x6c>
 800ccfe:	4620      	mov	r0, r4
 800cd00:	f000 fef2 	bl	800dae8 <_free_r>
 800cd04:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800cd06:	b111      	cbz	r1, 800cd0e <_reclaim_reent+0x76>
 800cd08:	4620      	mov	r0, r4
 800cd0a:	f000 feed 	bl	800dae8 <_free_r>
 800cd0e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cd10:	b111      	cbz	r1, 800cd18 <_reclaim_reent+0x80>
 800cd12:	4620      	mov	r0, r4
 800cd14:	f000 fee8 	bl	800dae8 <_free_r>
 800cd18:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800cd1a:	b111      	cbz	r1, 800cd22 <_reclaim_reent+0x8a>
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f000 fee3 	bl	800dae8 <_free_r>
 800cd22:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800cd24:	b111      	cbz	r1, 800cd2c <_reclaim_reent+0x94>
 800cd26:	4620      	mov	r0, r4
 800cd28:	f000 fede 	bl	800dae8 <_free_r>
 800cd2c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800cd2e:	b111      	cbz	r1, 800cd36 <_reclaim_reent+0x9e>
 800cd30:	4620      	mov	r0, r4
 800cd32:	f000 fed9 	bl	800dae8 <_free_r>
 800cd36:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800cd38:	b111      	cbz	r1, 800cd40 <_reclaim_reent+0xa8>
 800cd3a:	4620      	mov	r0, r4
 800cd3c:	f000 fed4 	bl	800dae8 <_free_r>
 800cd40:	6a23      	ldr	r3, [r4, #32]
 800cd42:	b11b      	cbz	r3, 800cd4c <_reclaim_reent+0xb4>
 800cd44:	4620      	mov	r0, r4
 800cd46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cd4a:	4718      	bx	r3
 800cd4c:	bd70      	pop	{r4, r5, r6, pc}
 800cd4e:	bf00      	nop
 800cd50:	20000424 	.word	0x20000424

0800cd54 <_lseek_r>:
 800cd54:	b538      	push	{r3, r4, r5, lr}
 800cd56:	4d07      	ldr	r5, [pc, #28]	@ (800cd74 <_lseek_r+0x20>)
 800cd58:	4604      	mov	r4, r0
 800cd5a:	4608      	mov	r0, r1
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	2200      	movs	r2, #0
 800cd60:	602a      	str	r2, [r5, #0]
 800cd62:	461a      	mov	r2, r3
 800cd64:	f7f5 fba7 	bl	80024b6 <_lseek>
 800cd68:	1c43      	adds	r3, r0, #1
 800cd6a:	d102      	bne.n	800cd72 <_lseek_r+0x1e>
 800cd6c:	682b      	ldr	r3, [r5, #0]
 800cd6e:	b103      	cbz	r3, 800cd72 <_lseek_r+0x1e>
 800cd70:	6023      	str	r3, [r4, #0]
 800cd72:	bd38      	pop	{r3, r4, r5, pc}
 800cd74:	2000ac30 	.word	0x2000ac30

0800cd78 <_read_r>:
 800cd78:	b538      	push	{r3, r4, r5, lr}
 800cd7a:	4d07      	ldr	r5, [pc, #28]	@ (800cd98 <_read_r+0x20>)
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	4608      	mov	r0, r1
 800cd80:	4611      	mov	r1, r2
 800cd82:	2200      	movs	r2, #0
 800cd84:	602a      	str	r2, [r5, #0]
 800cd86:	461a      	mov	r2, r3
 800cd88:	f7f5 fb35 	bl	80023f6 <_read>
 800cd8c:	1c43      	adds	r3, r0, #1
 800cd8e:	d102      	bne.n	800cd96 <_read_r+0x1e>
 800cd90:	682b      	ldr	r3, [r5, #0]
 800cd92:	b103      	cbz	r3, 800cd96 <_read_r+0x1e>
 800cd94:	6023      	str	r3, [r4, #0]
 800cd96:	bd38      	pop	{r3, r4, r5, pc}
 800cd98:	2000ac30 	.word	0x2000ac30

0800cd9c <_write_r>:
 800cd9c:	b538      	push	{r3, r4, r5, lr}
 800cd9e:	4d07      	ldr	r5, [pc, #28]	@ (800cdbc <_write_r+0x20>)
 800cda0:	4604      	mov	r4, r0
 800cda2:	4608      	mov	r0, r1
 800cda4:	4611      	mov	r1, r2
 800cda6:	2200      	movs	r2, #0
 800cda8:	602a      	str	r2, [r5, #0]
 800cdaa:	461a      	mov	r2, r3
 800cdac:	f7f5 fb40 	bl	8002430 <_write>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_write_r+0x1e>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_write_r+0x1e>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	2000ac30 	.word	0x2000ac30

0800cdc0 <__errno>:
 800cdc0:	4b01      	ldr	r3, [pc, #4]	@ (800cdc8 <__errno+0x8>)
 800cdc2:	6818      	ldr	r0, [r3, #0]
 800cdc4:	4770      	bx	lr
 800cdc6:	bf00      	nop
 800cdc8:	20000424 	.word	0x20000424

0800cdcc <__libc_init_array>:
 800cdcc:	b570      	push	{r4, r5, r6, lr}
 800cdce:	4d0d      	ldr	r5, [pc, #52]	@ (800ce04 <__libc_init_array+0x38>)
 800cdd0:	4c0d      	ldr	r4, [pc, #52]	@ (800ce08 <__libc_init_array+0x3c>)
 800cdd2:	1b64      	subs	r4, r4, r5
 800cdd4:	10a4      	asrs	r4, r4, #2
 800cdd6:	2600      	movs	r6, #0
 800cdd8:	42a6      	cmp	r6, r4
 800cdda:	d109      	bne.n	800cdf0 <__libc_init_array+0x24>
 800cddc:	4d0b      	ldr	r5, [pc, #44]	@ (800ce0c <__libc_init_array+0x40>)
 800cdde:	4c0c      	ldr	r4, [pc, #48]	@ (800ce10 <__libc_init_array+0x44>)
 800cde0:	f003 fab0 	bl	8010344 <_init>
 800cde4:	1b64      	subs	r4, r4, r5
 800cde6:	10a4      	asrs	r4, r4, #2
 800cde8:	2600      	movs	r6, #0
 800cdea:	42a6      	cmp	r6, r4
 800cdec:	d105      	bne.n	800cdfa <__libc_init_array+0x2e>
 800cdee:	bd70      	pop	{r4, r5, r6, pc}
 800cdf0:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdf4:	4798      	blx	r3
 800cdf6:	3601      	adds	r6, #1
 800cdf8:	e7ee      	b.n	800cdd8 <__libc_init_array+0xc>
 800cdfa:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdfe:	4798      	blx	r3
 800ce00:	3601      	adds	r6, #1
 800ce02:	e7f2      	b.n	800cdea <__libc_init_array+0x1e>
 800ce04:	0802e884 	.word	0x0802e884
 800ce08:	0802e884 	.word	0x0802e884
 800ce0c:	0802e884 	.word	0x0802e884
 800ce10:	0802e888 	.word	0x0802e888

0800ce14 <__retarget_lock_init_recursive>:
 800ce14:	4770      	bx	lr

0800ce16 <__retarget_lock_acquire_recursive>:
 800ce16:	4770      	bx	lr

0800ce18 <__retarget_lock_release_recursive>:
 800ce18:	4770      	bx	lr

0800ce1a <memcpy>:
 800ce1a:	440a      	add	r2, r1
 800ce1c:	4291      	cmp	r1, r2
 800ce1e:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800ce22:	d100      	bne.n	800ce26 <memcpy+0xc>
 800ce24:	4770      	bx	lr
 800ce26:	b510      	push	{r4, lr}
 800ce28:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce30:	4291      	cmp	r1, r2
 800ce32:	d1f9      	bne.n	800ce28 <memcpy+0xe>
 800ce34:	bd10      	pop	{r4, pc}

0800ce36 <quorem>:
 800ce36:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce3a:	6903      	ldr	r3, [r0, #16]
 800ce3c:	690c      	ldr	r4, [r1, #16]
 800ce3e:	42a3      	cmp	r3, r4
 800ce40:	4607      	mov	r7, r0
 800ce42:	db7e      	blt.n	800cf42 <quorem+0x10c>
 800ce44:	3c01      	subs	r4, #1
 800ce46:	f101 0814 	add.w	r8, r1, #20
 800ce4a:	00a3      	lsls	r3, r4, #2
 800ce4c:	f100 0514 	add.w	r5, r0, #20
 800ce50:	9300      	str	r3, [sp, #0]
 800ce52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ce56:	9301      	str	r3, [sp, #4]
 800ce58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ce5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ce60:	3301      	adds	r3, #1
 800ce62:	429a      	cmp	r2, r3
 800ce64:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ce68:	fbb2 f6f3 	udiv	r6, r2, r3
 800ce6c:	d32e      	bcc.n	800cecc <quorem+0x96>
 800ce6e:	f04f 0a00 	mov.w	sl, #0
 800ce72:	46c4      	mov	ip, r8
 800ce74:	46ae      	mov	lr, r5
 800ce76:	46d3      	mov	fp, sl
 800ce78:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce7c:	b298      	uxth	r0, r3
 800ce7e:	fb06 a000 	mla	r0, r6, r0, sl
 800ce82:	0c02      	lsrs	r2, r0, #16
 800ce84:	0c1b      	lsrs	r3, r3, #16
 800ce86:	fb06 2303 	mla	r3, r6, r3, r2
 800ce8a:	f8de 2000 	ldr.w	r2, [lr]
 800ce8e:	b280      	uxth	r0, r0
 800ce90:	b292      	uxth	r2, r2
 800ce92:	1a12      	subs	r2, r2, r0
 800ce94:	445a      	add	r2, fp
 800ce96:	f8de 0000 	ldr.w	r0, [lr]
 800ce9a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce9e:	b29b      	uxth	r3, r3
 800cea0:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cea4:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800cea8:	b292      	uxth	r2, r2
 800ceaa:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ceae:	45e1      	cmp	r9, ip
 800ceb0:	f84e 2b04 	str.w	r2, [lr], #4
 800ceb4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ceb8:	d2de      	bcs.n	800ce78 <quorem+0x42>
 800ceba:	9b00      	ldr	r3, [sp, #0]
 800cebc:	58eb      	ldr	r3, [r5, r3]
 800cebe:	b92b      	cbnz	r3, 800cecc <quorem+0x96>
 800cec0:	9b01      	ldr	r3, [sp, #4]
 800cec2:	3b04      	subs	r3, #4
 800cec4:	429d      	cmp	r5, r3
 800cec6:	461a      	mov	r2, r3
 800cec8:	d32f      	bcc.n	800cf2a <quorem+0xf4>
 800ceca:	613c      	str	r4, [r7, #16]
 800cecc:	4638      	mov	r0, r7
 800cece:	f001 f97d 	bl	800e1cc <__mcmp>
 800ced2:	2800      	cmp	r0, #0
 800ced4:	db25      	blt.n	800cf22 <quorem+0xec>
 800ced6:	4629      	mov	r1, r5
 800ced8:	2000      	movs	r0, #0
 800ceda:	f858 2b04 	ldr.w	r2, [r8], #4
 800cede:	f8d1 c000 	ldr.w	ip, [r1]
 800cee2:	fa1f fe82 	uxth.w	lr, r2
 800cee6:	fa1f f38c 	uxth.w	r3, ip
 800ceea:	eba3 030e 	sub.w	r3, r3, lr
 800ceee:	4403      	add	r3, r0
 800cef0:	0c12      	lsrs	r2, r2, #16
 800cef2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cef6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cefa:	b29b      	uxth	r3, r3
 800cefc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cf00:	45c1      	cmp	r9, r8
 800cf02:	f841 3b04 	str.w	r3, [r1], #4
 800cf06:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cf0a:	d2e6      	bcs.n	800ceda <quorem+0xa4>
 800cf0c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cf10:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cf14:	b922      	cbnz	r2, 800cf20 <quorem+0xea>
 800cf16:	3b04      	subs	r3, #4
 800cf18:	429d      	cmp	r5, r3
 800cf1a:	461a      	mov	r2, r3
 800cf1c:	d30b      	bcc.n	800cf36 <quorem+0x100>
 800cf1e:	613c      	str	r4, [r7, #16]
 800cf20:	3601      	adds	r6, #1
 800cf22:	4630      	mov	r0, r6
 800cf24:	b003      	add	sp, #12
 800cf26:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf2a:	6812      	ldr	r2, [r2, #0]
 800cf2c:	3b04      	subs	r3, #4
 800cf2e:	2a00      	cmp	r2, #0
 800cf30:	d1cb      	bne.n	800ceca <quorem+0x94>
 800cf32:	3c01      	subs	r4, #1
 800cf34:	e7c6      	b.n	800cec4 <quorem+0x8e>
 800cf36:	6812      	ldr	r2, [r2, #0]
 800cf38:	3b04      	subs	r3, #4
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	d1ef      	bne.n	800cf1e <quorem+0xe8>
 800cf3e:	3c01      	subs	r4, #1
 800cf40:	e7ea      	b.n	800cf18 <quorem+0xe2>
 800cf42:	2000      	movs	r0, #0
 800cf44:	e7ee      	b.n	800cf24 <quorem+0xee>
	...

0800cf48 <_dtoa_r>:
 800cf48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf4c:	69c7      	ldr	r7, [r0, #28]
 800cf4e:	b097      	sub	sp, #92	@ 0x5c
 800cf50:	ed8d 0b04 	vstr	d0, [sp, #16]
 800cf54:	ec55 4b10 	vmov	r4, r5, d0
 800cf58:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800cf5a:	9107      	str	r1, [sp, #28]
 800cf5c:	4681      	mov	r9, r0
 800cf5e:	920c      	str	r2, [sp, #48]	@ 0x30
 800cf60:	9311      	str	r3, [sp, #68]	@ 0x44
 800cf62:	b97f      	cbnz	r7, 800cf84 <_dtoa_r+0x3c>
 800cf64:	2010      	movs	r0, #16
 800cf66:	f000 fe09 	bl	800db7c <malloc>
 800cf6a:	4602      	mov	r2, r0
 800cf6c:	f8c9 001c 	str.w	r0, [r9, #28]
 800cf70:	b920      	cbnz	r0, 800cf7c <_dtoa_r+0x34>
 800cf72:	4ba9      	ldr	r3, [pc, #676]	@ (800d218 <_dtoa_r+0x2d0>)
 800cf74:	21ef      	movs	r1, #239	@ 0xef
 800cf76:	48a9      	ldr	r0, [pc, #676]	@ (800d21c <_dtoa_r+0x2d4>)
 800cf78:	f001 fc5e 	bl	800e838 <__assert_func>
 800cf7c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cf80:	6007      	str	r7, [r0, #0]
 800cf82:	60c7      	str	r7, [r0, #12]
 800cf84:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cf88:	6819      	ldr	r1, [r3, #0]
 800cf8a:	b159      	cbz	r1, 800cfa4 <_dtoa_r+0x5c>
 800cf8c:	685a      	ldr	r2, [r3, #4]
 800cf8e:	604a      	str	r2, [r1, #4]
 800cf90:	2301      	movs	r3, #1
 800cf92:	4093      	lsls	r3, r2
 800cf94:	608b      	str	r3, [r1, #8]
 800cf96:	4648      	mov	r0, r9
 800cf98:	f000 fee6 	bl	800dd68 <_Bfree>
 800cf9c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800cfa0:	2200      	movs	r2, #0
 800cfa2:	601a      	str	r2, [r3, #0]
 800cfa4:	1e2b      	subs	r3, r5, #0
 800cfa6:	bfb9      	ittee	lt
 800cfa8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cfac:	9305      	strlt	r3, [sp, #20]
 800cfae:	2300      	movge	r3, #0
 800cfb0:	6033      	strge	r3, [r6, #0]
 800cfb2:	9f05      	ldr	r7, [sp, #20]
 800cfb4:	4b9a      	ldr	r3, [pc, #616]	@ (800d220 <_dtoa_r+0x2d8>)
 800cfb6:	bfbc      	itt	lt
 800cfb8:	2201      	movlt	r2, #1
 800cfba:	6032      	strlt	r2, [r6, #0]
 800cfbc:	43bb      	bics	r3, r7
 800cfbe:	d112      	bne.n	800cfe6 <_dtoa_r+0x9e>
 800cfc0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800cfc2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cfc6:	6013      	str	r3, [r2, #0]
 800cfc8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cfcc:	4323      	orrs	r3, r4
 800cfce:	f000 855a 	beq.w	800da86 <_dtoa_r+0xb3e>
 800cfd2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800cfd4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d234 <_dtoa_r+0x2ec>
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	f000 855c 	beq.w	800da96 <_dtoa_r+0xb4e>
 800cfde:	f10a 0303 	add.w	r3, sl, #3
 800cfe2:	f000 bd56 	b.w	800da92 <_dtoa_r+0xb4a>
 800cfe6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800cfea:	2200      	movs	r2, #0
 800cfec:	ec51 0b17 	vmov	r0, r1, d7
 800cff0:	2300      	movs	r3, #0
 800cff2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800cff6:	f7f3 fd67 	bl	8000ac8 <__aeabi_dcmpeq>
 800cffa:	4680      	mov	r8, r0
 800cffc:	b158      	cbz	r0, 800d016 <_dtoa_r+0xce>
 800cffe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d000:	2301      	movs	r3, #1
 800d002:	6013      	str	r3, [r2, #0]
 800d004:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d006:	b113      	cbz	r3, 800d00e <_dtoa_r+0xc6>
 800d008:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d00a:	4b86      	ldr	r3, [pc, #536]	@ (800d224 <_dtoa_r+0x2dc>)
 800d00c:	6013      	str	r3, [r2, #0]
 800d00e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d238 <_dtoa_r+0x2f0>
 800d012:	f000 bd40 	b.w	800da96 <_dtoa_r+0xb4e>
 800d016:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d01a:	aa14      	add	r2, sp, #80	@ 0x50
 800d01c:	a915      	add	r1, sp, #84	@ 0x54
 800d01e:	4648      	mov	r0, r9
 800d020:	f001 f984 	bl	800e32c <__d2b>
 800d024:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d028:	9002      	str	r0, [sp, #8]
 800d02a:	2e00      	cmp	r6, #0
 800d02c:	d078      	beq.n	800d120 <_dtoa_r+0x1d8>
 800d02e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d030:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d034:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d038:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d03c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d040:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d044:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d048:	4619      	mov	r1, r3
 800d04a:	2200      	movs	r2, #0
 800d04c:	4b76      	ldr	r3, [pc, #472]	@ (800d228 <_dtoa_r+0x2e0>)
 800d04e:	f7f3 f91b 	bl	8000288 <__aeabi_dsub>
 800d052:	a36b      	add	r3, pc, #428	@ (adr r3, 800d200 <_dtoa_r+0x2b8>)
 800d054:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d058:	f7f3 face 	bl	80005f8 <__aeabi_dmul>
 800d05c:	a36a      	add	r3, pc, #424	@ (adr r3, 800d208 <_dtoa_r+0x2c0>)
 800d05e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d062:	f7f3 f913 	bl	800028c <__adddf3>
 800d066:	4604      	mov	r4, r0
 800d068:	4630      	mov	r0, r6
 800d06a:	460d      	mov	r5, r1
 800d06c:	f7f3 fa5a 	bl	8000524 <__aeabi_i2d>
 800d070:	a367      	add	r3, pc, #412	@ (adr r3, 800d210 <_dtoa_r+0x2c8>)
 800d072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	4602      	mov	r2, r0
 800d07c:	460b      	mov	r3, r1
 800d07e:	4620      	mov	r0, r4
 800d080:	4629      	mov	r1, r5
 800d082:	f7f3 f903 	bl	800028c <__adddf3>
 800d086:	4604      	mov	r4, r0
 800d088:	460d      	mov	r5, r1
 800d08a:	f7f3 fd65 	bl	8000b58 <__aeabi_d2iz>
 800d08e:	2200      	movs	r2, #0
 800d090:	4607      	mov	r7, r0
 800d092:	2300      	movs	r3, #0
 800d094:	4620      	mov	r0, r4
 800d096:	4629      	mov	r1, r5
 800d098:	f7f3 fd20 	bl	8000adc <__aeabi_dcmplt>
 800d09c:	b140      	cbz	r0, 800d0b0 <_dtoa_r+0x168>
 800d09e:	4638      	mov	r0, r7
 800d0a0:	f7f3 fa40 	bl	8000524 <__aeabi_i2d>
 800d0a4:	4622      	mov	r2, r4
 800d0a6:	462b      	mov	r3, r5
 800d0a8:	f7f3 fd0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0ac:	b900      	cbnz	r0, 800d0b0 <_dtoa_r+0x168>
 800d0ae:	3f01      	subs	r7, #1
 800d0b0:	2f16      	cmp	r7, #22
 800d0b2:	d852      	bhi.n	800d15a <_dtoa_r+0x212>
 800d0b4:	4b5d      	ldr	r3, [pc, #372]	@ (800d22c <_dtoa_r+0x2e4>)
 800d0b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d0c2:	f7f3 fd0b 	bl	8000adc <__aeabi_dcmplt>
 800d0c6:	2800      	cmp	r0, #0
 800d0c8:	d049      	beq.n	800d15e <_dtoa_r+0x216>
 800d0ca:	3f01      	subs	r7, #1
 800d0cc:	2300      	movs	r3, #0
 800d0ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800d0d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d0d2:	1b9b      	subs	r3, r3, r6
 800d0d4:	1e5a      	subs	r2, r3, #1
 800d0d6:	bf45      	ittet	mi
 800d0d8:	f1c3 0301 	rsbmi	r3, r3, #1
 800d0dc:	9300      	strmi	r3, [sp, #0]
 800d0de:	2300      	movpl	r3, #0
 800d0e0:	2300      	movmi	r3, #0
 800d0e2:	9206      	str	r2, [sp, #24]
 800d0e4:	bf54      	ite	pl
 800d0e6:	9300      	strpl	r3, [sp, #0]
 800d0e8:	9306      	strmi	r3, [sp, #24]
 800d0ea:	2f00      	cmp	r7, #0
 800d0ec:	db39      	blt.n	800d162 <_dtoa_r+0x21a>
 800d0ee:	9b06      	ldr	r3, [sp, #24]
 800d0f0:	970d      	str	r7, [sp, #52]	@ 0x34
 800d0f2:	443b      	add	r3, r7
 800d0f4:	9306      	str	r3, [sp, #24]
 800d0f6:	2300      	movs	r3, #0
 800d0f8:	9308      	str	r3, [sp, #32]
 800d0fa:	9b07      	ldr	r3, [sp, #28]
 800d0fc:	2b09      	cmp	r3, #9
 800d0fe:	d863      	bhi.n	800d1c8 <_dtoa_r+0x280>
 800d100:	2b05      	cmp	r3, #5
 800d102:	bfc4      	itt	gt
 800d104:	3b04      	subgt	r3, #4
 800d106:	9307      	strgt	r3, [sp, #28]
 800d108:	9b07      	ldr	r3, [sp, #28]
 800d10a:	f1a3 0302 	sub.w	r3, r3, #2
 800d10e:	bfcc      	ite	gt
 800d110:	2400      	movgt	r4, #0
 800d112:	2401      	movle	r4, #1
 800d114:	2b03      	cmp	r3, #3
 800d116:	d863      	bhi.n	800d1e0 <_dtoa_r+0x298>
 800d118:	e8df f003 	tbb	[pc, r3]
 800d11c:	2b375452 	.word	0x2b375452
 800d120:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d124:	441e      	add	r6, r3
 800d126:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d12a:	2b20      	cmp	r3, #32
 800d12c:	bfc1      	itttt	gt
 800d12e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d132:	409f      	lslgt	r7, r3
 800d134:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d138:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d13c:	bfd6      	itet	le
 800d13e:	f1c3 0320 	rsble	r3, r3, #32
 800d142:	ea47 0003 	orrgt.w	r0, r7, r3
 800d146:	fa04 f003 	lslle.w	r0, r4, r3
 800d14a:	f7f3 f9db 	bl	8000504 <__aeabi_ui2d>
 800d14e:	2201      	movs	r2, #1
 800d150:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d154:	3e01      	subs	r6, #1
 800d156:	9212      	str	r2, [sp, #72]	@ 0x48
 800d158:	e776      	b.n	800d048 <_dtoa_r+0x100>
 800d15a:	2301      	movs	r3, #1
 800d15c:	e7b7      	b.n	800d0ce <_dtoa_r+0x186>
 800d15e:	9010      	str	r0, [sp, #64]	@ 0x40
 800d160:	e7b6      	b.n	800d0d0 <_dtoa_r+0x188>
 800d162:	9b00      	ldr	r3, [sp, #0]
 800d164:	1bdb      	subs	r3, r3, r7
 800d166:	9300      	str	r3, [sp, #0]
 800d168:	427b      	negs	r3, r7
 800d16a:	9308      	str	r3, [sp, #32]
 800d16c:	2300      	movs	r3, #0
 800d16e:	930d      	str	r3, [sp, #52]	@ 0x34
 800d170:	e7c3      	b.n	800d0fa <_dtoa_r+0x1b2>
 800d172:	2301      	movs	r3, #1
 800d174:	9309      	str	r3, [sp, #36]	@ 0x24
 800d176:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d178:	eb07 0b03 	add.w	fp, r7, r3
 800d17c:	f10b 0301 	add.w	r3, fp, #1
 800d180:	2b01      	cmp	r3, #1
 800d182:	9303      	str	r3, [sp, #12]
 800d184:	bfb8      	it	lt
 800d186:	2301      	movlt	r3, #1
 800d188:	e006      	b.n	800d198 <_dtoa_r+0x250>
 800d18a:	2301      	movs	r3, #1
 800d18c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d18e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d190:	2b00      	cmp	r3, #0
 800d192:	dd28      	ble.n	800d1e6 <_dtoa_r+0x29e>
 800d194:	469b      	mov	fp, r3
 800d196:	9303      	str	r3, [sp, #12]
 800d198:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d19c:	2100      	movs	r1, #0
 800d19e:	2204      	movs	r2, #4
 800d1a0:	f102 0514 	add.w	r5, r2, #20
 800d1a4:	429d      	cmp	r5, r3
 800d1a6:	d926      	bls.n	800d1f6 <_dtoa_r+0x2ae>
 800d1a8:	6041      	str	r1, [r0, #4]
 800d1aa:	4648      	mov	r0, r9
 800d1ac:	f000 fd9c 	bl	800dce8 <_Balloc>
 800d1b0:	4682      	mov	sl, r0
 800d1b2:	2800      	cmp	r0, #0
 800d1b4:	d142      	bne.n	800d23c <_dtoa_r+0x2f4>
 800d1b6:	4b1e      	ldr	r3, [pc, #120]	@ (800d230 <_dtoa_r+0x2e8>)
 800d1b8:	4602      	mov	r2, r0
 800d1ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800d1be:	e6da      	b.n	800cf76 <_dtoa_r+0x2e>
 800d1c0:	2300      	movs	r3, #0
 800d1c2:	e7e3      	b.n	800d18c <_dtoa_r+0x244>
 800d1c4:	2300      	movs	r3, #0
 800d1c6:	e7d5      	b.n	800d174 <_dtoa_r+0x22c>
 800d1c8:	2401      	movs	r4, #1
 800d1ca:	2300      	movs	r3, #0
 800d1cc:	9307      	str	r3, [sp, #28]
 800d1ce:	9409      	str	r4, [sp, #36]	@ 0x24
 800d1d0:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800d1d4:	2200      	movs	r2, #0
 800d1d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800d1da:	2312      	movs	r3, #18
 800d1dc:	920c      	str	r2, [sp, #48]	@ 0x30
 800d1de:	e7db      	b.n	800d198 <_dtoa_r+0x250>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800d1e4:	e7f4      	b.n	800d1d0 <_dtoa_r+0x288>
 800d1e6:	f04f 0b01 	mov.w	fp, #1
 800d1ea:	f8cd b00c 	str.w	fp, [sp, #12]
 800d1ee:	465b      	mov	r3, fp
 800d1f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d1f4:	e7d0      	b.n	800d198 <_dtoa_r+0x250>
 800d1f6:	3101      	adds	r1, #1
 800d1f8:	0052      	lsls	r2, r2, #1
 800d1fa:	e7d1      	b.n	800d1a0 <_dtoa_r+0x258>
 800d1fc:	f3af 8000 	nop.w
 800d200:	636f4361 	.word	0x636f4361
 800d204:	3fd287a7 	.word	0x3fd287a7
 800d208:	8b60c8b3 	.word	0x8b60c8b3
 800d20c:	3fc68a28 	.word	0x3fc68a28
 800d210:	509f79fb 	.word	0x509f79fb
 800d214:	3fd34413 	.word	0x3fd34413
 800d218:	0802e15d 	.word	0x0802e15d
 800d21c:	0802e174 	.word	0x0802e174
 800d220:	7ff00000 	.word	0x7ff00000
 800d224:	0802e12d 	.word	0x0802e12d
 800d228:	3ff80000 	.word	0x3ff80000
 800d22c:	0802e2c8 	.word	0x0802e2c8
 800d230:	0802e1cc 	.word	0x0802e1cc
 800d234:	0802e159 	.word	0x0802e159
 800d238:	0802e12c 	.word	0x0802e12c
 800d23c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d240:	6018      	str	r0, [r3, #0]
 800d242:	9b03      	ldr	r3, [sp, #12]
 800d244:	2b0e      	cmp	r3, #14
 800d246:	f200 80a1 	bhi.w	800d38c <_dtoa_r+0x444>
 800d24a:	2c00      	cmp	r4, #0
 800d24c:	f000 809e 	beq.w	800d38c <_dtoa_r+0x444>
 800d250:	2f00      	cmp	r7, #0
 800d252:	dd33      	ble.n	800d2bc <_dtoa_r+0x374>
 800d254:	4b9c      	ldr	r3, [pc, #624]	@ (800d4c8 <_dtoa_r+0x580>)
 800d256:	f007 020f 	and.w	r2, r7, #15
 800d25a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d25e:	ed93 7b00 	vldr	d7, [r3]
 800d262:	05f8      	lsls	r0, r7, #23
 800d264:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d268:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d26c:	d516      	bpl.n	800d29c <_dtoa_r+0x354>
 800d26e:	4b97      	ldr	r3, [pc, #604]	@ (800d4cc <_dtoa_r+0x584>)
 800d270:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d278:	f7f3 fae8 	bl	800084c <__aeabi_ddiv>
 800d27c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d280:	f004 040f 	and.w	r4, r4, #15
 800d284:	2603      	movs	r6, #3
 800d286:	4d91      	ldr	r5, [pc, #580]	@ (800d4cc <_dtoa_r+0x584>)
 800d288:	b954      	cbnz	r4, 800d2a0 <_dtoa_r+0x358>
 800d28a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d28e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d292:	f7f3 fadb 	bl	800084c <__aeabi_ddiv>
 800d296:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d29a:	e028      	b.n	800d2ee <_dtoa_r+0x3a6>
 800d29c:	2602      	movs	r6, #2
 800d29e:	e7f2      	b.n	800d286 <_dtoa_r+0x33e>
 800d2a0:	07e1      	lsls	r1, r4, #31
 800d2a2:	d508      	bpl.n	800d2b6 <_dtoa_r+0x36e>
 800d2a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d2a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d2ac:	f7f3 f9a4 	bl	80005f8 <__aeabi_dmul>
 800d2b0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d2b4:	3601      	adds	r6, #1
 800d2b6:	1064      	asrs	r4, r4, #1
 800d2b8:	3508      	adds	r5, #8
 800d2ba:	e7e5      	b.n	800d288 <_dtoa_r+0x340>
 800d2bc:	f000 80af 	beq.w	800d41e <_dtoa_r+0x4d6>
 800d2c0:	427c      	negs	r4, r7
 800d2c2:	4b81      	ldr	r3, [pc, #516]	@ (800d4c8 <_dtoa_r+0x580>)
 800d2c4:	4d81      	ldr	r5, [pc, #516]	@ (800d4cc <_dtoa_r+0x584>)
 800d2c6:	f004 020f 	and.w	r2, r4, #15
 800d2ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2d2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d2d6:	f7f3 f98f 	bl	80005f8 <__aeabi_dmul>
 800d2da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d2de:	1124      	asrs	r4, r4, #4
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	2602      	movs	r6, #2
 800d2e4:	2c00      	cmp	r4, #0
 800d2e6:	f040 808f 	bne.w	800d408 <_dtoa_r+0x4c0>
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d1d3      	bne.n	800d296 <_dtoa_r+0x34e>
 800d2ee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d2f0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d2f4:	2b00      	cmp	r3, #0
 800d2f6:	f000 8094 	beq.w	800d422 <_dtoa_r+0x4da>
 800d2fa:	4b75      	ldr	r3, [pc, #468]	@ (800d4d0 <_dtoa_r+0x588>)
 800d2fc:	2200      	movs	r2, #0
 800d2fe:	4620      	mov	r0, r4
 800d300:	4629      	mov	r1, r5
 800d302:	f7f3 fbeb 	bl	8000adc <__aeabi_dcmplt>
 800d306:	2800      	cmp	r0, #0
 800d308:	f000 808b 	beq.w	800d422 <_dtoa_r+0x4da>
 800d30c:	9b03      	ldr	r3, [sp, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 8087 	beq.w	800d422 <_dtoa_r+0x4da>
 800d314:	f1bb 0f00 	cmp.w	fp, #0
 800d318:	dd34      	ble.n	800d384 <_dtoa_r+0x43c>
 800d31a:	4620      	mov	r0, r4
 800d31c:	4b6d      	ldr	r3, [pc, #436]	@ (800d4d4 <_dtoa_r+0x58c>)
 800d31e:	2200      	movs	r2, #0
 800d320:	4629      	mov	r1, r5
 800d322:	f7f3 f969 	bl	80005f8 <__aeabi_dmul>
 800d326:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d32a:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d32e:	3601      	adds	r6, #1
 800d330:	465c      	mov	r4, fp
 800d332:	4630      	mov	r0, r6
 800d334:	f7f3 f8f6 	bl	8000524 <__aeabi_i2d>
 800d338:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d33c:	f7f3 f95c 	bl	80005f8 <__aeabi_dmul>
 800d340:	4b65      	ldr	r3, [pc, #404]	@ (800d4d8 <_dtoa_r+0x590>)
 800d342:	2200      	movs	r2, #0
 800d344:	f7f2 ffa2 	bl	800028c <__adddf3>
 800d348:	4605      	mov	r5, r0
 800d34a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d34e:	2c00      	cmp	r4, #0
 800d350:	d16a      	bne.n	800d428 <_dtoa_r+0x4e0>
 800d352:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d356:	4b61      	ldr	r3, [pc, #388]	@ (800d4dc <_dtoa_r+0x594>)
 800d358:	2200      	movs	r2, #0
 800d35a:	f7f2 ff95 	bl	8000288 <__aeabi_dsub>
 800d35e:	4602      	mov	r2, r0
 800d360:	460b      	mov	r3, r1
 800d362:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d366:	462a      	mov	r2, r5
 800d368:	4633      	mov	r3, r6
 800d36a:	f7f3 fbd5 	bl	8000b18 <__aeabi_dcmpgt>
 800d36e:	2800      	cmp	r0, #0
 800d370:	f040 8298 	bne.w	800d8a4 <_dtoa_r+0x95c>
 800d374:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d378:	462a      	mov	r2, r5
 800d37a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d37e:	f7f3 fbad 	bl	8000adc <__aeabi_dcmplt>
 800d382:	bb38      	cbnz	r0, 800d3d4 <_dtoa_r+0x48c>
 800d384:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d388:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d38c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f2c0 8157 	blt.w	800d642 <_dtoa_r+0x6fa>
 800d394:	2f0e      	cmp	r7, #14
 800d396:	f300 8154 	bgt.w	800d642 <_dtoa_r+0x6fa>
 800d39a:	4b4b      	ldr	r3, [pc, #300]	@ (800d4c8 <_dtoa_r+0x580>)
 800d39c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d3a0:	ed93 7b00 	vldr	d7, [r3]
 800d3a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3a6:	2b00      	cmp	r3, #0
 800d3a8:	ed8d 7b00 	vstr	d7, [sp]
 800d3ac:	f280 80e5 	bge.w	800d57a <_dtoa_r+0x632>
 800d3b0:	9b03      	ldr	r3, [sp, #12]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	f300 80e1 	bgt.w	800d57a <_dtoa_r+0x632>
 800d3b8:	d10c      	bne.n	800d3d4 <_dtoa_r+0x48c>
 800d3ba:	4b48      	ldr	r3, [pc, #288]	@ (800d4dc <_dtoa_r+0x594>)
 800d3bc:	2200      	movs	r2, #0
 800d3be:	ec51 0b17 	vmov	r0, r1, d7
 800d3c2:	f7f3 f919 	bl	80005f8 <__aeabi_dmul>
 800d3c6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d3ca:	f7f3 fb9b 	bl	8000b04 <__aeabi_dcmpge>
 800d3ce:	2800      	cmp	r0, #0
 800d3d0:	f000 8266 	beq.w	800d8a0 <_dtoa_r+0x958>
 800d3d4:	2400      	movs	r4, #0
 800d3d6:	4625      	mov	r5, r4
 800d3d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d3da:	4656      	mov	r6, sl
 800d3dc:	ea6f 0803 	mvn.w	r8, r3
 800d3e0:	2700      	movs	r7, #0
 800d3e2:	4621      	mov	r1, r4
 800d3e4:	4648      	mov	r0, r9
 800d3e6:	f000 fcbf 	bl	800dd68 <_Bfree>
 800d3ea:	2d00      	cmp	r5, #0
 800d3ec:	f000 80bd 	beq.w	800d56a <_dtoa_r+0x622>
 800d3f0:	b12f      	cbz	r7, 800d3fe <_dtoa_r+0x4b6>
 800d3f2:	42af      	cmp	r7, r5
 800d3f4:	d003      	beq.n	800d3fe <_dtoa_r+0x4b6>
 800d3f6:	4639      	mov	r1, r7
 800d3f8:	4648      	mov	r0, r9
 800d3fa:	f000 fcb5 	bl	800dd68 <_Bfree>
 800d3fe:	4629      	mov	r1, r5
 800d400:	4648      	mov	r0, r9
 800d402:	f000 fcb1 	bl	800dd68 <_Bfree>
 800d406:	e0b0      	b.n	800d56a <_dtoa_r+0x622>
 800d408:	07e2      	lsls	r2, r4, #31
 800d40a:	d505      	bpl.n	800d418 <_dtoa_r+0x4d0>
 800d40c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d410:	f7f3 f8f2 	bl	80005f8 <__aeabi_dmul>
 800d414:	3601      	adds	r6, #1
 800d416:	2301      	movs	r3, #1
 800d418:	1064      	asrs	r4, r4, #1
 800d41a:	3508      	adds	r5, #8
 800d41c:	e762      	b.n	800d2e4 <_dtoa_r+0x39c>
 800d41e:	2602      	movs	r6, #2
 800d420:	e765      	b.n	800d2ee <_dtoa_r+0x3a6>
 800d422:	9c03      	ldr	r4, [sp, #12]
 800d424:	46b8      	mov	r8, r7
 800d426:	e784      	b.n	800d332 <_dtoa_r+0x3ea>
 800d428:	4b27      	ldr	r3, [pc, #156]	@ (800d4c8 <_dtoa_r+0x580>)
 800d42a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d42c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d430:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d434:	4454      	add	r4, sl
 800d436:	2900      	cmp	r1, #0
 800d438:	d054      	beq.n	800d4e4 <_dtoa_r+0x59c>
 800d43a:	4929      	ldr	r1, [pc, #164]	@ (800d4e0 <_dtoa_r+0x598>)
 800d43c:	2000      	movs	r0, #0
 800d43e:	f7f3 fa05 	bl	800084c <__aeabi_ddiv>
 800d442:	4633      	mov	r3, r6
 800d444:	462a      	mov	r2, r5
 800d446:	f7f2 ff1f 	bl	8000288 <__aeabi_dsub>
 800d44a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d44e:	4656      	mov	r6, sl
 800d450:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d454:	f7f3 fb80 	bl	8000b58 <__aeabi_d2iz>
 800d458:	4605      	mov	r5, r0
 800d45a:	f7f3 f863 	bl	8000524 <__aeabi_i2d>
 800d45e:	4602      	mov	r2, r0
 800d460:	460b      	mov	r3, r1
 800d462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d466:	f7f2 ff0f 	bl	8000288 <__aeabi_dsub>
 800d46a:	3530      	adds	r5, #48	@ 0x30
 800d46c:	4602      	mov	r2, r0
 800d46e:	460b      	mov	r3, r1
 800d470:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d474:	f806 5b01 	strb.w	r5, [r6], #1
 800d478:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d47c:	f7f3 fb2e 	bl	8000adc <__aeabi_dcmplt>
 800d480:	2800      	cmp	r0, #0
 800d482:	d172      	bne.n	800d56a <_dtoa_r+0x622>
 800d484:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d488:	4911      	ldr	r1, [pc, #68]	@ (800d4d0 <_dtoa_r+0x588>)
 800d48a:	2000      	movs	r0, #0
 800d48c:	f7f2 fefc 	bl	8000288 <__aeabi_dsub>
 800d490:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d494:	f7f3 fb22 	bl	8000adc <__aeabi_dcmplt>
 800d498:	2800      	cmp	r0, #0
 800d49a:	f040 80b4 	bne.w	800d606 <_dtoa_r+0x6be>
 800d49e:	42a6      	cmp	r6, r4
 800d4a0:	f43f af70 	beq.w	800d384 <_dtoa_r+0x43c>
 800d4a4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d4a8:	4b0a      	ldr	r3, [pc, #40]	@ (800d4d4 <_dtoa_r+0x58c>)
 800d4aa:	2200      	movs	r2, #0
 800d4ac:	f7f3 f8a4 	bl	80005f8 <__aeabi_dmul>
 800d4b0:	4b08      	ldr	r3, [pc, #32]	@ (800d4d4 <_dtoa_r+0x58c>)
 800d4b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4bc:	f7f3 f89c 	bl	80005f8 <__aeabi_dmul>
 800d4c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d4c4:	e7c4      	b.n	800d450 <_dtoa_r+0x508>
 800d4c6:	bf00      	nop
 800d4c8:	0802e2c8 	.word	0x0802e2c8
 800d4cc:	0802e2a0 	.word	0x0802e2a0
 800d4d0:	3ff00000 	.word	0x3ff00000
 800d4d4:	40240000 	.word	0x40240000
 800d4d8:	401c0000 	.word	0x401c0000
 800d4dc:	40140000 	.word	0x40140000
 800d4e0:	3fe00000 	.word	0x3fe00000
 800d4e4:	4631      	mov	r1, r6
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f7f3 f886 	bl	80005f8 <__aeabi_dmul>
 800d4ec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d4f0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800d4f2:	4656      	mov	r6, sl
 800d4f4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d4f8:	f7f3 fb2e 	bl	8000b58 <__aeabi_d2iz>
 800d4fc:	4605      	mov	r5, r0
 800d4fe:	f7f3 f811 	bl	8000524 <__aeabi_i2d>
 800d502:	4602      	mov	r2, r0
 800d504:	460b      	mov	r3, r1
 800d506:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d50a:	f7f2 febd 	bl	8000288 <__aeabi_dsub>
 800d50e:	3530      	adds	r5, #48	@ 0x30
 800d510:	f806 5b01 	strb.w	r5, [r6], #1
 800d514:	4602      	mov	r2, r0
 800d516:	460b      	mov	r3, r1
 800d518:	42a6      	cmp	r6, r4
 800d51a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d51e:	f04f 0200 	mov.w	r2, #0
 800d522:	d124      	bne.n	800d56e <_dtoa_r+0x626>
 800d524:	4baf      	ldr	r3, [pc, #700]	@ (800d7e4 <_dtoa_r+0x89c>)
 800d526:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d52a:	f7f2 feaf 	bl	800028c <__adddf3>
 800d52e:	4602      	mov	r2, r0
 800d530:	460b      	mov	r3, r1
 800d532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d536:	f7f3 faef 	bl	8000b18 <__aeabi_dcmpgt>
 800d53a:	2800      	cmp	r0, #0
 800d53c:	d163      	bne.n	800d606 <_dtoa_r+0x6be>
 800d53e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d542:	49a8      	ldr	r1, [pc, #672]	@ (800d7e4 <_dtoa_r+0x89c>)
 800d544:	2000      	movs	r0, #0
 800d546:	f7f2 fe9f 	bl	8000288 <__aeabi_dsub>
 800d54a:	4602      	mov	r2, r0
 800d54c:	460b      	mov	r3, r1
 800d54e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d552:	f7f3 fac3 	bl	8000adc <__aeabi_dcmplt>
 800d556:	2800      	cmp	r0, #0
 800d558:	f43f af14 	beq.w	800d384 <_dtoa_r+0x43c>
 800d55c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800d55e:	1e73      	subs	r3, r6, #1
 800d560:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d562:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d566:	2b30      	cmp	r3, #48	@ 0x30
 800d568:	d0f8      	beq.n	800d55c <_dtoa_r+0x614>
 800d56a:	4647      	mov	r7, r8
 800d56c:	e03b      	b.n	800d5e6 <_dtoa_r+0x69e>
 800d56e:	4b9e      	ldr	r3, [pc, #632]	@ (800d7e8 <_dtoa_r+0x8a0>)
 800d570:	f7f3 f842 	bl	80005f8 <__aeabi_dmul>
 800d574:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d578:	e7bc      	b.n	800d4f4 <_dtoa_r+0x5ac>
 800d57a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d57e:	4656      	mov	r6, sl
 800d580:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d584:	4620      	mov	r0, r4
 800d586:	4629      	mov	r1, r5
 800d588:	f7f3 f960 	bl	800084c <__aeabi_ddiv>
 800d58c:	f7f3 fae4 	bl	8000b58 <__aeabi_d2iz>
 800d590:	4680      	mov	r8, r0
 800d592:	f7f2 ffc7 	bl	8000524 <__aeabi_i2d>
 800d596:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d59a:	f7f3 f82d 	bl	80005f8 <__aeabi_dmul>
 800d59e:	4602      	mov	r2, r0
 800d5a0:	460b      	mov	r3, r1
 800d5a2:	4620      	mov	r0, r4
 800d5a4:	4629      	mov	r1, r5
 800d5a6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d5aa:	f7f2 fe6d 	bl	8000288 <__aeabi_dsub>
 800d5ae:	f806 4b01 	strb.w	r4, [r6], #1
 800d5b2:	9d03      	ldr	r5, [sp, #12]
 800d5b4:	eba6 040a 	sub.w	r4, r6, sl
 800d5b8:	42a5      	cmp	r5, r4
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	460b      	mov	r3, r1
 800d5be:	d133      	bne.n	800d628 <_dtoa_r+0x6e0>
 800d5c0:	f7f2 fe64 	bl	800028c <__adddf3>
 800d5c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5c8:	4604      	mov	r4, r0
 800d5ca:	460d      	mov	r5, r1
 800d5cc:	f7f3 faa4 	bl	8000b18 <__aeabi_dcmpgt>
 800d5d0:	b9c0      	cbnz	r0, 800d604 <_dtoa_r+0x6bc>
 800d5d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d5d6:	4620      	mov	r0, r4
 800d5d8:	4629      	mov	r1, r5
 800d5da:	f7f3 fa75 	bl	8000ac8 <__aeabi_dcmpeq>
 800d5de:	b110      	cbz	r0, 800d5e6 <_dtoa_r+0x69e>
 800d5e0:	f018 0f01 	tst.w	r8, #1
 800d5e4:	d10e      	bne.n	800d604 <_dtoa_r+0x6bc>
 800d5e6:	9902      	ldr	r1, [sp, #8]
 800d5e8:	4648      	mov	r0, r9
 800d5ea:	f000 fbbd 	bl	800dd68 <_Bfree>
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	7033      	strb	r3, [r6, #0]
 800d5f2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5f4:	3701      	adds	r7, #1
 800d5f6:	601f      	str	r7, [r3, #0]
 800d5f8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	f000 824b 	beq.w	800da96 <_dtoa_r+0xb4e>
 800d600:	601e      	str	r6, [r3, #0]
 800d602:	e248      	b.n	800da96 <_dtoa_r+0xb4e>
 800d604:	46b8      	mov	r8, r7
 800d606:	4633      	mov	r3, r6
 800d608:	461e      	mov	r6, r3
 800d60a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d60e:	2a39      	cmp	r2, #57	@ 0x39
 800d610:	d106      	bne.n	800d620 <_dtoa_r+0x6d8>
 800d612:	459a      	cmp	sl, r3
 800d614:	d1f8      	bne.n	800d608 <_dtoa_r+0x6c0>
 800d616:	2230      	movs	r2, #48	@ 0x30
 800d618:	f108 0801 	add.w	r8, r8, #1
 800d61c:	f88a 2000 	strb.w	r2, [sl]
 800d620:	781a      	ldrb	r2, [r3, #0]
 800d622:	3201      	adds	r2, #1
 800d624:	701a      	strb	r2, [r3, #0]
 800d626:	e7a0      	b.n	800d56a <_dtoa_r+0x622>
 800d628:	4b6f      	ldr	r3, [pc, #444]	@ (800d7e8 <_dtoa_r+0x8a0>)
 800d62a:	2200      	movs	r2, #0
 800d62c:	f7f2 ffe4 	bl	80005f8 <__aeabi_dmul>
 800d630:	2200      	movs	r2, #0
 800d632:	2300      	movs	r3, #0
 800d634:	4604      	mov	r4, r0
 800d636:	460d      	mov	r5, r1
 800d638:	f7f3 fa46 	bl	8000ac8 <__aeabi_dcmpeq>
 800d63c:	2800      	cmp	r0, #0
 800d63e:	d09f      	beq.n	800d580 <_dtoa_r+0x638>
 800d640:	e7d1      	b.n	800d5e6 <_dtoa_r+0x69e>
 800d642:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d644:	2a00      	cmp	r2, #0
 800d646:	f000 80ea 	beq.w	800d81e <_dtoa_r+0x8d6>
 800d64a:	9a07      	ldr	r2, [sp, #28]
 800d64c:	2a01      	cmp	r2, #1
 800d64e:	f300 80cd 	bgt.w	800d7ec <_dtoa_r+0x8a4>
 800d652:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d654:	2a00      	cmp	r2, #0
 800d656:	f000 80c1 	beq.w	800d7dc <_dtoa_r+0x894>
 800d65a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d65e:	9c08      	ldr	r4, [sp, #32]
 800d660:	9e00      	ldr	r6, [sp, #0]
 800d662:	9a00      	ldr	r2, [sp, #0]
 800d664:	441a      	add	r2, r3
 800d666:	9200      	str	r2, [sp, #0]
 800d668:	9a06      	ldr	r2, [sp, #24]
 800d66a:	2101      	movs	r1, #1
 800d66c:	441a      	add	r2, r3
 800d66e:	4648      	mov	r0, r9
 800d670:	9206      	str	r2, [sp, #24]
 800d672:	f000 fc2d 	bl	800ded0 <__i2b>
 800d676:	4605      	mov	r5, r0
 800d678:	b166      	cbz	r6, 800d694 <_dtoa_r+0x74c>
 800d67a:	9b06      	ldr	r3, [sp, #24]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	dd09      	ble.n	800d694 <_dtoa_r+0x74c>
 800d680:	42b3      	cmp	r3, r6
 800d682:	9a00      	ldr	r2, [sp, #0]
 800d684:	bfa8      	it	ge
 800d686:	4633      	movge	r3, r6
 800d688:	1ad2      	subs	r2, r2, r3
 800d68a:	9200      	str	r2, [sp, #0]
 800d68c:	9a06      	ldr	r2, [sp, #24]
 800d68e:	1af6      	subs	r6, r6, r3
 800d690:	1ad3      	subs	r3, r2, r3
 800d692:	9306      	str	r3, [sp, #24]
 800d694:	9b08      	ldr	r3, [sp, #32]
 800d696:	b30b      	cbz	r3, 800d6dc <_dtoa_r+0x794>
 800d698:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	f000 80c6 	beq.w	800d82c <_dtoa_r+0x8e4>
 800d6a0:	2c00      	cmp	r4, #0
 800d6a2:	f000 80c0 	beq.w	800d826 <_dtoa_r+0x8de>
 800d6a6:	4629      	mov	r1, r5
 800d6a8:	4622      	mov	r2, r4
 800d6aa:	4648      	mov	r0, r9
 800d6ac:	f000 fcc8 	bl	800e040 <__pow5mult>
 800d6b0:	9a02      	ldr	r2, [sp, #8]
 800d6b2:	4601      	mov	r1, r0
 800d6b4:	4605      	mov	r5, r0
 800d6b6:	4648      	mov	r0, r9
 800d6b8:	f000 fc20 	bl	800defc <__multiply>
 800d6bc:	9902      	ldr	r1, [sp, #8]
 800d6be:	4680      	mov	r8, r0
 800d6c0:	4648      	mov	r0, r9
 800d6c2:	f000 fb51 	bl	800dd68 <_Bfree>
 800d6c6:	9b08      	ldr	r3, [sp, #32]
 800d6c8:	1b1b      	subs	r3, r3, r4
 800d6ca:	9308      	str	r3, [sp, #32]
 800d6cc:	f000 80b1 	beq.w	800d832 <_dtoa_r+0x8ea>
 800d6d0:	9a08      	ldr	r2, [sp, #32]
 800d6d2:	4641      	mov	r1, r8
 800d6d4:	4648      	mov	r0, r9
 800d6d6:	f000 fcb3 	bl	800e040 <__pow5mult>
 800d6da:	9002      	str	r0, [sp, #8]
 800d6dc:	2101      	movs	r1, #1
 800d6de:	4648      	mov	r0, r9
 800d6e0:	f000 fbf6 	bl	800ded0 <__i2b>
 800d6e4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	f000 81d8 	beq.w	800da9e <_dtoa_r+0xb56>
 800d6ee:	461a      	mov	r2, r3
 800d6f0:	4601      	mov	r1, r0
 800d6f2:	4648      	mov	r0, r9
 800d6f4:	f000 fca4 	bl	800e040 <__pow5mult>
 800d6f8:	9b07      	ldr	r3, [sp, #28]
 800d6fa:	2b01      	cmp	r3, #1
 800d6fc:	4604      	mov	r4, r0
 800d6fe:	f300 809f 	bgt.w	800d840 <_dtoa_r+0x8f8>
 800d702:	9b04      	ldr	r3, [sp, #16]
 800d704:	2b00      	cmp	r3, #0
 800d706:	f040 8097 	bne.w	800d838 <_dtoa_r+0x8f0>
 800d70a:	9b05      	ldr	r3, [sp, #20]
 800d70c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d710:	2b00      	cmp	r3, #0
 800d712:	f040 8093 	bne.w	800d83c <_dtoa_r+0x8f4>
 800d716:	9b05      	ldr	r3, [sp, #20]
 800d718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d71c:	0d1b      	lsrs	r3, r3, #20
 800d71e:	051b      	lsls	r3, r3, #20
 800d720:	b133      	cbz	r3, 800d730 <_dtoa_r+0x7e8>
 800d722:	9b00      	ldr	r3, [sp, #0]
 800d724:	3301      	adds	r3, #1
 800d726:	9300      	str	r3, [sp, #0]
 800d728:	9b06      	ldr	r3, [sp, #24]
 800d72a:	3301      	adds	r3, #1
 800d72c:	9306      	str	r3, [sp, #24]
 800d72e:	2301      	movs	r3, #1
 800d730:	9308      	str	r3, [sp, #32]
 800d732:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d734:	2b00      	cmp	r3, #0
 800d736:	f000 81b8 	beq.w	800daaa <_dtoa_r+0xb62>
 800d73a:	6923      	ldr	r3, [r4, #16]
 800d73c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d740:	6918      	ldr	r0, [r3, #16]
 800d742:	f000 fb79 	bl	800de38 <__hi0bits>
 800d746:	f1c0 0020 	rsb	r0, r0, #32
 800d74a:	9b06      	ldr	r3, [sp, #24]
 800d74c:	4418      	add	r0, r3
 800d74e:	f010 001f 	ands.w	r0, r0, #31
 800d752:	f000 8082 	beq.w	800d85a <_dtoa_r+0x912>
 800d756:	f1c0 0320 	rsb	r3, r0, #32
 800d75a:	2b04      	cmp	r3, #4
 800d75c:	dd73      	ble.n	800d846 <_dtoa_r+0x8fe>
 800d75e:	9b00      	ldr	r3, [sp, #0]
 800d760:	f1c0 001c 	rsb	r0, r0, #28
 800d764:	4403      	add	r3, r0
 800d766:	9300      	str	r3, [sp, #0]
 800d768:	9b06      	ldr	r3, [sp, #24]
 800d76a:	4403      	add	r3, r0
 800d76c:	4406      	add	r6, r0
 800d76e:	9306      	str	r3, [sp, #24]
 800d770:	9b00      	ldr	r3, [sp, #0]
 800d772:	2b00      	cmp	r3, #0
 800d774:	dd05      	ble.n	800d782 <_dtoa_r+0x83a>
 800d776:	9902      	ldr	r1, [sp, #8]
 800d778:	461a      	mov	r2, r3
 800d77a:	4648      	mov	r0, r9
 800d77c:	f000 fcba 	bl	800e0f4 <__lshift>
 800d780:	9002      	str	r0, [sp, #8]
 800d782:	9b06      	ldr	r3, [sp, #24]
 800d784:	2b00      	cmp	r3, #0
 800d786:	dd05      	ble.n	800d794 <_dtoa_r+0x84c>
 800d788:	4621      	mov	r1, r4
 800d78a:	461a      	mov	r2, r3
 800d78c:	4648      	mov	r0, r9
 800d78e:	f000 fcb1 	bl	800e0f4 <__lshift>
 800d792:	4604      	mov	r4, r0
 800d794:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d796:	2b00      	cmp	r3, #0
 800d798:	d061      	beq.n	800d85e <_dtoa_r+0x916>
 800d79a:	9802      	ldr	r0, [sp, #8]
 800d79c:	4621      	mov	r1, r4
 800d79e:	f000 fd15 	bl	800e1cc <__mcmp>
 800d7a2:	2800      	cmp	r0, #0
 800d7a4:	da5b      	bge.n	800d85e <_dtoa_r+0x916>
 800d7a6:	2300      	movs	r3, #0
 800d7a8:	9902      	ldr	r1, [sp, #8]
 800d7aa:	220a      	movs	r2, #10
 800d7ac:	4648      	mov	r0, r9
 800d7ae:	f000 fafd 	bl	800ddac <__multadd>
 800d7b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d7b4:	9002      	str	r0, [sp, #8]
 800d7b6:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	f000 8177 	beq.w	800daae <_dtoa_r+0xb66>
 800d7c0:	4629      	mov	r1, r5
 800d7c2:	2300      	movs	r3, #0
 800d7c4:	220a      	movs	r2, #10
 800d7c6:	4648      	mov	r0, r9
 800d7c8:	f000 faf0 	bl	800ddac <__multadd>
 800d7cc:	f1bb 0f00 	cmp.w	fp, #0
 800d7d0:	4605      	mov	r5, r0
 800d7d2:	dc6f      	bgt.n	800d8b4 <_dtoa_r+0x96c>
 800d7d4:	9b07      	ldr	r3, [sp, #28]
 800d7d6:	2b02      	cmp	r3, #2
 800d7d8:	dc49      	bgt.n	800d86e <_dtoa_r+0x926>
 800d7da:	e06b      	b.n	800d8b4 <_dtoa_r+0x96c>
 800d7dc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d7de:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d7e2:	e73c      	b.n	800d65e <_dtoa_r+0x716>
 800d7e4:	3fe00000 	.word	0x3fe00000
 800d7e8:	40240000 	.word	0x40240000
 800d7ec:	9b03      	ldr	r3, [sp, #12]
 800d7ee:	1e5c      	subs	r4, r3, #1
 800d7f0:	9b08      	ldr	r3, [sp, #32]
 800d7f2:	42a3      	cmp	r3, r4
 800d7f4:	db09      	blt.n	800d80a <_dtoa_r+0x8c2>
 800d7f6:	1b1c      	subs	r4, r3, r4
 800d7f8:	9b03      	ldr	r3, [sp, #12]
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	f6bf af30 	bge.w	800d660 <_dtoa_r+0x718>
 800d800:	9b00      	ldr	r3, [sp, #0]
 800d802:	9a03      	ldr	r2, [sp, #12]
 800d804:	1a9e      	subs	r6, r3, r2
 800d806:	2300      	movs	r3, #0
 800d808:	e72b      	b.n	800d662 <_dtoa_r+0x71a>
 800d80a:	9b08      	ldr	r3, [sp, #32]
 800d80c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d80e:	9408      	str	r4, [sp, #32]
 800d810:	1ae3      	subs	r3, r4, r3
 800d812:	441a      	add	r2, r3
 800d814:	9e00      	ldr	r6, [sp, #0]
 800d816:	9b03      	ldr	r3, [sp, #12]
 800d818:	920d      	str	r2, [sp, #52]	@ 0x34
 800d81a:	2400      	movs	r4, #0
 800d81c:	e721      	b.n	800d662 <_dtoa_r+0x71a>
 800d81e:	9c08      	ldr	r4, [sp, #32]
 800d820:	9e00      	ldr	r6, [sp, #0]
 800d822:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800d824:	e728      	b.n	800d678 <_dtoa_r+0x730>
 800d826:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800d82a:	e751      	b.n	800d6d0 <_dtoa_r+0x788>
 800d82c:	9a08      	ldr	r2, [sp, #32]
 800d82e:	9902      	ldr	r1, [sp, #8]
 800d830:	e750      	b.n	800d6d4 <_dtoa_r+0x78c>
 800d832:	f8cd 8008 	str.w	r8, [sp, #8]
 800d836:	e751      	b.n	800d6dc <_dtoa_r+0x794>
 800d838:	2300      	movs	r3, #0
 800d83a:	e779      	b.n	800d730 <_dtoa_r+0x7e8>
 800d83c:	9b04      	ldr	r3, [sp, #16]
 800d83e:	e777      	b.n	800d730 <_dtoa_r+0x7e8>
 800d840:	2300      	movs	r3, #0
 800d842:	9308      	str	r3, [sp, #32]
 800d844:	e779      	b.n	800d73a <_dtoa_r+0x7f2>
 800d846:	d093      	beq.n	800d770 <_dtoa_r+0x828>
 800d848:	9a00      	ldr	r2, [sp, #0]
 800d84a:	331c      	adds	r3, #28
 800d84c:	441a      	add	r2, r3
 800d84e:	9200      	str	r2, [sp, #0]
 800d850:	9a06      	ldr	r2, [sp, #24]
 800d852:	441a      	add	r2, r3
 800d854:	441e      	add	r6, r3
 800d856:	9206      	str	r2, [sp, #24]
 800d858:	e78a      	b.n	800d770 <_dtoa_r+0x828>
 800d85a:	4603      	mov	r3, r0
 800d85c:	e7f4      	b.n	800d848 <_dtoa_r+0x900>
 800d85e:	9b03      	ldr	r3, [sp, #12]
 800d860:	2b00      	cmp	r3, #0
 800d862:	46b8      	mov	r8, r7
 800d864:	dc20      	bgt.n	800d8a8 <_dtoa_r+0x960>
 800d866:	469b      	mov	fp, r3
 800d868:	9b07      	ldr	r3, [sp, #28]
 800d86a:	2b02      	cmp	r3, #2
 800d86c:	dd1e      	ble.n	800d8ac <_dtoa_r+0x964>
 800d86e:	f1bb 0f00 	cmp.w	fp, #0
 800d872:	f47f adb1 	bne.w	800d3d8 <_dtoa_r+0x490>
 800d876:	4621      	mov	r1, r4
 800d878:	465b      	mov	r3, fp
 800d87a:	2205      	movs	r2, #5
 800d87c:	4648      	mov	r0, r9
 800d87e:	f000 fa95 	bl	800ddac <__multadd>
 800d882:	4601      	mov	r1, r0
 800d884:	4604      	mov	r4, r0
 800d886:	9802      	ldr	r0, [sp, #8]
 800d888:	f000 fca0 	bl	800e1cc <__mcmp>
 800d88c:	2800      	cmp	r0, #0
 800d88e:	f77f ada3 	ble.w	800d3d8 <_dtoa_r+0x490>
 800d892:	4656      	mov	r6, sl
 800d894:	2331      	movs	r3, #49	@ 0x31
 800d896:	f806 3b01 	strb.w	r3, [r6], #1
 800d89a:	f108 0801 	add.w	r8, r8, #1
 800d89e:	e59f      	b.n	800d3e0 <_dtoa_r+0x498>
 800d8a0:	9c03      	ldr	r4, [sp, #12]
 800d8a2:	46b8      	mov	r8, r7
 800d8a4:	4625      	mov	r5, r4
 800d8a6:	e7f4      	b.n	800d892 <_dtoa_r+0x94a>
 800d8a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800d8ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	f000 8101 	beq.w	800dab6 <_dtoa_r+0xb6e>
 800d8b4:	2e00      	cmp	r6, #0
 800d8b6:	dd05      	ble.n	800d8c4 <_dtoa_r+0x97c>
 800d8b8:	4629      	mov	r1, r5
 800d8ba:	4632      	mov	r2, r6
 800d8bc:	4648      	mov	r0, r9
 800d8be:	f000 fc19 	bl	800e0f4 <__lshift>
 800d8c2:	4605      	mov	r5, r0
 800d8c4:	9b08      	ldr	r3, [sp, #32]
 800d8c6:	2b00      	cmp	r3, #0
 800d8c8:	d05c      	beq.n	800d984 <_dtoa_r+0xa3c>
 800d8ca:	6869      	ldr	r1, [r5, #4]
 800d8cc:	4648      	mov	r0, r9
 800d8ce:	f000 fa0b 	bl	800dce8 <_Balloc>
 800d8d2:	4606      	mov	r6, r0
 800d8d4:	b928      	cbnz	r0, 800d8e2 <_dtoa_r+0x99a>
 800d8d6:	4b82      	ldr	r3, [pc, #520]	@ (800dae0 <_dtoa_r+0xb98>)
 800d8d8:	4602      	mov	r2, r0
 800d8da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d8de:	f7ff bb4a 	b.w	800cf76 <_dtoa_r+0x2e>
 800d8e2:	692a      	ldr	r2, [r5, #16]
 800d8e4:	3202      	adds	r2, #2
 800d8e6:	0092      	lsls	r2, r2, #2
 800d8e8:	f105 010c 	add.w	r1, r5, #12
 800d8ec:	300c      	adds	r0, #12
 800d8ee:	f7ff fa94 	bl	800ce1a <memcpy>
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	4631      	mov	r1, r6
 800d8f6:	4648      	mov	r0, r9
 800d8f8:	f000 fbfc 	bl	800e0f4 <__lshift>
 800d8fc:	f10a 0301 	add.w	r3, sl, #1
 800d900:	9300      	str	r3, [sp, #0]
 800d902:	eb0a 030b 	add.w	r3, sl, fp
 800d906:	9308      	str	r3, [sp, #32]
 800d908:	9b04      	ldr	r3, [sp, #16]
 800d90a:	f003 0301 	and.w	r3, r3, #1
 800d90e:	462f      	mov	r7, r5
 800d910:	9306      	str	r3, [sp, #24]
 800d912:	4605      	mov	r5, r0
 800d914:	9b00      	ldr	r3, [sp, #0]
 800d916:	9802      	ldr	r0, [sp, #8]
 800d918:	4621      	mov	r1, r4
 800d91a:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800d91e:	f7ff fa8a 	bl	800ce36 <quorem>
 800d922:	4603      	mov	r3, r0
 800d924:	3330      	adds	r3, #48	@ 0x30
 800d926:	9003      	str	r0, [sp, #12]
 800d928:	4639      	mov	r1, r7
 800d92a:	9802      	ldr	r0, [sp, #8]
 800d92c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d92e:	f000 fc4d 	bl	800e1cc <__mcmp>
 800d932:	462a      	mov	r2, r5
 800d934:	9004      	str	r0, [sp, #16]
 800d936:	4621      	mov	r1, r4
 800d938:	4648      	mov	r0, r9
 800d93a:	f000 fc63 	bl	800e204 <__mdiff>
 800d93e:	68c2      	ldr	r2, [r0, #12]
 800d940:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d942:	4606      	mov	r6, r0
 800d944:	bb02      	cbnz	r2, 800d988 <_dtoa_r+0xa40>
 800d946:	4601      	mov	r1, r0
 800d948:	9802      	ldr	r0, [sp, #8]
 800d94a:	f000 fc3f 	bl	800e1cc <__mcmp>
 800d94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d950:	4602      	mov	r2, r0
 800d952:	4631      	mov	r1, r6
 800d954:	4648      	mov	r0, r9
 800d956:	920c      	str	r2, [sp, #48]	@ 0x30
 800d958:	9309      	str	r3, [sp, #36]	@ 0x24
 800d95a:	f000 fa05 	bl	800dd68 <_Bfree>
 800d95e:	9b07      	ldr	r3, [sp, #28]
 800d960:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d962:	9e00      	ldr	r6, [sp, #0]
 800d964:	ea42 0103 	orr.w	r1, r2, r3
 800d968:	9b06      	ldr	r3, [sp, #24]
 800d96a:	4319      	orrs	r1, r3
 800d96c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d96e:	d10d      	bne.n	800d98c <_dtoa_r+0xa44>
 800d970:	2b39      	cmp	r3, #57	@ 0x39
 800d972:	d027      	beq.n	800d9c4 <_dtoa_r+0xa7c>
 800d974:	9a04      	ldr	r2, [sp, #16]
 800d976:	2a00      	cmp	r2, #0
 800d978:	dd01      	ble.n	800d97e <_dtoa_r+0xa36>
 800d97a:	9b03      	ldr	r3, [sp, #12]
 800d97c:	3331      	adds	r3, #49	@ 0x31
 800d97e:	f88b 3000 	strb.w	r3, [fp]
 800d982:	e52e      	b.n	800d3e2 <_dtoa_r+0x49a>
 800d984:	4628      	mov	r0, r5
 800d986:	e7b9      	b.n	800d8fc <_dtoa_r+0x9b4>
 800d988:	2201      	movs	r2, #1
 800d98a:	e7e2      	b.n	800d952 <_dtoa_r+0xa0a>
 800d98c:	9904      	ldr	r1, [sp, #16]
 800d98e:	2900      	cmp	r1, #0
 800d990:	db04      	blt.n	800d99c <_dtoa_r+0xa54>
 800d992:	9807      	ldr	r0, [sp, #28]
 800d994:	4301      	orrs	r1, r0
 800d996:	9806      	ldr	r0, [sp, #24]
 800d998:	4301      	orrs	r1, r0
 800d99a:	d120      	bne.n	800d9de <_dtoa_r+0xa96>
 800d99c:	2a00      	cmp	r2, #0
 800d99e:	ddee      	ble.n	800d97e <_dtoa_r+0xa36>
 800d9a0:	9902      	ldr	r1, [sp, #8]
 800d9a2:	9300      	str	r3, [sp, #0]
 800d9a4:	2201      	movs	r2, #1
 800d9a6:	4648      	mov	r0, r9
 800d9a8:	f000 fba4 	bl	800e0f4 <__lshift>
 800d9ac:	4621      	mov	r1, r4
 800d9ae:	9002      	str	r0, [sp, #8]
 800d9b0:	f000 fc0c 	bl	800e1cc <__mcmp>
 800d9b4:	2800      	cmp	r0, #0
 800d9b6:	9b00      	ldr	r3, [sp, #0]
 800d9b8:	dc02      	bgt.n	800d9c0 <_dtoa_r+0xa78>
 800d9ba:	d1e0      	bne.n	800d97e <_dtoa_r+0xa36>
 800d9bc:	07da      	lsls	r2, r3, #31
 800d9be:	d5de      	bpl.n	800d97e <_dtoa_r+0xa36>
 800d9c0:	2b39      	cmp	r3, #57	@ 0x39
 800d9c2:	d1da      	bne.n	800d97a <_dtoa_r+0xa32>
 800d9c4:	2339      	movs	r3, #57	@ 0x39
 800d9c6:	f88b 3000 	strb.w	r3, [fp]
 800d9ca:	4633      	mov	r3, r6
 800d9cc:	461e      	mov	r6, r3
 800d9ce:	3b01      	subs	r3, #1
 800d9d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d9d4:	2a39      	cmp	r2, #57	@ 0x39
 800d9d6:	d04e      	beq.n	800da76 <_dtoa_r+0xb2e>
 800d9d8:	3201      	adds	r2, #1
 800d9da:	701a      	strb	r2, [r3, #0]
 800d9dc:	e501      	b.n	800d3e2 <_dtoa_r+0x49a>
 800d9de:	2a00      	cmp	r2, #0
 800d9e0:	dd03      	ble.n	800d9ea <_dtoa_r+0xaa2>
 800d9e2:	2b39      	cmp	r3, #57	@ 0x39
 800d9e4:	d0ee      	beq.n	800d9c4 <_dtoa_r+0xa7c>
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	e7c9      	b.n	800d97e <_dtoa_r+0xa36>
 800d9ea:	9a00      	ldr	r2, [sp, #0]
 800d9ec:	9908      	ldr	r1, [sp, #32]
 800d9ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d9f2:	428a      	cmp	r2, r1
 800d9f4:	d028      	beq.n	800da48 <_dtoa_r+0xb00>
 800d9f6:	9902      	ldr	r1, [sp, #8]
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	220a      	movs	r2, #10
 800d9fc:	4648      	mov	r0, r9
 800d9fe:	f000 f9d5 	bl	800ddac <__multadd>
 800da02:	42af      	cmp	r7, r5
 800da04:	9002      	str	r0, [sp, #8]
 800da06:	f04f 0300 	mov.w	r3, #0
 800da0a:	f04f 020a 	mov.w	r2, #10
 800da0e:	4639      	mov	r1, r7
 800da10:	4648      	mov	r0, r9
 800da12:	d107      	bne.n	800da24 <_dtoa_r+0xadc>
 800da14:	f000 f9ca 	bl	800ddac <__multadd>
 800da18:	4607      	mov	r7, r0
 800da1a:	4605      	mov	r5, r0
 800da1c:	9b00      	ldr	r3, [sp, #0]
 800da1e:	3301      	adds	r3, #1
 800da20:	9300      	str	r3, [sp, #0]
 800da22:	e777      	b.n	800d914 <_dtoa_r+0x9cc>
 800da24:	f000 f9c2 	bl	800ddac <__multadd>
 800da28:	4629      	mov	r1, r5
 800da2a:	4607      	mov	r7, r0
 800da2c:	2300      	movs	r3, #0
 800da2e:	220a      	movs	r2, #10
 800da30:	4648      	mov	r0, r9
 800da32:	f000 f9bb 	bl	800ddac <__multadd>
 800da36:	4605      	mov	r5, r0
 800da38:	e7f0      	b.n	800da1c <_dtoa_r+0xad4>
 800da3a:	f1bb 0f00 	cmp.w	fp, #0
 800da3e:	bfcc      	ite	gt
 800da40:	465e      	movgt	r6, fp
 800da42:	2601      	movle	r6, #1
 800da44:	4456      	add	r6, sl
 800da46:	2700      	movs	r7, #0
 800da48:	9902      	ldr	r1, [sp, #8]
 800da4a:	9300      	str	r3, [sp, #0]
 800da4c:	2201      	movs	r2, #1
 800da4e:	4648      	mov	r0, r9
 800da50:	f000 fb50 	bl	800e0f4 <__lshift>
 800da54:	4621      	mov	r1, r4
 800da56:	9002      	str	r0, [sp, #8]
 800da58:	f000 fbb8 	bl	800e1cc <__mcmp>
 800da5c:	2800      	cmp	r0, #0
 800da5e:	dcb4      	bgt.n	800d9ca <_dtoa_r+0xa82>
 800da60:	d102      	bne.n	800da68 <_dtoa_r+0xb20>
 800da62:	9b00      	ldr	r3, [sp, #0]
 800da64:	07db      	lsls	r3, r3, #31
 800da66:	d4b0      	bmi.n	800d9ca <_dtoa_r+0xa82>
 800da68:	4633      	mov	r3, r6
 800da6a:	461e      	mov	r6, r3
 800da6c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da70:	2a30      	cmp	r2, #48	@ 0x30
 800da72:	d0fa      	beq.n	800da6a <_dtoa_r+0xb22>
 800da74:	e4b5      	b.n	800d3e2 <_dtoa_r+0x49a>
 800da76:	459a      	cmp	sl, r3
 800da78:	d1a8      	bne.n	800d9cc <_dtoa_r+0xa84>
 800da7a:	2331      	movs	r3, #49	@ 0x31
 800da7c:	f108 0801 	add.w	r8, r8, #1
 800da80:	f88a 3000 	strb.w	r3, [sl]
 800da84:	e4ad      	b.n	800d3e2 <_dtoa_r+0x49a>
 800da86:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800da88:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800dae4 <_dtoa_r+0xb9c>
 800da8c:	b11b      	cbz	r3, 800da96 <_dtoa_r+0xb4e>
 800da8e:	f10a 0308 	add.w	r3, sl, #8
 800da92:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800da94:	6013      	str	r3, [r2, #0]
 800da96:	4650      	mov	r0, sl
 800da98:	b017      	add	sp, #92	@ 0x5c
 800da9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da9e:	9b07      	ldr	r3, [sp, #28]
 800daa0:	2b01      	cmp	r3, #1
 800daa2:	f77f ae2e 	ble.w	800d702 <_dtoa_r+0x7ba>
 800daa6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800daa8:	9308      	str	r3, [sp, #32]
 800daaa:	2001      	movs	r0, #1
 800daac:	e64d      	b.n	800d74a <_dtoa_r+0x802>
 800daae:	f1bb 0f00 	cmp.w	fp, #0
 800dab2:	f77f aed9 	ble.w	800d868 <_dtoa_r+0x920>
 800dab6:	4656      	mov	r6, sl
 800dab8:	9802      	ldr	r0, [sp, #8]
 800daba:	4621      	mov	r1, r4
 800dabc:	f7ff f9bb 	bl	800ce36 <quorem>
 800dac0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800dac4:	f806 3b01 	strb.w	r3, [r6], #1
 800dac8:	eba6 020a 	sub.w	r2, r6, sl
 800dacc:	4593      	cmp	fp, r2
 800dace:	ddb4      	ble.n	800da3a <_dtoa_r+0xaf2>
 800dad0:	9902      	ldr	r1, [sp, #8]
 800dad2:	2300      	movs	r3, #0
 800dad4:	220a      	movs	r2, #10
 800dad6:	4648      	mov	r0, r9
 800dad8:	f000 f968 	bl	800ddac <__multadd>
 800dadc:	9002      	str	r0, [sp, #8]
 800dade:	e7eb      	b.n	800dab8 <_dtoa_r+0xb70>
 800dae0:	0802e1cc 	.word	0x0802e1cc
 800dae4:	0802e150 	.word	0x0802e150

0800dae8 <_free_r>:
 800dae8:	b538      	push	{r3, r4, r5, lr}
 800daea:	4605      	mov	r5, r0
 800daec:	2900      	cmp	r1, #0
 800daee:	d041      	beq.n	800db74 <_free_r+0x8c>
 800daf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800daf4:	1f0c      	subs	r4, r1, #4
 800daf6:	2b00      	cmp	r3, #0
 800daf8:	bfb8      	it	lt
 800dafa:	18e4      	addlt	r4, r4, r3
 800dafc:	f000 f8e8 	bl	800dcd0 <__malloc_lock>
 800db00:	4a1d      	ldr	r2, [pc, #116]	@ (800db78 <_free_r+0x90>)
 800db02:	6813      	ldr	r3, [r2, #0]
 800db04:	b933      	cbnz	r3, 800db14 <_free_r+0x2c>
 800db06:	6063      	str	r3, [r4, #4]
 800db08:	6014      	str	r4, [r2, #0]
 800db0a:	4628      	mov	r0, r5
 800db0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800db10:	f000 b8e4 	b.w	800dcdc <__malloc_unlock>
 800db14:	42a3      	cmp	r3, r4
 800db16:	d908      	bls.n	800db2a <_free_r+0x42>
 800db18:	6820      	ldr	r0, [r4, #0]
 800db1a:	1821      	adds	r1, r4, r0
 800db1c:	428b      	cmp	r3, r1
 800db1e:	bf01      	itttt	eq
 800db20:	6819      	ldreq	r1, [r3, #0]
 800db22:	685b      	ldreq	r3, [r3, #4]
 800db24:	1809      	addeq	r1, r1, r0
 800db26:	6021      	streq	r1, [r4, #0]
 800db28:	e7ed      	b.n	800db06 <_free_r+0x1e>
 800db2a:	461a      	mov	r2, r3
 800db2c:	685b      	ldr	r3, [r3, #4]
 800db2e:	b10b      	cbz	r3, 800db34 <_free_r+0x4c>
 800db30:	42a3      	cmp	r3, r4
 800db32:	d9fa      	bls.n	800db2a <_free_r+0x42>
 800db34:	6811      	ldr	r1, [r2, #0]
 800db36:	1850      	adds	r0, r2, r1
 800db38:	42a0      	cmp	r0, r4
 800db3a:	d10b      	bne.n	800db54 <_free_r+0x6c>
 800db3c:	6820      	ldr	r0, [r4, #0]
 800db3e:	4401      	add	r1, r0
 800db40:	1850      	adds	r0, r2, r1
 800db42:	4283      	cmp	r3, r0
 800db44:	6011      	str	r1, [r2, #0]
 800db46:	d1e0      	bne.n	800db0a <_free_r+0x22>
 800db48:	6818      	ldr	r0, [r3, #0]
 800db4a:	685b      	ldr	r3, [r3, #4]
 800db4c:	6053      	str	r3, [r2, #4]
 800db4e:	4408      	add	r0, r1
 800db50:	6010      	str	r0, [r2, #0]
 800db52:	e7da      	b.n	800db0a <_free_r+0x22>
 800db54:	d902      	bls.n	800db5c <_free_r+0x74>
 800db56:	230c      	movs	r3, #12
 800db58:	602b      	str	r3, [r5, #0]
 800db5a:	e7d6      	b.n	800db0a <_free_r+0x22>
 800db5c:	6820      	ldr	r0, [r4, #0]
 800db5e:	1821      	adds	r1, r4, r0
 800db60:	428b      	cmp	r3, r1
 800db62:	bf04      	itt	eq
 800db64:	6819      	ldreq	r1, [r3, #0]
 800db66:	685b      	ldreq	r3, [r3, #4]
 800db68:	6063      	str	r3, [r4, #4]
 800db6a:	bf04      	itt	eq
 800db6c:	1809      	addeq	r1, r1, r0
 800db6e:	6021      	streq	r1, [r4, #0]
 800db70:	6054      	str	r4, [r2, #4]
 800db72:	e7ca      	b.n	800db0a <_free_r+0x22>
 800db74:	bd38      	pop	{r3, r4, r5, pc}
 800db76:	bf00      	nop
 800db78:	2000ac3c 	.word	0x2000ac3c

0800db7c <malloc>:
 800db7c:	4b02      	ldr	r3, [pc, #8]	@ (800db88 <malloc+0xc>)
 800db7e:	4601      	mov	r1, r0
 800db80:	6818      	ldr	r0, [r3, #0]
 800db82:	f000 b825 	b.w	800dbd0 <_malloc_r>
 800db86:	bf00      	nop
 800db88:	20000424 	.word	0x20000424

0800db8c <sbrk_aligned>:
 800db8c:	b570      	push	{r4, r5, r6, lr}
 800db8e:	4e0f      	ldr	r6, [pc, #60]	@ (800dbcc <sbrk_aligned+0x40>)
 800db90:	460c      	mov	r4, r1
 800db92:	6831      	ldr	r1, [r6, #0]
 800db94:	4605      	mov	r5, r0
 800db96:	b911      	cbnz	r1, 800db9e <sbrk_aligned+0x12>
 800db98:	f000 fe3e 	bl	800e818 <_sbrk_r>
 800db9c:	6030      	str	r0, [r6, #0]
 800db9e:	4621      	mov	r1, r4
 800dba0:	4628      	mov	r0, r5
 800dba2:	f000 fe39 	bl	800e818 <_sbrk_r>
 800dba6:	1c43      	adds	r3, r0, #1
 800dba8:	d103      	bne.n	800dbb2 <sbrk_aligned+0x26>
 800dbaa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800dbae:	4620      	mov	r0, r4
 800dbb0:	bd70      	pop	{r4, r5, r6, pc}
 800dbb2:	1cc4      	adds	r4, r0, #3
 800dbb4:	f024 0403 	bic.w	r4, r4, #3
 800dbb8:	42a0      	cmp	r0, r4
 800dbba:	d0f8      	beq.n	800dbae <sbrk_aligned+0x22>
 800dbbc:	1a21      	subs	r1, r4, r0
 800dbbe:	4628      	mov	r0, r5
 800dbc0:	f000 fe2a 	bl	800e818 <_sbrk_r>
 800dbc4:	3001      	adds	r0, #1
 800dbc6:	d1f2      	bne.n	800dbae <sbrk_aligned+0x22>
 800dbc8:	e7ef      	b.n	800dbaa <sbrk_aligned+0x1e>
 800dbca:	bf00      	nop
 800dbcc:	2000ac38 	.word	0x2000ac38

0800dbd0 <_malloc_r>:
 800dbd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dbd4:	1ccd      	adds	r5, r1, #3
 800dbd6:	f025 0503 	bic.w	r5, r5, #3
 800dbda:	3508      	adds	r5, #8
 800dbdc:	2d0c      	cmp	r5, #12
 800dbde:	bf38      	it	cc
 800dbe0:	250c      	movcc	r5, #12
 800dbe2:	2d00      	cmp	r5, #0
 800dbe4:	4606      	mov	r6, r0
 800dbe6:	db01      	blt.n	800dbec <_malloc_r+0x1c>
 800dbe8:	42a9      	cmp	r1, r5
 800dbea:	d904      	bls.n	800dbf6 <_malloc_r+0x26>
 800dbec:	230c      	movs	r3, #12
 800dbee:	6033      	str	r3, [r6, #0]
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbf6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800dccc <_malloc_r+0xfc>
 800dbfa:	f000 f869 	bl	800dcd0 <__malloc_lock>
 800dbfe:	f8d8 3000 	ldr.w	r3, [r8]
 800dc02:	461c      	mov	r4, r3
 800dc04:	bb44      	cbnz	r4, 800dc58 <_malloc_r+0x88>
 800dc06:	4629      	mov	r1, r5
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7ff ffbf 	bl	800db8c <sbrk_aligned>
 800dc0e:	1c43      	adds	r3, r0, #1
 800dc10:	4604      	mov	r4, r0
 800dc12:	d158      	bne.n	800dcc6 <_malloc_r+0xf6>
 800dc14:	f8d8 4000 	ldr.w	r4, [r8]
 800dc18:	4627      	mov	r7, r4
 800dc1a:	2f00      	cmp	r7, #0
 800dc1c:	d143      	bne.n	800dca6 <_malloc_r+0xd6>
 800dc1e:	2c00      	cmp	r4, #0
 800dc20:	d04b      	beq.n	800dcba <_malloc_r+0xea>
 800dc22:	6823      	ldr	r3, [r4, #0]
 800dc24:	4639      	mov	r1, r7
 800dc26:	4630      	mov	r0, r6
 800dc28:	eb04 0903 	add.w	r9, r4, r3
 800dc2c:	f000 fdf4 	bl	800e818 <_sbrk_r>
 800dc30:	4581      	cmp	r9, r0
 800dc32:	d142      	bne.n	800dcba <_malloc_r+0xea>
 800dc34:	6821      	ldr	r1, [r4, #0]
 800dc36:	1a6d      	subs	r5, r5, r1
 800dc38:	4629      	mov	r1, r5
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f7ff ffa6 	bl	800db8c <sbrk_aligned>
 800dc40:	3001      	adds	r0, #1
 800dc42:	d03a      	beq.n	800dcba <_malloc_r+0xea>
 800dc44:	6823      	ldr	r3, [r4, #0]
 800dc46:	442b      	add	r3, r5
 800dc48:	6023      	str	r3, [r4, #0]
 800dc4a:	f8d8 3000 	ldr.w	r3, [r8]
 800dc4e:	685a      	ldr	r2, [r3, #4]
 800dc50:	bb62      	cbnz	r2, 800dcac <_malloc_r+0xdc>
 800dc52:	f8c8 7000 	str.w	r7, [r8]
 800dc56:	e00f      	b.n	800dc78 <_malloc_r+0xa8>
 800dc58:	6822      	ldr	r2, [r4, #0]
 800dc5a:	1b52      	subs	r2, r2, r5
 800dc5c:	d420      	bmi.n	800dca0 <_malloc_r+0xd0>
 800dc5e:	2a0b      	cmp	r2, #11
 800dc60:	d917      	bls.n	800dc92 <_malloc_r+0xc2>
 800dc62:	1961      	adds	r1, r4, r5
 800dc64:	42a3      	cmp	r3, r4
 800dc66:	6025      	str	r5, [r4, #0]
 800dc68:	bf18      	it	ne
 800dc6a:	6059      	strne	r1, [r3, #4]
 800dc6c:	6863      	ldr	r3, [r4, #4]
 800dc6e:	bf08      	it	eq
 800dc70:	f8c8 1000 	streq.w	r1, [r8]
 800dc74:	5162      	str	r2, [r4, r5]
 800dc76:	604b      	str	r3, [r1, #4]
 800dc78:	4630      	mov	r0, r6
 800dc7a:	f000 f82f 	bl	800dcdc <__malloc_unlock>
 800dc7e:	f104 000b 	add.w	r0, r4, #11
 800dc82:	1d23      	adds	r3, r4, #4
 800dc84:	f020 0007 	bic.w	r0, r0, #7
 800dc88:	1ac2      	subs	r2, r0, r3
 800dc8a:	bf1c      	itt	ne
 800dc8c:	1a1b      	subne	r3, r3, r0
 800dc8e:	50a3      	strne	r3, [r4, r2]
 800dc90:	e7af      	b.n	800dbf2 <_malloc_r+0x22>
 800dc92:	6862      	ldr	r2, [r4, #4]
 800dc94:	42a3      	cmp	r3, r4
 800dc96:	bf0c      	ite	eq
 800dc98:	f8c8 2000 	streq.w	r2, [r8]
 800dc9c:	605a      	strne	r2, [r3, #4]
 800dc9e:	e7eb      	b.n	800dc78 <_malloc_r+0xa8>
 800dca0:	4623      	mov	r3, r4
 800dca2:	6864      	ldr	r4, [r4, #4]
 800dca4:	e7ae      	b.n	800dc04 <_malloc_r+0x34>
 800dca6:	463c      	mov	r4, r7
 800dca8:	687f      	ldr	r7, [r7, #4]
 800dcaa:	e7b6      	b.n	800dc1a <_malloc_r+0x4a>
 800dcac:	461a      	mov	r2, r3
 800dcae:	685b      	ldr	r3, [r3, #4]
 800dcb0:	42a3      	cmp	r3, r4
 800dcb2:	d1fb      	bne.n	800dcac <_malloc_r+0xdc>
 800dcb4:	2300      	movs	r3, #0
 800dcb6:	6053      	str	r3, [r2, #4]
 800dcb8:	e7de      	b.n	800dc78 <_malloc_r+0xa8>
 800dcba:	230c      	movs	r3, #12
 800dcbc:	6033      	str	r3, [r6, #0]
 800dcbe:	4630      	mov	r0, r6
 800dcc0:	f000 f80c 	bl	800dcdc <__malloc_unlock>
 800dcc4:	e794      	b.n	800dbf0 <_malloc_r+0x20>
 800dcc6:	6005      	str	r5, [r0, #0]
 800dcc8:	e7d6      	b.n	800dc78 <_malloc_r+0xa8>
 800dcca:	bf00      	nop
 800dccc:	2000ac3c 	.word	0x2000ac3c

0800dcd0 <__malloc_lock>:
 800dcd0:	4801      	ldr	r0, [pc, #4]	@ (800dcd8 <__malloc_lock+0x8>)
 800dcd2:	f7ff b8a0 	b.w	800ce16 <__retarget_lock_acquire_recursive>
 800dcd6:	bf00      	nop
 800dcd8:	2000ac34 	.word	0x2000ac34

0800dcdc <__malloc_unlock>:
 800dcdc:	4801      	ldr	r0, [pc, #4]	@ (800dce4 <__malloc_unlock+0x8>)
 800dcde:	f7ff b89b 	b.w	800ce18 <__retarget_lock_release_recursive>
 800dce2:	bf00      	nop
 800dce4:	2000ac34 	.word	0x2000ac34

0800dce8 <_Balloc>:
 800dce8:	b570      	push	{r4, r5, r6, lr}
 800dcea:	69c6      	ldr	r6, [r0, #28]
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	b976      	cbnz	r6, 800dd10 <_Balloc+0x28>
 800dcf2:	2010      	movs	r0, #16
 800dcf4:	f7ff ff42 	bl	800db7c <malloc>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	61e0      	str	r0, [r4, #28]
 800dcfc:	b920      	cbnz	r0, 800dd08 <_Balloc+0x20>
 800dcfe:	4b18      	ldr	r3, [pc, #96]	@ (800dd60 <_Balloc+0x78>)
 800dd00:	4818      	ldr	r0, [pc, #96]	@ (800dd64 <_Balloc+0x7c>)
 800dd02:	216b      	movs	r1, #107	@ 0x6b
 800dd04:	f000 fd98 	bl	800e838 <__assert_func>
 800dd08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd0c:	6006      	str	r6, [r0, #0]
 800dd0e:	60c6      	str	r6, [r0, #12]
 800dd10:	69e6      	ldr	r6, [r4, #28]
 800dd12:	68f3      	ldr	r3, [r6, #12]
 800dd14:	b183      	cbz	r3, 800dd38 <_Balloc+0x50>
 800dd16:	69e3      	ldr	r3, [r4, #28]
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd1e:	b9b8      	cbnz	r0, 800dd50 <_Balloc+0x68>
 800dd20:	2101      	movs	r1, #1
 800dd22:	fa01 f605 	lsl.w	r6, r1, r5
 800dd26:	1d72      	adds	r2, r6, #5
 800dd28:	0092      	lsls	r2, r2, #2
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f000 fda2 	bl	800e874 <_calloc_r>
 800dd30:	b160      	cbz	r0, 800dd4c <_Balloc+0x64>
 800dd32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd36:	e00e      	b.n	800dd56 <_Balloc+0x6e>
 800dd38:	2221      	movs	r2, #33	@ 0x21
 800dd3a:	2104      	movs	r1, #4
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 fd99 	bl	800e874 <_calloc_r>
 800dd42:	69e3      	ldr	r3, [r4, #28]
 800dd44:	60f0      	str	r0, [r6, #12]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1e4      	bne.n	800dd16 <_Balloc+0x2e>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	6802      	ldr	r2, [r0, #0]
 800dd52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd56:	2300      	movs	r3, #0
 800dd58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd5c:	e7f7      	b.n	800dd4e <_Balloc+0x66>
 800dd5e:	bf00      	nop
 800dd60:	0802e15d 	.word	0x0802e15d
 800dd64:	0802e1dd 	.word	0x0802e1dd

0800dd68 <_Bfree>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	69c6      	ldr	r6, [r0, #28]
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	460c      	mov	r4, r1
 800dd70:	b976      	cbnz	r6, 800dd90 <_Bfree+0x28>
 800dd72:	2010      	movs	r0, #16
 800dd74:	f7ff ff02 	bl	800db7c <malloc>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	61e8      	str	r0, [r5, #28]
 800dd7c:	b920      	cbnz	r0, 800dd88 <_Bfree+0x20>
 800dd7e:	4b09      	ldr	r3, [pc, #36]	@ (800dda4 <_Bfree+0x3c>)
 800dd80:	4809      	ldr	r0, [pc, #36]	@ (800dda8 <_Bfree+0x40>)
 800dd82:	218f      	movs	r1, #143	@ 0x8f
 800dd84:	f000 fd58 	bl	800e838 <__assert_func>
 800dd88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd8c:	6006      	str	r6, [r0, #0]
 800dd8e:	60c6      	str	r6, [r0, #12]
 800dd90:	b13c      	cbz	r4, 800dda2 <_Bfree+0x3a>
 800dd92:	69eb      	ldr	r3, [r5, #28]
 800dd94:	6862      	ldr	r2, [r4, #4]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd9c:	6021      	str	r1, [r4, #0]
 800dd9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dda2:	bd70      	pop	{r4, r5, r6, pc}
 800dda4:	0802e15d 	.word	0x0802e15d
 800dda8:	0802e1dd 	.word	0x0802e1dd

0800ddac <__multadd>:
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	690d      	ldr	r5, [r1, #16]
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	461e      	mov	r6, r3
 800ddb8:	f101 0c14 	add.w	ip, r1, #20
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	f8dc 3000 	ldr.w	r3, [ip]
 800ddc2:	b299      	uxth	r1, r3
 800ddc4:	fb02 6101 	mla	r1, r2, r1, r6
 800ddc8:	0c1e      	lsrs	r6, r3, #16
 800ddca:	0c0b      	lsrs	r3, r1, #16
 800ddcc:	fb02 3306 	mla	r3, r2, r6, r3
 800ddd0:	b289      	uxth	r1, r1
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ddd8:	4285      	cmp	r5, r0
 800ddda:	f84c 1b04 	str.w	r1, [ip], #4
 800ddde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dde2:	dcec      	bgt.n	800ddbe <__multadd+0x12>
 800dde4:	b30e      	cbz	r6, 800de2a <__multadd+0x7e>
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	42ab      	cmp	r3, r5
 800ddea:	dc19      	bgt.n	800de20 <__multadd+0x74>
 800ddec:	6861      	ldr	r1, [r4, #4]
 800ddee:	4638      	mov	r0, r7
 800ddf0:	3101      	adds	r1, #1
 800ddf2:	f7ff ff79 	bl	800dce8 <_Balloc>
 800ddf6:	4680      	mov	r8, r0
 800ddf8:	b928      	cbnz	r0, 800de06 <__multadd+0x5a>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	4b0c      	ldr	r3, [pc, #48]	@ (800de30 <__multadd+0x84>)
 800ddfe:	480d      	ldr	r0, [pc, #52]	@ (800de34 <__multadd+0x88>)
 800de00:	21ba      	movs	r1, #186	@ 0xba
 800de02:	f000 fd19 	bl	800e838 <__assert_func>
 800de06:	6922      	ldr	r2, [r4, #16]
 800de08:	3202      	adds	r2, #2
 800de0a:	f104 010c 	add.w	r1, r4, #12
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	300c      	adds	r0, #12
 800de12:	f7ff f802 	bl	800ce1a <memcpy>
 800de16:	4621      	mov	r1, r4
 800de18:	4638      	mov	r0, r7
 800de1a:	f7ff ffa5 	bl	800dd68 <_Bfree>
 800de1e:	4644      	mov	r4, r8
 800de20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de24:	3501      	adds	r5, #1
 800de26:	615e      	str	r6, [r3, #20]
 800de28:	6125      	str	r5, [r4, #16]
 800de2a:	4620      	mov	r0, r4
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	0802e1cc 	.word	0x0802e1cc
 800de34:	0802e1dd 	.word	0x0802e1dd

0800de38 <__hi0bits>:
 800de38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800de3c:	4603      	mov	r3, r0
 800de3e:	bf36      	itet	cc
 800de40:	0403      	lslcc	r3, r0, #16
 800de42:	2000      	movcs	r0, #0
 800de44:	2010      	movcc	r0, #16
 800de46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800de4a:	bf3c      	itt	cc
 800de4c:	021b      	lslcc	r3, r3, #8
 800de4e:	3008      	addcc	r0, #8
 800de50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800de54:	bf3c      	itt	cc
 800de56:	011b      	lslcc	r3, r3, #4
 800de58:	3004      	addcc	r0, #4
 800de5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800de5e:	bf3c      	itt	cc
 800de60:	009b      	lslcc	r3, r3, #2
 800de62:	3002      	addcc	r0, #2
 800de64:	2b00      	cmp	r3, #0
 800de66:	db05      	blt.n	800de74 <__hi0bits+0x3c>
 800de68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800de6c:	f100 0001 	add.w	r0, r0, #1
 800de70:	bf08      	it	eq
 800de72:	2020      	moveq	r0, #32
 800de74:	4770      	bx	lr

0800de76 <__lo0bits>:
 800de76:	6803      	ldr	r3, [r0, #0]
 800de78:	4602      	mov	r2, r0
 800de7a:	f013 0007 	ands.w	r0, r3, #7
 800de7e:	d00b      	beq.n	800de98 <__lo0bits+0x22>
 800de80:	07d9      	lsls	r1, r3, #31
 800de82:	d421      	bmi.n	800dec8 <__lo0bits+0x52>
 800de84:	0798      	lsls	r0, r3, #30
 800de86:	bf49      	itett	mi
 800de88:	085b      	lsrmi	r3, r3, #1
 800de8a:	089b      	lsrpl	r3, r3, #2
 800de8c:	2001      	movmi	r0, #1
 800de8e:	6013      	strmi	r3, [r2, #0]
 800de90:	bf5c      	itt	pl
 800de92:	6013      	strpl	r3, [r2, #0]
 800de94:	2002      	movpl	r0, #2
 800de96:	4770      	bx	lr
 800de98:	b299      	uxth	r1, r3
 800de9a:	b909      	cbnz	r1, 800dea0 <__lo0bits+0x2a>
 800de9c:	0c1b      	lsrs	r3, r3, #16
 800de9e:	2010      	movs	r0, #16
 800dea0:	b2d9      	uxtb	r1, r3
 800dea2:	b909      	cbnz	r1, 800dea8 <__lo0bits+0x32>
 800dea4:	3008      	adds	r0, #8
 800dea6:	0a1b      	lsrs	r3, r3, #8
 800dea8:	0719      	lsls	r1, r3, #28
 800deaa:	bf04      	itt	eq
 800deac:	091b      	lsreq	r3, r3, #4
 800deae:	3004      	addeq	r0, #4
 800deb0:	0799      	lsls	r1, r3, #30
 800deb2:	bf04      	itt	eq
 800deb4:	089b      	lsreq	r3, r3, #2
 800deb6:	3002      	addeq	r0, #2
 800deb8:	07d9      	lsls	r1, r3, #31
 800deba:	d403      	bmi.n	800dec4 <__lo0bits+0x4e>
 800debc:	085b      	lsrs	r3, r3, #1
 800debe:	f100 0001 	add.w	r0, r0, #1
 800dec2:	d003      	beq.n	800decc <__lo0bits+0x56>
 800dec4:	6013      	str	r3, [r2, #0]
 800dec6:	4770      	bx	lr
 800dec8:	2000      	movs	r0, #0
 800deca:	4770      	bx	lr
 800decc:	2020      	movs	r0, #32
 800dece:	4770      	bx	lr

0800ded0 <__i2b>:
 800ded0:	b510      	push	{r4, lr}
 800ded2:	460c      	mov	r4, r1
 800ded4:	2101      	movs	r1, #1
 800ded6:	f7ff ff07 	bl	800dce8 <_Balloc>
 800deda:	4602      	mov	r2, r0
 800dedc:	b928      	cbnz	r0, 800deea <__i2b+0x1a>
 800dede:	4b05      	ldr	r3, [pc, #20]	@ (800def4 <__i2b+0x24>)
 800dee0:	4805      	ldr	r0, [pc, #20]	@ (800def8 <__i2b+0x28>)
 800dee2:	f240 1145 	movw	r1, #325	@ 0x145
 800dee6:	f000 fca7 	bl	800e838 <__assert_func>
 800deea:	2301      	movs	r3, #1
 800deec:	6144      	str	r4, [r0, #20]
 800deee:	6103      	str	r3, [r0, #16]
 800def0:	bd10      	pop	{r4, pc}
 800def2:	bf00      	nop
 800def4:	0802e1cc 	.word	0x0802e1cc
 800def8:	0802e1dd 	.word	0x0802e1dd

0800defc <__multiply>:
 800defc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df00:	4617      	mov	r7, r2
 800df02:	690a      	ldr	r2, [r1, #16]
 800df04:	693b      	ldr	r3, [r7, #16]
 800df06:	429a      	cmp	r2, r3
 800df08:	bfa8      	it	ge
 800df0a:	463b      	movge	r3, r7
 800df0c:	4689      	mov	r9, r1
 800df0e:	bfa4      	itt	ge
 800df10:	460f      	movge	r7, r1
 800df12:	4699      	movge	r9, r3
 800df14:	693d      	ldr	r5, [r7, #16]
 800df16:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6879      	ldr	r1, [r7, #4]
 800df1e:	eb05 060a 	add.w	r6, r5, sl
 800df22:	42b3      	cmp	r3, r6
 800df24:	b085      	sub	sp, #20
 800df26:	bfb8      	it	lt
 800df28:	3101      	addlt	r1, #1
 800df2a:	f7ff fedd 	bl	800dce8 <_Balloc>
 800df2e:	b930      	cbnz	r0, 800df3e <__multiply+0x42>
 800df30:	4602      	mov	r2, r0
 800df32:	4b41      	ldr	r3, [pc, #260]	@ (800e038 <__multiply+0x13c>)
 800df34:	4841      	ldr	r0, [pc, #260]	@ (800e03c <__multiply+0x140>)
 800df36:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800df3a:	f000 fc7d 	bl	800e838 <__assert_func>
 800df3e:	f100 0414 	add.w	r4, r0, #20
 800df42:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800df46:	4623      	mov	r3, r4
 800df48:	2200      	movs	r2, #0
 800df4a:	4573      	cmp	r3, lr
 800df4c:	d320      	bcc.n	800df90 <__multiply+0x94>
 800df4e:	f107 0814 	add.w	r8, r7, #20
 800df52:	f109 0114 	add.w	r1, r9, #20
 800df56:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800df5a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800df5e:	9302      	str	r3, [sp, #8]
 800df60:	1beb      	subs	r3, r5, r7
 800df62:	3b15      	subs	r3, #21
 800df64:	f023 0303 	bic.w	r3, r3, #3
 800df68:	3304      	adds	r3, #4
 800df6a:	3715      	adds	r7, #21
 800df6c:	42bd      	cmp	r5, r7
 800df6e:	bf38      	it	cc
 800df70:	2304      	movcc	r3, #4
 800df72:	9301      	str	r3, [sp, #4]
 800df74:	9b02      	ldr	r3, [sp, #8]
 800df76:	9103      	str	r1, [sp, #12]
 800df78:	428b      	cmp	r3, r1
 800df7a:	d80c      	bhi.n	800df96 <__multiply+0x9a>
 800df7c:	2e00      	cmp	r6, #0
 800df7e:	dd03      	ble.n	800df88 <__multiply+0x8c>
 800df80:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800df84:	2b00      	cmp	r3, #0
 800df86:	d055      	beq.n	800e034 <__multiply+0x138>
 800df88:	6106      	str	r6, [r0, #16]
 800df8a:	b005      	add	sp, #20
 800df8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df90:	f843 2b04 	str.w	r2, [r3], #4
 800df94:	e7d9      	b.n	800df4a <__multiply+0x4e>
 800df96:	f8b1 a000 	ldrh.w	sl, [r1]
 800df9a:	f1ba 0f00 	cmp.w	sl, #0
 800df9e:	d01f      	beq.n	800dfe0 <__multiply+0xe4>
 800dfa0:	46c4      	mov	ip, r8
 800dfa2:	46a1      	mov	r9, r4
 800dfa4:	2700      	movs	r7, #0
 800dfa6:	f85c 2b04 	ldr.w	r2, [ip], #4
 800dfaa:	f8d9 3000 	ldr.w	r3, [r9]
 800dfae:	fa1f fb82 	uxth.w	fp, r2
 800dfb2:	b29b      	uxth	r3, r3
 800dfb4:	fb0a 330b 	mla	r3, sl, fp, r3
 800dfb8:	443b      	add	r3, r7
 800dfba:	f8d9 7000 	ldr.w	r7, [r9]
 800dfbe:	0c12      	lsrs	r2, r2, #16
 800dfc0:	0c3f      	lsrs	r7, r7, #16
 800dfc2:	fb0a 7202 	mla	r2, sl, r2, r7
 800dfc6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800dfca:	b29b      	uxth	r3, r3
 800dfcc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dfd0:	4565      	cmp	r5, ip
 800dfd2:	f849 3b04 	str.w	r3, [r9], #4
 800dfd6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800dfda:	d8e4      	bhi.n	800dfa6 <__multiply+0xaa>
 800dfdc:	9b01      	ldr	r3, [sp, #4]
 800dfde:	50e7      	str	r7, [r4, r3]
 800dfe0:	9b03      	ldr	r3, [sp, #12]
 800dfe2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dfe6:	3104      	adds	r1, #4
 800dfe8:	f1b9 0f00 	cmp.w	r9, #0
 800dfec:	d020      	beq.n	800e030 <__multiply+0x134>
 800dfee:	6823      	ldr	r3, [r4, #0]
 800dff0:	4647      	mov	r7, r8
 800dff2:	46a4      	mov	ip, r4
 800dff4:	f04f 0a00 	mov.w	sl, #0
 800dff8:	f8b7 b000 	ldrh.w	fp, [r7]
 800dffc:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e000:	fb09 220b 	mla	r2, r9, fp, r2
 800e004:	4452      	add	r2, sl
 800e006:	b29b      	uxth	r3, r3
 800e008:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e00c:	f84c 3b04 	str.w	r3, [ip], #4
 800e010:	f857 3b04 	ldr.w	r3, [r7], #4
 800e014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e018:	f8bc 3000 	ldrh.w	r3, [ip]
 800e01c:	fb09 330a 	mla	r3, r9, sl, r3
 800e020:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e024:	42bd      	cmp	r5, r7
 800e026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e02a:	d8e5      	bhi.n	800dff8 <__multiply+0xfc>
 800e02c:	9a01      	ldr	r2, [sp, #4]
 800e02e:	50a3      	str	r3, [r4, r2]
 800e030:	3404      	adds	r4, #4
 800e032:	e79f      	b.n	800df74 <__multiply+0x78>
 800e034:	3e01      	subs	r6, #1
 800e036:	e7a1      	b.n	800df7c <__multiply+0x80>
 800e038:	0802e1cc 	.word	0x0802e1cc
 800e03c:	0802e1dd 	.word	0x0802e1dd

0800e040 <__pow5mult>:
 800e040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e044:	4615      	mov	r5, r2
 800e046:	f012 0203 	ands.w	r2, r2, #3
 800e04a:	4607      	mov	r7, r0
 800e04c:	460e      	mov	r6, r1
 800e04e:	d007      	beq.n	800e060 <__pow5mult+0x20>
 800e050:	4c25      	ldr	r4, [pc, #148]	@ (800e0e8 <__pow5mult+0xa8>)
 800e052:	3a01      	subs	r2, #1
 800e054:	2300      	movs	r3, #0
 800e056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e05a:	f7ff fea7 	bl	800ddac <__multadd>
 800e05e:	4606      	mov	r6, r0
 800e060:	10ad      	asrs	r5, r5, #2
 800e062:	d03d      	beq.n	800e0e0 <__pow5mult+0xa0>
 800e064:	69fc      	ldr	r4, [r7, #28]
 800e066:	b97c      	cbnz	r4, 800e088 <__pow5mult+0x48>
 800e068:	2010      	movs	r0, #16
 800e06a:	f7ff fd87 	bl	800db7c <malloc>
 800e06e:	4602      	mov	r2, r0
 800e070:	61f8      	str	r0, [r7, #28]
 800e072:	b928      	cbnz	r0, 800e080 <__pow5mult+0x40>
 800e074:	4b1d      	ldr	r3, [pc, #116]	@ (800e0ec <__pow5mult+0xac>)
 800e076:	481e      	ldr	r0, [pc, #120]	@ (800e0f0 <__pow5mult+0xb0>)
 800e078:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e07c:	f000 fbdc 	bl	800e838 <__assert_func>
 800e080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e084:	6004      	str	r4, [r0, #0]
 800e086:	60c4      	str	r4, [r0, #12]
 800e088:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e08c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e090:	b94c      	cbnz	r4, 800e0a6 <__pow5mult+0x66>
 800e092:	f240 2171 	movw	r1, #625	@ 0x271
 800e096:	4638      	mov	r0, r7
 800e098:	f7ff ff1a 	bl	800ded0 <__i2b>
 800e09c:	2300      	movs	r3, #0
 800e09e:	f8c8 0008 	str.w	r0, [r8, #8]
 800e0a2:	4604      	mov	r4, r0
 800e0a4:	6003      	str	r3, [r0, #0]
 800e0a6:	f04f 0900 	mov.w	r9, #0
 800e0aa:	07eb      	lsls	r3, r5, #31
 800e0ac:	d50a      	bpl.n	800e0c4 <__pow5mult+0x84>
 800e0ae:	4631      	mov	r1, r6
 800e0b0:	4622      	mov	r2, r4
 800e0b2:	4638      	mov	r0, r7
 800e0b4:	f7ff ff22 	bl	800defc <__multiply>
 800e0b8:	4631      	mov	r1, r6
 800e0ba:	4680      	mov	r8, r0
 800e0bc:	4638      	mov	r0, r7
 800e0be:	f7ff fe53 	bl	800dd68 <_Bfree>
 800e0c2:	4646      	mov	r6, r8
 800e0c4:	106d      	asrs	r5, r5, #1
 800e0c6:	d00b      	beq.n	800e0e0 <__pow5mult+0xa0>
 800e0c8:	6820      	ldr	r0, [r4, #0]
 800e0ca:	b938      	cbnz	r0, 800e0dc <__pow5mult+0x9c>
 800e0cc:	4622      	mov	r2, r4
 800e0ce:	4621      	mov	r1, r4
 800e0d0:	4638      	mov	r0, r7
 800e0d2:	f7ff ff13 	bl	800defc <__multiply>
 800e0d6:	6020      	str	r0, [r4, #0]
 800e0d8:	f8c0 9000 	str.w	r9, [r0]
 800e0dc:	4604      	mov	r4, r0
 800e0de:	e7e4      	b.n	800e0aa <__pow5mult+0x6a>
 800e0e0:	4630      	mov	r0, r6
 800e0e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e0e6:	bf00      	nop
 800e0e8:	0802e290 	.word	0x0802e290
 800e0ec:	0802e15d 	.word	0x0802e15d
 800e0f0:	0802e1dd 	.word	0x0802e1dd

0800e0f4 <__lshift>:
 800e0f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e0f8:	460c      	mov	r4, r1
 800e0fa:	6849      	ldr	r1, [r1, #4]
 800e0fc:	6923      	ldr	r3, [r4, #16]
 800e0fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e102:	68a3      	ldr	r3, [r4, #8]
 800e104:	4607      	mov	r7, r0
 800e106:	4691      	mov	r9, r2
 800e108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e10c:	f108 0601 	add.w	r6, r8, #1
 800e110:	42b3      	cmp	r3, r6
 800e112:	db0b      	blt.n	800e12c <__lshift+0x38>
 800e114:	4638      	mov	r0, r7
 800e116:	f7ff fde7 	bl	800dce8 <_Balloc>
 800e11a:	4605      	mov	r5, r0
 800e11c:	b948      	cbnz	r0, 800e132 <__lshift+0x3e>
 800e11e:	4602      	mov	r2, r0
 800e120:	4b28      	ldr	r3, [pc, #160]	@ (800e1c4 <__lshift+0xd0>)
 800e122:	4829      	ldr	r0, [pc, #164]	@ (800e1c8 <__lshift+0xd4>)
 800e124:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e128:	f000 fb86 	bl	800e838 <__assert_func>
 800e12c:	3101      	adds	r1, #1
 800e12e:	005b      	lsls	r3, r3, #1
 800e130:	e7ee      	b.n	800e110 <__lshift+0x1c>
 800e132:	2300      	movs	r3, #0
 800e134:	f100 0114 	add.w	r1, r0, #20
 800e138:	f100 0210 	add.w	r2, r0, #16
 800e13c:	4618      	mov	r0, r3
 800e13e:	4553      	cmp	r3, sl
 800e140:	db33      	blt.n	800e1aa <__lshift+0xb6>
 800e142:	6920      	ldr	r0, [r4, #16]
 800e144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e148:	f104 0314 	add.w	r3, r4, #20
 800e14c:	f019 091f 	ands.w	r9, r9, #31
 800e150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e158:	d02b      	beq.n	800e1b2 <__lshift+0xbe>
 800e15a:	f1c9 0e20 	rsb	lr, r9, #32
 800e15e:	468a      	mov	sl, r1
 800e160:	2200      	movs	r2, #0
 800e162:	6818      	ldr	r0, [r3, #0]
 800e164:	fa00 f009 	lsl.w	r0, r0, r9
 800e168:	4310      	orrs	r0, r2
 800e16a:	f84a 0b04 	str.w	r0, [sl], #4
 800e16e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e172:	459c      	cmp	ip, r3
 800e174:	fa22 f20e 	lsr.w	r2, r2, lr
 800e178:	d8f3      	bhi.n	800e162 <__lshift+0x6e>
 800e17a:	ebac 0304 	sub.w	r3, ip, r4
 800e17e:	3b15      	subs	r3, #21
 800e180:	f023 0303 	bic.w	r3, r3, #3
 800e184:	3304      	adds	r3, #4
 800e186:	f104 0015 	add.w	r0, r4, #21
 800e18a:	4560      	cmp	r0, ip
 800e18c:	bf88      	it	hi
 800e18e:	2304      	movhi	r3, #4
 800e190:	50ca      	str	r2, [r1, r3]
 800e192:	b10a      	cbz	r2, 800e198 <__lshift+0xa4>
 800e194:	f108 0602 	add.w	r6, r8, #2
 800e198:	3e01      	subs	r6, #1
 800e19a:	4638      	mov	r0, r7
 800e19c:	612e      	str	r6, [r5, #16]
 800e19e:	4621      	mov	r1, r4
 800e1a0:	f7ff fde2 	bl	800dd68 <_Bfree>
 800e1a4:	4628      	mov	r0, r5
 800e1a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e1aa:	f842 0f04 	str.w	r0, [r2, #4]!
 800e1ae:	3301      	adds	r3, #1
 800e1b0:	e7c5      	b.n	800e13e <__lshift+0x4a>
 800e1b2:	3904      	subs	r1, #4
 800e1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e1bc:	459c      	cmp	ip, r3
 800e1be:	d8f9      	bhi.n	800e1b4 <__lshift+0xc0>
 800e1c0:	e7ea      	b.n	800e198 <__lshift+0xa4>
 800e1c2:	bf00      	nop
 800e1c4:	0802e1cc 	.word	0x0802e1cc
 800e1c8:	0802e1dd 	.word	0x0802e1dd

0800e1cc <__mcmp>:
 800e1cc:	690a      	ldr	r2, [r1, #16]
 800e1ce:	4603      	mov	r3, r0
 800e1d0:	6900      	ldr	r0, [r0, #16]
 800e1d2:	1a80      	subs	r0, r0, r2
 800e1d4:	b530      	push	{r4, r5, lr}
 800e1d6:	d10e      	bne.n	800e1f6 <__mcmp+0x2a>
 800e1d8:	3314      	adds	r3, #20
 800e1da:	3114      	adds	r1, #20
 800e1dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e1e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e1e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e1e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e1ec:	4295      	cmp	r5, r2
 800e1ee:	d003      	beq.n	800e1f8 <__mcmp+0x2c>
 800e1f0:	d205      	bcs.n	800e1fe <__mcmp+0x32>
 800e1f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e1f6:	bd30      	pop	{r4, r5, pc}
 800e1f8:	42a3      	cmp	r3, r4
 800e1fa:	d3f3      	bcc.n	800e1e4 <__mcmp+0x18>
 800e1fc:	e7fb      	b.n	800e1f6 <__mcmp+0x2a>
 800e1fe:	2001      	movs	r0, #1
 800e200:	e7f9      	b.n	800e1f6 <__mcmp+0x2a>
	...

0800e204 <__mdiff>:
 800e204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e208:	4689      	mov	r9, r1
 800e20a:	4606      	mov	r6, r0
 800e20c:	4611      	mov	r1, r2
 800e20e:	4648      	mov	r0, r9
 800e210:	4614      	mov	r4, r2
 800e212:	f7ff ffdb 	bl	800e1cc <__mcmp>
 800e216:	1e05      	subs	r5, r0, #0
 800e218:	d112      	bne.n	800e240 <__mdiff+0x3c>
 800e21a:	4629      	mov	r1, r5
 800e21c:	4630      	mov	r0, r6
 800e21e:	f7ff fd63 	bl	800dce8 <_Balloc>
 800e222:	4602      	mov	r2, r0
 800e224:	b928      	cbnz	r0, 800e232 <__mdiff+0x2e>
 800e226:	4b3f      	ldr	r3, [pc, #252]	@ (800e324 <__mdiff+0x120>)
 800e228:	f240 2137 	movw	r1, #567	@ 0x237
 800e22c:	483e      	ldr	r0, [pc, #248]	@ (800e328 <__mdiff+0x124>)
 800e22e:	f000 fb03 	bl	800e838 <__assert_func>
 800e232:	2301      	movs	r3, #1
 800e234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e238:	4610      	mov	r0, r2
 800e23a:	b003      	add	sp, #12
 800e23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e240:	bfbc      	itt	lt
 800e242:	464b      	movlt	r3, r9
 800e244:	46a1      	movlt	r9, r4
 800e246:	4630      	mov	r0, r6
 800e248:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e24c:	bfba      	itte	lt
 800e24e:	461c      	movlt	r4, r3
 800e250:	2501      	movlt	r5, #1
 800e252:	2500      	movge	r5, #0
 800e254:	f7ff fd48 	bl	800dce8 <_Balloc>
 800e258:	4602      	mov	r2, r0
 800e25a:	b918      	cbnz	r0, 800e264 <__mdiff+0x60>
 800e25c:	4b31      	ldr	r3, [pc, #196]	@ (800e324 <__mdiff+0x120>)
 800e25e:	f240 2145 	movw	r1, #581	@ 0x245
 800e262:	e7e3      	b.n	800e22c <__mdiff+0x28>
 800e264:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e268:	6926      	ldr	r6, [r4, #16]
 800e26a:	60c5      	str	r5, [r0, #12]
 800e26c:	f109 0310 	add.w	r3, r9, #16
 800e270:	f109 0514 	add.w	r5, r9, #20
 800e274:	f104 0e14 	add.w	lr, r4, #20
 800e278:	f100 0b14 	add.w	fp, r0, #20
 800e27c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e280:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e284:	9301      	str	r3, [sp, #4]
 800e286:	46d9      	mov	r9, fp
 800e288:	f04f 0c00 	mov.w	ip, #0
 800e28c:	9b01      	ldr	r3, [sp, #4]
 800e28e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e292:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e296:	9301      	str	r3, [sp, #4]
 800e298:	fa1f f38a 	uxth.w	r3, sl
 800e29c:	4619      	mov	r1, r3
 800e29e:	b283      	uxth	r3, r0
 800e2a0:	1acb      	subs	r3, r1, r3
 800e2a2:	0c00      	lsrs	r0, r0, #16
 800e2a4:	4463      	add	r3, ip
 800e2a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e2aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e2b4:	4576      	cmp	r6, lr
 800e2b6:	f849 3b04 	str.w	r3, [r9], #4
 800e2ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e2be:	d8e5      	bhi.n	800e28c <__mdiff+0x88>
 800e2c0:	1b33      	subs	r3, r6, r4
 800e2c2:	3b15      	subs	r3, #21
 800e2c4:	f023 0303 	bic.w	r3, r3, #3
 800e2c8:	3415      	adds	r4, #21
 800e2ca:	3304      	adds	r3, #4
 800e2cc:	42a6      	cmp	r6, r4
 800e2ce:	bf38      	it	cc
 800e2d0:	2304      	movcc	r3, #4
 800e2d2:	441d      	add	r5, r3
 800e2d4:	445b      	add	r3, fp
 800e2d6:	461e      	mov	r6, r3
 800e2d8:	462c      	mov	r4, r5
 800e2da:	4544      	cmp	r4, r8
 800e2dc:	d30e      	bcc.n	800e2fc <__mdiff+0xf8>
 800e2de:	f108 0103 	add.w	r1, r8, #3
 800e2e2:	1b49      	subs	r1, r1, r5
 800e2e4:	f021 0103 	bic.w	r1, r1, #3
 800e2e8:	3d03      	subs	r5, #3
 800e2ea:	45a8      	cmp	r8, r5
 800e2ec:	bf38      	it	cc
 800e2ee:	2100      	movcc	r1, #0
 800e2f0:	440b      	add	r3, r1
 800e2f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e2f6:	b191      	cbz	r1, 800e31e <__mdiff+0x11a>
 800e2f8:	6117      	str	r7, [r2, #16]
 800e2fa:	e79d      	b.n	800e238 <__mdiff+0x34>
 800e2fc:	f854 1b04 	ldr.w	r1, [r4], #4
 800e300:	46e6      	mov	lr, ip
 800e302:	0c08      	lsrs	r0, r1, #16
 800e304:	fa1c fc81 	uxtah	ip, ip, r1
 800e308:	4471      	add	r1, lr
 800e30a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e30e:	b289      	uxth	r1, r1
 800e310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e314:	f846 1b04 	str.w	r1, [r6], #4
 800e318:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e31c:	e7dd      	b.n	800e2da <__mdiff+0xd6>
 800e31e:	3f01      	subs	r7, #1
 800e320:	e7e7      	b.n	800e2f2 <__mdiff+0xee>
 800e322:	bf00      	nop
 800e324:	0802e1cc 	.word	0x0802e1cc
 800e328:	0802e1dd 	.word	0x0802e1dd

0800e32c <__d2b>:
 800e32c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e330:	460f      	mov	r7, r1
 800e332:	2101      	movs	r1, #1
 800e334:	ec59 8b10 	vmov	r8, r9, d0
 800e338:	4616      	mov	r6, r2
 800e33a:	f7ff fcd5 	bl	800dce8 <_Balloc>
 800e33e:	4604      	mov	r4, r0
 800e340:	b930      	cbnz	r0, 800e350 <__d2b+0x24>
 800e342:	4602      	mov	r2, r0
 800e344:	4b23      	ldr	r3, [pc, #140]	@ (800e3d4 <__d2b+0xa8>)
 800e346:	4824      	ldr	r0, [pc, #144]	@ (800e3d8 <__d2b+0xac>)
 800e348:	f240 310f 	movw	r1, #783	@ 0x30f
 800e34c:	f000 fa74 	bl	800e838 <__assert_func>
 800e350:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e358:	b10d      	cbz	r5, 800e35e <__d2b+0x32>
 800e35a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e35e:	9301      	str	r3, [sp, #4]
 800e360:	f1b8 0300 	subs.w	r3, r8, #0
 800e364:	d023      	beq.n	800e3ae <__d2b+0x82>
 800e366:	4668      	mov	r0, sp
 800e368:	9300      	str	r3, [sp, #0]
 800e36a:	f7ff fd84 	bl	800de76 <__lo0bits>
 800e36e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e372:	b1d0      	cbz	r0, 800e3aa <__d2b+0x7e>
 800e374:	f1c0 0320 	rsb	r3, r0, #32
 800e378:	fa02 f303 	lsl.w	r3, r2, r3
 800e37c:	430b      	orrs	r3, r1
 800e37e:	40c2      	lsrs	r2, r0
 800e380:	6163      	str	r3, [r4, #20]
 800e382:	9201      	str	r2, [sp, #4]
 800e384:	9b01      	ldr	r3, [sp, #4]
 800e386:	61a3      	str	r3, [r4, #24]
 800e388:	2b00      	cmp	r3, #0
 800e38a:	bf0c      	ite	eq
 800e38c:	2201      	moveq	r2, #1
 800e38e:	2202      	movne	r2, #2
 800e390:	6122      	str	r2, [r4, #16]
 800e392:	b1a5      	cbz	r5, 800e3be <__d2b+0x92>
 800e394:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e398:	4405      	add	r5, r0
 800e39a:	603d      	str	r5, [r7, #0]
 800e39c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e3a0:	6030      	str	r0, [r6, #0]
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	b003      	add	sp, #12
 800e3a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3aa:	6161      	str	r1, [r4, #20]
 800e3ac:	e7ea      	b.n	800e384 <__d2b+0x58>
 800e3ae:	a801      	add	r0, sp, #4
 800e3b0:	f7ff fd61 	bl	800de76 <__lo0bits>
 800e3b4:	9b01      	ldr	r3, [sp, #4]
 800e3b6:	6163      	str	r3, [r4, #20]
 800e3b8:	3020      	adds	r0, #32
 800e3ba:	2201      	movs	r2, #1
 800e3bc:	e7e8      	b.n	800e390 <__d2b+0x64>
 800e3be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e3c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e3c6:	6038      	str	r0, [r7, #0]
 800e3c8:	6918      	ldr	r0, [r3, #16]
 800e3ca:	f7ff fd35 	bl	800de38 <__hi0bits>
 800e3ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e3d2:	e7e5      	b.n	800e3a0 <__d2b+0x74>
 800e3d4:	0802e1cc 	.word	0x0802e1cc
 800e3d8:	0802e1dd 	.word	0x0802e1dd

0800e3dc <__ssputs_r>:
 800e3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e0:	688e      	ldr	r6, [r1, #8]
 800e3e2:	461f      	mov	r7, r3
 800e3e4:	42be      	cmp	r6, r7
 800e3e6:	680b      	ldr	r3, [r1, #0]
 800e3e8:	4682      	mov	sl, r0
 800e3ea:	460c      	mov	r4, r1
 800e3ec:	4690      	mov	r8, r2
 800e3ee:	d82d      	bhi.n	800e44c <__ssputs_r+0x70>
 800e3f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e3f4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e3f8:	d026      	beq.n	800e448 <__ssputs_r+0x6c>
 800e3fa:	6965      	ldr	r5, [r4, #20]
 800e3fc:	6909      	ldr	r1, [r1, #16]
 800e3fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e402:	eba3 0901 	sub.w	r9, r3, r1
 800e406:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e40a:	1c7b      	adds	r3, r7, #1
 800e40c:	444b      	add	r3, r9
 800e40e:	106d      	asrs	r5, r5, #1
 800e410:	429d      	cmp	r5, r3
 800e412:	bf38      	it	cc
 800e414:	461d      	movcc	r5, r3
 800e416:	0553      	lsls	r3, r2, #21
 800e418:	d527      	bpl.n	800e46a <__ssputs_r+0x8e>
 800e41a:	4629      	mov	r1, r5
 800e41c:	f7ff fbd8 	bl	800dbd0 <_malloc_r>
 800e420:	4606      	mov	r6, r0
 800e422:	b360      	cbz	r0, 800e47e <__ssputs_r+0xa2>
 800e424:	6921      	ldr	r1, [r4, #16]
 800e426:	464a      	mov	r2, r9
 800e428:	f7fe fcf7 	bl	800ce1a <memcpy>
 800e42c:	89a3      	ldrh	r3, [r4, #12]
 800e42e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e432:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e436:	81a3      	strh	r3, [r4, #12]
 800e438:	6126      	str	r6, [r4, #16]
 800e43a:	6165      	str	r5, [r4, #20]
 800e43c:	444e      	add	r6, r9
 800e43e:	eba5 0509 	sub.w	r5, r5, r9
 800e442:	6026      	str	r6, [r4, #0]
 800e444:	60a5      	str	r5, [r4, #8]
 800e446:	463e      	mov	r6, r7
 800e448:	42be      	cmp	r6, r7
 800e44a:	d900      	bls.n	800e44e <__ssputs_r+0x72>
 800e44c:	463e      	mov	r6, r7
 800e44e:	6820      	ldr	r0, [r4, #0]
 800e450:	4632      	mov	r2, r6
 800e452:	4641      	mov	r1, r8
 800e454:	f000 f9c6 	bl	800e7e4 <memmove>
 800e458:	68a3      	ldr	r3, [r4, #8]
 800e45a:	1b9b      	subs	r3, r3, r6
 800e45c:	60a3      	str	r3, [r4, #8]
 800e45e:	6823      	ldr	r3, [r4, #0]
 800e460:	4433      	add	r3, r6
 800e462:	6023      	str	r3, [r4, #0]
 800e464:	2000      	movs	r0, #0
 800e466:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e46a:	462a      	mov	r2, r5
 800e46c:	f000 fa28 	bl	800e8c0 <_realloc_r>
 800e470:	4606      	mov	r6, r0
 800e472:	2800      	cmp	r0, #0
 800e474:	d1e0      	bne.n	800e438 <__ssputs_r+0x5c>
 800e476:	6921      	ldr	r1, [r4, #16]
 800e478:	4650      	mov	r0, sl
 800e47a:	f7ff fb35 	bl	800dae8 <_free_r>
 800e47e:	230c      	movs	r3, #12
 800e480:	f8ca 3000 	str.w	r3, [sl]
 800e484:	89a3      	ldrh	r3, [r4, #12]
 800e486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e48a:	81a3      	strh	r3, [r4, #12]
 800e48c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e490:	e7e9      	b.n	800e466 <__ssputs_r+0x8a>
	...

0800e494 <_svfiprintf_r>:
 800e494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e498:	4698      	mov	r8, r3
 800e49a:	898b      	ldrh	r3, [r1, #12]
 800e49c:	061b      	lsls	r3, r3, #24
 800e49e:	b09d      	sub	sp, #116	@ 0x74
 800e4a0:	4607      	mov	r7, r0
 800e4a2:	460d      	mov	r5, r1
 800e4a4:	4614      	mov	r4, r2
 800e4a6:	d510      	bpl.n	800e4ca <_svfiprintf_r+0x36>
 800e4a8:	690b      	ldr	r3, [r1, #16]
 800e4aa:	b973      	cbnz	r3, 800e4ca <_svfiprintf_r+0x36>
 800e4ac:	2140      	movs	r1, #64	@ 0x40
 800e4ae:	f7ff fb8f 	bl	800dbd0 <_malloc_r>
 800e4b2:	6028      	str	r0, [r5, #0]
 800e4b4:	6128      	str	r0, [r5, #16]
 800e4b6:	b930      	cbnz	r0, 800e4c6 <_svfiprintf_r+0x32>
 800e4b8:	230c      	movs	r3, #12
 800e4ba:	603b      	str	r3, [r7, #0]
 800e4bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e4c0:	b01d      	add	sp, #116	@ 0x74
 800e4c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e4c6:	2340      	movs	r3, #64	@ 0x40
 800e4c8:	616b      	str	r3, [r5, #20]
 800e4ca:	2300      	movs	r3, #0
 800e4cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e4ce:	2320      	movs	r3, #32
 800e4d0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e4d4:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4d8:	2330      	movs	r3, #48	@ 0x30
 800e4da:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e678 <_svfiprintf_r+0x1e4>
 800e4de:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e4e2:	f04f 0901 	mov.w	r9, #1
 800e4e6:	4623      	mov	r3, r4
 800e4e8:	469a      	mov	sl, r3
 800e4ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ee:	b10a      	cbz	r2, 800e4f4 <_svfiprintf_r+0x60>
 800e4f0:	2a25      	cmp	r2, #37	@ 0x25
 800e4f2:	d1f9      	bne.n	800e4e8 <_svfiprintf_r+0x54>
 800e4f4:	ebba 0b04 	subs.w	fp, sl, r4
 800e4f8:	d00b      	beq.n	800e512 <_svfiprintf_r+0x7e>
 800e4fa:	465b      	mov	r3, fp
 800e4fc:	4622      	mov	r2, r4
 800e4fe:	4629      	mov	r1, r5
 800e500:	4638      	mov	r0, r7
 800e502:	f7ff ff6b 	bl	800e3dc <__ssputs_r>
 800e506:	3001      	adds	r0, #1
 800e508:	f000 80a7 	beq.w	800e65a <_svfiprintf_r+0x1c6>
 800e50c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e50e:	445a      	add	r2, fp
 800e510:	9209      	str	r2, [sp, #36]	@ 0x24
 800e512:	f89a 3000 	ldrb.w	r3, [sl]
 800e516:	2b00      	cmp	r3, #0
 800e518:	f000 809f 	beq.w	800e65a <_svfiprintf_r+0x1c6>
 800e51c:	2300      	movs	r3, #0
 800e51e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800e522:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e526:	f10a 0a01 	add.w	sl, sl, #1
 800e52a:	9304      	str	r3, [sp, #16]
 800e52c:	9307      	str	r3, [sp, #28]
 800e52e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e532:	931a      	str	r3, [sp, #104]	@ 0x68
 800e534:	4654      	mov	r4, sl
 800e536:	2205      	movs	r2, #5
 800e538:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e53c:	484e      	ldr	r0, [pc, #312]	@ (800e678 <_svfiprintf_r+0x1e4>)
 800e53e:	f7f1 fe47 	bl	80001d0 <memchr>
 800e542:	9a04      	ldr	r2, [sp, #16]
 800e544:	b9d8      	cbnz	r0, 800e57e <_svfiprintf_r+0xea>
 800e546:	06d0      	lsls	r0, r2, #27
 800e548:	bf44      	itt	mi
 800e54a:	2320      	movmi	r3, #32
 800e54c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e550:	0711      	lsls	r1, r2, #28
 800e552:	bf44      	itt	mi
 800e554:	232b      	movmi	r3, #43	@ 0x2b
 800e556:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e55a:	f89a 3000 	ldrb.w	r3, [sl]
 800e55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e560:	d015      	beq.n	800e58e <_svfiprintf_r+0xfa>
 800e562:	9a07      	ldr	r2, [sp, #28]
 800e564:	4654      	mov	r4, sl
 800e566:	2000      	movs	r0, #0
 800e568:	f04f 0c0a 	mov.w	ip, #10
 800e56c:	4621      	mov	r1, r4
 800e56e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e572:	3b30      	subs	r3, #48	@ 0x30
 800e574:	2b09      	cmp	r3, #9
 800e576:	d94b      	bls.n	800e610 <_svfiprintf_r+0x17c>
 800e578:	b1b0      	cbz	r0, 800e5a8 <_svfiprintf_r+0x114>
 800e57a:	9207      	str	r2, [sp, #28]
 800e57c:	e014      	b.n	800e5a8 <_svfiprintf_r+0x114>
 800e57e:	eba0 0308 	sub.w	r3, r0, r8
 800e582:	fa09 f303 	lsl.w	r3, r9, r3
 800e586:	4313      	orrs	r3, r2
 800e588:	9304      	str	r3, [sp, #16]
 800e58a:	46a2      	mov	sl, r4
 800e58c:	e7d2      	b.n	800e534 <_svfiprintf_r+0xa0>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	1d19      	adds	r1, r3, #4
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	9103      	str	r1, [sp, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfbb      	ittet	lt
 800e59a:	425b      	neglt	r3, r3
 800e59c:	f042 0202 	orrlt.w	r2, r2, #2
 800e5a0:	9307      	strge	r3, [sp, #28]
 800e5a2:	9307      	strlt	r3, [sp, #28]
 800e5a4:	bfb8      	it	lt
 800e5a6:	9204      	strlt	r2, [sp, #16]
 800e5a8:	7823      	ldrb	r3, [r4, #0]
 800e5aa:	2b2e      	cmp	r3, #46	@ 0x2e
 800e5ac:	d10a      	bne.n	800e5c4 <_svfiprintf_r+0x130>
 800e5ae:	7863      	ldrb	r3, [r4, #1]
 800e5b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e5b2:	d132      	bne.n	800e61a <_svfiprintf_r+0x186>
 800e5b4:	9b03      	ldr	r3, [sp, #12]
 800e5b6:	1d1a      	adds	r2, r3, #4
 800e5b8:	681b      	ldr	r3, [r3, #0]
 800e5ba:	9203      	str	r2, [sp, #12]
 800e5bc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e5c0:	3402      	adds	r4, #2
 800e5c2:	9305      	str	r3, [sp, #20]
 800e5c4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e688 <_svfiprintf_r+0x1f4>
 800e5c8:	7821      	ldrb	r1, [r4, #0]
 800e5ca:	2203      	movs	r2, #3
 800e5cc:	4650      	mov	r0, sl
 800e5ce:	f7f1 fdff 	bl	80001d0 <memchr>
 800e5d2:	b138      	cbz	r0, 800e5e4 <_svfiprintf_r+0x150>
 800e5d4:	9b04      	ldr	r3, [sp, #16]
 800e5d6:	eba0 000a 	sub.w	r0, r0, sl
 800e5da:	2240      	movs	r2, #64	@ 0x40
 800e5dc:	4082      	lsls	r2, r0
 800e5de:	4313      	orrs	r3, r2
 800e5e0:	3401      	adds	r4, #1
 800e5e2:	9304      	str	r3, [sp, #16]
 800e5e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5e8:	4824      	ldr	r0, [pc, #144]	@ (800e67c <_svfiprintf_r+0x1e8>)
 800e5ea:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e5ee:	2206      	movs	r2, #6
 800e5f0:	f7f1 fdee 	bl	80001d0 <memchr>
 800e5f4:	2800      	cmp	r0, #0
 800e5f6:	d036      	beq.n	800e666 <_svfiprintf_r+0x1d2>
 800e5f8:	4b21      	ldr	r3, [pc, #132]	@ (800e680 <_svfiprintf_r+0x1ec>)
 800e5fa:	bb1b      	cbnz	r3, 800e644 <_svfiprintf_r+0x1b0>
 800e5fc:	9b03      	ldr	r3, [sp, #12]
 800e5fe:	3307      	adds	r3, #7
 800e600:	f023 0307 	bic.w	r3, r3, #7
 800e604:	3308      	adds	r3, #8
 800e606:	9303      	str	r3, [sp, #12]
 800e608:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e60a:	4433      	add	r3, r6
 800e60c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e60e:	e76a      	b.n	800e4e6 <_svfiprintf_r+0x52>
 800e610:	fb0c 3202 	mla	r2, ip, r2, r3
 800e614:	460c      	mov	r4, r1
 800e616:	2001      	movs	r0, #1
 800e618:	e7a8      	b.n	800e56c <_svfiprintf_r+0xd8>
 800e61a:	2300      	movs	r3, #0
 800e61c:	3401      	adds	r4, #1
 800e61e:	9305      	str	r3, [sp, #20]
 800e620:	4619      	mov	r1, r3
 800e622:	f04f 0c0a 	mov.w	ip, #10
 800e626:	4620      	mov	r0, r4
 800e628:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e62c:	3a30      	subs	r2, #48	@ 0x30
 800e62e:	2a09      	cmp	r2, #9
 800e630:	d903      	bls.n	800e63a <_svfiprintf_r+0x1a6>
 800e632:	2b00      	cmp	r3, #0
 800e634:	d0c6      	beq.n	800e5c4 <_svfiprintf_r+0x130>
 800e636:	9105      	str	r1, [sp, #20]
 800e638:	e7c4      	b.n	800e5c4 <_svfiprintf_r+0x130>
 800e63a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e63e:	4604      	mov	r4, r0
 800e640:	2301      	movs	r3, #1
 800e642:	e7f0      	b.n	800e626 <_svfiprintf_r+0x192>
 800e644:	ab03      	add	r3, sp, #12
 800e646:	9300      	str	r3, [sp, #0]
 800e648:	462a      	mov	r2, r5
 800e64a:	4b0e      	ldr	r3, [pc, #56]	@ (800e684 <_svfiprintf_r+0x1f0>)
 800e64c:	a904      	add	r1, sp, #16
 800e64e:	4638      	mov	r0, r7
 800e650:	f7fd fe14 	bl	800c27c <_printf_float>
 800e654:	1c42      	adds	r2, r0, #1
 800e656:	4606      	mov	r6, r0
 800e658:	d1d6      	bne.n	800e608 <_svfiprintf_r+0x174>
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	065b      	lsls	r3, r3, #25
 800e65e:	f53f af2d 	bmi.w	800e4bc <_svfiprintf_r+0x28>
 800e662:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e664:	e72c      	b.n	800e4c0 <_svfiprintf_r+0x2c>
 800e666:	ab03      	add	r3, sp, #12
 800e668:	9300      	str	r3, [sp, #0]
 800e66a:	462a      	mov	r2, r5
 800e66c:	4b05      	ldr	r3, [pc, #20]	@ (800e684 <_svfiprintf_r+0x1f0>)
 800e66e:	a904      	add	r1, sp, #16
 800e670:	4638      	mov	r0, r7
 800e672:	f7fe f89b 	bl	800c7ac <_printf_i>
 800e676:	e7ed      	b.n	800e654 <_svfiprintf_r+0x1c0>
 800e678:	0802e236 	.word	0x0802e236
 800e67c:	0802e240 	.word	0x0802e240
 800e680:	0800c27d 	.word	0x0800c27d
 800e684:	0800e3dd 	.word	0x0800e3dd
 800e688:	0802e23c 	.word	0x0802e23c

0800e68c <__sflush_r>:
 800e68c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e694:	0716      	lsls	r6, r2, #28
 800e696:	4605      	mov	r5, r0
 800e698:	460c      	mov	r4, r1
 800e69a:	d454      	bmi.n	800e746 <__sflush_r+0xba>
 800e69c:	684b      	ldr	r3, [r1, #4]
 800e69e:	2b00      	cmp	r3, #0
 800e6a0:	dc02      	bgt.n	800e6a8 <__sflush_r+0x1c>
 800e6a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	dd48      	ble.n	800e73a <__sflush_r+0xae>
 800e6a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6aa:	2e00      	cmp	r6, #0
 800e6ac:	d045      	beq.n	800e73a <__sflush_r+0xae>
 800e6ae:	2300      	movs	r3, #0
 800e6b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e6b4:	682f      	ldr	r7, [r5, #0]
 800e6b6:	6a21      	ldr	r1, [r4, #32]
 800e6b8:	602b      	str	r3, [r5, #0]
 800e6ba:	d030      	beq.n	800e71e <__sflush_r+0x92>
 800e6bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e6be:	89a3      	ldrh	r3, [r4, #12]
 800e6c0:	0759      	lsls	r1, r3, #29
 800e6c2:	d505      	bpl.n	800e6d0 <__sflush_r+0x44>
 800e6c4:	6863      	ldr	r3, [r4, #4]
 800e6c6:	1ad2      	subs	r2, r2, r3
 800e6c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e6ca:	b10b      	cbz	r3, 800e6d0 <__sflush_r+0x44>
 800e6cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e6ce:	1ad2      	subs	r2, r2, r3
 800e6d0:	2300      	movs	r3, #0
 800e6d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e6d4:	6a21      	ldr	r1, [r4, #32]
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	47b0      	blx	r6
 800e6da:	1c43      	adds	r3, r0, #1
 800e6dc:	89a3      	ldrh	r3, [r4, #12]
 800e6de:	d106      	bne.n	800e6ee <__sflush_r+0x62>
 800e6e0:	6829      	ldr	r1, [r5, #0]
 800e6e2:	291d      	cmp	r1, #29
 800e6e4:	d82b      	bhi.n	800e73e <__sflush_r+0xb2>
 800e6e6:	4a2a      	ldr	r2, [pc, #168]	@ (800e790 <__sflush_r+0x104>)
 800e6e8:	40ca      	lsrs	r2, r1
 800e6ea:	07d6      	lsls	r6, r2, #31
 800e6ec:	d527      	bpl.n	800e73e <__sflush_r+0xb2>
 800e6ee:	2200      	movs	r2, #0
 800e6f0:	6062      	str	r2, [r4, #4]
 800e6f2:	04d9      	lsls	r1, r3, #19
 800e6f4:	6922      	ldr	r2, [r4, #16]
 800e6f6:	6022      	str	r2, [r4, #0]
 800e6f8:	d504      	bpl.n	800e704 <__sflush_r+0x78>
 800e6fa:	1c42      	adds	r2, r0, #1
 800e6fc:	d101      	bne.n	800e702 <__sflush_r+0x76>
 800e6fe:	682b      	ldr	r3, [r5, #0]
 800e700:	b903      	cbnz	r3, 800e704 <__sflush_r+0x78>
 800e702:	6560      	str	r0, [r4, #84]	@ 0x54
 800e704:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e706:	602f      	str	r7, [r5, #0]
 800e708:	b1b9      	cbz	r1, 800e73a <__sflush_r+0xae>
 800e70a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e70e:	4299      	cmp	r1, r3
 800e710:	d002      	beq.n	800e718 <__sflush_r+0x8c>
 800e712:	4628      	mov	r0, r5
 800e714:	f7ff f9e8 	bl	800dae8 <_free_r>
 800e718:	2300      	movs	r3, #0
 800e71a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e71c:	e00d      	b.n	800e73a <__sflush_r+0xae>
 800e71e:	2301      	movs	r3, #1
 800e720:	4628      	mov	r0, r5
 800e722:	47b0      	blx	r6
 800e724:	4602      	mov	r2, r0
 800e726:	1c50      	adds	r0, r2, #1
 800e728:	d1c9      	bne.n	800e6be <__sflush_r+0x32>
 800e72a:	682b      	ldr	r3, [r5, #0]
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d0c6      	beq.n	800e6be <__sflush_r+0x32>
 800e730:	2b1d      	cmp	r3, #29
 800e732:	d001      	beq.n	800e738 <__sflush_r+0xac>
 800e734:	2b16      	cmp	r3, #22
 800e736:	d11e      	bne.n	800e776 <__sflush_r+0xea>
 800e738:	602f      	str	r7, [r5, #0]
 800e73a:	2000      	movs	r0, #0
 800e73c:	e022      	b.n	800e784 <__sflush_r+0xf8>
 800e73e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e742:	b21b      	sxth	r3, r3
 800e744:	e01b      	b.n	800e77e <__sflush_r+0xf2>
 800e746:	690f      	ldr	r7, [r1, #16]
 800e748:	2f00      	cmp	r7, #0
 800e74a:	d0f6      	beq.n	800e73a <__sflush_r+0xae>
 800e74c:	0793      	lsls	r3, r2, #30
 800e74e:	680e      	ldr	r6, [r1, #0]
 800e750:	bf08      	it	eq
 800e752:	694b      	ldreq	r3, [r1, #20]
 800e754:	600f      	str	r7, [r1, #0]
 800e756:	bf18      	it	ne
 800e758:	2300      	movne	r3, #0
 800e75a:	eba6 0807 	sub.w	r8, r6, r7
 800e75e:	608b      	str	r3, [r1, #8]
 800e760:	f1b8 0f00 	cmp.w	r8, #0
 800e764:	dde9      	ble.n	800e73a <__sflush_r+0xae>
 800e766:	6a21      	ldr	r1, [r4, #32]
 800e768:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e76a:	4643      	mov	r3, r8
 800e76c:	463a      	mov	r2, r7
 800e76e:	4628      	mov	r0, r5
 800e770:	47b0      	blx	r6
 800e772:	2800      	cmp	r0, #0
 800e774:	dc08      	bgt.n	800e788 <__sflush_r+0xfc>
 800e776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e77a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e77e:	81a3      	strh	r3, [r4, #12]
 800e780:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e788:	4407      	add	r7, r0
 800e78a:	eba8 0800 	sub.w	r8, r8, r0
 800e78e:	e7e7      	b.n	800e760 <__sflush_r+0xd4>
 800e790:	20400001 	.word	0x20400001

0800e794 <_fflush_r>:
 800e794:	b538      	push	{r3, r4, r5, lr}
 800e796:	690b      	ldr	r3, [r1, #16]
 800e798:	4605      	mov	r5, r0
 800e79a:	460c      	mov	r4, r1
 800e79c:	b913      	cbnz	r3, 800e7a4 <_fflush_r+0x10>
 800e79e:	2500      	movs	r5, #0
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	bd38      	pop	{r3, r4, r5, pc}
 800e7a4:	b118      	cbz	r0, 800e7ae <_fflush_r+0x1a>
 800e7a6:	6a03      	ldr	r3, [r0, #32]
 800e7a8:	b90b      	cbnz	r3, 800e7ae <_fflush_r+0x1a>
 800e7aa:	f7fe f9a9 	bl	800cb00 <__sinit>
 800e7ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e7b2:	2b00      	cmp	r3, #0
 800e7b4:	d0f3      	beq.n	800e79e <_fflush_r+0xa>
 800e7b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e7b8:	07d0      	lsls	r0, r2, #31
 800e7ba:	d404      	bmi.n	800e7c6 <_fflush_r+0x32>
 800e7bc:	0599      	lsls	r1, r3, #22
 800e7be:	d402      	bmi.n	800e7c6 <_fflush_r+0x32>
 800e7c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7c2:	f7fe fb28 	bl	800ce16 <__retarget_lock_acquire_recursive>
 800e7c6:	4628      	mov	r0, r5
 800e7c8:	4621      	mov	r1, r4
 800e7ca:	f7ff ff5f 	bl	800e68c <__sflush_r>
 800e7ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e7d0:	07da      	lsls	r2, r3, #31
 800e7d2:	4605      	mov	r5, r0
 800e7d4:	d4e4      	bmi.n	800e7a0 <_fflush_r+0xc>
 800e7d6:	89a3      	ldrh	r3, [r4, #12]
 800e7d8:	059b      	lsls	r3, r3, #22
 800e7da:	d4e1      	bmi.n	800e7a0 <_fflush_r+0xc>
 800e7dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e7de:	f7fe fb1b 	bl	800ce18 <__retarget_lock_release_recursive>
 800e7e2:	e7dd      	b.n	800e7a0 <_fflush_r+0xc>

0800e7e4 <memmove>:
 800e7e4:	4288      	cmp	r0, r1
 800e7e6:	b510      	push	{r4, lr}
 800e7e8:	eb01 0402 	add.w	r4, r1, r2
 800e7ec:	d902      	bls.n	800e7f4 <memmove+0x10>
 800e7ee:	4284      	cmp	r4, r0
 800e7f0:	4623      	mov	r3, r4
 800e7f2:	d807      	bhi.n	800e804 <memmove+0x20>
 800e7f4:	1e43      	subs	r3, r0, #1
 800e7f6:	42a1      	cmp	r1, r4
 800e7f8:	d008      	beq.n	800e80c <memmove+0x28>
 800e7fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e7fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e802:	e7f8      	b.n	800e7f6 <memmove+0x12>
 800e804:	4402      	add	r2, r0
 800e806:	4601      	mov	r1, r0
 800e808:	428a      	cmp	r2, r1
 800e80a:	d100      	bne.n	800e80e <memmove+0x2a>
 800e80c:	bd10      	pop	{r4, pc}
 800e80e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e812:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e816:	e7f7      	b.n	800e808 <memmove+0x24>

0800e818 <_sbrk_r>:
 800e818:	b538      	push	{r3, r4, r5, lr}
 800e81a:	4d06      	ldr	r5, [pc, #24]	@ (800e834 <_sbrk_r+0x1c>)
 800e81c:	2300      	movs	r3, #0
 800e81e:	4604      	mov	r4, r0
 800e820:	4608      	mov	r0, r1
 800e822:	602b      	str	r3, [r5, #0]
 800e824:	f7f3 fe54 	bl	80024d0 <_sbrk>
 800e828:	1c43      	adds	r3, r0, #1
 800e82a:	d102      	bne.n	800e832 <_sbrk_r+0x1a>
 800e82c:	682b      	ldr	r3, [r5, #0]
 800e82e:	b103      	cbz	r3, 800e832 <_sbrk_r+0x1a>
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	bd38      	pop	{r3, r4, r5, pc}
 800e834:	2000ac30 	.word	0x2000ac30

0800e838 <__assert_func>:
 800e838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e83a:	4614      	mov	r4, r2
 800e83c:	461a      	mov	r2, r3
 800e83e:	4b09      	ldr	r3, [pc, #36]	@ (800e864 <__assert_func+0x2c>)
 800e840:	681b      	ldr	r3, [r3, #0]
 800e842:	4605      	mov	r5, r0
 800e844:	68d8      	ldr	r0, [r3, #12]
 800e846:	b14c      	cbz	r4, 800e85c <__assert_func+0x24>
 800e848:	4b07      	ldr	r3, [pc, #28]	@ (800e868 <__assert_func+0x30>)
 800e84a:	9100      	str	r1, [sp, #0]
 800e84c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e850:	4906      	ldr	r1, [pc, #24]	@ (800e86c <__assert_func+0x34>)
 800e852:	462b      	mov	r3, r5
 800e854:	f000 f870 	bl	800e938 <fiprintf>
 800e858:	f000 f880 	bl	800e95c <abort>
 800e85c:	4b04      	ldr	r3, [pc, #16]	@ (800e870 <__assert_func+0x38>)
 800e85e:	461c      	mov	r4, r3
 800e860:	e7f3      	b.n	800e84a <__assert_func+0x12>
 800e862:	bf00      	nop
 800e864:	20000424 	.word	0x20000424
 800e868:	0802e251 	.word	0x0802e251
 800e86c:	0802e25e 	.word	0x0802e25e
 800e870:	0802e28c 	.word	0x0802e28c

0800e874 <_calloc_r>:
 800e874:	b570      	push	{r4, r5, r6, lr}
 800e876:	fba1 5402 	umull	r5, r4, r1, r2
 800e87a:	b934      	cbnz	r4, 800e88a <_calloc_r+0x16>
 800e87c:	4629      	mov	r1, r5
 800e87e:	f7ff f9a7 	bl	800dbd0 <_malloc_r>
 800e882:	4606      	mov	r6, r0
 800e884:	b928      	cbnz	r0, 800e892 <_calloc_r+0x1e>
 800e886:	4630      	mov	r0, r6
 800e888:	bd70      	pop	{r4, r5, r6, pc}
 800e88a:	220c      	movs	r2, #12
 800e88c:	6002      	str	r2, [r0, #0]
 800e88e:	2600      	movs	r6, #0
 800e890:	e7f9      	b.n	800e886 <_calloc_r+0x12>
 800e892:	462a      	mov	r2, r5
 800e894:	4621      	mov	r1, r4
 800e896:	f7fe f9e2 	bl	800cc5e <memset>
 800e89a:	e7f4      	b.n	800e886 <_calloc_r+0x12>

0800e89c <__ascii_mbtowc>:
 800e89c:	b082      	sub	sp, #8
 800e89e:	b901      	cbnz	r1, 800e8a2 <__ascii_mbtowc+0x6>
 800e8a0:	a901      	add	r1, sp, #4
 800e8a2:	b142      	cbz	r2, 800e8b6 <__ascii_mbtowc+0x1a>
 800e8a4:	b14b      	cbz	r3, 800e8ba <__ascii_mbtowc+0x1e>
 800e8a6:	7813      	ldrb	r3, [r2, #0]
 800e8a8:	600b      	str	r3, [r1, #0]
 800e8aa:	7812      	ldrb	r2, [r2, #0]
 800e8ac:	1e10      	subs	r0, r2, #0
 800e8ae:	bf18      	it	ne
 800e8b0:	2001      	movne	r0, #1
 800e8b2:	b002      	add	sp, #8
 800e8b4:	4770      	bx	lr
 800e8b6:	4610      	mov	r0, r2
 800e8b8:	e7fb      	b.n	800e8b2 <__ascii_mbtowc+0x16>
 800e8ba:	f06f 0001 	mvn.w	r0, #1
 800e8be:	e7f8      	b.n	800e8b2 <__ascii_mbtowc+0x16>

0800e8c0 <_realloc_r>:
 800e8c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8c4:	4607      	mov	r7, r0
 800e8c6:	4614      	mov	r4, r2
 800e8c8:	460d      	mov	r5, r1
 800e8ca:	b921      	cbnz	r1, 800e8d6 <_realloc_r+0x16>
 800e8cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e8d0:	4611      	mov	r1, r2
 800e8d2:	f7ff b97d 	b.w	800dbd0 <_malloc_r>
 800e8d6:	b92a      	cbnz	r2, 800e8e4 <_realloc_r+0x24>
 800e8d8:	f7ff f906 	bl	800dae8 <_free_r>
 800e8dc:	4625      	mov	r5, r4
 800e8de:	4628      	mov	r0, r5
 800e8e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e8e4:	f000 f841 	bl	800e96a <_malloc_usable_size_r>
 800e8e8:	4284      	cmp	r4, r0
 800e8ea:	4606      	mov	r6, r0
 800e8ec:	d802      	bhi.n	800e8f4 <_realloc_r+0x34>
 800e8ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e8f2:	d8f4      	bhi.n	800e8de <_realloc_r+0x1e>
 800e8f4:	4621      	mov	r1, r4
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	f7ff f96a 	bl	800dbd0 <_malloc_r>
 800e8fc:	4680      	mov	r8, r0
 800e8fe:	b908      	cbnz	r0, 800e904 <_realloc_r+0x44>
 800e900:	4645      	mov	r5, r8
 800e902:	e7ec      	b.n	800e8de <_realloc_r+0x1e>
 800e904:	42b4      	cmp	r4, r6
 800e906:	4622      	mov	r2, r4
 800e908:	4629      	mov	r1, r5
 800e90a:	bf28      	it	cs
 800e90c:	4632      	movcs	r2, r6
 800e90e:	f7fe fa84 	bl	800ce1a <memcpy>
 800e912:	4629      	mov	r1, r5
 800e914:	4638      	mov	r0, r7
 800e916:	f7ff f8e7 	bl	800dae8 <_free_r>
 800e91a:	e7f1      	b.n	800e900 <_realloc_r+0x40>

0800e91c <__ascii_wctomb>:
 800e91c:	4603      	mov	r3, r0
 800e91e:	4608      	mov	r0, r1
 800e920:	b141      	cbz	r1, 800e934 <__ascii_wctomb+0x18>
 800e922:	2aff      	cmp	r2, #255	@ 0xff
 800e924:	d904      	bls.n	800e930 <__ascii_wctomb+0x14>
 800e926:	228a      	movs	r2, #138	@ 0x8a
 800e928:	601a      	str	r2, [r3, #0]
 800e92a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800e92e:	4770      	bx	lr
 800e930:	700a      	strb	r2, [r1, #0]
 800e932:	2001      	movs	r0, #1
 800e934:	4770      	bx	lr
	...

0800e938 <fiprintf>:
 800e938:	b40e      	push	{r1, r2, r3}
 800e93a:	b503      	push	{r0, r1, lr}
 800e93c:	4601      	mov	r1, r0
 800e93e:	ab03      	add	r3, sp, #12
 800e940:	4805      	ldr	r0, [pc, #20]	@ (800e958 <fiprintf+0x20>)
 800e942:	f853 2b04 	ldr.w	r2, [r3], #4
 800e946:	6800      	ldr	r0, [r0, #0]
 800e948:	9301      	str	r3, [sp, #4]
 800e94a:	f000 f83f 	bl	800e9cc <_vfiprintf_r>
 800e94e:	b002      	add	sp, #8
 800e950:	f85d eb04 	ldr.w	lr, [sp], #4
 800e954:	b003      	add	sp, #12
 800e956:	4770      	bx	lr
 800e958:	20000424 	.word	0x20000424

0800e95c <abort>:
 800e95c:	b508      	push	{r3, lr}
 800e95e:	2006      	movs	r0, #6
 800e960:	f000 fa08 	bl	800ed74 <raise>
 800e964:	2001      	movs	r0, #1
 800e966:	f7f3 fd3b 	bl	80023e0 <_exit>

0800e96a <_malloc_usable_size_r>:
 800e96a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e96e:	1f18      	subs	r0, r3, #4
 800e970:	2b00      	cmp	r3, #0
 800e972:	bfbc      	itt	lt
 800e974:	580b      	ldrlt	r3, [r1, r0]
 800e976:	18c0      	addlt	r0, r0, r3
 800e978:	4770      	bx	lr

0800e97a <__sfputc_r>:
 800e97a:	6893      	ldr	r3, [r2, #8]
 800e97c:	3b01      	subs	r3, #1
 800e97e:	2b00      	cmp	r3, #0
 800e980:	b410      	push	{r4}
 800e982:	6093      	str	r3, [r2, #8]
 800e984:	da08      	bge.n	800e998 <__sfputc_r+0x1e>
 800e986:	6994      	ldr	r4, [r2, #24]
 800e988:	42a3      	cmp	r3, r4
 800e98a:	db01      	blt.n	800e990 <__sfputc_r+0x16>
 800e98c:	290a      	cmp	r1, #10
 800e98e:	d103      	bne.n	800e998 <__sfputc_r+0x1e>
 800e990:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e994:	f000 b932 	b.w	800ebfc <__swbuf_r>
 800e998:	6813      	ldr	r3, [r2, #0]
 800e99a:	1c58      	adds	r0, r3, #1
 800e99c:	6010      	str	r0, [r2, #0]
 800e99e:	7019      	strb	r1, [r3, #0]
 800e9a0:	4608      	mov	r0, r1
 800e9a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e9a6:	4770      	bx	lr

0800e9a8 <__sfputs_r>:
 800e9a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9aa:	4606      	mov	r6, r0
 800e9ac:	460f      	mov	r7, r1
 800e9ae:	4614      	mov	r4, r2
 800e9b0:	18d5      	adds	r5, r2, r3
 800e9b2:	42ac      	cmp	r4, r5
 800e9b4:	d101      	bne.n	800e9ba <__sfputs_r+0x12>
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	e007      	b.n	800e9ca <__sfputs_r+0x22>
 800e9ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9be:	463a      	mov	r2, r7
 800e9c0:	4630      	mov	r0, r6
 800e9c2:	f7ff ffda 	bl	800e97a <__sfputc_r>
 800e9c6:	1c43      	adds	r3, r0, #1
 800e9c8:	d1f3      	bne.n	800e9b2 <__sfputs_r+0xa>
 800e9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e9cc <_vfiprintf_r>:
 800e9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9d0:	460d      	mov	r5, r1
 800e9d2:	b09d      	sub	sp, #116	@ 0x74
 800e9d4:	4614      	mov	r4, r2
 800e9d6:	4698      	mov	r8, r3
 800e9d8:	4606      	mov	r6, r0
 800e9da:	b118      	cbz	r0, 800e9e4 <_vfiprintf_r+0x18>
 800e9dc:	6a03      	ldr	r3, [r0, #32]
 800e9de:	b90b      	cbnz	r3, 800e9e4 <_vfiprintf_r+0x18>
 800e9e0:	f7fe f88e 	bl	800cb00 <__sinit>
 800e9e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e9e6:	07d9      	lsls	r1, r3, #31
 800e9e8:	d405      	bmi.n	800e9f6 <_vfiprintf_r+0x2a>
 800e9ea:	89ab      	ldrh	r3, [r5, #12]
 800e9ec:	059a      	lsls	r2, r3, #22
 800e9ee:	d402      	bmi.n	800e9f6 <_vfiprintf_r+0x2a>
 800e9f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e9f2:	f7fe fa10 	bl	800ce16 <__retarget_lock_acquire_recursive>
 800e9f6:	89ab      	ldrh	r3, [r5, #12]
 800e9f8:	071b      	lsls	r3, r3, #28
 800e9fa:	d501      	bpl.n	800ea00 <_vfiprintf_r+0x34>
 800e9fc:	692b      	ldr	r3, [r5, #16]
 800e9fe:	b99b      	cbnz	r3, 800ea28 <_vfiprintf_r+0x5c>
 800ea00:	4629      	mov	r1, r5
 800ea02:	4630      	mov	r0, r6
 800ea04:	f000 f938 	bl	800ec78 <__swsetup_r>
 800ea08:	b170      	cbz	r0, 800ea28 <_vfiprintf_r+0x5c>
 800ea0a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ea0c:	07dc      	lsls	r4, r3, #31
 800ea0e:	d504      	bpl.n	800ea1a <_vfiprintf_r+0x4e>
 800ea10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ea14:	b01d      	add	sp, #116	@ 0x74
 800ea16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1a:	89ab      	ldrh	r3, [r5, #12]
 800ea1c:	0598      	lsls	r0, r3, #22
 800ea1e:	d4f7      	bmi.n	800ea10 <_vfiprintf_r+0x44>
 800ea20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ea22:	f7fe f9f9 	bl	800ce18 <__retarget_lock_release_recursive>
 800ea26:	e7f3      	b.n	800ea10 <_vfiprintf_r+0x44>
 800ea28:	2300      	movs	r3, #0
 800ea2a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea2c:	2320      	movs	r3, #32
 800ea2e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ea32:	f8cd 800c 	str.w	r8, [sp, #12]
 800ea36:	2330      	movs	r3, #48	@ 0x30
 800ea38:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800ebe8 <_vfiprintf_r+0x21c>
 800ea3c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ea40:	f04f 0901 	mov.w	r9, #1
 800ea44:	4623      	mov	r3, r4
 800ea46:	469a      	mov	sl, r3
 800ea48:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ea4c:	b10a      	cbz	r2, 800ea52 <_vfiprintf_r+0x86>
 800ea4e:	2a25      	cmp	r2, #37	@ 0x25
 800ea50:	d1f9      	bne.n	800ea46 <_vfiprintf_r+0x7a>
 800ea52:	ebba 0b04 	subs.w	fp, sl, r4
 800ea56:	d00b      	beq.n	800ea70 <_vfiprintf_r+0xa4>
 800ea58:	465b      	mov	r3, fp
 800ea5a:	4622      	mov	r2, r4
 800ea5c:	4629      	mov	r1, r5
 800ea5e:	4630      	mov	r0, r6
 800ea60:	f7ff ffa2 	bl	800e9a8 <__sfputs_r>
 800ea64:	3001      	adds	r0, #1
 800ea66:	f000 80a7 	beq.w	800ebb8 <_vfiprintf_r+0x1ec>
 800ea6a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ea6c:	445a      	add	r2, fp
 800ea6e:	9209      	str	r2, [sp, #36]	@ 0x24
 800ea70:	f89a 3000 	ldrb.w	r3, [sl]
 800ea74:	2b00      	cmp	r3, #0
 800ea76:	f000 809f 	beq.w	800ebb8 <_vfiprintf_r+0x1ec>
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ea80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ea84:	f10a 0a01 	add.w	sl, sl, #1
 800ea88:	9304      	str	r3, [sp, #16]
 800ea8a:	9307      	str	r3, [sp, #28]
 800ea8c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ea90:	931a      	str	r3, [sp, #104]	@ 0x68
 800ea92:	4654      	mov	r4, sl
 800ea94:	2205      	movs	r2, #5
 800ea96:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea9a:	4853      	ldr	r0, [pc, #332]	@ (800ebe8 <_vfiprintf_r+0x21c>)
 800ea9c:	f7f1 fb98 	bl	80001d0 <memchr>
 800eaa0:	9a04      	ldr	r2, [sp, #16]
 800eaa2:	b9d8      	cbnz	r0, 800eadc <_vfiprintf_r+0x110>
 800eaa4:	06d1      	lsls	r1, r2, #27
 800eaa6:	bf44      	itt	mi
 800eaa8:	2320      	movmi	r3, #32
 800eaaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eaae:	0713      	lsls	r3, r2, #28
 800eab0:	bf44      	itt	mi
 800eab2:	232b      	movmi	r3, #43	@ 0x2b
 800eab4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eab8:	f89a 3000 	ldrb.w	r3, [sl]
 800eabc:	2b2a      	cmp	r3, #42	@ 0x2a
 800eabe:	d015      	beq.n	800eaec <_vfiprintf_r+0x120>
 800eac0:	9a07      	ldr	r2, [sp, #28]
 800eac2:	4654      	mov	r4, sl
 800eac4:	2000      	movs	r0, #0
 800eac6:	f04f 0c0a 	mov.w	ip, #10
 800eaca:	4621      	mov	r1, r4
 800eacc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ead0:	3b30      	subs	r3, #48	@ 0x30
 800ead2:	2b09      	cmp	r3, #9
 800ead4:	d94b      	bls.n	800eb6e <_vfiprintf_r+0x1a2>
 800ead6:	b1b0      	cbz	r0, 800eb06 <_vfiprintf_r+0x13a>
 800ead8:	9207      	str	r2, [sp, #28]
 800eada:	e014      	b.n	800eb06 <_vfiprintf_r+0x13a>
 800eadc:	eba0 0308 	sub.w	r3, r0, r8
 800eae0:	fa09 f303 	lsl.w	r3, r9, r3
 800eae4:	4313      	orrs	r3, r2
 800eae6:	9304      	str	r3, [sp, #16]
 800eae8:	46a2      	mov	sl, r4
 800eaea:	e7d2      	b.n	800ea92 <_vfiprintf_r+0xc6>
 800eaec:	9b03      	ldr	r3, [sp, #12]
 800eaee:	1d19      	adds	r1, r3, #4
 800eaf0:	681b      	ldr	r3, [r3, #0]
 800eaf2:	9103      	str	r1, [sp, #12]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	bfbb      	ittet	lt
 800eaf8:	425b      	neglt	r3, r3
 800eafa:	f042 0202 	orrlt.w	r2, r2, #2
 800eafe:	9307      	strge	r3, [sp, #28]
 800eb00:	9307      	strlt	r3, [sp, #28]
 800eb02:	bfb8      	it	lt
 800eb04:	9204      	strlt	r2, [sp, #16]
 800eb06:	7823      	ldrb	r3, [r4, #0]
 800eb08:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb0a:	d10a      	bne.n	800eb22 <_vfiprintf_r+0x156>
 800eb0c:	7863      	ldrb	r3, [r4, #1]
 800eb0e:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb10:	d132      	bne.n	800eb78 <_vfiprintf_r+0x1ac>
 800eb12:	9b03      	ldr	r3, [sp, #12]
 800eb14:	1d1a      	adds	r2, r3, #4
 800eb16:	681b      	ldr	r3, [r3, #0]
 800eb18:	9203      	str	r2, [sp, #12]
 800eb1a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eb1e:	3402      	adds	r4, #2
 800eb20:	9305      	str	r3, [sp, #20]
 800eb22:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800ebf8 <_vfiprintf_r+0x22c>
 800eb26:	7821      	ldrb	r1, [r4, #0]
 800eb28:	2203      	movs	r2, #3
 800eb2a:	4650      	mov	r0, sl
 800eb2c:	f7f1 fb50 	bl	80001d0 <memchr>
 800eb30:	b138      	cbz	r0, 800eb42 <_vfiprintf_r+0x176>
 800eb32:	9b04      	ldr	r3, [sp, #16]
 800eb34:	eba0 000a 	sub.w	r0, r0, sl
 800eb38:	2240      	movs	r2, #64	@ 0x40
 800eb3a:	4082      	lsls	r2, r0
 800eb3c:	4313      	orrs	r3, r2
 800eb3e:	3401      	adds	r4, #1
 800eb40:	9304      	str	r3, [sp, #16]
 800eb42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb46:	4829      	ldr	r0, [pc, #164]	@ (800ebec <_vfiprintf_r+0x220>)
 800eb48:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800eb4c:	2206      	movs	r2, #6
 800eb4e:	f7f1 fb3f 	bl	80001d0 <memchr>
 800eb52:	2800      	cmp	r0, #0
 800eb54:	d03f      	beq.n	800ebd6 <_vfiprintf_r+0x20a>
 800eb56:	4b26      	ldr	r3, [pc, #152]	@ (800ebf0 <_vfiprintf_r+0x224>)
 800eb58:	bb1b      	cbnz	r3, 800eba2 <_vfiprintf_r+0x1d6>
 800eb5a:	9b03      	ldr	r3, [sp, #12]
 800eb5c:	3307      	adds	r3, #7
 800eb5e:	f023 0307 	bic.w	r3, r3, #7
 800eb62:	3308      	adds	r3, #8
 800eb64:	9303      	str	r3, [sp, #12]
 800eb66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800eb68:	443b      	add	r3, r7
 800eb6a:	9309      	str	r3, [sp, #36]	@ 0x24
 800eb6c:	e76a      	b.n	800ea44 <_vfiprintf_r+0x78>
 800eb6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800eb72:	460c      	mov	r4, r1
 800eb74:	2001      	movs	r0, #1
 800eb76:	e7a8      	b.n	800eaca <_vfiprintf_r+0xfe>
 800eb78:	2300      	movs	r3, #0
 800eb7a:	3401      	adds	r4, #1
 800eb7c:	9305      	str	r3, [sp, #20]
 800eb7e:	4619      	mov	r1, r3
 800eb80:	f04f 0c0a 	mov.w	ip, #10
 800eb84:	4620      	mov	r0, r4
 800eb86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eb8a:	3a30      	subs	r2, #48	@ 0x30
 800eb8c:	2a09      	cmp	r2, #9
 800eb8e:	d903      	bls.n	800eb98 <_vfiprintf_r+0x1cc>
 800eb90:	2b00      	cmp	r3, #0
 800eb92:	d0c6      	beq.n	800eb22 <_vfiprintf_r+0x156>
 800eb94:	9105      	str	r1, [sp, #20]
 800eb96:	e7c4      	b.n	800eb22 <_vfiprintf_r+0x156>
 800eb98:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb9c:	4604      	mov	r4, r0
 800eb9e:	2301      	movs	r3, #1
 800eba0:	e7f0      	b.n	800eb84 <_vfiprintf_r+0x1b8>
 800eba2:	ab03      	add	r3, sp, #12
 800eba4:	9300      	str	r3, [sp, #0]
 800eba6:	462a      	mov	r2, r5
 800eba8:	4b12      	ldr	r3, [pc, #72]	@ (800ebf4 <_vfiprintf_r+0x228>)
 800ebaa:	a904      	add	r1, sp, #16
 800ebac:	4630      	mov	r0, r6
 800ebae:	f7fd fb65 	bl	800c27c <_printf_float>
 800ebb2:	4607      	mov	r7, r0
 800ebb4:	1c78      	adds	r0, r7, #1
 800ebb6:	d1d6      	bne.n	800eb66 <_vfiprintf_r+0x19a>
 800ebb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ebba:	07d9      	lsls	r1, r3, #31
 800ebbc:	d405      	bmi.n	800ebca <_vfiprintf_r+0x1fe>
 800ebbe:	89ab      	ldrh	r3, [r5, #12]
 800ebc0:	059a      	lsls	r2, r3, #22
 800ebc2:	d402      	bmi.n	800ebca <_vfiprintf_r+0x1fe>
 800ebc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ebc6:	f7fe f927 	bl	800ce18 <__retarget_lock_release_recursive>
 800ebca:	89ab      	ldrh	r3, [r5, #12]
 800ebcc:	065b      	lsls	r3, r3, #25
 800ebce:	f53f af1f 	bmi.w	800ea10 <_vfiprintf_r+0x44>
 800ebd2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebd4:	e71e      	b.n	800ea14 <_vfiprintf_r+0x48>
 800ebd6:	ab03      	add	r3, sp, #12
 800ebd8:	9300      	str	r3, [sp, #0]
 800ebda:	462a      	mov	r2, r5
 800ebdc:	4b05      	ldr	r3, [pc, #20]	@ (800ebf4 <_vfiprintf_r+0x228>)
 800ebde:	a904      	add	r1, sp, #16
 800ebe0:	4630      	mov	r0, r6
 800ebe2:	f7fd fde3 	bl	800c7ac <_printf_i>
 800ebe6:	e7e4      	b.n	800ebb2 <_vfiprintf_r+0x1e6>
 800ebe8:	0802e236 	.word	0x0802e236
 800ebec:	0802e240 	.word	0x0802e240
 800ebf0:	0800c27d 	.word	0x0800c27d
 800ebf4:	0800e9a9 	.word	0x0800e9a9
 800ebf8:	0802e23c 	.word	0x0802e23c

0800ebfc <__swbuf_r>:
 800ebfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ebfe:	460e      	mov	r6, r1
 800ec00:	4614      	mov	r4, r2
 800ec02:	4605      	mov	r5, r0
 800ec04:	b118      	cbz	r0, 800ec0e <__swbuf_r+0x12>
 800ec06:	6a03      	ldr	r3, [r0, #32]
 800ec08:	b90b      	cbnz	r3, 800ec0e <__swbuf_r+0x12>
 800ec0a:	f7fd ff79 	bl	800cb00 <__sinit>
 800ec0e:	69a3      	ldr	r3, [r4, #24]
 800ec10:	60a3      	str	r3, [r4, #8]
 800ec12:	89a3      	ldrh	r3, [r4, #12]
 800ec14:	071a      	lsls	r2, r3, #28
 800ec16:	d501      	bpl.n	800ec1c <__swbuf_r+0x20>
 800ec18:	6923      	ldr	r3, [r4, #16]
 800ec1a:	b943      	cbnz	r3, 800ec2e <__swbuf_r+0x32>
 800ec1c:	4621      	mov	r1, r4
 800ec1e:	4628      	mov	r0, r5
 800ec20:	f000 f82a 	bl	800ec78 <__swsetup_r>
 800ec24:	b118      	cbz	r0, 800ec2e <__swbuf_r+0x32>
 800ec26:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ec2a:	4638      	mov	r0, r7
 800ec2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec2e:	6823      	ldr	r3, [r4, #0]
 800ec30:	6922      	ldr	r2, [r4, #16]
 800ec32:	1a98      	subs	r0, r3, r2
 800ec34:	6963      	ldr	r3, [r4, #20]
 800ec36:	b2f6      	uxtb	r6, r6
 800ec38:	4283      	cmp	r3, r0
 800ec3a:	4637      	mov	r7, r6
 800ec3c:	dc05      	bgt.n	800ec4a <__swbuf_r+0x4e>
 800ec3e:	4621      	mov	r1, r4
 800ec40:	4628      	mov	r0, r5
 800ec42:	f7ff fda7 	bl	800e794 <_fflush_r>
 800ec46:	2800      	cmp	r0, #0
 800ec48:	d1ed      	bne.n	800ec26 <__swbuf_r+0x2a>
 800ec4a:	68a3      	ldr	r3, [r4, #8]
 800ec4c:	3b01      	subs	r3, #1
 800ec4e:	60a3      	str	r3, [r4, #8]
 800ec50:	6823      	ldr	r3, [r4, #0]
 800ec52:	1c5a      	adds	r2, r3, #1
 800ec54:	6022      	str	r2, [r4, #0]
 800ec56:	701e      	strb	r6, [r3, #0]
 800ec58:	6962      	ldr	r2, [r4, #20]
 800ec5a:	1c43      	adds	r3, r0, #1
 800ec5c:	429a      	cmp	r2, r3
 800ec5e:	d004      	beq.n	800ec6a <__swbuf_r+0x6e>
 800ec60:	89a3      	ldrh	r3, [r4, #12]
 800ec62:	07db      	lsls	r3, r3, #31
 800ec64:	d5e1      	bpl.n	800ec2a <__swbuf_r+0x2e>
 800ec66:	2e0a      	cmp	r6, #10
 800ec68:	d1df      	bne.n	800ec2a <__swbuf_r+0x2e>
 800ec6a:	4621      	mov	r1, r4
 800ec6c:	4628      	mov	r0, r5
 800ec6e:	f7ff fd91 	bl	800e794 <_fflush_r>
 800ec72:	2800      	cmp	r0, #0
 800ec74:	d0d9      	beq.n	800ec2a <__swbuf_r+0x2e>
 800ec76:	e7d6      	b.n	800ec26 <__swbuf_r+0x2a>

0800ec78 <__swsetup_r>:
 800ec78:	b538      	push	{r3, r4, r5, lr}
 800ec7a:	4b29      	ldr	r3, [pc, #164]	@ (800ed20 <__swsetup_r+0xa8>)
 800ec7c:	4605      	mov	r5, r0
 800ec7e:	6818      	ldr	r0, [r3, #0]
 800ec80:	460c      	mov	r4, r1
 800ec82:	b118      	cbz	r0, 800ec8c <__swsetup_r+0x14>
 800ec84:	6a03      	ldr	r3, [r0, #32]
 800ec86:	b90b      	cbnz	r3, 800ec8c <__swsetup_r+0x14>
 800ec88:	f7fd ff3a 	bl	800cb00 <__sinit>
 800ec8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ec90:	0719      	lsls	r1, r3, #28
 800ec92:	d422      	bmi.n	800ecda <__swsetup_r+0x62>
 800ec94:	06da      	lsls	r2, r3, #27
 800ec96:	d407      	bmi.n	800eca8 <__swsetup_r+0x30>
 800ec98:	2209      	movs	r2, #9
 800ec9a:	602a      	str	r2, [r5, #0]
 800ec9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800eca0:	81a3      	strh	r3, [r4, #12]
 800eca2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eca6:	e033      	b.n	800ed10 <__swsetup_r+0x98>
 800eca8:	0758      	lsls	r0, r3, #29
 800ecaa:	d512      	bpl.n	800ecd2 <__swsetup_r+0x5a>
 800ecac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ecae:	b141      	cbz	r1, 800ecc2 <__swsetup_r+0x4a>
 800ecb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ecb4:	4299      	cmp	r1, r3
 800ecb6:	d002      	beq.n	800ecbe <__swsetup_r+0x46>
 800ecb8:	4628      	mov	r0, r5
 800ecba:	f7fe ff15 	bl	800dae8 <_free_r>
 800ecbe:	2300      	movs	r3, #0
 800ecc0:	6363      	str	r3, [r4, #52]	@ 0x34
 800ecc2:	89a3      	ldrh	r3, [r4, #12]
 800ecc4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ecc8:	81a3      	strh	r3, [r4, #12]
 800ecca:	2300      	movs	r3, #0
 800eccc:	6063      	str	r3, [r4, #4]
 800ecce:	6923      	ldr	r3, [r4, #16]
 800ecd0:	6023      	str	r3, [r4, #0]
 800ecd2:	89a3      	ldrh	r3, [r4, #12]
 800ecd4:	f043 0308 	orr.w	r3, r3, #8
 800ecd8:	81a3      	strh	r3, [r4, #12]
 800ecda:	6923      	ldr	r3, [r4, #16]
 800ecdc:	b94b      	cbnz	r3, 800ecf2 <__swsetup_r+0x7a>
 800ecde:	89a3      	ldrh	r3, [r4, #12]
 800ece0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ece4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ece8:	d003      	beq.n	800ecf2 <__swsetup_r+0x7a>
 800ecea:	4621      	mov	r1, r4
 800ecec:	4628      	mov	r0, r5
 800ecee:	f000 f883 	bl	800edf8 <__smakebuf_r>
 800ecf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ecf6:	f013 0201 	ands.w	r2, r3, #1
 800ecfa:	d00a      	beq.n	800ed12 <__swsetup_r+0x9a>
 800ecfc:	2200      	movs	r2, #0
 800ecfe:	60a2      	str	r2, [r4, #8]
 800ed00:	6962      	ldr	r2, [r4, #20]
 800ed02:	4252      	negs	r2, r2
 800ed04:	61a2      	str	r2, [r4, #24]
 800ed06:	6922      	ldr	r2, [r4, #16]
 800ed08:	b942      	cbnz	r2, 800ed1c <__swsetup_r+0xa4>
 800ed0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ed0e:	d1c5      	bne.n	800ec9c <__swsetup_r+0x24>
 800ed10:	bd38      	pop	{r3, r4, r5, pc}
 800ed12:	0799      	lsls	r1, r3, #30
 800ed14:	bf58      	it	pl
 800ed16:	6962      	ldrpl	r2, [r4, #20]
 800ed18:	60a2      	str	r2, [r4, #8]
 800ed1a:	e7f4      	b.n	800ed06 <__swsetup_r+0x8e>
 800ed1c:	2000      	movs	r0, #0
 800ed1e:	e7f7      	b.n	800ed10 <__swsetup_r+0x98>
 800ed20:	20000424 	.word	0x20000424

0800ed24 <_raise_r>:
 800ed24:	291f      	cmp	r1, #31
 800ed26:	b538      	push	{r3, r4, r5, lr}
 800ed28:	4605      	mov	r5, r0
 800ed2a:	460c      	mov	r4, r1
 800ed2c:	d904      	bls.n	800ed38 <_raise_r+0x14>
 800ed2e:	2316      	movs	r3, #22
 800ed30:	6003      	str	r3, [r0, #0]
 800ed32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ed36:	bd38      	pop	{r3, r4, r5, pc}
 800ed38:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ed3a:	b112      	cbz	r2, 800ed42 <_raise_r+0x1e>
 800ed3c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ed40:	b94b      	cbnz	r3, 800ed56 <_raise_r+0x32>
 800ed42:	4628      	mov	r0, r5
 800ed44:	f000 f830 	bl	800eda8 <_getpid_r>
 800ed48:	4622      	mov	r2, r4
 800ed4a:	4601      	mov	r1, r0
 800ed4c:	4628      	mov	r0, r5
 800ed4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ed52:	f000 b817 	b.w	800ed84 <_kill_r>
 800ed56:	2b01      	cmp	r3, #1
 800ed58:	d00a      	beq.n	800ed70 <_raise_r+0x4c>
 800ed5a:	1c59      	adds	r1, r3, #1
 800ed5c:	d103      	bne.n	800ed66 <_raise_r+0x42>
 800ed5e:	2316      	movs	r3, #22
 800ed60:	6003      	str	r3, [r0, #0]
 800ed62:	2001      	movs	r0, #1
 800ed64:	e7e7      	b.n	800ed36 <_raise_r+0x12>
 800ed66:	2100      	movs	r1, #0
 800ed68:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ed6c:	4620      	mov	r0, r4
 800ed6e:	4798      	blx	r3
 800ed70:	2000      	movs	r0, #0
 800ed72:	e7e0      	b.n	800ed36 <_raise_r+0x12>

0800ed74 <raise>:
 800ed74:	4b02      	ldr	r3, [pc, #8]	@ (800ed80 <raise+0xc>)
 800ed76:	4601      	mov	r1, r0
 800ed78:	6818      	ldr	r0, [r3, #0]
 800ed7a:	f7ff bfd3 	b.w	800ed24 <_raise_r>
 800ed7e:	bf00      	nop
 800ed80:	20000424 	.word	0x20000424

0800ed84 <_kill_r>:
 800ed84:	b538      	push	{r3, r4, r5, lr}
 800ed86:	4d07      	ldr	r5, [pc, #28]	@ (800eda4 <_kill_r+0x20>)
 800ed88:	2300      	movs	r3, #0
 800ed8a:	4604      	mov	r4, r0
 800ed8c:	4608      	mov	r0, r1
 800ed8e:	4611      	mov	r1, r2
 800ed90:	602b      	str	r3, [r5, #0]
 800ed92:	f7f3 fb15 	bl	80023c0 <_kill>
 800ed96:	1c43      	adds	r3, r0, #1
 800ed98:	d102      	bne.n	800eda0 <_kill_r+0x1c>
 800ed9a:	682b      	ldr	r3, [r5, #0]
 800ed9c:	b103      	cbz	r3, 800eda0 <_kill_r+0x1c>
 800ed9e:	6023      	str	r3, [r4, #0]
 800eda0:	bd38      	pop	{r3, r4, r5, pc}
 800eda2:	bf00      	nop
 800eda4:	2000ac30 	.word	0x2000ac30

0800eda8 <_getpid_r>:
 800eda8:	f7f3 bb02 	b.w	80023b0 <_getpid>

0800edac <__swhatbuf_r>:
 800edac:	b570      	push	{r4, r5, r6, lr}
 800edae:	460c      	mov	r4, r1
 800edb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800edb4:	2900      	cmp	r1, #0
 800edb6:	b096      	sub	sp, #88	@ 0x58
 800edb8:	4615      	mov	r5, r2
 800edba:	461e      	mov	r6, r3
 800edbc:	da0d      	bge.n	800edda <__swhatbuf_r+0x2e>
 800edbe:	89a3      	ldrh	r3, [r4, #12]
 800edc0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800edc4:	f04f 0100 	mov.w	r1, #0
 800edc8:	bf14      	ite	ne
 800edca:	2340      	movne	r3, #64	@ 0x40
 800edcc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800edd0:	2000      	movs	r0, #0
 800edd2:	6031      	str	r1, [r6, #0]
 800edd4:	602b      	str	r3, [r5, #0]
 800edd6:	b016      	add	sp, #88	@ 0x58
 800edd8:	bd70      	pop	{r4, r5, r6, pc}
 800edda:	466a      	mov	r2, sp
 800eddc:	f000 f848 	bl	800ee70 <_fstat_r>
 800ede0:	2800      	cmp	r0, #0
 800ede2:	dbec      	blt.n	800edbe <__swhatbuf_r+0x12>
 800ede4:	9901      	ldr	r1, [sp, #4]
 800ede6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800edea:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800edee:	4259      	negs	r1, r3
 800edf0:	4159      	adcs	r1, r3
 800edf2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800edf6:	e7eb      	b.n	800edd0 <__swhatbuf_r+0x24>

0800edf8 <__smakebuf_r>:
 800edf8:	898b      	ldrh	r3, [r1, #12]
 800edfa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800edfc:	079d      	lsls	r5, r3, #30
 800edfe:	4606      	mov	r6, r0
 800ee00:	460c      	mov	r4, r1
 800ee02:	d507      	bpl.n	800ee14 <__smakebuf_r+0x1c>
 800ee04:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ee08:	6023      	str	r3, [r4, #0]
 800ee0a:	6123      	str	r3, [r4, #16]
 800ee0c:	2301      	movs	r3, #1
 800ee0e:	6163      	str	r3, [r4, #20]
 800ee10:	b003      	add	sp, #12
 800ee12:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ee14:	ab01      	add	r3, sp, #4
 800ee16:	466a      	mov	r2, sp
 800ee18:	f7ff ffc8 	bl	800edac <__swhatbuf_r>
 800ee1c:	9f00      	ldr	r7, [sp, #0]
 800ee1e:	4605      	mov	r5, r0
 800ee20:	4639      	mov	r1, r7
 800ee22:	4630      	mov	r0, r6
 800ee24:	f7fe fed4 	bl	800dbd0 <_malloc_r>
 800ee28:	b948      	cbnz	r0, 800ee3e <__smakebuf_r+0x46>
 800ee2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ee2e:	059a      	lsls	r2, r3, #22
 800ee30:	d4ee      	bmi.n	800ee10 <__smakebuf_r+0x18>
 800ee32:	f023 0303 	bic.w	r3, r3, #3
 800ee36:	f043 0302 	orr.w	r3, r3, #2
 800ee3a:	81a3      	strh	r3, [r4, #12]
 800ee3c:	e7e2      	b.n	800ee04 <__smakebuf_r+0xc>
 800ee3e:	89a3      	ldrh	r3, [r4, #12]
 800ee40:	6020      	str	r0, [r4, #0]
 800ee42:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ee46:	81a3      	strh	r3, [r4, #12]
 800ee48:	9b01      	ldr	r3, [sp, #4]
 800ee4a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ee4e:	b15b      	cbz	r3, 800ee68 <__smakebuf_r+0x70>
 800ee50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ee54:	4630      	mov	r0, r6
 800ee56:	f000 f81d 	bl	800ee94 <_isatty_r>
 800ee5a:	b128      	cbz	r0, 800ee68 <__smakebuf_r+0x70>
 800ee5c:	89a3      	ldrh	r3, [r4, #12]
 800ee5e:	f023 0303 	bic.w	r3, r3, #3
 800ee62:	f043 0301 	orr.w	r3, r3, #1
 800ee66:	81a3      	strh	r3, [r4, #12]
 800ee68:	89a3      	ldrh	r3, [r4, #12]
 800ee6a:	431d      	orrs	r5, r3
 800ee6c:	81a5      	strh	r5, [r4, #12]
 800ee6e:	e7cf      	b.n	800ee10 <__smakebuf_r+0x18>

0800ee70 <_fstat_r>:
 800ee70:	b538      	push	{r3, r4, r5, lr}
 800ee72:	4d07      	ldr	r5, [pc, #28]	@ (800ee90 <_fstat_r+0x20>)
 800ee74:	2300      	movs	r3, #0
 800ee76:	4604      	mov	r4, r0
 800ee78:	4608      	mov	r0, r1
 800ee7a:	4611      	mov	r1, r2
 800ee7c:	602b      	str	r3, [r5, #0]
 800ee7e:	f7f3 faff 	bl	8002480 <_fstat>
 800ee82:	1c43      	adds	r3, r0, #1
 800ee84:	d102      	bne.n	800ee8c <_fstat_r+0x1c>
 800ee86:	682b      	ldr	r3, [r5, #0]
 800ee88:	b103      	cbz	r3, 800ee8c <_fstat_r+0x1c>
 800ee8a:	6023      	str	r3, [r4, #0]
 800ee8c:	bd38      	pop	{r3, r4, r5, pc}
 800ee8e:	bf00      	nop
 800ee90:	2000ac30 	.word	0x2000ac30

0800ee94 <_isatty_r>:
 800ee94:	b538      	push	{r3, r4, r5, lr}
 800ee96:	4d06      	ldr	r5, [pc, #24]	@ (800eeb0 <_isatty_r+0x1c>)
 800ee98:	2300      	movs	r3, #0
 800ee9a:	4604      	mov	r4, r0
 800ee9c:	4608      	mov	r0, r1
 800ee9e:	602b      	str	r3, [r5, #0]
 800eea0:	f7f3 fafe 	bl	80024a0 <_isatty>
 800eea4:	1c43      	adds	r3, r0, #1
 800eea6:	d102      	bne.n	800eeae <_isatty_r+0x1a>
 800eea8:	682b      	ldr	r3, [r5, #0]
 800eeaa:	b103      	cbz	r3, 800eeae <_isatty_r+0x1a>
 800eeac:	6023      	str	r3, [r4, #0]
 800eeae:	bd38      	pop	{r3, r4, r5, pc}
 800eeb0:	2000ac30 	.word	0x2000ac30

0800eeb4 <log10f>:
 800eeb4:	b508      	push	{r3, lr}
 800eeb6:	ed2d 8b02 	vpush	{d8}
 800eeba:	eeb0 8a40 	vmov.f32	s16, s0
 800eebe:	f000 f9b9 	bl	800f234 <__ieee754_log10f>
 800eec2:	eeb4 8a48 	vcmp.f32	s16, s16
 800eec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eeca:	d60f      	bvs.n	800eeec <log10f+0x38>
 800eecc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800eed0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eed4:	d80a      	bhi.n	800eeec <log10f+0x38>
 800eed6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800eeda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eede:	d108      	bne.n	800eef2 <log10f+0x3e>
 800eee0:	f7fd ff6e 	bl	800cdc0 <__errno>
 800eee4:	2322      	movs	r3, #34	@ 0x22
 800eee6:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800ef08 <log10f+0x54>
 800eeea:	6003      	str	r3, [r0, #0]
 800eeec:	ecbd 8b02 	vpop	{d8}
 800eef0:	bd08      	pop	{r3, pc}
 800eef2:	f7fd ff65 	bl	800cdc0 <__errno>
 800eef6:	ecbd 8b02 	vpop	{d8}
 800eefa:	2321      	movs	r3, #33	@ 0x21
 800eefc:	6003      	str	r3, [r0, #0]
 800eefe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ef02:	4802      	ldr	r0, [pc, #8]	@ (800ef0c <log10f+0x58>)
 800ef04:	f000 b8c8 	b.w	800f098 <nanf>
 800ef08:	ff800000 	.word	0xff800000
 800ef0c:	0802e28c 	.word	0x0802e28c

0800ef10 <powf>:
 800ef10:	b508      	push	{r3, lr}
 800ef12:	ed2d 8b04 	vpush	{d8-d9}
 800ef16:	eeb0 8a60 	vmov.f32	s16, s1
 800ef1a:	eeb0 9a40 	vmov.f32	s18, s0
 800ef1e:	f000 f9e1 	bl	800f2e4 <__ieee754_powf>
 800ef22:	eeb4 8a48 	vcmp.f32	s16, s16
 800ef26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef2a:	eef0 8a40 	vmov.f32	s17, s0
 800ef2e:	d63e      	bvs.n	800efae <powf+0x9e>
 800ef30:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800ef34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef38:	d112      	bne.n	800ef60 <powf+0x50>
 800ef3a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800ef3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef42:	d039      	beq.n	800efb8 <powf+0xa8>
 800ef44:	eeb0 0a48 	vmov.f32	s0, s16
 800ef48:	f000 f89c 	bl	800f084 <finitef>
 800ef4c:	b378      	cbz	r0, 800efae <powf+0x9e>
 800ef4e:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800ef52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef56:	d52a      	bpl.n	800efae <powf+0x9e>
 800ef58:	f7fd ff32 	bl	800cdc0 <__errno>
 800ef5c:	2322      	movs	r3, #34	@ 0x22
 800ef5e:	e014      	b.n	800ef8a <powf+0x7a>
 800ef60:	f000 f890 	bl	800f084 <finitef>
 800ef64:	b998      	cbnz	r0, 800ef8e <powf+0x7e>
 800ef66:	eeb0 0a49 	vmov.f32	s0, s18
 800ef6a:	f000 f88b 	bl	800f084 <finitef>
 800ef6e:	b170      	cbz	r0, 800ef8e <powf+0x7e>
 800ef70:	eeb0 0a48 	vmov.f32	s0, s16
 800ef74:	f000 f886 	bl	800f084 <finitef>
 800ef78:	b148      	cbz	r0, 800ef8e <powf+0x7e>
 800ef7a:	eef4 8a68 	vcmp.f32	s17, s17
 800ef7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef82:	d7e9      	bvc.n	800ef58 <powf+0x48>
 800ef84:	f7fd ff1c 	bl	800cdc0 <__errno>
 800ef88:	2321      	movs	r3, #33	@ 0x21
 800ef8a:	6003      	str	r3, [r0, #0]
 800ef8c:	e00f      	b.n	800efae <powf+0x9e>
 800ef8e:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ef92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef96:	d10a      	bne.n	800efae <powf+0x9e>
 800ef98:	eeb0 0a49 	vmov.f32	s0, s18
 800ef9c:	f000 f872 	bl	800f084 <finitef>
 800efa0:	b128      	cbz	r0, 800efae <powf+0x9e>
 800efa2:	eeb0 0a48 	vmov.f32	s0, s16
 800efa6:	f000 f86d 	bl	800f084 <finitef>
 800efaa:	2800      	cmp	r0, #0
 800efac:	d1d4      	bne.n	800ef58 <powf+0x48>
 800efae:	eeb0 0a68 	vmov.f32	s0, s17
 800efb2:	ecbd 8b04 	vpop	{d8-d9}
 800efb6:	bd08      	pop	{r3, pc}
 800efb8:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800efbc:	e7f7      	b.n	800efae <powf+0x9e>
	...

0800efc0 <sqrtf>:
 800efc0:	b508      	push	{r3, lr}
 800efc2:	ed2d 8b02 	vpush	{d8}
 800efc6:	eeb0 8a40 	vmov.f32	s16, s0
 800efca:	f000 f86b 	bl	800f0a4 <__ieee754_sqrtf>
 800efce:	eeb4 8a48 	vcmp.f32	s16, s16
 800efd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efd6:	d60c      	bvs.n	800eff2 <sqrtf+0x32>
 800efd8:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800eff8 <sqrtf+0x38>
 800efdc:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800efe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800efe4:	d505      	bpl.n	800eff2 <sqrtf+0x32>
 800efe6:	f7fd feeb 	bl	800cdc0 <__errno>
 800efea:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800efee:	2321      	movs	r3, #33	@ 0x21
 800eff0:	6003      	str	r3, [r0, #0]
 800eff2:	ecbd 8b02 	vpop	{d8}
 800eff6:	bd08      	pop	{r3, pc}
 800eff8:	00000000 	.word	0x00000000

0800effc <cosf>:
 800effc:	ee10 3a10 	vmov	r3, s0
 800f000:	b507      	push	{r0, r1, r2, lr}
 800f002:	4a1e      	ldr	r2, [pc, #120]	@ (800f07c <cosf+0x80>)
 800f004:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f008:	4293      	cmp	r3, r2
 800f00a:	d806      	bhi.n	800f01a <cosf+0x1e>
 800f00c:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f080 <cosf+0x84>
 800f010:	b003      	add	sp, #12
 800f012:	f85d eb04 	ldr.w	lr, [sp], #4
 800f016:	f000 b86d 	b.w	800f0f4 <__kernel_cosf>
 800f01a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f01e:	d304      	bcc.n	800f02a <cosf+0x2e>
 800f020:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f024:	b003      	add	sp, #12
 800f026:	f85d fb04 	ldr.w	pc, [sp], #4
 800f02a:	4668      	mov	r0, sp
 800f02c:	f000 fc28 	bl	800f880 <__ieee754_rem_pio2f>
 800f030:	f000 0003 	and.w	r0, r0, #3
 800f034:	2801      	cmp	r0, #1
 800f036:	d009      	beq.n	800f04c <cosf+0x50>
 800f038:	2802      	cmp	r0, #2
 800f03a:	d010      	beq.n	800f05e <cosf+0x62>
 800f03c:	b9b0      	cbnz	r0, 800f06c <cosf+0x70>
 800f03e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f042:	ed9d 0a00 	vldr	s0, [sp]
 800f046:	f000 f855 	bl	800f0f4 <__kernel_cosf>
 800f04a:	e7eb      	b.n	800f024 <cosf+0x28>
 800f04c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f050:	ed9d 0a00 	vldr	s0, [sp]
 800f054:	f000 f8a6 	bl	800f1a4 <__kernel_sinf>
 800f058:	eeb1 0a40 	vneg.f32	s0, s0
 800f05c:	e7e2      	b.n	800f024 <cosf+0x28>
 800f05e:	eddd 0a01 	vldr	s1, [sp, #4]
 800f062:	ed9d 0a00 	vldr	s0, [sp]
 800f066:	f000 f845 	bl	800f0f4 <__kernel_cosf>
 800f06a:	e7f5      	b.n	800f058 <cosf+0x5c>
 800f06c:	eddd 0a01 	vldr	s1, [sp, #4]
 800f070:	ed9d 0a00 	vldr	s0, [sp]
 800f074:	2001      	movs	r0, #1
 800f076:	f000 f895 	bl	800f1a4 <__kernel_sinf>
 800f07a:	e7d3      	b.n	800f024 <cosf+0x28>
 800f07c:	3f490fd8 	.word	0x3f490fd8
 800f080:	00000000 	.word	0x00000000

0800f084 <finitef>:
 800f084:	ee10 3a10 	vmov	r3, s0
 800f088:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f08c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f090:	bfac      	ite	ge
 800f092:	2000      	movge	r0, #0
 800f094:	2001      	movlt	r0, #1
 800f096:	4770      	bx	lr

0800f098 <nanf>:
 800f098:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800f0a0 <nanf+0x8>
 800f09c:	4770      	bx	lr
 800f09e:	bf00      	nop
 800f0a0:	7fc00000 	.word	0x7fc00000

0800f0a4 <__ieee754_sqrtf>:
 800f0a4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f0a8:	4770      	bx	lr
	...

0800f0ac <roundf>:
 800f0ac:	ee10 0a10 	vmov	r0, s0
 800f0b0:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800f0b4:	3a7f      	subs	r2, #127	@ 0x7f
 800f0b6:	2a16      	cmp	r2, #22
 800f0b8:	dc15      	bgt.n	800f0e6 <roundf+0x3a>
 800f0ba:	2a00      	cmp	r2, #0
 800f0bc:	da08      	bge.n	800f0d0 <roundf+0x24>
 800f0be:	3201      	adds	r2, #1
 800f0c0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 800f0c4:	d101      	bne.n	800f0ca <roundf+0x1e>
 800f0c6:	f043 537e 	orr.w	r3, r3, #1065353216	@ 0x3f800000
 800f0ca:	ee00 3a10 	vmov	s0, r3
 800f0ce:	4770      	bx	lr
 800f0d0:	4907      	ldr	r1, [pc, #28]	@ (800f0f0 <roundf+0x44>)
 800f0d2:	4111      	asrs	r1, r2
 800f0d4:	4201      	tst	r1, r0
 800f0d6:	d0fa      	beq.n	800f0ce <roundf+0x22>
 800f0d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800f0dc:	4113      	asrs	r3, r2
 800f0de:	4403      	add	r3, r0
 800f0e0:	ea23 0301 	bic.w	r3, r3, r1
 800f0e4:	e7f1      	b.n	800f0ca <roundf+0x1e>
 800f0e6:	2a80      	cmp	r2, #128	@ 0x80
 800f0e8:	d1f1      	bne.n	800f0ce <roundf+0x22>
 800f0ea:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f0ee:	4770      	bx	lr
 800f0f0:	007fffff 	.word	0x007fffff

0800f0f4 <__kernel_cosf>:
 800f0f4:	ee10 3a10 	vmov	r3, s0
 800f0f8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f0fc:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f100:	eef0 6a40 	vmov.f32	s13, s0
 800f104:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f108:	d204      	bcs.n	800f114 <__kernel_cosf+0x20>
 800f10a:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f10e:	ee17 2a90 	vmov	r2, s15
 800f112:	b342      	cbz	r2, 800f166 <__kernel_cosf+0x72>
 800f114:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f118:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f184 <__kernel_cosf+0x90>
 800f11c:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f188 <__kernel_cosf+0x94>
 800f120:	4a1a      	ldr	r2, [pc, #104]	@ (800f18c <__kernel_cosf+0x98>)
 800f122:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f126:	4293      	cmp	r3, r2
 800f128:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f190 <__kernel_cosf+0x9c>
 800f12c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f130:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f194 <__kernel_cosf+0xa0>
 800f134:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f138:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f198 <__kernel_cosf+0xa4>
 800f13c:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f140:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f19c <__kernel_cosf+0xa8>
 800f144:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f148:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f14c:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f150:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f154:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f15c:	d804      	bhi.n	800f168 <__kernel_cosf+0x74>
 800f15e:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f162:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f166:	4770      	bx	lr
 800f168:	4a0d      	ldr	r2, [pc, #52]	@ (800f1a0 <__kernel_cosf+0xac>)
 800f16a:	4293      	cmp	r3, r2
 800f16c:	bf9a      	itte	ls
 800f16e:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f172:	ee07 3a10 	vmovls	s14, r3
 800f176:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f17a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f17e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f182:	e7ec      	b.n	800f15e <__kernel_cosf+0x6a>
 800f184:	ad47d74e 	.word	0xad47d74e
 800f188:	310f74f6 	.word	0x310f74f6
 800f18c:	3e999999 	.word	0x3e999999
 800f190:	b493f27c 	.word	0xb493f27c
 800f194:	37d00d01 	.word	0x37d00d01
 800f198:	bab60b61 	.word	0xbab60b61
 800f19c:	3d2aaaab 	.word	0x3d2aaaab
 800f1a0:	3f480000 	.word	0x3f480000

0800f1a4 <__kernel_sinf>:
 800f1a4:	ee10 3a10 	vmov	r3, s0
 800f1a8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f1ac:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f1b0:	d204      	bcs.n	800f1bc <__kernel_sinf+0x18>
 800f1b2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f1b6:	ee17 3a90 	vmov	r3, s15
 800f1ba:	b35b      	cbz	r3, 800f214 <__kernel_sinf+0x70>
 800f1bc:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f1c0:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f218 <__kernel_sinf+0x74>
 800f1c4:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f21c <__kernel_sinf+0x78>
 800f1c8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f1cc:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f220 <__kernel_sinf+0x7c>
 800f1d0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f1d4:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f224 <__kernel_sinf+0x80>
 800f1d8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f1dc:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f228 <__kernel_sinf+0x84>
 800f1e0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f1e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f1e8:	b930      	cbnz	r0, 800f1f8 <__kernel_sinf+0x54>
 800f1ea:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f22c <__kernel_sinf+0x88>
 800f1ee:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f1f2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f1f6:	4770      	bx	lr
 800f1f8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f1fc:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f200:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f204:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f208:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f230 <__kernel_sinf+0x8c>
 800f20c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f210:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f214:	4770      	bx	lr
 800f216:	bf00      	nop
 800f218:	2f2ec9d3 	.word	0x2f2ec9d3
 800f21c:	b2d72f34 	.word	0xb2d72f34
 800f220:	3638ef1b 	.word	0x3638ef1b
 800f224:	b9500d01 	.word	0xb9500d01
 800f228:	3c088889 	.word	0x3c088889
 800f22c:	be2aaaab 	.word	0xbe2aaaab
 800f230:	3e2aaaab 	.word	0x3e2aaaab

0800f234 <__ieee754_log10f>:
 800f234:	b508      	push	{r3, lr}
 800f236:	ee10 3a10 	vmov	r3, s0
 800f23a:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800f23e:	ed2d 8b02 	vpush	{d8}
 800f242:	d108      	bne.n	800f256 <__ieee754_log10f+0x22>
 800f244:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 800f2cc <__ieee754_log10f+0x98>
 800f248:	eddf 7a21 	vldr	s15, [pc, #132]	@ 800f2d0 <__ieee754_log10f+0x9c>
 800f24c:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800f250:	ecbd 8b02 	vpop	{d8}
 800f254:	bd08      	pop	{r3, pc}
 800f256:	2b00      	cmp	r3, #0
 800f258:	461a      	mov	r2, r3
 800f25a:	da02      	bge.n	800f262 <__ieee754_log10f+0x2e>
 800f25c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800f260:	e7f2      	b.n	800f248 <__ieee754_log10f+0x14>
 800f262:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f266:	db02      	blt.n	800f26e <__ieee754_log10f+0x3a>
 800f268:	ee30 0a00 	vadd.f32	s0, s0, s0
 800f26c:	e7f0      	b.n	800f250 <__ieee754_log10f+0x1c>
 800f26e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f272:	bfbf      	itttt	lt
 800f274:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 800f2d4 <__ieee754_log10f+0xa0>
 800f278:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800f27c:	f06f 0118 	mvnlt.w	r1, #24
 800f280:	ee17 2a90 	vmovlt	r2, s15
 800f284:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800f288:	bfa8      	it	ge
 800f28a:	2100      	movge	r1, #0
 800f28c:	3b7f      	subs	r3, #127	@ 0x7f
 800f28e:	440b      	add	r3, r1
 800f290:	0fd9      	lsrs	r1, r3, #31
 800f292:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800f296:	ee07 3a90 	vmov	s15, r3
 800f29a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800f29e:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 800f2a2:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800f2a6:	ee00 3a10 	vmov	s0, r3
 800f2aa:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800f2ae:	f000 ff13 	bl	80100d8 <__ieee754_logf>
 800f2b2:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f2d8 <__ieee754_log10f+0xa4>
 800f2b6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f2ba:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f2dc <__ieee754_log10f+0xa8>
 800f2be:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f2c2:	eddf 7a07 	vldr	s15, [pc, #28]	@ 800f2e0 <__ieee754_log10f+0xac>
 800f2c6:	eea8 0a27 	vfma.f32	s0, s16, s15
 800f2ca:	e7c1      	b.n	800f250 <__ieee754_log10f+0x1c>
 800f2cc:	cc000000 	.word	0xcc000000
 800f2d0:	00000000 	.word	0x00000000
 800f2d4:	4c000000 	.word	0x4c000000
 800f2d8:	3ede5bd9 	.word	0x3ede5bd9
 800f2dc:	355427db 	.word	0x355427db
 800f2e0:	3e9a2080 	.word	0x3e9a2080

0800f2e4 <__ieee754_powf>:
 800f2e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2e8:	ee10 4a90 	vmov	r4, s1
 800f2ec:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f2f0:	ed2d 8b02 	vpush	{d8}
 800f2f4:	ee10 6a10 	vmov	r6, s0
 800f2f8:	eeb0 8a40 	vmov.f32	s16, s0
 800f2fc:	eef0 8a60 	vmov.f32	s17, s1
 800f300:	d10c      	bne.n	800f31c <__ieee754_powf+0x38>
 800f302:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f306:	0076      	lsls	r6, r6, #1
 800f308:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f30c:	f240 8274 	bls.w	800f7f8 <__ieee754_powf+0x514>
 800f310:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f314:	ecbd 8b02 	vpop	{d8}
 800f318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f31c:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f320:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f324:	d802      	bhi.n	800f32c <__ieee754_powf+0x48>
 800f326:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f32a:	d908      	bls.n	800f33e <__ieee754_powf+0x5a>
 800f32c:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f330:	d1ee      	bne.n	800f310 <__ieee754_powf+0x2c>
 800f332:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f336:	0064      	lsls	r4, r4, #1
 800f338:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f33c:	e7e6      	b.n	800f30c <__ieee754_powf+0x28>
 800f33e:	2e00      	cmp	r6, #0
 800f340:	da1f      	bge.n	800f382 <__ieee754_powf+0x9e>
 800f342:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f346:	f080 8260 	bcs.w	800f80a <__ieee754_powf+0x526>
 800f34a:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f34e:	d32f      	bcc.n	800f3b0 <__ieee754_powf+0xcc>
 800f350:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f354:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f358:	fa49 f503 	asr.w	r5, r9, r3
 800f35c:	fa05 f303 	lsl.w	r3, r5, r3
 800f360:	454b      	cmp	r3, r9
 800f362:	d123      	bne.n	800f3ac <__ieee754_powf+0xc8>
 800f364:	f005 0501 	and.w	r5, r5, #1
 800f368:	f1c5 0502 	rsb	r5, r5, #2
 800f36c:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f370:	d11f      	bne.n	800f3b2 <__ieee754_powf+0xce>
 800f372:	2c00      	cmp	r4, #0
 800f374:	f280 8246 	bge.w	800f804 <__ieee754_powf+0x520>
 800f378:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f37c:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f380:	e7c8      	b.n	800f314 <__ieee754_powf+0x30>
 800f382:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f386:	d111      	bne.n	800f3ac <__ieee754_powf+0xc8>
 800f388:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f38c:	f000 8234 	beq.w	800f7f8 <__ieee754_powf+0x514>
 800f390:	d906      	bls.n	800f3a0 <__ieee754_powf+0xbc>
 800f392:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800f6a8 <__ieee754_powf+0x3c4>
 800f396:	2c00      	cmp	r4, #0
 800f398:	bfa8      	it	ge
 800f39a:	eeb0 0a68 	vmovge.f32	s0, s17
 800f39e:	e7b9      	b.n	800f314 <__ieee754_powf+0x30>
 800f3a0:	2c00      	cmp	r4, #0
 800f3a2:	f280 822c 	bge.w	800f7fe <__ieee754_powf+0x51a>
 800f3a6:	eeb1 0a68 	vneg.f32	s0, s17
 800f3aa:	e7b3      	b.n	800f314 <__ieee754_powf+0x30>
 800f3ac:	2500      	movs	r5, #0
 800f3ae:	e7dd      	b.n	800f36c <__ieee754_powf+0x88>
 800f3b0:	2500      	movs	r5, #0
 800f3b2:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f3b6:	d102      	bne.n	800f3be <__ieee754_powf+0xda>
 800f3b8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f3bc:	e7aa      	b.n	800f314 <__ieee754_powf+0x30>
 800f3be:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f3c2:	f040 8227 	bne.w	800f814 <__ieee754_powf+0x530>
 800f3c6:	2e00      	cmp	r6, #0
 800f3c8:	f2c0 8224 	blt.w	800f814 <__ieee754_powf+0x530>
 800f3cc:	eeb0 0a48 	vmov.f32	s0, s16
 800f3d0:	ecbd 8b02 	vpop	{d8}
 800f3d4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3d8:	f7ff be64 	b.w	800f0a4 <__ieee754_sqrtf>
 800f3dc:	2d01      	cmp	r5, #1
 800f3de:	d199      	bne.n	800f314 <__ieee754_powf+0x30>
 800f3e0:	eeb1 0a40 	vneg.f32	s0, s0
 800f3e4:	e796      	b.n	800f314 <__ieee754_powf+0x30>
 800f3e6:	0ff0      	lsrs	r0, r6, #31
 800f3e8:	3801      	subs	r0, #1
 800f3ea:	ea55 0300 	orrs.w	r3, r5, r0
 800f3ee:	d104      	bne.n	800f3fa <__ieee754_powf+0x116>
 800f3f0:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f3f4:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f3f8:	e78c      	b.n	800f314 <__ieee754_powf+0x30>
 800f3fa:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f3fe:	d96d      	bls.n	800f4dc <__ieee754_powf+0x1f8>
 800f400:	4baa      	ldr	r3, [pc, #680]	@ (800f6ac <__ieee754_powf+0x3c8>)
 800f402:	4598      	cmp	r8, r3
 800f404:	d808      	bhi.n	800f418 <__ieee754_powf+0x134>
 800f406:	2c00      	cmp	r4, #0
 800f408:	da0b      	bge.n	800f422 <__ieee754_powf+0x13e>
 800f40a:	2000      	movs	r0, #0
 800f40c:	ecbd 8b02 	vpop	{d8}
 800f410:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f414:	f000 bbf2 	b.w	800fbfc <__math_oflowf>
 800f418:	4ba5      	ldr	r3, [pc, #660]	@ (800f6b0 <__ieee754_powf+0x3cc>)
 800f41a:	4598      	cmp	r8, r3
 800f41c:	d908      	bls.n	800f430 <__ieee754_powf+0x14c>
 800f41e:	2c00      	cmp	r4, #0
 800f420:	dcf3      	bgt.n	800f40a <__ieee754_powf+0x126>
 800f422:	2000      	movs	r0, #0
 800f424:	ecbd 8b02 	vpop	{d8}
 800f428:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f42c:	f000 bbe0 	b.w	800fbf0 <__math_uflowf>
 800f430:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f434:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f438:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800f6b4 <__ieee754_powf+0x3d0>
 800f43c:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800f440:	eee0 6a67 	vfms.f32	s13, s0, s15
 800f444:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f448:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800f44c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f450:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800f6b8 <__ieee754_powf+0x3d4>
 800f454:	ee27 7a27 	vmul.f32	s14, s14, s15
 800f458:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800f6bc <__ieee754_powf+0x3d8>
 800f45c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800f460:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800f6c0 <__ieee754_powf+0x3dc>
 800f464:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f468:	eeb0 7a67 	vmov.f32	s14, s15
 800f46c:	eea0 7a26 	vfma.f32	s14, s0, s13
 800f470:	ee17 3a10 	vmov	r3, s14
 800f474:	f36f 030b 	bfc	r3, #0, #12
 800f478:	ee07 3a10 	vmov	s14, r3
 800f47c:	eeb0 6a47 	vmov.f32	s12, s14
 800f480:	eea0 6a66 	vfms.f32	s12, s0, s13
 800f484:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800f488:	3d01      	subs	r5, #1
 800f48a:	4305      	orrs	r5, r0
 800f48c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f490:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800f494:	f36f 040b 	bfc	r4, #0, #12
 800f498:	bf18      	it	ne
 800f49a:	eeb0 8a66 	vmovne.f32	s16, s13
 800f49e:	ee06 4a90 	vmov	s13, r4
 800f4a2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800f4a6:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800f4aa:	ee67 7a26 	vmul.f32	s15, s14, s13
 800f4ae:	eee6 0a07 	vfma.f32	s1, s12, s14
 800f4b2:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800f4b6:	ee17 1a10 	vmov	r1, s14
 800f4ba:	2900      	cmp	r1, #0
 800f4bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f4c0:	f340 80dd 	ble.w	800f67e <__ieee754_powf+0x39a>
 800f4c4:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800f4c8:	f240 80ca 	bls.w	800f660 <__ieee754_powf+0x37c>
 800f4cc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f4d4:	bf4c      	ite	mi
 800f4d6:	2001      	movmi	r0, #1
 800f4d8:	2000      	movpl	r0, #0
 800f4da:	e797      	b.n	800f40c <__ieee754_powf+0x128>
 800f4dc:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f4e0:	bf01      	itttt	eq
 800f4e2:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800f6c4 <__ieee754_powf+0x3e0>
 800f4e6:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800f4ea:	f06f 0317 	mvneq.w	r3, #23
 800f4ee:	ee17 7a90 	vmoveq	r7, s15
 800f4f2:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800f4f6:	bf18      	it	ne
 800f4f8:	2300      	movne	r3, #0
 800f4fa:	3a7f      	subs	r2, #127	@ 0x7f
 800f4fc:	441a      	add	r2, r3
 800f4fe:	4b72      	ldr	r3, [pc, #456]	@ (800f6c8 <__ieee754_powf+0x3e4>)
 800f500:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800f504:	429f      	cmp	r7, r3
 800f506:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800f50a:	dd06      	ble.n	800f51a <__ieee754_powf+0x236>
 800f50c:	4b6f      	ldr	r3, [pc, #444]	@ (800f6cc <__ieee754_powf+0x3e8>)
 800f50e:	429f      	cmp	r7, r3
 800f510:	f340 80a4 	ble.w	800f65c <__ieee754_powf+0x378>
 800f514:	3201      	adds	r2, #1
 800f516:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800f51a:	2600      	movs	r6, #0
 800f51c:	4b6c      	ldr	r3, [pc, #432]	@ (800f6d0 <__ieee754_powf+0x3ec>)
 800f51e:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800f522:	ee07 1a10 	vmov	s14, r1
 800f526:	edd3 5a00 	vldr	s11, [r3]
 800f52a:	4b6a      	ldr	r3, [pc, #424]	@ (800f6d4 <__ieee754_powf+0x3f0>)
 800f52c:	ee75 7a87 	vadd.f32	s15, s11, s14
 800f530:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f534:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800f538:	1049      	asrs	r1, r1, #1
 800f53a:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800f53e:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800f542:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800f546:	ee37 6a65 	vsub.f32	s12, s14, s11
 800f54a:	ee07 1a90 	vmov	s15, r1
 800f54e:	ee26 5a24 	vmul.f32	s10, s12, s9
 800f552:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800f556:	ee15 7a10 	vmov	r7, s10
 800f55a:	401f      	ands	r7, r3
 800f55c:	ee06 7a90 	vmov	s13, r7
 800f560:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800f564:	ee37 7a65 	vsub.f32	s14, s14, s11
 800f568:	ee65 7a05 	vmul.f32	s15, s10, s10
 800f56c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800f570:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800f6d8 <__ieee754_powf+0x3f4>
 800f574:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800f6dc <__ieee754_powf+0x3f8>
 800f578:	eee7 5a87 	vfma.f32	s11, s15, s14
 800f57c:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800f6e0 <__ieee754_powf+0x3fc>
 800f580:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f584:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800f6b4 <__ieee754_powf+0x3d0>
 800f588:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f58c:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800f6e4 <__ieee754_powf+0x400>
 800f590:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800f594:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800f6e8 <__ieee754_powf+0x404>
 800f598:	ee26 6a24 	vmul.f32	s12, s12, s9
 800f59c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800f5a0:	ee35 7a26 	vadd.f32	s14, s10, s13
 800f5a4:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800f5a8:	ee27 7a06 	vmul.f32	s14, s14, s12
 800f5ac:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800f5b0:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800f5b4:	eef0 5a67 	vmov.f32	s11, s15
 800f5b8:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800f5bc:	ee75 5a87 	vadd.f32	s11, s11, s14
 800f5c0:	ee15 1a90 	vmov	r1, s11
 800f5c4:	4019      	ands	r1, r3
 800f5c6:	ee05 1a90 	vmov	s11, r1
 800f5ca:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800f5ce:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800f5d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5d6:	ee67 7a85 	vmul.f32	s15, s15, s10
 800f5da:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f5de:	eeb0 6a67 	vmov.f32	s12, s15
 800f5e2:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f5e6:	ee16 1a10 	vmov	r1, s12
 800f5ea:	4019      	ands	r1, r3
 800f5ec:	ee06 1a10 	vmov	s12, r1
 800f5f0:	eeb0 7a46 	vmov.f32	s14, s12
 800f5f4:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800f5f8:	493c      	ldr	r1, [pc, #240]	@ (800f6ec <__ieee754_powf+0x408>)
 800f5fa:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800f5fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f602:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800f6f0 <__ieee754_powf+0x40c>
 800f606:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800f6f4 <__ieee754_powf+0x410>
 800f60a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f60e:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800f6f8 <__ieee754_powf+0x414>
 800f612:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f616:	ed91 7a00 	vldr	s14, [r1]
 800f61a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f61e:	ee07 2a10 	vmov	s14, r2
 800f622:	4a36      	ldr	r2, [pc, #216]	@ (800f6fc <__ieee754_powf+0x418>)
 800f624:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800f628:	eeb0 7a67 	vmov.f32	s14, s15
 800f62c:	eea6 7a25 	vfma.f32	s14, s12, s11
 800f630:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800f634:	ed92 5a00 	vldr	s10, [r2]
 800f638:	ee37 7a05 	vadd.f32	s14, s14, s10
 800f63c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800f640:	ee17 2a10 	vmov	r2, s14
 800f644:	401a      	ands	r2, r3
 800f646:	ee07 2a10 	vmov	s14, r2
 800f64a:	ee77 6a66 	vsub.f32	s13, s14, s13
 800f64e:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800f652:	eee6 6a65 	vfms.f32	s13, s12, s11
 800f656:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f65a:	e715      	b.n	800f488 <__ieee754_powf+0x1a4>
 800f65c:	2601      	movs	r6, #1
 800f65e:	e75d      	b.n	800f51c <__ieee754_powf+0x238>
 800f660:	d152      	bne.n	800f708 <__ieee754_powf+0x424>
 800f662:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800f700 <__ieee754_powf+0x41c>
 800f666:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f66a:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800f66e:	eef4 6ac7 	vcmpe.f32	s13, s14
 800f672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f676:	f73f af29 	bgt.w	800f4cc <__ieee754_powf+0x1e8>
 800f67a:	2386      	movs	r3, #134	@ 0x86
 800f67c:	e048      	b.n	800f710 <__ieee754_powf+0x42c>
 800f67e:	4a21      	ldr	r2, [pc, #132]	@ (800f704 <__ieee754_powf+0x420>)
 800f680:	4293      	cmp	r3, r2
 800f682:	d907      	bls.n	800f694 <__ieee754_powf+0x3b0>
 800f684:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f68c:	bf4c      	ite	mi
 800f68e:	2001      	movmi	r0, #1
 800f690:	2000      	movpl	r0, #0
 800f692:	e6c7      	b.n	800f424 <__ieee754_powf+0x140>
 800f694:	d138      	bne.n	800f708 <__ieee754_powf+0x424>
 800f696:	ee37 7a67 	vsub.f32	s14, s14, s15
 800f69a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800f69e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f6a2:	dbea      	blt.n	800f67a <__ieee754_powf+0x396>
 800f6a4:	e7ee      	b.n	800f684 <__ieee754_powf+0x3a0>
 800f6a6:	bf00      	nop
 800f6a8:	00000000 	.word	0x00000000
 800f6ac:	3f7ffff3 	.word	0x3f7ffff3
 800f6b0:	3f800007 	.word	0x3f800007
 800f6b4:	3eaaaaab 	.word	0x3eaaaaab
 800f6b8:	3fb8aa00 	.word	0x3fb8aa00
 800f6bc:	3fb8aa3b 	.word	0x3fb8aa3b
 800f6c0:	36eca570 	.word	0x36eca570
 800f6c4:	4b800000 	.word	0x4b800000
 800f6c8:	001cc471 	.word	0x001cc471
 800f6cc:	005db3d6 	.word	0x005db3d6
 800f6d0:	0802e4a4 	.word	0x0802e4a4
 800f6d4:	fffff000 	.word	0xfffff000
 800f6d8:	3e6c3255 	.word	0x3e6c3255
 800f6dc:	3e53f142 	.word	0x3e53f142
 800f6e0:	3e8ba305 	.word	0x3e8ba305
 800f6e4:	3edb6db7 	.word	0x3edb6db7
 800f6e8:	3f19999a 	.word	0x3f19999a
 800f6ec:	0802e494 	.word	0x0802e494
 800f6f0:	3f76384f 	.word	0x3f76384f
 800f6f4:	3f763800 	.word	0x3f763800
 800f6f8:	369dc3a0 	.word	0x369dc3a0
 800f6fc:	0802e49c 	.word	0x0802e49c
 800f700:	3338aa3c 	.word	0x3338aa3c
 800f704:	43160000 	.word	0x43160000
 800f708:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800f70c:	d96f      	bls.n	800f7ee <__ieee754_powf+0x50a>
 800f70e:	15db      	asrs	r3, r3, #23
 800f710:	3b7e      	subs	r3, #126	@ 0x7e
 800f712:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800f716:	4118      	asrs	r0, r3
 800f718:	4408      	add	r0, r1
 800f71a:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800f71e:	4a4e      	ldr	r2, [pc, #312]	@ (800f858 <__ieee754_powf+0x574>)
 800f720:	3b7f      	subs	r3, #127	@ 0x7f
 800f722:	411a      	asrs	r2, r3
 800f724:	4002      	ands	r2, r0
 800f726:	ee07 2a10 	vmov	s14, r2
 800f72a:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800f72e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800f732:	f1c3 0317 	rsb	r3, r3, #23
 800f736:	4118      	asrs	r0, r3
 800f738:	2900      	cmp	r1, #0
 800f73a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f73e:	bfb8      	it	lt
 800f740:	4240      	neglt	r0, r0
 800f742:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800f746:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800f85c <__ieee754_powf+0x578>
 800f74a:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800f860 <__ieee754_powf+0x57c>
 800f74e:	ee16 3a90 	vmov	r3, s13
 800f752:	f36f 030b 	bfc	r3, #0, #12
 800f756:	ee06 3a90 	vmov	s13, r3
 800f75a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f75e:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f762:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800f766:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800f864 <__ieee754_powf+0x580>
 800f76a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800f76e:	eee0 7a87 	vfma.f32	s15, s1, s14
 800f772:	eeb0 7a67 	vmov.f32	s14, s15
 800f776:	eea6 7a86 	vfma.f32	s14, s13, s12
 800f77a:	eef0 5a47 	vmov.f32	s11, s14
 800f77e:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800f782:	ee67 6a07 	vmul.f32	s13, s14, s14
 800f786:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800f78a:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800f868 <__ieee754_powf+0x584>
 800f78e:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800f86c <__ieee754_powf+0x588>
 800f792:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800f796:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800f870 <__ieee754_powf+0x58c>
 800f79a:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f79e:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800f874 <__ieee754_powf+0x590>
 800f7a2:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800f7a6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f878 <__ieee754_powf+0x594>
 800f7aa:	eee6 5a26 	vfma.f32	s11, s12, s13
 800f7ae:	eeb0 6a47 	vmov.f32	s12, s14
 800f7b2:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800f7b6:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800f7ba:	ee67 5a06 	vmul.f32	s11, s14, s12
 800f7be:	ee36 6a66 	vsub.f32	s12, s12, s13
 800f7c2:	eee7 7a27 	vfma.f32	s15, s14, s15
 800f7c6:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800f7ca:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800f7ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f7d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f7d6:	ee10 3a10 	vmov	r3, s0
 800f7da:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800f7de:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f7e2:	da06      	bge.n	800f7f2 <__ieee754_powf+0x50e>
 800f7e4:	f000 f984 	bl	800faf0 <scalbnf>
 800f7e8:	ee20 0a08 	vmul.f32	s0, s0, s16
 800f7ec:	e592      	b.n	800f314 <__ieee754_powf+0x30>
 800f7ee:	2000      	movs	r0, #0
 800f7f0:	e7a7      	b.n	800f742 <__ieee754_powf+0x45e>
 800f7f2:	ee00 3a10 	vmov	s0, r3
 800f7f6:	e7f7      	b.n	800f7e8 <__ieee754_powf+0x504>
 800f7f8:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f7fc:	e58a      	b.n	800f314 <__ieee754_powf+0x30>
 800f7fe:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800f87c <__ieee754_powf+0x598>
 800f802:	e587      	b.n	800f314 <__ieee754_powf+0x30>
 800f804:	eeb0 0a48 	vmov.f32	s0, s16
 800f808:	e584      	b.n	800f314 <__ieee754_powf+0x30>
 800f80a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f80e:	f43f adbb 	beq.w	800f388 <__ieee754_powf+0xa4>
 800f812:	2502      	movs	r5, #2
 800f814:	eeb0 0a48 	vmov.f32	s0, s16
 800f818:	f000 f962 	bl	800fae0 <fabsf>
 800f81c:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800f820:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800f824:	4647      	mov	r7, r8
 800f826:	d003      	beq.n	800f830 <__ieee754_powf+0x54c>
 800f828:	f1b8 0f00 	cmp.w	r8, #0
 800f82c:	f47f addb 	bne.w	800f3e6 <__ieee754_powf+0x102>
 800f830:	2c00      	cmp	r4, #0
 800f832:	bfbc      	itt	lt
 800f834:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800f838:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800f83c:	2e00      	cmp	r6, #0
 800f83e:	f6bf ad69 	bge.w	800f314 <__ieee754_powf+0x30>
 800f842:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800f846:	ea58 0805 	orrs.w	r8, r8, r5
 800f84a:	f47f adc7 	bne.w	800f3dc <__ieee754_powf+0xf8>
 800f84e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800f852:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800f856:	e55d      	b.n	800f314 <__ieee754_powf+0x30>
 800f858:	ff800000 	.word	0xff800000
 800f85c:	3f317218 	.word	0x3f317218
 800f860:	3f317200 	.word	0x3f317200
 800f864:	35bfbe8c 	.word	0x35bfbe8c
 800f868:	b5ddea0e 	.word	0xb5ddea0e
 800f86c:	3331bb4c 	.word	0x3331bb4c
 800f870:	388ab355 	.word	0x388ab355
 800f874:	bb360b61 	.word	0xbb360b61
 800f878:	3e2aaaab 	.word	0x3e2aaaab
 800f87c:	00000000 	.word	0x00000000

0800f880 <__ieee754_rem_pio2f>:
 800f880:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f882:	ee10 6a10 	vmov	r6, s0
 800f886:	4b88      	ldr	r3, [pc, #544]	@ (800faa8 <__ieee754_rem_pio2f+0x228>)
 800f888:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800f88c:	429d      	cmp	r5, r3
 800f88e:	b087      	sub	sp, #28
 800f890:	4604      	mov	r4, r0
 800f892:	d805      	bhi.n	800f8a0 <__ieee754_rem_pio2f+0x20>
 800f894:	2300      	movs	r3, #0
 800f896:	ed80 0a00 	vstr	s0, [r0]
 800f89a:	6043      	str	r3, [r0, #4]
 800f89c:	2000      	movs	r0, #0
 800f89e:	e022      	b.n	800f8e6 <__ieee754_rem_pio2f+0x66>
 800f8a0:	4b82      	ldr	r3, [pc, #520]	@ (800faac <__ieee754_rem_pio2f+0x22c>)
 800f8a2:	429d      	cmp	r5, r3
 800f8a4:	d83a      	bhi.n	800f91c <__ieee754_rem_pio2f+0x9c>
 800f8a6:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f8aa:	2e00      	cmp	r6, #0
 800f8ac:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 800fab0 <__ieee754_rem_pio2f+0x230>
 800f8b0:	4a80      	ldr	r2, [pc, #512]	@ (800fab4 <__ieee754_rem_pio2f+0x234>)
 800f8b2:	f023 030f 	bic.w	r3, r3, #15
 800f8b6:	dd18      	ble.n	800f8ea <__ieee754_rem_pio2f+0x6a>
 800f8b8:	4293      	cmp	r3, r2
 800f8ba:	ee70 7a47 	vsub.f32	s15, s0, s14
 800f8be:	bf09      	itett	eq
 800f8c0:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 800fab8 <__ieee754_rem_pio2f+0x238>
 800f8c4:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 800fabc <__ieee754_rem_pio2f+0x23c>
 800f8c8:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 800fac0 <__ieee754_rem_pio2f+0x240>
 800f8cc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800f8d0:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800f8d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f8d8:	ed80 7a00 	vstr	s14, [r0]
 800f8dc:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800f8e0:	edc0 7a01 	vstr	s15, [r0, #4]
 800f8e4:	2001      	movs	r0, #1
 800f8e6:	b007      	add	sp, #28
 800f8e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ea:	4293      	cmp	r3, r2
 800f8ec:	ee70 7a07 	vadd.f32	s15, s0, s14
 800f8f0:	bf09      	itett	eq
 800f8f2:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 800fab8 <__ieee754_rem_pio2f+0x238>
 800f8f6:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 800fabc <__ieee754_rem_pio2f+0x23c>
 800f8fa:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 800fac0 <__ieee754_rem_pio2f+0x240>
 800f8fe:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800f902:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800f906:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f90a:	ed80 7a00 	vstr	s14, [r0]
 800f90e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f912:	edc0 7a01 	vstr	s15, [r0, #4]
 800f916:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f91a:	e7e4      	b.n	800f8e6 <__ieee754_rem_pio2f+0x66>
 800f91c:	4b69      	ldr	r3, [pc, #420]	@ (800fac4 <__ieee754_rem_pio2f+0x244>)
 800f91e:	429d      	cmp	r5, r3
 800f920:	d873      	bhi.n	800fa0a <__ieee754_rem_pio2f+0x18a>
 800f922:	f000 f8dd 	bl	800fae0 <fabsf>
 800f926:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 800fac8 <__ieee754_rem_pio2f+0x248>
 800f92a:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f92e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800f932:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f936:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f93a:	ee17 0a90 	vmov	r0, s15
 800f93e:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fab0 <__ieee754_rem_pio2f+0x230>
 800f942:	eea7 0a67 	vfms.f32	s0, s14, s15
 800f946:	281f      	cmp	r0, #31
 800f948:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 800fabc <__ieee754_rem_pio2f+0x23c>
 800f94c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f950:	eeb1 6a47 	vneg.f32	s12, s14
 800f954:	ee70 6a67 	vsub.f32	s13, s0, s15
 800f958:	ee16 1a90 	vmov	r1, s13
 800f95c:	dc09      	bgt.n	800f972 <__ieee754_rem_pio2f+0xf2>
 800f95e:	4a5b      	ldr	r2, [pc, #364]	@ (800facc <__ieee754_rem_pio2f+0x24c>)
 800f960:	1e47      	subs	r7, r0, #1
 800f962:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f966:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800f96a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800f96e:	4293      	cmp	r3, r2
 800f970:	d107      	bne.n	800f982 <__ieee754_rem_pio2f+0x102>
 800f972:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800f976:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800f97a:	2a08      	cmp	r2, #8
 800f97c:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800f980:	dc14      	bgt.n	800f9ac <__ieee754_rem_pio2f+0x12c>
 800f982:	6021      	str	r1, [r4, #0]
 800f984:	ed94 7a00 	vldr	s14, [r4]
 800f988:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f98c:	2e00      	cmp	r6, #0
 800f98e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f992:	ed84 0a01 	vstr	s0, [r4, #4]
 800f996:	daa6      	bge.n	800f8e6 <__ieee754_rem_pio2f+0x66>
 800f998:	eeb1 7a47 	vneg.f32	s14, s14
 800f99c:	eeb1 0a40 	vneg.f32	s0, s0
 800f9a0:	ed84 7a00 	vstr	s14, [r4]
 800f9a4:	ed84 0a01 	vstr	s0, [r4, #4]
 800f9a8:	4240      	negs	r0, r0
 800f9aa:	e79c      	b.n	800f8e6 <__ieee754_rem_pio2f+0x66>
 800f9ac:	eddf 5a42 	vldr	s11, [pc, #264]	@ 800fab8 <__ieee754_rem_pio2f+0x238>
 800f9b0:	eef0 6a40 	vmov.f32	s13, s0
 800f9b4:	eee6 6a25 	vfma.f32	s13, s12, s11
 800f9b8:	ee70 7a66 	vsub.f32	s15, s0, s13
 800f9bc:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f9c0:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800fac0 <__ieee754_rem_pio2f+0x240>
 800f9c4:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800f9c8:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800f9cc:	ee15 2a90 	vmov	r2, s11
 800f9d0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800f9d4:	1a5b      	subs	r3, r3, r1
 800f9d6:	2b19      	cmp	r3, #25
 800f9d8:	dc04      	bgt.n	800f9e4 <__ieee754_rem_pio2f+0x164>
 800f9da:	edc4 5a00 	vstr	s11, [r4]
 800f9de:	eeb0 0a66 	vmov.f32	s0, s13
 800f9e2:	e7cf      	b.n	800f984 <__ieee754_rem_pio2f+0x104>
 800f9e4:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 800fad0 <__ieee754_rem_pio2f+0x250>
 800f9e8:	eeb0 0a66 	vmov.f32	s0, s13
 800f9ec:	eea6 0a25 	vfma.f32	s0, s12, s11
 800f9f0:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800f9f4:	eddf 6a37 	vldr	s13, [pc, #220]	@ 800fad4 <__ieee754_rem_pio2f+0x254>
 800f9f8:	eee6 7a25 	vfma.f32	s15, s12, s11
 800f9fc:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fa00:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fa04:	ed84 7a00 	vstr	s14, [r4]
 800fa08:	e7bc      	b.n	800f984 <__ieee754_rem_pio2f+0x104>
 800fa0a:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 800fa0e:	d306      	bcc.n	800fa1e <__ieee754_rem_pio2f+0x19e>
 800fa10:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fa14:	edc0 7a01 	vstr	s15, [r0, #4]
 800fa18:	edc0 7a00 	vstr	s15, [r0]
 800fa1c:	e73e      	b.n	800f89c <__ieee754_rem_pio2f+0x1c>
 800fa1e:	15ea      	asrs	r2, r5, #23
 800fa20:	3a86      	subs	r2, #134	@ 0x86
 800fa22:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800fa26:	ee07 3a90 	vmov	s15, r3
 800fa2a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa2e:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 800fad8 <__ieee754_rem_pio2f+0x258>
 800fa32:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa36:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa3a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800fa3e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa42:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800fa46:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800fa4a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fa4e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800fa52:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800fa56:	eef5 7a40 	vcmp.f32	s15, #0.0
 800fa5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa5e:	edcd 7a05 	vstr	s15, [sp, #20]
 800fa62:	d11e      	bne.n	800faa2 <__ieee754_rem_pio2f+0x222>
 800fa64:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800fa68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fa6c:	bf0c      	ite	eq
 800fa6e:	2301      	moveq	r3, #1
 800fa70:	2302      	movne	r3, #2
 800fa72:	491a      	ldr	r1, [pc, #104]	@ (800fadc <__ieee754_rem_pio2f+0x25c>)
 800fa74:	9101      	str	r1, [sp, #4]
 800fa76:	2102      	movs	r1, #2
 800fa78:	9100      	str	r1, [sp, #0]
 800fa7a:	a803      	add	r0, sp, #12
 800fa7c:	4621      	mov	r1, r4
 800fa7e:	f000 f8c3 	bl	800fc08 <__kernel_rem_pio2f>
 800fa82:	2e00      	cmp	r6, #0
 800fa84:	f6bf af2f 	bge.w	800f8e6 <__ieee754_rem_pio2f+0x66>
 800fa88:	edd4 7a00 	vldr	s15, [r4]
 800fa8c:	eef1 7a67 	vneg.f32	s15, s15
 800fa90:	edc4 7a00 	vstr	s15, [r4]
 800fa94:	edd4 7a01 	vldr	s15, [r4, #4]
 800fa98:	eef1 7a67 	vneg.f32	s15, s15
 800fa9c:	edc4 7a01 	vstr	s15, [r4, #4]
 800faa0:	e782      	b.n	800f9a8 <__ieee754_rem_pio2f+0x128>
 800faa2:	2303      	movs	r3, #3
 800faa4:	e7e5      	b.n	800fa72 <__ieee754_rem_pio2f+0x1f2>
 800faa6:	bf00      	nop
 800faa8:	3f490fd8 	.word	0x3f490fd8
 800faac:	4016cbe3 	.word	0x4016cbe3
 800fab0:	3fc90f80 	.word	0x3fc90f80
 800fab4:	3fc90fd0 	.word	0x3fc90fd0
 800fab8:	37354400 	.word	0x37354400
 800fabc:	37354443 	.word	0x37354443
 800fac0:	2e85a308 	.word	0x2e85a308
 800fac4:	43490f80 	.word	0x43490f80
 800fac8:	3f22f984 	.word	0x3f22f984
 800facc:	0802e4ac 	.word	0x0802e4ac
 800fad0:	2e85a300 	.word	0x2e85a300
 800fad4:	248d3132 	.word	0x248d3132
 800fad8:	43800000 	.word	0x43800000
 800fadc:	0802e52c 	.word	0x0802e52c

0800fae0 <fabsf>:
 800fae0:	ee10 3a10 	vmov	r3, s0
 800fae4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800fae8:	ee00 3a10 	vmov	s0, r3
 800faec:	4770      	bx	lr
	...

0800faf0 <scalbnf>:
 800faf0:	ee10 3a10 	vmov	r3, s0
 800faf4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800faf8:	d02b      	beq.n	800fb52 <scalbnf+0x62>
 800fafa:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800fafe:	d302      	bcc.n	800fb06 <scalbnf+0x16>
 800fb00:	ee30 0a00 	vadd.f32	s0, s0, s0
 800fb04:	4770      	bx	lr
 800fb06:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800fb0a:	d123      	bne.n	800fb54 <scalbnf+0x64>
 800fb0c:	4b24      	ldr	r3, [pc, #144]	@ (800fba0 <scalbnf+0xb0>)
 800fb0e:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800fba4 <scalbnf+0xb4>
 800fb12:	4298      	cmp	r0, r3
 800fb14:	ee20 0a27 	vmul.f32	s0, s0, s15
 800fb18:	db17      	blt.n	800fb4a <scalbnf+0x5a>
 800fb1a:	ee10 3a10 	vmov	r3, s0
 800fb1e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800fb22:	3a19      	subs	r2, #25
 800fb24:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800fb28:	4288      	cmp	r0, r1
 800fb2a:	dd15      	ble.n	800fb58 <scalbnf+0x68>
 800fb2c:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800fba8 <scalbnf+0xb8>
 800fb30:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800fbac <scalbnf+0xbc>
 800fb34:	ee10 3a10 	vmov	r3, s0
 800fb38:	eeb0 7a67 	vmov.f32	s14, s15
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	bfb8      	it	lt
 800fb40:	eef0 7a66 	vmovlt.f32	s15, s13
 800fb44:	ee27 0a87 	vmul.f32	s0, s15, s14
 800fb48:	4770      	bx	lr
 800fb4a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800fbb0 <scalbnf+0xc0>
 800fb4e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fb52:	4770      	bx	lr
 800fb54:	0dd2      	lsrs	r2, r2, #23
 800fb56:	e7e5      	b.n	800fb24 <scalbnf+0x34>
 800fb58:	4410      	add	r0, r2
 800fb5a:	28fe      	cmp	r0, #254	@ 0xfe
 800fb5c:	dce6      	bgt.n	800fb2c <scalbnf+0x3c>
 800fb5e:	2800      	cmp	r0, #0
 800fb60:	dd06      	ble.n	800fb70 <scalbnf+0x80>
 800fb62:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb66:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fb6a:	ee00 3a10 	vmov	s0, r3
 800fb6e:	4770      	bx	lr
 800fb70:	f110 0f16 	cmn.w	r0, #22
 800fb74:	da09      	bge.n	800fb8a <scalbnf+0x9a>
 800fb76:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800fbb0 <scalbnf+0xc0>
 800fb7a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800fbb4 <scalbnf+0xc4>
 800fb7e:	ee10 3a10 	vmov	r3, s0
 800fb82:	eeb0 7a67 	vmov.f32	s14, s15
 800fb86:	2b00      	cmp	r3, #0
 800fb88:	e7d9      	b.n	800fb3e <scalbnf+0x4e>
 800fb8a:	3019      	adds	r0, #25
 800fb8c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800fb90:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800fb94:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800fbb8 <scalbnf+0xc8>
 800fb98:	ee07 3a90 	vmov	s15, r3
 800fb9c:	e7d7      	b.n	800fb4e <scalbnf+0x5e>
 800fb9e:	bf00      	nop
 800fba0:	ffff3cb0 	.word	0xffff3cb0
 800fba4:	4c000000 	.word	0x4c000000
 800fba8:	7149f2ca 	.word	0x7149f2ca
 800fbac:	f149f2ca 	.word	0xf149f2ca
 800fbb0:	0da24260 	.word	0x0da24260
 800fbb4:	8da24260 	.word	0x8da24260
 800fbb8:	33000000 	.word	0x33000000

0800fbbc <with_errnof>:
 800fbbc:	b510      	push	{r4, lr}
 800fbbe:	ed2d 8b02 	vpush	{d8}
 800fbc2:	eeb0 8a40 	vmov.f32	s16, s0
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	f7fd f8fa 	bl	800cdc0 <__errno>
 800fbcc:	eeb0 0a48 	vmov.f32	s0, s16
 800fbd0:	ecbd 8b02 	vpop	{d8}
 800fbd4:	6004      	str	r4, [r0, #0]
 800fbd6:	bd10      	pop	{r4, pc}

0800fbd8 <xflowf>:
 800fbd8:	b130      	cbz	r0, 800fbe8 <xflowf+0x10>
 800fbda:	eef1 7a40 	vneg.f32	s15, s0
 800fbde:	ee27 0a80 	vmul.f32	s0, s15, s0
 800fbe2:	2022      	movs	r0, #34	@ 0x22
 800fbe4:	f7ff bfea 	b.w	800fbbc <with_errnof>
 800fbe8:	eef0 7a40 	vmov.f32	s15, s0
 800fbec:	e7f7      	b.n	800fbde <xflowf+0x6>
	...

0800fbf0 <__math_uflowf>:
 800fbf0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fbf8 <__math_uflowf+0x8>
 800fbf4:	f7ff bff0 	b.w	800fbd8 <xflowf>
 800fbf8:	10000000 	.word	0x10000000

0800fbfc <__math_oflowf>:
 800fbfc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800fc04 <__math_oflowf+0x8>
 800fc00:	f7ff bfea 	b.w	800fbd8 <xflowf>
 800fc04:	70000000 	.word	0x70000000

0800fc08 <__kernel_rem_pio2f>:
 800fc08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc0c:	ed2d 8b04 	vpush	{d8-d9}
 800fc10:	b0d9      	sub	sp, #356	@ 0x164
 800fc12:	4690      	mov	r8, r2
 800fc14:	9001      	str	r0, [sp, #4]
 800fc16:	4ab6      	ldr	r2, [pc, #728]	@ (800fef0 <__kernel_rem_pio2f+0x2e8>)
 800fc18:	9866      	ldr	r0, [sp, #408]	@ 0x198
 800fc1a:	f118 0f04 	cmn.w	r8, #4
 800fc1e:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 800fc22:	460f      	mov	r7, r1
 800fc24:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 800fc28:	db26      	blt.n	800fc78 <__kernel_rem_pio2f+0x70>
 800fc2a:	f1b8 0203 	subs.w	r2, r8, #3
 800fc2e:	bf48      	it	mi
 800fc30:	f108 0204 	addmi.w	r2, r8, #4
 800fc34:	10d2      	asrs	r2, r2, #3
 800fc36:	1c55      	adds	r5, r2, #1
 800fc38:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fc3a:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 800ff00 <__kernel_rem_pio2f+0x2f8>
 800fc3e:	00e8      	lsls	r0, r5, #3
 800fc40:	eba2 060b 	sub.w	r6, r2, fp
 800fc44:	9002      	str	r0, [sp, #8]
 800fc46:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 800fc4a:	eb0a 0c0b 	add.w	ip, sl, fp
 800fc4e:	ac1c      	add	r4, sp, #112	@ 0x70
 800fc50:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 800fc54:	2000      	movs	r0, #0
 800fc56:	4560      	cmp	r0, ip
 800fc58:	dd10      	ble.n	800fc7c <__kernel_rem_pio2f+0x74>
 800fc5a:	a91c      	add	r1, sp, #112	@ 0x70
 800fc5c:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 800fc60:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 800fc64:	2600      	movs	r6, #0
 800fc66:	4556      	cmp	r6, sl
 800fc68:	dc24      	bgt.n	800fcb4 <__kernel_rem_pio2f+0xac>
 800fc6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 800fc6e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 800ff00 <__kernel_rem_pio2f+0x2f8>
 800fc72:	4684      	mov	ip, r0
 800fc74:	2400      	movs	r4, #0
 800fc76:	e016      	b.n	800fca6 <__kernel_rem_pio2f+0x9e>
 800fc78:	2200      	movs	r2, #0
 800fc7a:	e7dc      	b.n	800fc36 <__kernel_rem_pio2f+0x2e>
 800fc7c:	42c6      	cmn	r6, r0
 800fc7e:	bf5d      	ittte	pl
 800fc80:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 800fc84:	ee07 1a90 	vmovpl	s15, r1
 800fc88:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800fc8c:	eef0 7a47 	vmovmi.f32	s15, s14
 800fc90:	ece4 7a01 	vstmia	r4!, {s15}
 800fc94:	3001      	adds	r0, #1
 800fc96:	e7de      	b.n	800fc56 <__kernel_rem_pio2f+0x4e>
 800fc98:	ecfe 6a01 	vldmia	lr!, {s13}
 800fc9c:	ed3c 7a01 	vldmdb	ip!, {s14}
 800fca0:	eee6 7a87 	vfma.f32	s15, s13, s14
 800fca4:	3401      	adds	r4, #1
 800fca6:	455c      	cmp	r4, fp
 800fca8:	ddf6      	ble.n	800fc98 <__kernel_rem_pio2f+0x90>
 800fcaa:	ece9 7a01 	vstmia	r9!, {s15}
 800fcae:	3601      	adds	r6, #1
 800fcb0:	3004      	adds	r0, #4
 800fcb2:	e7d8      	b.n	800fc66 <__kernel_rem_pio2f+0x5e>
 800fcb4:	a908      	add	r1, sp, #32
 800fcb6:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fcba:	9104      	str	r1, [sp, #16]
 800fcbc:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 800fcbe:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 800fefc <__kernel_rem_pio2f+0x2f4>
 800fcc2:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 800fef8 <__kernel_rem_pio2f+0x2f0>
 800fcc6:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800fcca:	9203      	str	r2, [sp, #12]
 800fccc:	4654      	mov	r4, sl
 800fcce:	00a2      	lsls	r2, r4, #2
 800fcd0:	9205      	str	r2, [sp, #20]
 800fcd2:	aa58      	add	r2, sp, #352	@ 0x160
 800fcd4:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 800fcd8:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 800fcdc:	a944      	add	r1, sp, #272	@ 0x110
 800fcde:	aa08      	add	r2, sp, #32
 800fce0:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 800fce4:	4694      	mov	ip, r2
 800fce6:	4626      	mov	r6, r4
 800fce8:	2e00      	cmp	r6, #0
 800fcea:	dc4c      	bgt.n	800fd86 <__kernel_rem_pio2f+0x17e>
 800fcec:	4628      	mov	r0, r5
 800fcee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fcf2:	f7ff fefd 	bl	800faf0 <scalbnf>
 800fcf6:	eeb0 8a40 	vmov.f32	s16, s0
 800fcfa:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 800fcfe:	ee28 0a00 	vmul.f32	s0, s16, s0
 800fd02:	f000 fadb 	bl	80102bc <floorf>
 800fd06:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 800fd0a:	eea0 8a67 	vfms.f32	s16, s0, s15
 800fd0e:	2d00      	cmp	r5, #0
 800fd10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800fd14:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800fd18:	ee17 9a90 	vmov	r9, s15
 800fd1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd20:	ee38 8a67 	vsub.f32	s16, s16, s15
 800fd24:	dd41      	ble.n	800fdaa <__kernel_rem_pio2f+0x1a2>
 800fd26:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800fd2a:	a908      	add	r1, sp, #32
 800fd2c:	f1c5 0e08 	rsb	lr, r5, #8
 800fd30:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 800fd34:	fa46 f00e 	asr.w	r0, r6, lr
 800fd38:	4481      	add	r9, r0
 800fd3a:	fa00 f00e 	lsl.w	r0, r0, lr
 800fd3e:	1a36      	subs	r6, r6, r0
 800fd40:	f1c5 0007 	rsb	r0, r5, #7
 800fd44:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 800fd48:	4106      	asrs	r6, r0
 800fd4a:	2e00      	cmp	r6, #0
 800fd4c:	dd3c      	ble.n	800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd4e:	f04f 0e00 	mov.w	lr, #0
 800fd52:	f109 0901 	add.w	r9, r9, #1
 800fd56:	4670      	mov	r0, lr
 800fd58:	4574      	cmp	r4, lr
 800fd5a:	dc68      	bgt.n	800fe2e <__kernel_rem_pio2f+0x226>
 800fd5c:	2d00      	cmp	r5, #0
 800fd5e:	dd03      	ble.n	800fd68 <__kernel_rem_pio2f+0x160>
 800fd60:	2d01      	cmp	r5, #1
 800fd62:	d074      	beq.n	800fe4e <__kernel_rem_pio2f+0x246>
 800fd64:	2d02      	cmp	r5, #2
 800fd66:	d07d      	beq.n	800fe64 <__kernel_rem_pio2f+0x25c>
 800fd68:	2e02      	cmp	r6, #2
 800fd6a:	d12d      	bne.n	800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd6c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fd70:	ee30 8a48 	vsub.f32	s16, s0, s16
 800fd74:	b340      	cbz	r0, 800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd76:	4628      	mov	r0, r5
 800fd78:	9306      	str	r3, [sp, #24]
 800fd7a:	f7ff feb9 	bl	800faf0 <scalbnf>
 800fd7e:	9b06      	ldr	r3, [sp, #24]
 800fd80:	ee38 8a40 	vsub.f32	s16, s16, s0
 800fd84:	e020      	b.n	800fdc8 <__kernel_rem_pio2f+0x1c0>
 800fd86:	ee60 7a28 	vmul.f32	s15, s0, s17
 800fd8a:	3e01      	subs	r6, #1
 800fd8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800fd90:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fd94:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800fd98:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800fd9c:	ecac 0a01 	vstmia	ip!, {s0}
 800fda0:	ed30 0a01 	vldmdb	r0!, {s0}
 800fda4:	ee37 0a80 	vadd.f32	s0, s15, s0
 800fda8:	e79e      	b.n	800fce8 <__kernel_rem_pio2f+0xe0>
 800fdaa:	d105      	bne.n	800fdb8 <__kernel_rem_pio2f+0x1b0>
 800fdac:	1e60      	subs	r0, r4, #1
 800fdae:	a908      	add	r1, sp, #32
 800fdb0:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 800fdb4:	11f6      	asrs	r6, r6, #7
 800fdb6:	e7c8      	b.n	800fd4a <__kernel_rem_pio2f+0x142>
 800fdb8:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fdbc:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800fdc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdc4:	da31      	bge.n	800fe2a <__kernel_rem_pio2f+0x222>
 800fdc6:	2600      	movs	r6, #0
 800fdc8:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800fdcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fdd0:	f040 8098 	bne.w	800ff04 <__kernel_rem_pio2f+0x2fc>
 800fdd4:	1e60      	subs	r0, r4, #1
 800fdd6:	2200      	movs	r2, #0
 800fdd8:	4550      	cmp	r0, sl
 800fdda:	da4b      	bge.n	800fe74 <__kernel_rem_pio2f+0x26c>
 800fddc:	2a00      	cmp	r2, #0
 800fdde:	d065      	beq.n	800feac <__kernel_rem_pio2f+0x2a4>
 800fde0:	3c01      	subs	r4, #1
 800fde2:	ab08      	add	r3, sp, #32
 800fde4:	3d08      	subs	r5, #8
 800fde6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d0f8      	beq.n	800fde0 <__kernel_rem_pio2f+0x1d8>
 800fdee:	4628      	mov	r0, r5
 800fdf0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fdf4:	f7ff fe7c 	bl	800faf0 <scalbnf>
 800fdf8:	1c63      	adds	r3, r4, #1
 800fdfa:	aa44      	add	r2, sp, #272	@ 0x110
 800fdfc:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 800fefc <__kernel_rem_pio2f+0x2f4>
 800fe00:	0099      	lsls	r1, r3, #2
 800fe02:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 800fe06:	4623      	mov	r3, r4
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f280 80a9 	bge.w	800ff60 <__kernel_rem_pio2f+0x358>
 800fe0e:	4623      	mov	r3, r4
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	f2c0 80c7 	blt.w	800ffa4 <__kernel_rem_pio2f+0x39c>
 800fe16:	aa44      	add	r2, sp, #272	@ 0x110
 800fe18:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 800fe1c:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 800fef4 <__kernel_rem_pio2f+0x2ec>
 800fe20:	eddf 7a37 	vldr	s15, [pc, #220]	@ 800ff00 <__kernel_rem_pio2f+0x2f8>
 800fe24:	2000      	movs	r0, #0
 800fe26:	1ae2      	subs	r2, r4, r3
 800fe28:	e0b1      	b.n	800ff8e <__kernel_rem_pio2f+0x386>
 800fe2a:	2602      	movs	r6, #2
 800fe2c:	e78f      	b.n	800fd4e <__kernel_rem_pio2f+0x146>
 800fe2e:	f852 1b04 	ldr.w	r1, [r2], #4
 800fe32:	b948      	cbnz	r0, 800fe48 <__kernel_rem_pio2f+0x240>
 800fe34:	b121      	cbz	r1, 800fe40 <__kernel_rem_pio2f+0x238>
 800fe36:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 800fe3a:	f842 1c04 	str.w	r1, [r2, #-4]
 800fe3e:	2101      	movs	r1, #1
 800fe40:	f10e 0e01 	add.w	lr, lr, #1
 800fe44:	4608      	mov	r0, r1
 800fe46:	e787      	b.n	800fd58 <__kernel_rem_pio2f+0x150>
 800fe48:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 800fe4c:	e7f5      	b.n	800fe3a <__kernel_rem_pio2f+0x232>
 800fe4e:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800fe52:	aa08      	add	r2, sp, #32
 800fe54:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fe58:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800fe5c:	a908      	add	r1, sp, #32
 800fe5e:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 800fe62:	e781      	b.n	800fd68 <__kernel_rem_pio2f+0x160>
 800fe64:	f104 3cff 	add.w	ip, r4, #4294967295	@ 0xffffffff
 800fe68:	aa08      	add	r2, sp, #32
 800fe6a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 800fe6e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800fe72:	e7f3      	b.n	800fe5c <__kernel_rem_pio2f+0x254>
 800fe74:	a908      	add	r1, sp, #32
 800fe76:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800fe7a:	3801      	subs	r0, #1
 800fe7c:	430a      	orrs	r2, r1
 800fe7e:	e7ab      	b.n	800fdd8 <__kernel_rem_pio2f+0x1d0>
 800fe80:	3201      	adds	r2, #1
 800fe82:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 800fe86:	2e00      	cmp	r6, #0
 800fe88:	d0fa      	beq.n	800fe80 <__kernel_rem_pio2f+0x278>
 800fe8a:	9905      	ldr	r1, [sp, #20]
 800fe8c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 800fe90:	eb0d 0001 	add.w	r0, sp, r1
 800fe94:	18e6      	adds	r6, r4, r3
 800fe96:	a91c      	add	r1, sp, #112	@ 0x70
 800fe98:	f104 0c01 	add.w	ip, r4, #1
 800fe9c:	384c      	subs	r0, #76	@ 0x4c
 800fe9e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 800fea2:	4422      	add	r2, r4
 800fea4:	4562      	cmp	r2, ip
 800fea6:	da04      	bge.n	800feb2 <__kernel_rem_pio2f+0x2aa>
 800fea8:	4614      	mov	r4, r2
 800feaa:	e710      	b.n	800fcce <__kernel_rem_pio2f+0xc6>
 800feac:	9804      	ldr	r0, [sp, #16]
 800feae:	2201      	movs	r2, #1
 800feb0:	e7e7      	b.n	800fe82 <__kernel_rem_pio2f+0x27a>
 800feb2:	9903      	ldr	r1, [sp, #12]
 800feb4:	f8dd e004 	ldr.w	lr, [sp, #4]
 800feb8:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 800febc:	9105      	str	r1, [sp, #20]
 800febe:	ee07 1a90 	vmov	s15, r1
 800fec2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800fec6:	2400      	movs	r4, #0
 800fec8:	ece6 7a01 	vstmia	r6!, {s15}
 800fecc:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 800ff00 <__kernel_rem_pio2f+0x2f8>
 800fed0:	46b1      	mov	r9, r6
 800fed2:	455c      	cmp	r4, fp
 800fed4:	dd04      	ble.n	800fee0 <__kernel_rem_pio2f+0x2d8>
 800fed6:	ece0 7a01 	vstmia	r0!, {s15}
 800feda:	f10c 0c01 	add.w	ip, ip, #1
 800fede:	e7e1      	b.n	800fea4 <__kernel_rem_pio2f+0x29c>
 800fee0:	ecfe 6a01 	vldmia	lr!, {s13}
 800fee4:	ed39 7a01 	vldmdb	r9!, {s14}
 800fee8:	3401      	adds	r4, #1
 800feea:	eee6 7a87 	vfma.f32	s15, s13, s14
 800feee:	e7f0      	b.n	800fed2 <__kernel_rem_pio2f+0x2ca>
 800fef0:	0802e870 	.word	0x0802e870
 800fef4:	0802e844 	.word	0x0802e844
 800fef8:	43800000 	.word	0x43800000
 800fefc:	3b800000 	.word	0x3b800000
 800ff00:	00000000 	.word	0x00000000
 800ff04:	9b02      	ldr	r3, [sp, #8]
 800ff06:	eeb0 0a48 	vmov.f32	s0, s16
 800ff0a:	eba3 0008 	sub.w	r0, r3, r8
 800ff0e:	f7ff fdef 	bl	800faf0 <scalbnf>
 800ff12:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 800fef8 <__kernel_rem_pio2f+0x2f0>
 800ff16:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800ff1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff1e:	db19      	blt.n	800ff54 <__kernel_rem_pio2f+0x34c>
 800ff20:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 800fefc <__kernel_rem_pio2f+0x2f4>
 800ff24:	ee60 7a27 	vmul.f32	s15, s0, s15
 800ff28:	aa08      	add	r2, sp, #32
 800ff2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff2e:	3508      	adds	r5, #8
 800ff30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff34:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ff38:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff3c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff40:	ee10 3a10 	vmov	r3, s0
 800ff44:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ff48:	ee17 3a90 	vmov	r3, s15
 800ff4c:	3401      	adds	r4, #1
 800ff4e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800ff52:	e74c      	b.n	800fdee <__kernel_rem_pio2f+0x1e6>
 800ff54:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800ff58:	aa08      	add	r2, sp, #32
 800ff5a:	ee10 3a10 	vmov	r3, s0
 800ff5e:	e7f6      	b.n	800ff4e <__kernel_rem_pio2f+0x346>
 800ff60:	a808      	add	r0, sp, #32
 800ff62:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 800ff66:	9001      	str	r0, [sp, #4]
 800ff68:	ee07 0a90 	vmov	s15, r0
 800ff6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ff70:	3b01      	subs	r3, #1
 800ff72:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ff76:	ee20 0a07 	vmul.f32	s0, s0, s14
 800ff7a:	ed62 7a01 	vstmdb	r2!, {s15}
 800ff7e:	e743      	b.n	800fe08 <__kernel_rem_pio2f+0x200>
 800ff80:	ecfc 6a01 	vldmia	ip!, {s13}
 800ff84:	ecb5 7a01 	vldmia	r5!, {s14}
 800ff88:	eee6 7a87 	vfma.f32	s15, s13, s14
 800ff8c:	3001      	adds	r0, #1
 800ff8e:	4550      	cmp	r0, sl
 800ff90:	dc01      	bgt.n	800ff96 <__kernel_rem_pio2f+0x38e>
 800ff92:	4290      	cmp	r0, r2
 800ff94:	ddf4      	ble.n	800ff80 <__kernel_rem_pio2f+0x378>
 800ff96:	a858      	add	r0, sp, #352	@ 0x160
 800ff98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800ff9c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 800ffa0:	3b01      	subs	r3, #1
 800ffa2:	e735      	b.n	800fe10 <__kernel_rem_pio2f+0x208>
 800ffa4:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ffa6:	2b02      	cmp	r3, #2
 800ffa8:	dc09      	bgt.n	800ffbe <__kernel_rem_pio2f+0x3b6>
 800ffaa:	2b00      	cmp	r3, #0
 800ffac:	dc27      	bgt.n	800fffe <__kernel_rem_pio2f+0x3f6>
 800ffae:	d040      	beq.n	8010032 <__kernel_rem_pio2f+0x42a>
 800ffb0:	f009 0007 	and.w	r0, r9, #7
 800ffb4:	b059      	add	sp, #356	@ 0x164
 800ffb6:	ecbd 8b04 	vpop	{d8-d9}
 800ffba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffbe:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 800ffc0:	2b03      	cmp	r3, #3
 800ffc2:	d1f5      	bne.n	800ffb0 <__kernel_rem_pio2f+0x3a8>
 800ffc4:	aa30      	add	r2, sp, #192	@ 0xc0
 800ffc6:	1f0b      	subs	r3, r1, #4
 800ffc8:	4413      	add	r3, r2
 800ffca:	461a      	mov	r2, r3
 800ffcc:	4620      	mov	r0, r4
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	dc50      	bgt.n	8010074 <__kernel_rem_pio2f+0x46c>
 800ffd2:	4622      	mov	r2, r4
 800ffd4:	2a01      	cmp	r2, #1
 800ffd6:	dc5d      	bgt.n	8010094 <__kernel_rem_pio2f+0x48c>
 800ffd8:	ab30      	add	r3, sp, #192	@ 0xc0
 800ffda:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 800ff00 <__kernel_rem_pio2f+0x2f8>
 800ffde:	440b      	add	r3, r1
 800ffe0:	2c01      	cmp	r4, #1
 800ffe2:	dc67      	bgt.n	80100b4 <__kernel_rem_pio2f+0x4ac>
 800ffe4:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 800ffe8:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 800ffec:	2e00      	cmp	r6, #0
 800ffee:	d167      	bne.n	80100c0 <__kernel_rem_pio2f+0x4b8>
 800fff0:	edc7 6a00 	vstr	s13, [r7]
 800fff4:	ed87 7a01 	vstr	s14, [r7, #4]
 800fff8:	edc7 7a02 	vstr	s15, [r7, #8]
 800fffc:	e7d8      	b.n	800ffb0 <__kernel_rem_pio2f+0x3a8>
 800fffe:	ab30      	add	r3, sp, #192	@ 0xc0
 8010000:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 800ff00 <__kernel_rem_pio2f+0x2f8>
 8010004:	440b      	add	r3, r1
 8010006:	4622      	mov	r2, r4
 8010008:	2a00      	cmp	r2, #0
 801000a:	da24      	bge.n	8010056 <__kernel_rem_pio2f+0x44e>
 801000c:	b34e      	cbz	r6, 8010062 <__kernel_rem_pio2f+0x45a>
 801000e:	eef1 7a47 	vneg.f32	s15, s14
 8010012:	edc7 7a00 	vstr	s15, [r7]
 8010016:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 801001a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801001e:	aa31      	add	r2, sp, #196	@ 0xc4
 8010020:	2301      	movs	r3, #1
 8010022:	429c      	cmp	r4, r3
 8010024:	da20      	bge.n	8010068 <__kernel_rem_pio2f+0x460>
 8010026:	b10e      	cbz	r6, 801002c <__kernel_rem_pio2f+0x424>
 8010028:	eef1 7a67 	vneg.f32	s15, s15
 801002c:	edc7 7a01 	vstr	s15, [r7, #4]
 8010030:	e7be      	b.n	800ffb0 <__kernel_rem_pio2f+0x3a8>
 8010032:	ab30      	add	r3, sp, #192	@ 0xc0
 8010034:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 800ff00 <__kernel_rem_pio2f+0x2f8>
 8010038:	440b      	add	r3, r1
 801003a:	2c00      	cmp	r4, #0
 801003c:	da05      	bge.n	801004a <__kernel_rem_pio2f+0x442>
 801003e:	b10e      	cbz	r6, 8010044 <__kernel_rem_pio2f+0x43c>
 8010040:	eef1 7a67 	vneg.f32	s15, s15
 8010044:	edc7 7a00 	vstr	s15, [r7]
 8010048:	e7b2      	b.n	800ffb0 <__kernel_rem_pio2f+0x3a8>
 801004a:	ed33 7a01 	vldmdb	r3!, {s14}
 801004e:	3c01      	subs	r4, #1
 8010050:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010054:	e7f1      	b.n	801003a <__kernel_rem_pio2f+0x432>
 8010056:	ed73 7a01 	vldmdb	r3!, {s15}
 801005a:	3a01      	subs	r2, #1
 801005c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010060:	e7d2      	b.n	8010008 <__kernel_rem_pio2f+0x400>
 8010062:	eef0 7a47 	vmov.f32	s15, s14
 8010066:	e7d4      	b.n	8010012 <__kernel_rem_pio2f+0x40a>
 8010068:	ecb2 7a01 	vldmia	r2!, {s14}
 801006c:	3301      	adds	r3, #1
 801006e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010072:	e7d6      	b.n	8010022 <__kernel_rem_pio2f+0x41a>
 8010074:	ed72 7a01 	vldmdb	r2!, {s15}
 8010078:	edd2 6a01 	vldr	s13, [r2, #4]
 801007c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010080:	3801      	subs	r0, #1
 8010082:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010086:	ed82 7a00 	vstr	s14, [r2]
 801008a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801008e:	edc2 7a01 	vstr	s15, [r2, #4]
 8010092:	e79c      	b.n	800ffce <__kernel_rem_pio2f+0x3c6>
 8010094:	ed73 7a01 	vldmdb	r3!, {s15}
 8010098:	edd3 6a01 	vldr	s13, [r3, #4]
 801009c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80100a0:	3a01      	subs	r2, #1
 80100a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80100a6:	ed83 7a00 	vstr	s14, [r3]
 80100aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80100ae:	edc3 7a01 	vstr	s15, [r3, #4]
 80100b2:	e78f      	b.n	800ffd4 <__kernel_rem_pio2f+0x3cc>
 80100b4:	ed33 7a01 	vldmdb	r3!, {s14}
 80100b8:	3c01      	subs	r4, #1
 80100ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80100be:	e78f      	b.n	800ffe0 <__kernel_rem_pio2f+0x3d8>
 80100c0:	eef1 6a66 	vneg.f32	s13, s13
 80100c4:	eeb1 7a47 	vneg.f32	s14, s14
 80100c8:	edc7 6a00 	vstr	s13, [r7]
 80100cc:	ed87 7a01 	vstr	s14, [r7, #4]
 80100d0:	eef1 7a67 	vneg.f32	s15, s15
 80100d4:	e790      	b.n	800fff8 <__kernel_rem_pio2f+0x3f0>
 80100d6:	bf00      	nop

080100d8 <__ieee754_logf>:
 80100d8:	ee10 3a10 	vmov	r3, s0
 80100dc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80100e0:	d106      	bne.n	80100f0 <__ieee754_logf+0x18>
 80100e2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 801027c <__ieee754_logf+0x1a4>
 80100e6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8010280 <__ieee754_logf+0x1a8>
 80100ea:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80100ee:	4770      	bx	lr
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	461a      	mov	r2, r3
 80100f4:	da02      	bge.n	80100fc <__ieee754_logf+0x24>
 80100f6:	ee30 7a40 	vsub.f32	s14, s0, s0
 80100fa:	e7f4      	b.n	80100e6 <__ieee754_logf+0xe>
 80100fc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010100:	db02      	blt.n	8010108 <__ieee754_logf+0x30>
 8010102:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010106:	4770      	bx	lr
 8010108:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801010c:	bfb8      	it	lt
 801010e:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8010284 <__ieee754_logf+0x1ac>
 8010112:	485d      	ldr	r0, [pc, #372]	@ (8010288 <__ieee754_logf+0x1b0>)
 8010114:	bfbe      	ittt	lt
 8010116:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801011a:	f06f 0118 	mvnlt.w	r1, #24
 801011e:	ee17 2a90 	vmovlt	r2, s15
 8010122:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8010126:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801012a:	4410      	add	r0, r2
 801012c:	bfa8      	it	ge
 801012e:	2100      	movge	r1, #0
 8010130:	3b7f      	subs	r3, #127	@ 0x7f
 8010132:	440b      	add	r3, r1
 8010134:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8010138:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 801013c:	4311      	orrs	r1, r2
 801013e:	ee00 1a10 	vmov	s0, r1
 8010142:	4952      	ldr	r1, [pc, #328]	@ (801028c <__ieee754_logf+0x1b4>)
 8010144:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8010148:	f102 000f 	add.w	r0, r2, #15
 801014c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010150:	4001      	ands	r1, r0
 8010152:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010156:	bb89      	cbnz	r1, 80101bc <__ieee754_logf+0xe4>
 8010158:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801015c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010160:	d10f      	bne.n	8010182 <__ieee754_logf+0xaa>
 8010162:	2b00      	cmp	r3, #0
 8010164:	f000 8087 	beq.w	8010276 <__ieee754_logf+0x19e>
 8010168:	ee07 3a90 	vmov	s15, r3
 801016c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8010290 <__ieee754_logf+0x1b8>
 8010170:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8010294 <__ieee754_logf+0x1bc>
 8010174:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010178:	ee27 0a80 	vmul.f32	s0, s15, s0
 801017c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8010180:	4770      	bx	lr
 8010182:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8010298 <__ieee754_logf+0x1c0>
 8010186:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801018a:	eee0 7a66 	vfms.f32	s15, s0, s13
 801018e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010192:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010196:	b913      	cbnz	r3, 801019e <__ieee754_logf+0xc6>
 8010198:	ee30 0a47 	vsub.f32	s0, s0, s14
 801019c:	4770      	bx	lr
 801019e:	ee07 3a90 	vmov	s15, r3
 80101a2:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8010290 <__ieee754_logf+0x1b8>
 80101a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101aa:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80101ae:	ee37 0a40 	vsub.f32	s0, s14, s0
 80101b2:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010294 <__ieee754_logf+0x1bc>
 80101b6:	ee97 0a87 	vfnms.f32	s0, s15, s14
 80101ba:	4770      	bx	lr
 80101bc:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80101c0:	ee70 7a27 	vadd.f32	s15, s0, s15
 80101c4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 801029c <__ieee754_logf+0x1c4>
 80101c8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 80102a0 <__ieee754_logf+0x1c8>
 80101cc:	4935      	ldr	r1, [pc, #212]	@ (80102a4 <__ieee754_logf+0x1cc>)
 80101ce:	ee80 6a27 	vdiv.f32	s12, s0, s15
 80101d2:	4411      	add	r1, r2
 80101d4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 80101d8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 80101dc:	430a      	orrs	r2, r1
 80101de:	2a00      	cmp	r2, #0
 80101e0:	ee07 3a90 	vmov	s15, r3
 80101e4:	ee26 5a06 	vmul.f32	s10, s12, s12
 80101e8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80101ec:	ee25 7a05 	vmul.f32	s14, s10, s10
 80101f0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 80102a8 <__ieee754_logf+0x1d0>
 80101f4:	eee7 7a25 	vfma.f32	s15, s14, s11
 80101f8:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 80102ac <__ieee754_logf+0x1d4>
 80101fc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010200:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 80102b0 <__ieee754_logf+0x1d8>
 8010204:	eee7 7a24 	vfma.f32	s15, s14, s9
 8010208:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 80102b4 <__ieee754_logf+0x1dc>
 801020c:	eee7 4a87 	vfma.f32	s9, s15, s14
 8010210:	eddf 7a29 	vldr	s15, [pc, #164]	@ 80102b8 <__ieee754_logf+0x1e0>
 8010214:	eee4 7a87 	vfma.f32	s15, s9, s14
 8010218:	ee67 7a85 	vmul.f32	s15, s15, s10
 801021c:	eee5 7a87 	vfma.f32	s15, s11, s14
 8010220:	dd1a      	ble.n	8010258 <__ieee754_logf+0x180>
 8010222:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010226:	ee20 7a07 	vmul.f32	s14, s0, s14
 801022a:	ee27 7a00 	vmul.f32	s14, s14, s0
 801022e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010232:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010236:	b913      	cbnz	r3, 801023e <__ieee754_logf+0x166>
 8010238:	ee37 7a67 	vsub.f32	s14, s14, s15
 801023c:	e7ac      	b.n	8010198 <__ieee754_logf+0xc0>
 801023e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8010290 <__ieee754_logf+0x1b8>
 8010242:	eee6 7a86 	vfma.f32	s15, s13, s12
 8010246:	ee37 7a67 	vsub.f32	s14, s14, s15
 801024a:	ee37 0a40 	vsub.f32	s0, s14, s0
 801024e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8010294 <__ieee754_logf+0x1bc>
 8010252:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8010256:	4770      	bx	lr
 8010258:	ee70 7a67 	vsub.f32	s15, s0, s15
 801025c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8010260:	b913      	cbnz	r3, 8010268 <__ieee754_logf+0x190>
 8010262:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010266:	4770      	bx	lr
 8010268:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8010290 <__ieee754_logf+0x1b8>
 801026c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8010270:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8010274:	e7eb      	b.n	801024e <__ieee754_logf+0x176>
 8010276:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8010280 <__ieee754_logf+0x1a8>
 801027a:	4770      	bx	lr
 801027c:	cc000000 	.word	0xcc000000
 8010280:	00000000 	.word	0x00000000
 8010284:	4c000000 	.word	0x4c000000
 8010288:	004afb20 	.word	0x004afb20
 801028c:	007ffff0 	.word	0x007ffff0
 8010290:	3717f7d1 	.word	0x3717f7d1
 8010294:	3f317180 	.word	0x3f317180
 8010298:	3eaaaaab 	.word	0x3eaaaaab
 801029c:	3e1cd04f 	.word	0x3e1cd04f
 80102a0:	3e178897 	.word	0x3e178897
 80102a4:	ffcf5c30 	.word	0xffcf5c30
 80102a8:	3e638e29 	.word	0x3e638e29
 80102ac:	3ecccccd 	.word	0x3ecccccd
 80102b0:	3e3a3325 	.word	0x3e3a3325
 80102b4:	3e924925 	.word	0x3e924925
 80102b8:	3f2aaaab 	.word	0x3f2aaaab

080102bc <floorf>:
 80102bc:	ee10 3a10 	vmov	r3, s0
 80102c0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80102c4:	3a7f      	subs	r2, #127	@ 0x7f
 80102c6:	2a16      	cmp	r2, #22
 80102c8:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80102cc:	dc2b      	bgt.n	8010326 <floorf+0x6a>
 80102ce:	2a00      	cmp	r2, #0
 80102d0:	da12      	bge.n	80102f8 <floorf+0x3c>
 80102d2:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010338 <floorf+0x7c>
 80102d6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80102da:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80102de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102e2:	dd06      	ble.n	80102f2 <floorf+0x36>
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	da24      	bge.n	8010332 <floorf+0x76>
 80102e8:	2900      	cmp	r1, #0
 80102ea:	4b14      	ldr	r3, [pc, #80]	@ (801033c <floorf+0x80>)
 80102ec:	bf08      	it	eq
 80102ee:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80102f2:	ee00 3a10 	vmov	s0, r3
 80102f6:	4770      	bx	lr
 80102f8:	4911      	ldr	r1, [pc, #68]	@ (8010340 <floorf+0x84>)
 80102fa:	4111      	asrs	r1, r2
 80102fc:	420b      	tst	r3, r1
 80102fe:	d0fa      	beq.n	80102f6 <floorf+0x3a>
 8010300:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 8010338 <floorf+0x7c>
 8010304:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010308:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801030c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010310:	ddef      	ble.n	80102f2 <floorf+0x36>
 8010312:	2b00      	cmp	r3, #0
 8010314:	bfbe      	ittt	lt
 8010316:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 801031a:	fa40 f202 	asrlt.w	r2, r0, r2
 801031e:	189b      	addlt	r3, r3, r2
 8010320:	ea23 0301 	bic.w	r3, r3, r1
 8010324:	e7e5      	b.n	80102f2 <floorf+0x36>
 8010326:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 801032a:	d3e4      	bcc.n	80102f6 <floorf+0x3a>
 801032c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8010330:	4770      	bx	lr
 8010332:	2300      	movs	r3, #0
 8010334:	e7dd      	b.n	80102f2 <floorf+0x36>
 8010336:	bf00      	nop
 8010338:	7149f2ca 	.word	0x7149f2ca
 801033c:	bf800000 	.word	0xbf800000
 8010340:	007fffff 	.word	0x007fffff

08010344 <_init>:
 8010344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010346:	bf00      	nop
 8010348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801034a:	bc08      	pop	{r3}
 801034c:	469e      	mov	lr, r3
 801034e:	4770      	bx	lr

08010350 <_fini>:
 8010350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010352:	bf00      	nop
 8010354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010356:	bc08      	pop	{r3}
 8010358:	469e      	mov	lr, r3
 801035a:	4770      	bx	lr
